[
    {
        "title": "Maximum Difference by Remapping a Digit",
        "question_content": "You are given an integer num. You know that Danny Mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit.\nReturn the difference between the maximum and minimum&nbsp;values Danny can make by remapping&nbsp;exactly one digit in num.\nNotes:\n\n\tWhen Danny remaps a digit d1&nbsp;to another digit d2, Danny replaces all occurrences of d1&nbsp;in num&nbsp;with d2.\n\tDanny can remap a digit to itself, in which case num&nbsp;does not change.\n\tDanny can remap different digits for obtaining minimum and maximum values respectively.\n\tThe resulting number after remapping can contain leading zeroes.\n\tWe mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\n\n&nbsp;\nExample 1:\n\nInput: num = 11891\nOutput: 99009\nExplanation: \nTo achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009.\n\nExample 2:\n\nInput: num = 90\nOutput: 99\nExplanation:\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99.\n&nbsp;\nConstraints:\n\n\t1 <= num <= 108",
        "solutions": [
            {
                "id": 3201890,
                "title": "very-simple-and-easy-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s =to_string(num), large = to_string(num), small = to_string(num);\\n        char dl = -1, ds = -1;\\n        for(int i = 0; i < s.size(); ++i){\\n            if(dl == -1 && s[i] != \\'9\\'){\\n                dl = s[i];\\n                large[i] = \\'9\\';\\n            }else {\\n                large[i] = (s[i] == dl)?\\'9\\': s[i];\\n            }\\n            \\n            if(ds == -1 && s[i] != \\'0\\'){\\n                ds = s[i];\\n                small[i] = \\'0\\';\\n            }else{\\n                small[i] = (s[i] == ds)?\\'0\\':s[i];\\n            }\\n        }\\n        return stoi(large) - stoi(small);\\n    }\\n};\\n\\n```\\n\\nHere is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s =to_string(num), large = to_string(num), small = to_string(num);\\n        char dl = -1, ds = -1;\\n        for(int i = 0; i < s.size(); ++i){\\n            if(dl == -1 && s[i] != \\'9\\'){\\n                dl = s[i];\\n                large[i] = \\'9\\';\\n            }else {\\n                large[i] = (s[i] == dl)?\\'9\\': s[i];\\n            }\\n            \\n            if(ds == -1 && s[i] != \\'0\\'){\\n                ds = s[i];\\n                small[i] = \\'0\\';\\n            }else{\\n                small[i] = (s[i] == ds)?\\'0\\':s[i];\\n            }\\n        }\\n        return stoi(large) - stoi(small);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202076,
                "title": "python-5-lines-of-code",
                "content": "# Approach\\nFor minimal value we always just replace first digit into zero:\\n`int(num.replace(num[0], \"0\")`.\\n\\nFor maximum value - find first non-9 digit and replace it into 9.\\n\\n\\n# Complexity\\n- Time complexity: $$O(1)$$ as we only interate over string with maximum 8 chars. \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num = str(num)\\n        i = 0\\n        while num[i] == \"9\" and i < len(num)-1:\\n            i += 1\\n\\n        return int(num.replace(num[i], \"9\")) - int(num.replace(num[0], \"0\"))\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num = str(num)\\n        i = 0\\n        while num[i] == \"9\" and i < len(num)-1:\\n            i += 1\\n\\n        return int(num.replace(num[i], \"9\")) - int(num.replace(num[0], \"0\"))\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202068,
                "title": "remap-to-0-or-9",
                "content": "We remap each `i` ([0..9]) to `0` or `9` to get minimum and maximum possible value. \\n\\n**C++**\\n```cpp\\nint minMaxDifference(int num) {\\n    int min_v = num, max_v = num;\\n    for (int i = 0; i < 10; ++i) {\\n        int lo = 0, hi = 0, mul = 1;\\n        for (int n = num; n; n /= 10) {\\n            bool replace = n % 10 == i;\\n            lo += (replace ? 0 : n % 10) * mul;\\n            hi += (replace ? 9 : n % 10) * mul;\\n            mul *= 10;\\n        }\\n        min_v = min(min_v, lo);\\n        max_v = max(max_v, hi);\\n    }\\n    return max_v - min_v;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint minMaxDifference(int num) {\\n    int min_v = num, max_v = num;\\n    for (int i = 0; i < 10; ++i) {\\n        int lo = 0, hi = 0, mul = 1;\\n        for (int n = num; n; n /= 10) {\\n            bool replace = n % 10 == i;\\n            lo += (replace ? 0 : n % 10) * mul;\\n            hi += (replace ? 9 : n % 10) * mul;\\n            mul *= 10;\\n        }\\n        min_v = min(min_v, lo);\\n        max_v = max(max_v, hi);\\n    }\\n    return max_v - min_v;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3201886,
                "title": "simple-java-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ where n is the length of the string \\n\\n- Space complexity: $$O(n)$$ where n is the length of the string \\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        char x[]=String.valueOf(num).toCharArray();\\n        char y[]=String.valueOf(num).toCharArray();\\n        char p=x[0],q=x[0];\\n        for(int i=0;i<x.length;i++)\\n        {\\n            if(x[i]!=\\'9\\')\\n            {\\n                p=x[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<x.length;i++)\\n        {\\n            if(x[i]==p)\\n            {\\n                x[i]=\\'9\\';\\n            }\\n        }\\n        for(int i=0;i<x.length;i++)\\n        {\\n            if(y[i]==q)\\n            {\\n                y[i]=\\'0\\';\\n            }\\n        }\\n        return Integer.parseInt(String.valueOf(x)) - Integer.parseInt(String.valueOf(y));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        char x[]=String.valueOf(num).toCharArray();\\n        char y[]=String.valueOf(num).toCharArray();\\n        char p=x[0],q=x[0];\\n        for(int i=0;i<x.length;i++)\\n        {\\n            if(x[i]!=\\'9\\')\\n            {\\n                p=x[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<x.length;i++)\\n        {\\n            if(x[i]==p)\\n            {\\n                x[i]=\\'9\\';\\n            }\\n        }\\n        for(int i=0;i<x.length;i++)\\n        {\\n            if(y[i]==q)\\n            {\\n                y[i]=\\'0\\';\\n            }\\n        }\\n        return Integer.parseInt(String.valueOf(x)) - Integer.parseInt(String.valueOf(y));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202001,
                "title": "easy-best-c-solution-beginner-level",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n        string num1= to_string(number);\\n        string num2=to_string(number);\\n        \\n        char c=num1[0],ch=num1[0];\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]!=\\'9\\'){\\n                c=num1[i];\\n                break;\\n            }\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]==c) num1[i]=\\'9\\';\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num2[i]==ch) num2[i]=\\'0\\';\\n        }\\n        \\n        int max_num=stoi(num1);\\n        int min_num=stoi(num2);\\n        return max_num -min_num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n        string num1= to_string(number);\\n        string num2=to_string(number);\\n        \\n        char c=num1[0],ch=num1[0];\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]!=\\'9\\'){\\n                c=num1[i];\\n                break;\\n            }\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]==c) num1[i]=\\'9\\';\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num2[i]==ch) num2[i]=\\'0\\';\\n        }\\n        \\n        int max_num=stoi(num1);\\n        int min_num=stoi(num2);\\n        return max_num -min_num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202581,
                "title": "easy-solution",
                "content": "# Complexity\\n- Time complexity: On\\n\\n- Space complexity: On\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nconst minMaxDifference = function(num) {\\n    // tc - On, sc - On\\n    // EXAMPLE: 11891\\n    const nums = num.toString().split(\\'\\') \\n\\n    let nonZero\\n    let nonNine\\n    \\n    // tc - On\\n    // After this for loop nonZero = 1\\n    for (const num of nums) {\\n        if (num !== \\'0\\') {\\n            nonZero = num\\n            break\\n        }\\n    }\\n\\n    // tc - On\\n    // After this for loop nonNine = 1\\n    for (const num of nums) {\\n        if (num !== \\'9\\') {\\n            nonNine = num\\n            break\\n        }\\n    }\\n\\n    // tc - On, sc - On\\n    // After this for loop all 1-s will be changed to 9\\n    // and nums = 99899\\n    const max = Number(nums.map(num => {\\n        if (num === nonNine) return \\'9\\'\\n        return num\\n    }).join(\\'\\'))\\n\\n    // tc - On, sc - On\\n    // After this for loop all 1-s will be changed to 0\\n    // and nums = 00890. parse int and get 890\\n    const min = Number.parseInt(nums.map(num => {\\n        if (num === nonZero) return \\'0\\'\\n        return num\\n    }).join(\\'\\'))\\n\\n    return max - min\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nconst minMaxDifference = function(num) {\\n    // tc - On, sc - On\\n    // EXAMPLE: 11891\\n    const nums = num.toString().split(\\'\\') \\n\\n    let nonZero\\n    let nonNine\\n    \\n    // tc - On\\n    // After this for loop nonZero = 1\\n    for (const num of nums) {\\n        if (num !== \\'0\\') {\\n            nonZero = num\\n            break\\n        }\\n    }\\n\\n    // tc - On\\n    // After this for loop nonNine = 1\\n    for (const num of nums) {\\n        if (num !== \\'9\\') {\\n            nonNine = num\\n            break\\n        }\\n    }\\n\\n    // tc - On, sc - On\\n    // After this for loop all 1-s will be changed to 9\\n    // and nums = 99899\\n    const max = Number(nums.map(num => {\\n        if (num === nonNine) return \\'9\\'\\n        return num\\n    }).join(\\'\\'))\\n\\n    // tc - On, sc - On\\n    // After this for loop all 1-s will be changed to 0\\n    // and nums = 00890. parse int and get 890\\n    const min = Number.parseInt(nums.map(num => {\\n        if (num === nonZero) return \\'0\\'\\n        return num\\n    }).join(\\'\\'))\\n\\n    return max - min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3202485,
                "title": "video-solution-very-simple-solution-c",
                "content": "# Video Solution\\nhttps://youtu.be/BzMJP_EvGSI\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        \\n        int id=0;\\n        char c = s[0];\\n        for(int i=0;i<s.length();i++){\\n            if(s[i] != \\'9\\'){\\n                c = s[i];\\n                id= i;\\n                break;\\n            }\\n        }\\n        \\n        string s1 = \"\";\\n        for(int i=0;i<s.length();i++){\\n            if(s[i] == c){\\n                s1 += \\'9\\';\\n            }else{\\n                s1 += s[i];\\n            }\\n        }\\n        // cout<<s1<<endl;\\n        \\n        string s2 = \"\";\\n        for(int i=0;i<s.length();i++){\\n            if(s[i] == s[0]){\\n                s2 += \\'0\\';\\n            }else{\\n                s2 += s[i];\\n            }\\n        }\\n        \\n        // cout<<s2<<endl;\\n        \\n        int val1 = stoi(s1);\\n        int val2 = stoi(s2);\\n        \\n        return (val1-val2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        \\n        int id=0;\\n        char c = s[0];\\n        for(int i=0;i<s.length();i++){\\n            if(s[i] != \\'9\\'){\\n                c = s[i];\\n                id= i;\\n                break;\\n            }\\n        }\\n        \\n        string s1 = \"\";\\n        for(int i=0;i<s.length();i++){\\n            if(s[i] == c){\\n                s1 += \\'9\\';\\n            }else{\\n                s1 += s[i];\\n            }\\n        }\\n        // cout<<s1<<endl;\\n        \\n        string s2 = \"\";\\n        for(int i=0;i<s.length();i++){\\n            if(s[i] == s[0]){\\n                s2 += \\'0\\';\\n            }else{\\n                s2 += s[i];\\n            }\\n        }\\n        \\n        // cout<<s2<<endl;\\n        \\n        int val1 = stoi(s1);\\n        int val2 = stoi(s2);\\n        \\n        return (val1-val2);\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3201963,
                "title": "simple-greedy-solution",
                "content": "- Replace all first non 9 digit with 9 to get maximum number\\n- Replace all first non 0 digit with 0 to get minimum number\\n- And just return answer\\n# Code\\n```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        min_, max_ = str(num), str(num)\\n        for ch in min_:\\n            if ch != \\'0\\':\\n                min_ = min_.replace(ch, \\'0\\')\\n                break\\n        for ch in max_:\\n            if ch != \\'9\\':\\n                max_ = max_.replace(ch, \\'9\\')\\n                break\\n        return int(max_) - int(min_)\\n```\\n**UpVote**, if you like it **:)**",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        min_, max_ = str(num), str(num)\\n        for ch in min_:\\n            if ch != \\'0\\':\\n                min_ = min_.replace(ch, \\'0\\')\\n                break\\n        for ch in max_:\\n            if ch != \\'9\\':\\n                max_ = max_.replace(ch, \\'9\\')\\n                break\\n        return int(max_) - int(min_)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201974,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n        string t=s;\\n        char c=s[0];\\n        char d=s[0];\\n        int i=0;\\n        while(true){\\n            if(s[i]!=\\'9\\'){\\n                 c=s[i];\\n                break;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        replace(s.begin(),s.end(),c,\\'9\\');\\n        replace(t.begin(),t.end(),d,\\'0\\');\\n        return stoi(s)-stoi(t);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n        string t=s;\\n        char c=s[0];\\n        char d=s[0];\\n        int i=0;\\n        while(true){\\n            if(s[i]!=\\'9\\'){\\n                 c=s[i];\\n                break;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n        replace(s.begin(),s.end(),c,\\'9\\');\\n        replace(t.begin(),t.end(),d,\\'0\\');\\n        return stoi(s)-stoi(t);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202115,
                "title": "java-replace-to-9-and-0-faster-than-100",
                "content": "**Simple JAVA Approach**\\nDo UPVOTE!!\\u2705\\n```\\npublic int minMaxDifference(int num) {\\n        StringBuilder n = new StringBuilder(Integer.toString(num));\\n        int len = n.length();\\n        StringBuilder max = new StringBuilder();\\n        boolean flag = false;\\n        char f = \\' \\';\\n        \\n        for(int i=0;i<len;i++){\\n            char ch = n.charAt(i);\\n            \\n            if(ch == f) max.append(\\'9\\');\\n            \\n            else if(ch != \\'9\\' && !flag){\\n                f=ch;\\n                flag=true;\\n                max.append(\\'9\\');\\n            }\\n            else max.append(ch);\\n        }\\n        \\n        StringBuilder min = new StringBuilder();\\n        min.append(\\'0\\');\\n        f = n.charAt(0);\\n        \\n        for(int i=1;i<len;i++){\\n            char ch = n.charAt(i);\\n            if(ch == f) min.append(\\'0\\');\\n            else min.append(ch);\\n        }\\n        return Integer.valueOf(max.toString()) - Integer.valueOf(min.toString());\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int minMaxDifference(int num) {\\n        StringBuilder n = new StringBuilder(Integer.toString(num));\\n        int len = n.length();\\n        StringBuilder max = new StringBuilder();\\n        boolean flag = false;\\n        char f = \\' \\';\\n        \\n        for(int i=0;i<len;i++){\\n            char ch = n.charAt(i);\\n            \\n            if(ch == f) max.append(\\'9\\');\\n            \\n            else if(ch != \\'9\\' && !flag){\\n                f=ch;\\n                flag=true;\\n                max.append(\\'9\\');\\n            }\\n            else max.append(ch);\\n        }\\n        \\n        StringBuilder min = new StringBuilder();\\n        min.append(\\'0\\');\\n        f = n.charAt(0);\\n        \\n        for(int i=1;i<len;i++){\\n            char ch = n.charAt(i);\\n            if(ch == f) min.append(\\'0\\');\\n            else min.append(ch);\\n        }\\n        return Integer.valueOf(max.toString()) - Integer.valueOf(min.toString());\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3202182,
                "title": "super-simple-python3-easy-short-and-sweet-o-1-tc-and-sc",
                "content": "# Intuition\\nWe will switch the number over to string to make use of python\\'s easy string replace. \\n\\n# Approach\\nFor minimal value, always replace the first digit\\'s all occurances with \\'0\\'s.\\n\\nFor maximal value, replace the first non-\\'9\\' digit with \\'9\\'.\\n\\n# Complexity\\nThe lenght of `s` is `log(num, 10)`. As per the problem statement, `1 <= num <= 10^8`, so `log(num, 10) <= 8`.\\n- Time complexity: `O(log num)`, which is constant `O(1)`.\\n\\n- Space complexity: `O(1)` Same as TC, because we allocate space for the string `s`.\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        s = str(num)\\n        v_min = int(s.replace(s[0], \\'0\\'))\\n        for c in s:\\n            if c != \\'9\\':\\n                s = s.replace(c, \\'9\\')\\n                break\\n        v_max = int(s)\\n        return v_max - v_min\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        s = str(num)\\n        v_min = int(s.replace(s[0], \\'0\\'))\\n        for c in s:\\n            if c != \\'9\\':\\n                s = s.replace(c, \\'9\\')\\n                break\\n        v_max = int(s)\\n        return v_max - v_min\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3541538,
                "title": "simple-c-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int> v2,v1;\\n        while(num){\\n            v1.push_back(num%10);\\n            num /= 10;\\n        }\\n        reverse(v1.begin(),v1.end());\\n        v2 = v1;\\n        int x = 0, y = 0,a=v1[0],b=-1;\\n        for(int i = 0; i < v1.size(); i++){\\n            if(b==-1&&v1[i]!=9)b = v1[i];\\n            if(v1[i]==b)v1[i] = 9;\\n            if(v2[i]==a)v2[i] = 0;\\n            x = x*10+v1[i];\\n            y = y*10+v2[i];\\n        }\\n        // cout<<x<<\" \"<<y;\\n        return x-y;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int> v2,v1;\\n        while(num){\\n            v1.push_back(num%10);\\n            num /= 10;\\n        }\\n        reverse(v1.begin(),v1.end());\\n        v2 = v1;\\n        int x = 0, y = 0,a=v1[0],b=-1;\\n        for(int i = 0; i < v1.size(); i++){\\n            if(b==-1&&v1[i]!=9)b = v1[i];\\n            if(v1[i]==b)v1[i] = 9;\\n            if(v2[i]==a)v2[i] = 0;\\n            x = x*10+v1[i];\\n            y = y*10+v2[i];\\n        }\\n        // cout<<x<<\" \"<<y;\\n        return x-y;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3206342,
                "title": "c-intuitive-approach",
                "content": "# Intuition\\nMaximum number of any digit starts with 9 like 9, 99, 999 etc.\\nMinimum number of any digit start with 0 like 0, 01, 010, 0100 etc. (Considering condition given in the problem- \"The resulting number after remapping can contain leading zeroes.\")\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        string s = to_string(num);\\n        string t = s;\\n        int n=s.size();\\n        char digit;\\n        \\n        //making num maximum by replacing first non-nine digit with 9 \\n        for(int i=0; i<n; i++)\\n        {\\n            if(s[i] != \\'9\\') \\n            {\\n                digit = s[i];\\n                s[i] = \\'9\\';\\n                while(i<n) //replacing all position of that digit with 9\\n                {\\n                    if(s[i]==digit)\\n                        s[i]=\\'9\\';\\n                    i++;\\n                }\\n                break;\\n            }\\n        }\\n        int maxi = stoi(s);\\n        \\n        //making num minimum by replacing first non-zero digit with 0\\n        for(int i=0; i<n; i++)\\n        {\\n            if(t[i] != \\'0\\')\\n            {\\n                digit = t[i];\\n                t[i] = \\'0\\';\\n                while(i<n) //replacing all position of that digit with 0\\n                {\\n                    if(t[i]==digit)\\n                        t[i]=\\'0\\';\\n                    i++;\\n                }\\n                break;\\n            }\\n        }\\n        int mini = stoi(t);\\n        return maxi-mini;\\n        \\n    }\\n};\\n```\\n# Please upvote if you like this approach",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        string s = to_string(num);\\n        string t = s;\\n        int n=s.size();\\n        char digit;\\n        \\n        //making num maximum by replacing first non-nine digit with 9 \\n        for(int i=0; i<n; i++)\\n        {\\n            if(s[i] != \\'9\\') \\n            {\\n                digit = s[i];\\n                s[i] = \\'9\\';\\n                while(i<n) //replacing all position of that digit with 9\\n                {\\n                    if(s[i]==digit)\\n                        s[i]=\\'9\\';\\n                    i++;\\n                }\\n                break;\\n            }\\n        }\\n        int maxi = stoi(s);\\n        \\n        //making num minimum by replacing first non-zero digit with 0\\n        for(int i=0; i<n; i++)\\n        {\\n            if(t[i] != \\'0\\')\\n            {\\n                digit = t[i];\\n                t[i] = \\'0\\';\\n                while(i<n) //replacing all position of that digit with 0\\n                {\\n                    if(t[i]==digit)\\n                        t[i]=\\'0\\';\\n                    i++;\\n                }\\n                break;\\n            }\\n        }\\n        int mini = stoi(t);\\n        return maxi-mini;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202860,
                "title": "using-inbuilt-string-functions-more-practice-on-inbuilt-string-functions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nOnly bad thing is we are traversing two times. which we can reduce to one by using \"flag\" boolean valriable rather than \"break\".\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n\\n        //converting to string\\n        String n = Integer.toString(num);\\n        int len = n.length();\\n        //define minimum and maximum as number it self for test case like 999999....\\n        int mini = num;\\n        int maxi = num;\\n\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            //for maximum number\\n            //if the initials digits are 9 itself we dont change\\n            //else change\\n            if(c!=\\'9\\'){\\n                // repalcing all selected digit with 9 \\n                maxi = Integer.parseInt(n.replaceAll(Character.toString(c),\"9\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n\\n            //similar to maximum \\n            // just replace with 0\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            if(c!=\\'0\\'){\\n                mini = Integer.parseInt(n.replaceAll(Character.toString(c),\"0\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n        \\n        //return the diiference\\n        return maxi-mini;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n\\n        //converting to string\\n        String n = Integer.toString(num);\\n        int len = n.length();\\n        //define minimum and maximum as number it self for test case like 999999....\\n        int mini = num;\\n        int maxi = num;\\n\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            //for maximum number\\n            //if the initials digits are 9 itself we dont change\\n            //else change\\n            if(c!=\\'9\\'){\\n                // repalcing all selected digit with 9 \\n                maxi = Integer.parseInt(n.replaceAll(Character.toString(c),\"9\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n\\n            //similar to maximum \\n            // just replace with 0\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            if(c!=\\'0\\'){\\n                mini = Integer.parseInt(n.replaceAll(Character.toString(c),\"0\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n        \\n        //return the diiference\\n        return maxi-mini;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201941,
                "title": "c-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str = to_string(num);\\n        int len = str.length();\\n        char dig;\\n        int index=-1;\\n        \\n        //searching first index with non \\'9\\'\\n        for(int i=0;i<len;i++){\\n            if(str[i] != \\'9\\'){\\n                dig=str[i];\\n                index=i;\\n                break;\\n            }\\n        }\\n        \\n        int small,big;\\n        string sm=str,bi=str;\\n        \\n        //swapping value to 9 in whole digit to get big number\\n        if(index != -1)\\n        {\\n            for(int i=0;i<len;i++){\\n                if(str[index] == str[i]){\\n                    bi[i]=\\'9\\';\\n                }\\n            }\\n        }\\n        \\n        //swapping all occurrences of 0th index to \\'0\\'\\n        //to get smaller number\\n        for(int i=0;i<len;i++){\\n            if(str[0] == sm[i]){\\n                sm[i]=\\'0\\';\\n            }\\n        }\\n        int diff = stoi(bi)-stoi(sm);\\n        return diff;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str = to_string(num);\\n        int len = str.length();\\n        char dig;\\n        int index=-1;\\n        \\n        //searching first index with non \\'9\\'\\n        for(int i=0;i<len;i++){\\n            if(str[i] != \\'9\\'){\\n                dig=str[i];\\n                index=i;\\n                break;\\n            }\\n        }\\n        \\n        int small,big;\\n        string sm=str,bi=str;\\n        \\n        //swapping value to 9 in whole digit to get big number\\n        if(index != -1)\\n        {\\n            for(int i=0;i<len;i++){\\n                if(str[index] == str[i]){\\n                    bi[i]=\\'9\\';\\n                }\\n            }\\n        }\\n        \\n        //swapping all occurrences of 0th index to \\'0\\'\\n        //to get smaller number\\n        for(int i=0;i<len;i++){\\n            if(str[0] == sm[i]){\\n                sm[i]=\\'0\\';\\n            }\\n        }\\n        int diff = stoi(bi)-stoi(sm);\\n        return diff;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201893,
                "title": "clean-easy-understand-short-java",
                "content": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String val = String.valueOf(num);\\n        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;\\n        for(char c: val.toCharArray()){\\n            for(int j=0; j<=9; j++){\\n                String n = val.replaceAll(c+\"\",j+\"\");\\n                max = Math.max(max, Integer.parseInt(n));\\n                min = Math.min(min, Integer.parseInt(n));\\n            }\\n        }\\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String val = String.valueOf(num);\\n        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;\\n        for(char c: val.toCharArray()){\\n            for(int j=0; j<=9; j++){\\n                String n = val.replaceAll(c+\"\",j+\"\");\\n                max = Math.max(max, Integer.parseInt(n));\\n                min = Math.min(min, Integer.parseInt(n));\\n            }\\n        }\\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3222381,
                "title": "python-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        maxx = num\\n        for d in str(maxx):\\n            if d != \"9\":\\n                maxx = int(str(maxx).replace(d,\"9\"))\\n                break\\n        minn = int(str(num).replace(str(num)[0],\"0\"))\\n        return maxx - minn\\n\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        maxx = num\\n        for d in str(maxx):\\n            if d != \"9\":\\n                maxx = int(str(maxx).replace(d,\"9\"))\\n                break\\n        minn = int(str(num).replace(str(num)[0],\"0\"))\\n        return maxx - minn\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3205157,
                "title": "python-short-and-clean",
                "content": "# Approach\\nWe are allowed to replace one of the 10 possible digits to other.\\n\\n1. Min number can be formed by replacing the `first digit`, and all other occurences of it, with `0`.\\n\\n2. Max number can be formed by replacing the `first non 9 digit`, and all other occurences of it with `9`.\\n\\n3. Return the difference between max and min possible numbers.\\n\\n# Complexity\\n- Time complexity: $$O(k)$$\\n\\n- Space complexity: $$O(k)$$\\n\\nwhere, `k is number of digits in num`.\\n\\n# Code\\n```python\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        s_num = str(num)\\n\\n        ch = s_num[0]\\n        min_num = int(s_num.replace(ch, \\'0\\'))\\n\\n        ch = next((x for x in s_num if x != \\'9\\'), \\'0\\')\\n        max_num = int(s_num.replace(ch, \\'9\\'))\\n\\n        return max_num - min_num\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```python\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        s_num = str(num)\\n\\n        ch = s_num[0]\\n        min_num = int(s_num.replace(ch, \\'0\\'))\\n\\n        ch = next((x for x in s_num if x != \\'9\\'), \\'0\\')\\n        max_num = int(s_num.replace(ch, \\'9\\'))\\n\\n        return max_num - min_num\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3204056,
                "title": "simple-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str = to_string(num);\\n        string s1,s2;\\n        s1 = str;\\n        s2 = str;\\n        int i;\\n        for(i = 0; i < s1.length(); i++)\\n            if(s1[i] != \\'9\\')break;\\n        if(i==s1.length()){\\n            return num;\\n        }\\n        char c = s1[i];\\n        char c1 = s1[0];\\n        // cout<<c<<\" \"<<c1<<\" \";\\n        for(i = 0; i < s1.length(); i++){\\n            if(s1[i]==c){\\n                s1[i] = \\'9\\';\\n            }\\n            if(s2[i]==c1){\\n                s2[i] = \\'0\\';\\n            }\\n        }\\n        // cout<<s1<<\" \"<<s2<<endl;\\n        return (stoi(s1)-stoi(s2));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str = to_string(num);\\n        string s1,s2;\\n        s1 = str;\\n        s2 = str;\\n        int i;\\n        for(i = 0; i < s1.length(); i++)\\n            if(s1[i] != \\'9\\')break;\\n        if(i==s1.length()){\\n            return num;\\n        }\\n        char c = s1[i];\\n        char c1 = s1[0];\\n        // cout<<c<<\" \"<<c1<<\" \";\\n        for(i = 0; i < s1.length(); i++){\\n            if(s1[i]==c){\\n                s1[i] = \\'9\\';\\n            }\\n            if(s2[i]==c1){\\n                s2[i] = \\'0\\';\\n            }\\n        }\\n        // cout<<s1<<\" \"<<s2<<endl;\\n        return (stoi(s1)-stoi(s2));\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3203191,
                "title": "javascript-simple-brute-force",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple brute force\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nconst getMinMaxCombo = (num, digit) => {\\n\\tlet max = num.toString().replaceAll(digit, \\'9\\');\\n\\tlet min = num.toString().replaceAll(digit, \\'0\\');\\n\\treturn [max, min].map(Number);\\n};\\n\\nconst minMaxDifference = (num) => {\\n\\tlet [min, max] = [Infinity, -Infinity];\\n\\tfor (const digit of num.toString()) {\\n\\t\\tconst [maxCombo, minCombo] = getMinMaxCombo(num, digit);\\n\\t\\tmin = Math.min(minCombo, min);\\n\\t\\tmax = Math.max(maxCombo, max);\\n\\t}\\n\\treturn max - min;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nconst getMinMaxCombo = (num, digit) => {\\n\\tlet max = num.toString().replaceAll(digit, \\'9\\');\\n\\tlet min = num.toString().replaceAll(digit, \\'0\\');\\n\\treturn [max, min].map(Number);\\n};\\n\\nconst minMaxDifference = (num) => {\\n\\tlet [min, max] = [Infinity, -Infinity];\\n\\tfor (const digit of num.toString()) {\\n\\t\\tconst [maxCombo, minCombo] = getMinMaxCombo(num, digit);\\n\\t\\tmin = Math.min(minCombo, min);\\n\\t\\tmax = Math.max(maxCombo, max);\\n\\t}\\n\\treturn max - min;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3202099,
                "title": "0-or-9-speed-100-memory-100-votru",
                "content": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n      \\n      string temp=to_string(num);\\n      string temp2=to_string(num);\\n      int n=temp.length();\\n     \\n      int chI=-1;\\n     \\n      for(int i=0;i<n;i++)\\n      {\\n          if(temp[i]!=\\'9\\')\\n          {\\n              chI=i;\\n              break;\\n          }\\n          \\n      }\\n        \\n      if(chI!=-1)\\n      {   \\n          char c=temp[chI];\\n          temp[chI]=\\'9\\';\\n          \\n          for(int i=chI+1;i<n;i++)\\n          {\\n              if(temp[i]==c)\\n              {\\n                  temp[i]=\\'9\\';\\n              }\\n          }\\n      }\\n            \\n      int chI2=-1;\\n      for(int j=0;j<n;j++)\\n      {\\n          if(temp2[j]!=\\'0\\')\\n          {\\n              chI2=j;\\n              break;\\n          }\\n      }\\n     // cout<<\"chI2 \"<<chI2<<endl;\\n      if(chI2!=-1)\\n      {\\n          char c=temp2[chI2];\\n          temp2[chI2]=\\'0\\';\\n          for(int i=chI2+1;i<n;i++)\\n          {\\n              if(temp2[i]==c)\\n              {\\n                  temp2[i]=\\'0\\';\\n              }\\n          }\\n      }\\n        \\n     int nums1=stoi(temp);\\n     // cout<<nums1<<endl;\\n      \\n      int nums2=stoi(temp2);\\n     // cout<<nums2<<endl;\\n      return nums1-nums2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n      \\n      string temp=to_string(num);\\n      string temp2=to_string(num);\\n      int n=temp.length();\\n     \\n      int chI=-1;\\n     \\n      for(int i=0;i<n;i++)\\n      {\\n          if(temp[i]!=\\'9\\')\\n          {\\n              chI=i;\\n              break;\\n          }\\n          \\n      }\\n        \\n      if(chI!=-1)\\n      {   \\n          char c=temp[chI];\\n          temp[chI]=\\'9\\';\\n          \\n          for(int i=chI+1;i<n;i++)\\n          {\\n              if(temp[i]==c)\\n              {\\n                  temp[i]=\\'9\\';\\n              }\\n          }\\n      }\\n            \\n      int chI2=-1;\\n      for(int j=0;j<n;j++)\\n      {\\n          if(temp2[j]!=\\'0\\')\\n          {\\n              chI2=j;\\n              break;\\n          }\\n      }\\n     // cout<<\"chI2 \"<<chI2<<endl;\\n      if(chI2!=-1)\\n      {\\n          char c=temp2[chI2];\\n          temp2[chI2]=\\'0\\';\\n          for(int i=chI2+1;i<n;i++)\\n          {\\n              if(temp2[i]==c)\\n              {\\n                  temp2[i]=\\'0\\';\\n              }\\n          }\\n      }\\n        \\n     int nums1=stoi(temp);\\n     // cout<<nums1<<endl;\\n      \\n      int nums2=stoi(temp2);\\n     // cout<<nums2<<endl;\\n      return nums1-nums2;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3201945,
                "title": "java-easy-solution",
                "content": "\\n# \\n    class Solution {\\n    public int minMaxDifference(int num) {\\n        String s = Integer.toString(num);\\n        char temp = \\'9\\';\\n        for(char c : s.toCharArray()){\\n            if(c != \\'9\\'){\\n                temp = c;\\n                break;\\n            }\\n        }\\n        return Integer.parseInt(s.replace(temp, \\'9\\')) - Integer.parseInt(s.replace(s.charAt(0), \\'0\\'));\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int minMaxDifference(int num) {\\n        String s = Integer.toString(num);\\n        char temp = \\'9\\';\\n        for(char c : s.toCharArray()){\\n            if(c != \\'9\\'){\\n                temp = c;\\n                break;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3201908,
                "title": "easy-solution-in-c",
                "content": "# Complexity\\n- Time complexity:\\nO(n) where n is the total number of digits in num\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n### **PLease Upvote if u liked my Solution\\uD83E\\uDD17**\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num),g=s;\\n        int n=s.size();\\n        char ch=1;\\n        for(int i=0;i<n;i++){\\n            if(ch==1 && s[i]!=\\'9\\'){\\n                ch=s[i];\\n                s[i]=\\'9\\';\\n            }\\n            else if(ch!=1 && s[i]==ch)\\n                s[i]=\\'9\\';\\n        }\\n        ch=1;\\n        for(int i=0;i<n;i++){\\n            if(ch==1 && g[i]!=\\'0\\'){\\n                ch=g[i];\\n                g[i]=\\'0\\';\\n            }\\n            else if(ch!=1 && g[i]==ch)\\n                g[i]=\\'0\\';\\n        }\\n        return stoi(s) - stoi(g);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num),g=s;\\n        int n=s.size();\\n        char ch=1;\\n        for(int i=0;i<n;i++){\\n            if(ch==1 && s[i]!=\\'9\\'){\\n                ch=s[i];\\n                s[i]=\\'9\\';\\n            }\\n            else if(ch!=1 && s[i]==ch)\\n                s[i]=\\'9\\';\\n        }\\n        ch=1;\\n        for(int i=0;i<n;i++){\\n            if(ch==1 && g[i]!=\\'0\\'){\\n                ch=g[i];\\n                g[i]=\\'0\\';\\n            }\\n            else if(ch!=1 && g[i]==ch)\\n                g[i]=\\'0\\';\\n        }\\n        return stoi(s) - stoi(g);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3670942,
                "title": "remapping",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        num1=str(num)\\n        for i in range(len(num1)):\\n            if (num1[i] != \\'9\\'):\\n                maxi=num1.replace(num1[i],\\'9\\')\\n                break\\n            else:\\n                maxi=num1\\n        min1=num1.replace(str(num1[0]),\\'0\\')\\n        c,d=int(maxi),int(min1)\\n        return c-d\\n#instagram\\n#@_._s_y_a_m__\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        num1=str(num)\\n        for i in range(len(num1)):\\n            if (num1[i] != \\'9\\'):\\n                maxi=num1.replace(num1[i],\\'9\\')\\n                break\\n            else:\\n                maxi=num1\\n        min1=num1.replace(str(num1[0]),\\'0\\')\\n        c,d=int(maxi),int(min1)\\n        return c-d\\n#instagram\\n#@_._s_y_a_m__\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668696,
                "title": "100-beat-easy-solution-using-string-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string s1 = s, s2 = s;\\n        char ch1 = s[0], ch2 = s[0];\\n        for(int i=0; i<s.length(); i++){\\n            if(s[i] != \\'9\\'){\\n                ch1 = s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0; i<s.length(); i++){\\n            if(s[i] != \\'0\\'){\\n                ch2 = s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0; i<s.length(); i++){\\n            if(s1[i] == ch1) s1[i] = \\'9\\';\\n            if(s2[i] == ch2) s2[i] = \\'0\\';\\n        }\\n        return stoi(s1) - stoi(s2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string s1 = s, s2 = s;\\n        char ch1 = s[0], ch2 = s[0];\\n        for(int i=0; i<s.length(); i++){\\n            if(s[i] != \\'9\\'){\\n                ch1 = s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0; i<s.length(); i++){\\n            if(s[i] != \\'0\\'){\\n                ch2 = s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0; i<s.length(); i++){\\n            if(s1[i] == ch1) s1[i] = \\'9\\';\\n            if(s2[i] == ch2) s2[i] = \\'0\\';\\n        }\\n        return stoi(s1) - stoi(s2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3655853,
                "title": "java-solution-based-on-array-of-numbers",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        final String strNum = String.valueOf(num);\\n        final int length = strNum.length();\\n        final char[] chars = strNum.toCharArray();\\n        final int[] nums = new int[length];\\n        for (int i = 0; i < length; i++) {\\n            nums[i] = Character.getNumericValue(chars[i]);\\n        }\\n\\n        // find first non-9 digit\\n        int first = 0;\\n        for (int i = 0; i < length; i++) {\\n            if (nums[i] != 9) {\\n                first = nums[i];\\n                break;\\n            }\\n        }\\n\\n        // prepare power cache\\n        final int[] powers = new int[length];\\n        for (int i = 0; i < length; i++) {\\n            powers[i] = (int) Math.pow(10, length - i - 1);\\n        }\\n\\n        int max = 0;\\n        for (int k = 0; k < length; k++) {\\n            max += (nums[k] == first ? 9 : nums[k]) * powers[k];\\n        }\\n        \\n        // replace first with 0\\n        final int second = nums[0];\\n        int min = 0;\\n        \\n        // don\\'t need to count first and all replaced\\n        for (int k = 1; k < length; k++) {\\n            min += (nums[k] == second ? 0 : nums[k] * powers[k]);\\n        }\\n\\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        final String strNum = String.valueOf(num);\\n        final int length = strNum.length();\\n        final char[] chars = strNum.toCharArray();\\n        final int[] nums = new int[length];\\n        for (int i = 0; i < length; i++) {\\n            nums[i] = Character.getNumericValue(chars[i]);\\n        }\\n\\n        // find first non-9 digit\\n        int first = 0;\\n        for (int i = 0; i < length; i++) {\\n            if (nums[i] != 9) {\\n                first = nums[i];\\n                break;\\n            }\\n        }\\n\\n        // prepare power cache\\n        final int[] powers = new int[length];\\n        for (int i = 0; i < length; i++) {\\n            powers[i] = (int) Math.pow(10, length - i - 1);\\n        }\\n\\n        int max = 0;\\n        for (int k = 0; k < length; k++) {\\n            max += (nums[k] == first ? 9 : nums[k]) * powers[k];\\n        }\\n        \\n        // replace first with 0\\n        final int second = nums[0];\\n        int min = 0;\\n        \\n        // don\\'t need to count first and all replaced\\n        for (int k = 1; k < length; k++) {\\n            min += (nums[k] == second ? 0 : nums[k] * powers[k]);\\n        }\\n\\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3389107,
                "title": "maximum-difference-by-remapping-a-digit-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int i, j=-1,num1=0, num2=0, ans, flag=0;\\n        vector<int> arr1, arr2;\\n\\n\\n        while(num>0)\\n        {\\n            i = num%10;\\n            num = num/10;\\n            arr1.push_back(i);\\n        }\\n        reverse(arr1.begin(), arr1.end());\\n\\n\\n\\n        arr2 = arr1;\\n        for(i=0 ; i<arr1.size() ; i++)\\n        {\\n            if(arr1[i]==j && flag==1)\\n            {\\n                arr1[i] = 0;\\n            }\\n            else if(arr1[i]>0 && flag==0)\\n            {\\n                j = arr1[i];\\n                arr1[i] = 0;\\n                flag=1;\\n            }\\n        }\\n        for(i=arr1.size()-1 ; i>=0 ; i--)\\n        {\\n            num1 += arr1[i]*pow(10, arr2.size()-1-i);\\n        }\\n\\n\\n        j=-1;\\n        flag=0;\\n        for(i=0 ; i<arr2.size() ; i++)\\n        {\\n            if(arr2[i]==j  && flag==1)\\n            {\\n                arr2[i] = 9;\\n            }\\n            else if(arr2[i]<9  && flag==0)\\n            {\\n                j = arr2[i];\\n                arr2[i] = 9;\\n                flag=1;\\n            }\\n        }\\n        for(i=arr2.size()-1 ; i>=0 ; i--)\\n        {\\n            num2 += arr2[i]*pow(10, arr2.size()-1-i);\\n        }\\n\\n        \\n        ans = num2-num1;\\n        return ans;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int i, j=-1,num1=0, num2=0, ans, flag=0;\\n        vector<int> arr1, arr2;\\n\\n\\n        while(num>0)\\n        {\\n            i = num%10;\\n            num = num/10;\\n            arr1.push_back(i);\\n        }\\n        reverse(arr1.begin(), arr1.end());\\n\\n\\n\\n        arr2 = arr1;\\n        for(i=0 ; i<arr1.size() ; i++)\\n        {\\n            if(arr1[i]==j && flag==1)\\n            {\\n                arr1[i] = 0;\\n            }\\n            else if(arr1[i]>0 && flag==0)\\n            {\\n                j = arr1[i];\\n                arr1[i] = 0;\\n                flag=1;\\n            }\\n        }\\n        for(i=arr1.size()-1 ; i>=0 ; i--)\\n        {\\n            num1 += arr1[i]*pow(10, arr2.size()-1-i);\\n        }\\n\\n\\n        j=-1;\\n        flag=0;\\n        for(i=0 ; i<arr2.size() ; i++)\\n        {\\n            if(arr2[i]==j  && flag==1)\\n            {\\n                arr2[i] = 9;\\n            }\\n            else if(arr2[i]<9  && flag==0)\\n            {\\n                j = arr2[i];\\n                arr2[i] = 9;\\n                flag=1;\\n            }\\n        }\\n        for(i=arr2.size()-1 ; i>=0 ; i--)\\n        {\\n            num2 += arr2[i]*pow(10, arr2.size()-1-i);\\n        }\\n\\n        \\n        ans = num2-num1;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380538,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n       string no=to_string(num);\\n       char digit;\\n       char mdigit=no[0];\\n       for(int i=0; i<no.size(); i++)\\n        {\\n            if(no[i]!=\\'9\\'){\\n                digit=no[i];\\n                break;\\n            }\\n\\n        }\\n        string copy=no;\\n        for(int i=0; i<no.size(); i++){\\n            if(no[i]==digit)\\n            no[i]=\\'9\\';\\n            if(copy[i]==mdigit)\\n            copy[i]=\\'0\\';\\n        }\\n        int max=stoi(no);\\n        int min=stoi(copy);\\n        return max-min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n       string no=to_string(num);\\n       char digit;\\n       char mdigit=no[0];\\n       for(int i=0; i<no.size(); i++)\\n        {\\n            if(no[i]!=\\'9\\'){\\n                digit=no[i];\\n                break;\\n            }\\n\\n        }\\n        string copy=no;\\n        for(int i=0; i<no.size(); i++){\\n            if(no[i]==digit)\\n            no[i]=\\'9\\';\\n            if(copy[i]==mdigit)\\n            copy[i]=\\'0\\';\\n        }\\n        int max=stoi(no);\\n        int min=stoi(copy);\\n        return max-min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3341429,
                "title": "swift-beats-100-w-explanation-time-space",
                "content": "# Approach\\n- Max Number: Find first non-nine value and replace it + all other occurrences of this value w/ 9\\n- Min Number: Replace first value + all other occurences of this value w/ 0\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func minMaxDifference(_ num: Int) -> Int {\\n        let maxNum = getMaxValueToReplace(\"\\\\(num)\", num)\\n        let minNum = getMinValueToReplace(\"\\\\(num)\", num)\\n        return maxNum - minNum\\n    }\\n\\n    func getMaxValueToReplace(_ str: String, _ num: Int) -> Int {\\n        guard let idx = str.firstIndex(where: { $0 != \"9\" } ) else { return num }\\n        return Int(str.replacingOccurrences(of: \"\\\\(str[idx])\", with: \"9\"))!\\n    }\\n\\n    func getMinValueToReplace(_ str: String, _ num: Int) -> Int {\\n        guard let idx = str.firstIndex(where: { $0 != \"0\" } ) else { return num }\\n        return Int(str.replacingOccurrences(of: \"\\\\(str[idx])\", with: \"0\"))!\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minMaxDifference(_ num: Int) -> Int {\\n        let maxNum = getMaxValueToReplace(\"\\\\(num)\", num)\\n        let minNum = getMinValueToReplace(\"\\\\(num)\", num)\\n        return maxNum - minNum\\n    }\\n\\n    func getMaxValueToReplace(_ str: String, _ num: Int) -> Int {\\n        guard let idx = str.firstIndex(where: { $0 != \"9\" } ) else { return num }\\n        return Int(str.replacingOccurrences(of: \"\\\\(str[idx])\", with: \"9\"))!\\n    }\\n\\n    func getMinValueToReplace(_ str: String, _ num: Int) -> Int {\\n        guard let idx = str.firstIndex(where: { $0 != \"0\" } ) else { return num }\\n        return Int(str.replacingOccurrences(of: \"\\\\(str[idx])\", with: \"0\"))!\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3296357,
                "title": "runtime-0-ms-beats-100-greedy-must-see",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        //converting the num to the string\\n        string str = to_string(num);\\n\\n        //maxnum and minnum are not generated\\n        string maxnum = str;\\n        char maxdigit = \\'#\\';\\n\\n        string minnum = str;\\n        char mindigit = \\'#\\';\\n\\n        //we need to form the max value form the num\\n        //we need to form the min value from the num\\n        \\n        //making the maxnum\\n        //iterating over the str and finding the first non 9 number\\n        for(int i=0;i<str.length();i++)\\n        {\\n            if(str[i] != \\'9\\')\\n            {\\n                maxdigit = str[i];\\n                break;\\n            }\\n        }\\n        if(maxdigit != \\'#\\')\\n        {\\n            for(int i=0;i<maxnum.length();i++)\\n            {\\n                if(maxnum[i] == maxdigit)\\n                {\\n                    maxnum[i] = \\'9\\';\\n                }\\n            }\\n        }\\n\\n        //making the minnum number\\n        for(int i=0;i<str.length();i++)\\n        {\\n            if(str[i] != \\'0\\')\\n            {\\n                mindigit = str[i];\\n                break;\\n            }\\n        }\\n\\n        if(mindigit != \\'#\\')\\n        {\\n            for(int i=0;i<minnum.length();i++)\\n            {\\n                if(minnum[i] == mindigit)\\n                {\\n                    minnum[i] = \\'0\\';\\n                }\\n            }\\n        }\\n        int val1 = stoi(maxnum);\\n        int val2 = stoi(minnum);\\n        return val1 - val2;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        //converting the num to the string\\n        string str = to_string(num);\\n\\n        //maxnum and minnum are not generated\\n        string maxnum = str;\\n        char maxdigit = \\'#\\';\\n\\n        string minnum = str;\\n        char mindigit = \\'#\\';\\n\\n        //we need to form the max value form the num\\n        //we need to form the min value from the num\\n        \\n        //making the maxnum\\n        //iterating over the str and finding the first non 9 number\\n        for(int i=0;i<str.length();i++)\\n        {\\n            if(str[i] != \\'9\\')\\n            {\\n                maxdigit = str[i];\\n                break;\\n            }\\n        }\\n        if(maxdigit != \\'#\\')\\n        {\\n            for(int i=0;i<maxnum.length();i++)\\n            {\\n                if(maxnum[i] == maxdigit)\\n                {\\n                    maxnum[i] = \\'9\\';\\n                }\\n            }\\n        }\\n\\n        //making the minnum number\\n        for(int i=0;i<str.length();i++)\\n        {\\n            if(str[i] != \\'0\\')\\n            {\\n                mindigit = str[i];\\n                break;\\n            }\\n        }\\n\\n        if(mindigit != \\'#\\')\\n        {\\n            for(int i=0;i<minnum.length();i++)\\n            {\\n                if(minnum[i] == mindigit)\\n                {\\n                    minnum[i] = \\'0\\';\\n                }\\n            }\\n        }\\n        int val1 = stoi(maxnum);\\n        int val2 = stoi(minnum);\\n        return val1 - val2;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3273581,
                "title": "simple-python3-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        string_num = str(num)\\n        maximum_number = int(string_num)\\n        minimium_number = 0\\n\\n        for i in string_num:\\n            if int(i) < 9:\\n                maximum_number = int(string_num.replace(i, \"9\"))\\n                break\\n\\n        for i in string_num:\\n            if int(i) > 0:\\n                minimum_number = int(string_num.replace(i, \"0\"))\\n                break\\n\\n        return maximum_number - minimum_number\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        string_num = str(num)\\n        maximum_number = int(string_num)\\n        minimium_number = 0\\n\\n        for i in string_num:\\n            if int(i) < 9:\\n                maximum_number = int(string_num.replace(i, \"9\"))\\n                break\\n\\n        for i in string_num:\\n            if int(i) > 0:\\n                minimum_number = int(string_num.replace(i, \"0\"))\\n                break\\n\\n        return maximum_number - minimum_number\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237921,
                "title": "straightforward-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(2*n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0(2*n)\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        mmax = \\'0\\'\\n        mmin = \\'0\\'\\n        # temp = set(list(str(num)))\\n        # if set(list(str(num))) == {\\'9\\'}:\\n        #     mmax = str(num)\\n        # else:\\n        #     for index,ele in enumerate(str(num)):\\n        #         if ele != \\'9\\':\\n        #             mmax = str(num).replace(ele,\\'9\\')\\n        # mmin = str(num).replace(str(num)[0],\\'0\\')\\n        # return int(mmax) - int(mmin)\\n        for index,ele in enumerate(str(num)):\\n            if ele != \\'9\\':\\n                mmax = str(num).replace(ele,\\'9\\')\\n                break\\n            else:\\n                mmax += ele\\n        for index,ele in enumerate(str(num)):\\n            if ele != \\'0\\':\\n                mmin = str(num).replace(ele,\\'0\\')\\n                break\\n            else:\\n                mmin += ele\\n        \\n        return int(mmax) - int(mmin)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        mmax = \\'0\\'\\n        mmin = \\'0\\'\\n        # temp = set(list(str(num)))\\n        # if set(list(str(num))) == {\\'9\\'}:\\n        #     mmax = str(num)\\n        # else:\\n        #     for index,ele in enumerate(str(num)):\\n        #         if ele != \\'9\\':\\n        #             mmax = str(num).replace(ele,\\'9\\')\\n        # mmin = str(num).replace(str(num)[0],\\'0\\')\\n        # return int(mmax) - int(mmin)\\n        for index,ele in enumerate(str(num)):\\n            if ele != \\'9\\':\\n                mmax = str(num).replace(ele,\\'9\\')\\n                break\\n            else:\\n                mmax += ele\\n        for index,ele in enumerate(str(num)):\\n            if ele != \\'0\\':\\n                mmin = str(num).replace(ele,\\'0\\')\\n                break\\n            else:\\n                mmin += ele\\n        \\n        return int(mmax) - int(mmin)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3225714,
                "title": "easy-and-clear-solution-stoi-to-string-c",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        char c;\\n        string str=to_string(num);\\n        int n=str.size();\\n        for(int i=0;i<n;i++){\\n            if(str[i]!=\\'9\\'){\\n                c=str[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<n;i++){\\n            if(str[i]==c){\\n                str[i]=\\'9\\';\\n            }\\n        }\\n        string st=to_string(num);\\n        char d=st[0];\\n        for(int i=0;i<n;i++){\\n            if(st[i]==d){\\n                st[i]=\\'0\\';\\n            }\\n        }\\n        int a=stoi(str);\\n        int b=stoi(st);\\n        return a-b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        char c;\\n        string str=to_string(num);\\n        int n=str.size();\\n        for(int i=0;i<n;i++){\\n            if(str[i]!=\\'9\\'){\\n                c=str[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<n;i++){\\n            if(str[i]==c){\\n                str[i]=\\'9\\';\\n            }\\n        }\\n        string st=to_string(num);\\n        char d=st[0];\\n        for(int i=0;i<n;i++){\\n            if(st[i]==d){\\n                st[i]=\\'0\\';\\n            }\\n        }\\n        int a=stoi(str);\\n        int b=stoi(st);\\n        return a-b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3215981,
                "title": "simple-and-greedy-solution-c-beginner-friendly-well-explained",
                "content": "\\n# Approach\\n1. Convert given number into string to make mapping easy.\\n2. Find first character, which does not equal to \\'9\\' in the string, and store the value at that index, and remap all the indices of stored value with character \\'9\\' to make maximum number.\\n3. Similarly,Find first character, which does not equal to \\'0\\' in the string, and store the value at that index, and remap all the indices of stored value with character \\'0\\' to make minimum number.\\n4. Return difference of maximum and minimum number.\\n\\n# Example\\n**Example 1:** n = 11891\\nstring s = \"11891\"\\nMaximum - Find first index which is not equal to \\'9\\'.In s, index 0 is not equal to \\'9\\', so remap all the occurances (values at 0th index)  in the string s with \\'9\\'. \\nSo, max = 11891 -> 99899\\nMinimum - Find first index which is not equal to \\'0\\'.In s, index 0 is not equal to \\'0\\', so remap all the occurances (values at 0th index)  in the string s with \\'0\\'. \\nSo, min = 11891 -> 00890 = 890\\nans = max-min = 99899 - 890 = 99009\\n\\n**Example 2:** n = 90\\nstring s = \"90\"\\nMaximum - Find first index which is not equal to \\'9\\'.In s, index 1 is not equal to \\'9\\', so remap all the occurances (values at 1st index)  in the string s with \\'9\\'. \\nSo, max = 90 -> 99\\nMinimum - Find first index which is not equal to \\'0\\'.In s, index 0 is not equal to \\'0\\', so remap all the occurances (values at 0th index)  in the string s with \\'0\\'. \\nSo, min = 90 -> 00 = 0\\nans = max-min = 99 - 0 = 99\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        string n = to_string(num);\\n        string s = n;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]!=\\'9\\')\\n            {\\n                char x = s[i];\\n                for(int j=i;j<s.size();j++)\\n                {\\n                    if(s[j]==x)\\n                    s[j] = \\'9\\';\\n                }\\n                break;\\n            }\\n        }\\n        int h = stoi(s);\\n        s = n;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]!=\\'0\\')\\n            {\\n                char x = s[i];\\n                for(int j=i;j<s.size();j++)\\n                {\\n                    if(s[j]==x)\\n                    s[j] = \\'0\\';\\n                }\\n                break;\\n            }\\n        }\\n        int l = stoi(s);\\n        return h-l;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        string n = to_string(num);\\n        string s = n;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]!=\\'9\\')\\n            {\\n                char x = s[i];\\n                for(int j=i;j<s.size();j++)\\n                {\\n                    if(s[j]==x)\\n                    s[j] = \\'9\\';\\n                }\\n                break;\\n            }\\n        }\\n        int h = stoi(s);\\n        s = n;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]!=\\'0\\')\\n            {\\n                char x = s[i];\\n                for(int j=i;j<s.size();j++)\\n                {\\n                    if(s[j]==x)\\n                    s[j] = \\'0\\';\\n                }\\n                break;\\n            }\\n        }\\n        int l = stoi(s);\\n        return h-l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3209190,
                "title": "c-brute-force-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(log(num))$$\\n\\n- Space complexity:$$O(log(num))$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=\"\";\\n        \\n        map<char, int>m;\\n        while(num){\\n            s+=to_string(num%10);\\n            num/=10;\\n        }\\n        //cout<<s<<endl;\\n        for(int i=0; i<s.size(); i++){m[s[i]]++;}\\n        reverse(s.begin(), s.end());\\n        string s1=s, s2=s;\\n        if(s[0]!=\\'9\\'){\\n            char a=s[0];\\n            \\n            for(int i=0; i<s.size(); i++){\\n                if(s[i]==a){\\n                    s1[i]=\\'9\\';\\n                    s2[i]=\\'0\\';\\n                }\\n            }\\n        }\\n        else{\\n            //cout<<\"here\"<<endl;\\n            char a=s[0], b=\\'.\\';\\n            for(int i=0; i<s.size(); i++){\\n                if(s[i]==a){\\n                    s2[i]=\\'0\\';\\n                }\\n            }\\n            for(int i=0; i<s.size(); i++){\\n                if(s[i]!=\\'9\\'){\\n                    b=s[i];\\n                    break;\\n                }\\n            }\\n            if(b!=\\'.\\'){\\n                for(int i=0; i<s.size(); i++){\\n                    if(s[i]==b){\\n                        s1[i]=\\'9\\';\\n                    }\\n                }\\n            }\\n        }\\n        int n1=0, n2=0;\\n        for(int i=0; i<s1.size(); i++){\\n            n1*=10;\\n            n1+=(s1[i]-\\'0\\');\\n        }\\n        for(int i=0; i<s2.size(); i++){\\n            n2*=10;\\n            n2+=(s2[i]-\\'0\\');\\n        }\\n        cout<<n1<<\" \"<<s1<<\" \"<<n2<<\" \"<<s2<<endl;\\n        return n1-n2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=\"\";\\n        \\n        map<char, int>m;\\n        while(num){\\n            s+=to_string(num%10);\\n            num/=10;\\n        }\\n        //cout<<s<<endl;\\n        for(int i=0; i<s.size(); i++){m[s[i]]++;}\\n        reverse(s.begin(), s.end());\\n        string s1=s, s2=s;\\n        if(s[0]!=\\'9\\'){\\n            char a=s[0];\\n            \\n            for(int i=0; i<s.size(); i++){\\n                if(s[i]==a){\\n                    s1[i]=\\'9\\';\\n                    s2[i]=\\'0\\';\\n                }\\n            }\\n        }\\n        else{\\n            //cout<<\"here\"<<endl;\\n            char a=s[0], b=\\'.\\';\\n            for(int i=0; i<s.size(); i++){\\n                if(s[i]==a){\\n                    s2[i]=\\'0\\';\\n                }\\n            }\\n            for(int i=0; i<s.size(); i++){\\n                if(s[i]!=\\'9\\'){\\n                    b=s[i];\\n                    break;\\n                }\\n            }\\n            if(b!=\\'.\\'){\\n                for(int i=0; i<s.size(); i++){\\n                    if(s[i]==b){\\n                        s1[i]=\\'9\\';\\n                    }\\n                }\\n            }\\n        }\\n        int n1=0, n2=0;\\n        for(int i=0; i<s1.size(); i++){\\n            n1*=10;\\n            n1+=(s1[i]-\\'0\\');\\n        }\\n        for(int i=0; i<s2.size(); i++){\\n            n2*=10;\\n            n2+=(s2[i]-\\'0\\');\\n        }\\n        cout<<n1<<\" \"<<s1<<\" \"<<n2<<\" \"<<s2<<endl;\\n        return n1-n2;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3207472,
                "title": "rust-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn min_max_difference(mut num: i32) -> i32 {\\n        let (mut max_val, mut min_val) = (0, 0);\\n        let (mut max_dig_rm, mut min_dig_rm) = (-1, -1);\\n        let p = (num as f64).log10() as u32;\\n        let mut div = 10_i32.pow(p);\\n\\n        for _ in 0..=p {\\n            let digit = num / div;\\n            max_val *= 10;\\n            min_val *= 10;\\n\\n            max_val += match (max_dig_rm, digit) {\\n                (-1, x) => {\\n                    if x != 9 {\\n                        max_dig_rm = x\\n                    }\\n                    9\\n                }\\n                (x, y) if x == y => 9,\\n                _ => digit,\\n            };\\n\\n            min_val += match (min_dig_rm, digit) {\\n                (-1, x) => {\\n                    if x != 0 {\\n                        min_dig_rm = x\\n                    }\\n                    0\\n                }\\n                (x, y) if x == y => 0,\\n                _ => digit,\\n            };\\n\\n            num %= div;\\n            div /= 10;\\n        }\\n\\n        max_val - min_val\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Rust",
                    "Math",
                    "Iterator"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn min_max_difference(mut num: i32) -> i32 {\\n        let (mut max_val, mut min_val) = (0, 0);\\n        let (mut max_dig_rm, mut min_dig_rm) = (-1, -1);\\n        let p = (num as f64).log10() as u32;\\n        let mut div = 10_i32.pow(p);\\n\\n        for _ in 0..=p {\\n            let digit = num / div;\\n            max_val *= 10;\\n            min_val *= 10;\\n\\n            max_val += match (max_dig_rm, digit) {\\n                (-1, x) => {\\n                    if x != 9 {\\n                        max_dig_rm = x\\n                    }\\n                    9\\n                }\\n                (x, y) if x == y => 9,\\n                _ => digit,\\n            };\\n\\n            min_val += match (min_dig_rm, digit) {\\n                (-1, x) => {\\n                    if x != 0 {\\n                        min_dig_rm = x\\n                    }\\n                    0\\n                }\\n                (x, y) if x == y => 0,\\n                _ => digit,\\n            };\\n\\n            num %= div;\\n            div /= 10;\\n        }\\n\\n        max_val - min_val\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3205590,
                "title": "c-easiest-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str=to_string(num);\\n        int max,min;\\n       string temp=str;\\n       int n=str.size();\\n       int i=0;\\n         while(str[i]==\\'9\\')\\n        i++;\\n      char c=str[i];\\n        \\n        for(auto &ch: temp)\\n        {\\n            if(ch==c)\\n            ch=\\'9\\';\\n        }\\n        max=stoi(temp);\\n        temp=str;\\n      \\n        c=str[0];\\n        for(auto &ch: str)\\n        {\\n           if(ch==c)\\n            ch=\\'0\\';\\n        }\\n     min=stoi(str);\\n     cout<<\"max=\"<<max<<\" \"<<\"min=\"<<min<<endl;\\n        return max-min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str=to_string(num);\\n        int max,min;\\n       string temp=str;\\n       int n=str.size();\\n       int i=0;\\n         while(str[i]==\\'9\\')\\n        i++;\\n      char c=str[i];\\n        \\n        for(auto &ch: temp)\\n        {\\n            if(ch==c)\\n            ch=\\'9\\';\\n        }\\n        max=stoi(temp);\\n        temp=str;\\n      \\n        c=str[0];\\n        for(auto &ch: str)\\n        {\\n           if(ch==c)\\n            ch=\\'0\\';\\n        }\\n     min=stoi(str);\\n     cout<<\"max=\"<<max<<\" \"<<\"min=\"<<min<<endl;\\n        return max-min;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3204246,
                "title": "fundamental-approach-c-string-manip",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string n = to_string(num);\\n        string min = \"\";\\n        string max = \"\";\\n        int i=0;\\n        while(i < n.size() and n[i] == \\'9\\')  {\\n            i++;\\n        }\\n        if(i < n.size()) {\\n            char remax = n[i];\\n            for(auto val: n) {\\n                if(val == remax)\\n                    max += \\'9\\';\\n                else\\n                    max += val;\\n            }\\n        }\\n        else\\n            max = n;\\n        i=0;\\n        while(i < n.size() and n[i] == \\'0\\') \\n            i++;\\n        if(i < n.size()) {\\n            char remin = n[i];\\n            for(auto val: n) {\\n                if(val == remin)\\n                    min += \\'0\\';\\n                else\\n                    min += val;\\n            }\\n        }\\n        else\\n            min = n;\\n        return stoi(max)-stoi(min);\\n    }\\n};\\n// Please consider upvoting if the solution helped! Thank you :)\\n// By VasudevaK (V Deva K)\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string n = to_string(num);\\n        string min = \"\";\\n        string max = \"\";\\n        int i=0;\\n        while(i < n.size() and n[i] == \\'9\\')  {\\n            i++;\\n        }\\n        if(i < n.size()) {\\n            char remax = n[i];\\n            for(auto val: n) {\\n                if(val == remax)\\n                    max += \\'9\\';\\n                else\\n                    max += val;\\n            }\\n        }\\n        else\\n            max = n;\\n        i=0;\\n        while(i < n.size() and n[i] == \\'0\\') \\n            i++;\\n        if(i < n.size()) {\\n            char remin = n[i];\\n            for(auto val: n) {\\n                if(val == remin)\\n                    min += \\'0\\';\\n                else\\n                    min += val;\\n            }\\n        }\\n        else\\n            min = n;\\n        return stoi(max)-stoi(min);\\n    }\\n};\\n// Please consider upvoting if the solution helped! Thank you :)\\n// By VasudevaK (V Deva K)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3203579,
                "title": "100-beats-easy-c-explained-with-comments",
                "content": "# Intuition\\nThe idea is to store the number in vector then simply replace the starting digits with 9 to maximise and with 0 to minimse\\n\\n# Approach\\n**Input : 11891**\\nTo maximise the number\\nIn a loop..\\ncheck for the first digit if it is equal to 9 then do nothing... go for the next digit of vector again check if it is equal 9 or not...if it is not equal to 9 then store the current digit in some \\'temp\\' named variable\\n**Here temp = 1;**\\nand \\'break\\'..then in the next loop replace all the digit with 9 if the digit is equal to variable \\'temp\\' i.e all 1 will be replaced with 9\\n\\n\\nReason we are checking with 9 is because if first digit is 9 then there is no need to do anything go for the next non 9 digit\\n like 99881 will be be 99991(maximum)\\n\\n**To minimise** simply hold the starting digit in temp2 variable and replace wherver it is found in the vector\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n\\nclass Solution {\\npublic:\\n    int minMaxDifference(int n) {\\n        vector<int> v;  \\n        vector<int> vt;\\n        while(n>0)\\n        {\\n            // pushing at begining\\n              v.insert(v.begin(),n%10 );\\n              vt.insert(vt.begin(),n%10 );\\n            n=n/10;\\n        }\\n        \\n        int temp=0;\\n        //maximising\\n        for(int i=0; i<v.size(); i++)\\n        {\\n            // do nothing if 9 is there\\n            if(v[i]==9)\\n            continue;\\n            else if(v[i]!=9)\\n            {\\n                // break we don\\'t need to go further\\n                temp=v[i];\\n                break;\\n            }\\n        }\\n        for(int i=0; i<v.size(); i++)\\n        {\\n             \\n            if(temp==v[i])\\n            {\\n                v[i]=9;\\n            }\\n        }\\n        // minimising by replacing wiht 0\\n        int temp2=vt[0];\\n        for(int i=0; i<vt.size(); i++)\\n        {        \\n            if(temp2==vt[i])\\n            {\\n                vt[i]=0;\\n            }\\n        }\\n        // converting vector of numbers into number\\n        int max = 0, min=0;\\n        for (int i=0; i<v.size(); i++ ) \\n            max = max * 10 + v[i];\\n        \\n            int num2 = 0;\\n        for (int i=0; i<vt.size(); i++) \\n            min = min * 10 + vt[i];\\n        \\n      \\n        return max-min;\\n    }  \\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n    int minMaxDifference(int n) {\\n        vector<int> v;  \\n        vector<int> vt;\\n        while(n>0)\\n        {\\n            // pushing at begining\\n              v.insert(v.begin(),n%10 );\\n              vt.insert(vt.begin(),n%10 );\\n            n=n/10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3202754,
                "title": "easy-c-solution",
                "content": "## Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int> v;\\n        while (num>0){\\n            v.push_back(num%10);\\n            num/= 10;\\n        }\\n        reverse(v.begin(),v.end());\\n        vector<int> miniv,maxiv;\\n        for (int i=0; i<v.size(); i++){\\n            if (v[i]==v[0]){\\n                miniv.push_back(0);\\n            }   \\n            else miniv.push_back(v[i]);\\n        }\\n        int it=-1;\\n        for (int j=0; j<v.size(); j++){\\n            if (v[j]!=9){\\n                it= j;\\n                break;\\n            }\\n        }\\n        for (int i=0; i<v.size(); i++){\\n            if (it!= -1 && v[i]==v[it]){\\n                maxiv.push_back(9);\\n            }\\n            else maxiv.push_back(v[i]);\\n        }\\n        \\n        \\n        int mini= 0, maxi=0;\\n        for (int it=0; it<maxiv.size(); it++){\\n            maxi*= 10;\\n            maxi+= maxiv[it];\\n        }\\n        for (int it=0; it<miniv.size(); it++){\\n            mini*= 10;\\n            mini+= miniv[it];\\n        }\\n        return abs(mini-maxi);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int> v;\\n        while (num>0){\\n            v.push_back(num%10);\\n            num/= 10;\\n        }\\n        reverse(v.begin(),v.end());\\n        vector<int> miniv,maxiv;\\n        for (int i=0; i<v.size(); i++){\\n            if (v[i]==v[0]){\\n                miniv.push_back(0);\\n            }   \\n            else miniv.push_back(v[i]);\\n        }\\n        int it=-1;\\n        for (int j=0; j<v.size(); j++){\\n            if (v[j]!=9){\\n                it= j;\\n                break;\\n            }\\n        }\\n        for (int i=0; i<v.size(); i++){\\n            if (it!= -1 && v[i]==v[it]){\\n                maxiv.push_back(9);\\n            }\\n            else maxiv.push_back(v[i]);\\n        }\\n        \\n        \\n        int mini= 0, maxi=0;\\n        for (int it=0; it<maxiv.size(); it++){\\n            maxi*= 10;\\n            maxi+= maxiv[it];\\n        }\\n        for (int it=0; it<miniv.size(); it++){\\n            mini*= 10;\\n            mini+= miniv[it];\\n        }\\n        return abs(mini-maxi);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202444,
                "title": "who-is-danny-mittal",
                "content": "When I googled the name, I saw IOI, CodeForce. \\n\\nLeetcode contest is like street fight. Those are clash of the Titans. Give my respect.\\n\\n![image.png](https://assets.leetcode.com/users/images/2307af0b-7fcd-4f27-8f43-30e1530c13a2_1676741263.759149.png)\\n\\nHope one day I could be one of Titan.\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "When I googled the name, I saw IOI, CodeForce. \\n\\nLeetcode contest is like street fight. Those are clash of the Titans. Give my respect.\\n\\n![image.png](https://assets.leetcode.com/users/images/2307af0b-7fcd-4f27-8f43-30e1530c13a2_1676741263.759149.png)\\n\\nHope one day I could be one of Titan.\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3202207,
                "title": "python",
                "content": "\\n\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num_str_min = num\\n        num_str_max = num\\n        num = str(num)\\n        for i in num:\\n            if i < \\'9\\':\\n                num_str_max = int(num.replace(i, \\'9\\'))\\n                break\\n        for i in num:\\n            if i != \\'0\\':\\n                num_str_min = int(num.replace(i, \\'0\\'))\\n                break\\n        return num_str_max - num_str_min\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num_str_min = num\\n        num_str_max = num\\n        num = str(num)\\n        for i in num:\\n            if i < \\'9\\':\\n                num_str_max = int(num.replace(i, \\'9\\'))\\n                break\\n        for i in num:\\n            if i != \\'0\\':\\n                num_str_min = int(num.replace(i, \\'0\\'))\\n                break\\n        return num_str_max - num_str_min\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202160,
                "title": "javascript-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    let str = num.toString();\\n    let d1 = \\'9\\', d2 = \\'0\\';\\n    let max = \\'\\', min = \\'\\';\\n    \\n    for (let i = 0; i < str.length; i++) {\\n        if (d1 === \\'9\\' && str[i] !== \\'9\\') {\\n            d1 = str[i];\\n        }\\n        \\n        if (d1 === str[i]) {\\n            max += \\'9\\';\\n        } else {\\n            max += str[i];\\n        }\\n        \\n        if (d2 === \\'0\\' && str[i] !== \\'0\\') {\\n            d2 = str[i];\\n        }\\n        \\n        if (d2 === str[i]) {\\n            min += \\'0\\';\\n        } else {\\n            min += str[i];\\n        }        \\n    }\\n    \\n    return Number(max) - Number(min);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    let str = num.toString();\\n    let d1 = \\'9\\', d2 = \\'0\\';\\n    let max = \\'\\', min = \\'\\';\\n    \\n    for (let i = 0; i < str.length; i++) {\\n        if (d1 === \\'9\\' && str[i] !== \\'9\\') {\\n            d1 = str[i];\\n        }\\n        \\n        if (d1 === str[i]) {\\n            max += \\'9\\';\\n        } else {\\n            max += str[i];\\n        }\\n        \\n        if (d2 === \\'0\\' && str[i] !== \\'0\\') {\\n            d2 = str[i];\\n        }\\n        \\n        if (d2 === str[i]) {\\n            min += \\'0\\';\\n        } else {\\n            min += str[i];\\n        }        \\n    }\\n    \\n    return Number(max) - Number(min);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3202121,
                "title": "my-java-solution-runtime-1-ms-faster-than-100-00-of-java-online-submissions",
                "content": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String numStr = Integer.toString(num);\\n\\t\\tint maxDigit = -1;\\n\\t\\tfor (int i = 0; i < numStr.length(); i++) {\\n\\t\\t\\tchar c = numStr.charAt(i);\\n\\t\\t\\tif (c != \\'9\\') {\\n\\t\\t\\t\\tmaxDigit = c - \\'0\\';\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tString maxStr = numStr.replace(Character.forDigit(maxDigit, 10), \\'9\\');\\n\\t\\tString minStr = \"\";\\n\\t\\tint minDigit = -1;\\n\\t\\tfor (int i = 0; i < numStr.length(); i++) {\\n\\t\\t\\tchar c = numStr.charAt(i);\\n\\t\\t\\tif (c != \\'0\\') {\\n\\t\\t\\t\\tminDigit = c - \\'0\\';\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tminStr = numStr.replace(Character.forDigit(minDigit, 10), \\'0\\');\\n\\t\\tint maxNum = Integer.parseInt(maxStr);\\n\\t\\tint minNum = Integer.parseInt(minStr);\\n\\t\\treturn maxNum - minNum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String numStr = Integer.toString(num);\\n\\t\\tint maxDigit = -1;\\n\\t\\tfor (int i = 0; i < numStr.length(); i++) {\\n\\t\\t\\tchar c = numStr.charAt(i);\\n\\t\\t\\tif (c != \\'9\\') {\\n\\t\\t\\t\\tmaxDigit = c - \\'0\\';\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tString maxStr = numStr.replace(Character.forDigit(maxDigit, 10), \\'9\\');\\n\\t\\tString minStr = \"\";\\n\\t\\tint minDigit = -1;\\n\\t\\tfor (int i = 0; i < numStr.length(); i++) {\\n\\t\\t\\tchar c = numStr.charAt(i);\\n\\t\\t\\tif (c != \\'0\\') {\\n\\t\\t\\t\\tminDigit = c - \\'0\\';\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tminStr = numStr.replace(Character.forDigit(minDigit, 10), \\'0\\');\\n\\t\\tint maxNum = Integer.parseInt(maxStr);\\n\\t\\tint minNum = Integer.parseInt(minStr);\\n\\t\\treturn maxNum - minNum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202104,
                "title": "simple-greedy-math-easy-python-python3",
                "content": "### Please Upvote if you find this useful \\uD83D\\uDE0A\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        lst = list(str(num))\\n        minN = lst[0]\\n        maxN = lst[0]\\n        num1 = list()\\n        num2 = list()\\n        \\n        for i in lst:\\n            if i != \\'9\\':\\n                minN = i\\n                break\\n\\n        for i in range(len(lst)):\\n            if lst[i] == minN:\\n                num2.append(\\'9\\')\\n            else:\\n                num2.append(lst[i])\\n            if lst[i] == maxN:\\n                num1.append(\\'0\\')\\n            else:\\n                num1.append(lst[i])\\n\\n        return int(\"\".join(num2)) - int(\"\".join(num1))\\n```\\n\\n### Please Upvote if you find this useful \\uD83D\\uDE0A\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        lst = list(str(num))\\n        minN = lst[0]\\n        maxN = lst[0]\\n        num1 = list()\\n        num2 = list()\\n        \\n        for i in lst:\\n            if i != \\'9\\':\\n                minN = i\\n                break\\n\\n        for i in range(len(lst)):\\n            if lst[i] == minN:\\n                num2.append(\\'9\\')\\n            else:\\n                num2.append(lst[i])\\n            if lst[i] == maxN:\\n                num1.append(\\'0\\')\\n            else:\\n                num1.append(lst[i])\\n\\n        return int(\"\".join(num2)) - int(\"\".join(num1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202084,
                "title": "simple-c-easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string m=\"\";\\n        string n=\"\";\\n        vector<int>ans;\\n        while(num>0){\\n            ans.push_back(num%10);\\n            num=num/10;\\n}\\n        reverse(ans.begin(),ans.end());\\n    \\n        int mc;\\n        int mn;\\n        //maximum\\n        for(int i=0;i<ans.size();i++){\\n        if(ans[i] < 9){\\n            mc=ans[i];\\n            break;\\n}\\n}\\n        // min\\n        \\n            for(int i=0;i<ans.size();i++){\\n        if(ans[i] > 0){\\n            mn=ans[i];\\n            break;\\n}\\n}\\n                for(int i=0;i<ans.size();i++){\\n            if(ans[i] == mn){\\n                n+=to_string(0) ;\\n}\\n            else n+=to_string(ans[i]);\\n            \\n}\\n        \\n        \\n\\n        \\n        for(int i=0;i<ans.size();i++){\\n            if(ans[i] == mc){\\n                m+=to_string(9) ;\\n}\\n            else m+=to_string(ans[i]);\\n            \\n}\\n        int n1=stoi(m);\\n        int n2=stoi(n);\\n        \\n        cout<<n1<<\"   \"<<n2;\\n        \\n        \\n        return n1-n2;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string m=\"\";\\n        string n=\"\";\\n        vector<int>ans;\\n        while(num>0){\\n            ans.push_back(num%10);\\n            num=num/10;\\n}\\n        reverse(ans.begin(),ans.end());\\n    \\n        int mc;\\n        int mn;\\n        //maximum\\n        for(int i=0;i<ans.size();i++){\\n        if(ans[i] < 9){\\n            mc=ans[i];\\n            break;\\n}\\n}\\n        // min\\n        \\n            for(int i=0;i<ans.size();i++){\\n        if(ans[i] > 0){\\n            mn=ans[i];\\n            break;\\n}\\n}\\n                for(int i=0;i<ans.size();i++){\\n            if(ans[i] == mn){\\n                n+=to_string(0) ;\\n}\\n            else n+=to_string(ans[i]);\\n            \\n}\\n        \\n        \\n\\n        \\n        for(int i=0;i<ans.size();i++){\\n            if(ans[i] == mc){\\n                m+=to_string(9) ;\\n}\\n            else m+=to_string(ans[i]);\\n            \\n}\\n        int n1=stoi(m);\\n        int n2=stoi(n);\\n        \\n        cout<<n1<<\"   \"<<n2;\\n        \\n        \\n        return n1-n2;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3201976,
                "title": "simple-java-o-n-approach",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        \\n        \\n        String a=num+\"\";\\n        String maxstr=\"\";int k=0;\\n        for(int i=0;i<a.length();i++)\\n        {\\n            String replacemax=a.replaceAll(a.charAt(i)+\"\",\"9\");\\n        if(a.equals(replacemax)){\\n            \\n            continue;\\n                                }\\n         else{\\n             k=1;\\n             maxstr=replacemax;\\n             break;\\n         }\\n        }\\n        if(k==0)maxstr=a;\\n        String replacemin=a.replaceAll(a.charAt(0)+\"\",\"0\");\\n        \\n        \\n        \\n        \\n        long max=Long.parseLong(maxstr);\\n        long min=Long.parseLong(replacemin);\\n        \\n        return (int)(max-min);\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        \\n        \\n        String a=num+\"\";\\n        String maxstr=\"\";int k=0;\\n        for(int i=0;i<a.length();i++)\\n        {\\n            String replacemax=a.replaceAll(a.charAt(i)+\"\",\"9\");\\n        if(a.equals(replacemax)){\\n            \\n            continue;\\n                                }\\n         else{\\n             k=1;\\n             maxstr=replacemax;\\n             break;\\n         }\\n        }\\n        if(k==0)maxstr=a;\\n        String replacemin=a.replaceAll(a.charAt(0)+\"\",\"0\");\\n        \\n        \\n        \\n        \\n        long max=Long.parseLong(maxstr);\\n        long min=Long.parseLong(replacemin);\\n        \\n        return (int)(max-min);\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201964,
                "title": "easy-c-solution-explained",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe function first converts num to a string and loops over all possible pairs of digits (i, j) that can be used to remap a digit in num. For each pair (i, j), the function creates a new string newNumStr by replacing all occurrences of digit i with digit j. The new string is then converted back to an integer newNum, and the minimum and maximum values seen so far are updated as necessary. Finally, the function returns the difference between the maximum and minimum values.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string numStr = to_string(num);\\n        int n = numStr.size();\\n        int minVal = num, maxVal = num;\\n        for (int i = 0; i < 10; i++) {\\n            for (int j = 0; j < 10; j++) {\\n                string newNumStr = numStr;\\n                for (int k = 0; k < n; k++) {\\n                    if (newNumStr[k] - \\'0\\' == i) {\\n                        newNumStr[k] = j + \\'0\\';\\n                    }\\n                }\\n                int newNum = stoi(newNumStr);\\n                if (newNum < minVal) minVal = newNum;\\n            \\n                if (newNum > maxVal) maxVal = newNum;\\n            }\\n        }\\n        return maxVal - minVal;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string numStr = to_string(num);\\n        int n = numStr.size();\\n        int minVal = num, maxVal = num;\\n        for (int i = 0; i < 10; i++) {\\n            for (int j = 0; j < 10; j++) {\\n                string newNumStr = numStr;\\n                for (int k = 0; k < n; k++) {\\n                    if (newNumStr[k] - \\'0\\' == i) {\\n                        newNumStr[k] = j + \\'0\\';\\n                    }\\n                }\\n                int newNum = stoi(newNumStr);\\n                if (newNum < minVal) minVal = newNum;\\n            \\n                if (newNum > maxVal) maxVal = newNum;\\n            }\\n        }\\n        return maxVal - minVal;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201944,
                "title": "python3-one-line",
                "content": "# Code - Readable Solution\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a=str(num)\\n        amax=amin=a\\n        doneMax=doneMin=0\\n        for d in a:\\n            if d!=\\'9\\' and not doneMax:\\n                amax=\\'\\'.join(ch if ch!=d else \\'9\\' for ch in a)\\n                doneMax=1\\n            if d!=\\'0\\' and not doneMin:\\n                amin=\\'\\'.join(ch if ch!=d else \\'0\\' for ch in a)\\n                doneMin=1\\n        return int(amax)-int(amin)\\n```\\n\\n# Code - One Line for Fun\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        return max(int(\\'\\'.join(ch if ch!=d else \\'9\\' for ch in str(num))) for d in str(num)) - min(int(\\'\\'.join(ch if ch!=d else \\'0\\' for ch in str(num))) for d in str(num))\\n```\\n# Code - Readable 4 lines\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a=str(num)\\n        amax=max(int(\\'\\'.join(ch if ch!=d else \\'9\\' for ch in a)) for d in a)\\n        amin=min(int(\\'\\'.join(ch if ch!=d else \\'0\\' for ch in a)) for d in a)\\n        return amax-amin\\n```\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a=str(num)\\n        amax=amin=a\\n        doneMax=doneMin=0\\n        for d in a:\\n            if d!=\\'9\\' and not doneMax:\\n                amax=\\'\\'.join(ch if ch!=d else \\'9\\' for ch in a)\\n                doneMax=1\\n            if d!=\\'0\\' and not doneMin:\\n                amin=\\'\\'.join(ch if ch!=d else \\'0\\' for ch in a)\\n                doneMin=1\\n        return int(amax)-int(amin)\\n```\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        return max(int(\\'\\'.join(ch if ch!=d else \\'9\\' for ch in str(num))) for d in str(num)) - min(int(\\'\\'.join(ch if ch!=d else \\'0\\' for ch in str(num))) for d in str(num))\\n```\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a=str(num)\\n        amax=max(int(\\'\\'.join(ch if ch!=d else \\'9\\' for ch in a)) for d in a)\\n        amin=min(int(\\'\\'.join(ch if ch!=d else \\'0\\' for ch in a)) for d in a)\\n        return amax-amin\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201885,
                "title": "c-convert-to-string",
                "content": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string x=s;\\n        int i=0;\\n        while(i<x.size() && x[i]==\\'9\\'){\\n                i++;\\n        }\\n        char a= i<x.size()?s[i]:\\'.\\';\\n        if(a==\\'.\\') return stoi(x);\\n        for(;i<x.size();i++){\\n            if(x[i]==a) x[i] = \\'9\\';\\n        }\\n        string xx=s;\\n        int j=0;\\n        while(j<xx.size() && xx[j]==\\'0\\'){\\n            j++;\\n        }\\n        char b = j<xx.size()?xx[j]:\\'.\\';\\n        if(b==\\'.\\'){\\n            string ans=\"\";\\n            for(int m=0;m<s.size();m++) ans+=\\'9\\';\\n            return stoi(ans);\\n        }\\n        for(;j<xx.size();j++){\\n            if(xx[j]==b){\\n                xx[j] = \\'0\\';\\n            }\\n        }\\n        return stoi(x)-stoi(xx);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string x=s;\\n        int i=0;\\n        while(i<x.size() && x[i]==\\'9\\'){\\n                i++;\\n        }\\n        char a= i<x.size()?s[i]:\\'.\\';\\n        if(a==\\'.\\') return stoi(x);\\n        for(;i<x.size();i++){\\n            if(x[i]==a) x[i] = \\'9\\';\\n        }\\n        string xx=s;\\n        int j=0;\\n        while(j<xx.size() && xx[j]==\\'0\\'){\\n            j++;\\n        }\\n        char b = j<xx.size()?xx[j]:\\'.\\';\\n        if(b==\\'.\\'){\\n            string ans=\"\";\\n            for(int m=0;m<s.size();m++) ans+=\\'9\\';\\n            return stoi(ans);\\n        }\\n        for(;j<xx.size();j++){\\n            if(xx[j]==b){\\n                xx[j] = \\'0\\';\\n            }\\n        }\\n        return stoi(x)-stoi(xx);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201882,
                "title": "java-simple-solution-clean-code",
                "content": "# Code\\n```java\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        char c[] = String.valueOf(num).toCharArray();\\n        int idx = -1;\\n        for(int i = 0;i < c.length;i++){\\n            if(c[i] != \\'9\\'){\\n                idx = i;\\n                break;\\n            }\\n        }\\n        if(idx == -1) return num;\\n        int max = Integer.parseInt(String.valueOf(num).replaceAll(\"\" + c[idx],\"9\"));\\n        int min = Integer.parseInt(String.valueOf(num).replaceAll(\"\" + c[0],\"0\"));\\n        return max - min;\\n    }\\n}\\n```\\n\\n# Upvote if you like it \\uD83D\\uDC4D\\uD83D\\uDC4D",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        char c[] = String.valueOf(num).toCharArray();\\n        int idx = -1;\\n        for(int i = 0;i < c.length;i++){\\n            if(c[i] != \\'9\\'){\\n                idx = i;\\n                break;\\n            }\\n        }\\n        if(idx == -1) return num;\\n        int max = Integer.parseInt(String.valueOf(num).replaceAll(\"\" + c[idx],\"9\"));\\n        int min = Integer.parseInt(String.valueOf(num).replaceAll(\"\" + c[0],\"0\"));\\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3201866,
                "title": "c-easy-and-simple-solution-o-1-space",
                "content": "***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string temp1=to_string(num),temp2=temp1;\\n       \\n        char change=\\'-\\';\\n        for(int i=0;i<temp1.length();i++){\\n            if(temp1[i]!=\\'9\\' && change==\\'-\\'){\\n                change=temp1[i];\\n                temp1[i]=\\'9\\';\\n            }else if(temp1[i]==change){\\n                temp1[i]=\\'9\\';\\n            }\\n        }\\n         num=stoi(temp1);\\n        change=\\'-\\';\\n   \\n        for(int i=0;i<temp2.length();i++){\\n            \\n            if(temp2[i]!=\\'0\\' && change==\\'-\\'){\\n               \\n                     change=temp2[i];\\n               \\n                     temp2[i]=\\'0\\';\\n       \\n            }else if(temp2[i]==change){\\n                temp2[i]=\\'0\\';\\n            }\\n          \\n        }\\n        \\n        int num2=stoi(temp2);\\n        cout<<num2<<endl;\\n        return num-num2;\\n       \\n   \\n    }\\n};\\n\\n\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string temp1=to_string(num),temp2=temp1;\\n       \\n        char change=\\'-\\';\\n        for(int i=0;i<temp1.length();i++){\\n            if(temp1[i]!=\\'9\\' && change==\\'-\\'){\\n                change=temp1[i];\\n                temp1[i]=\\'9\\';\\n            }else if(temp1[i]==change){\\n                temp1[i]=\\'9\\';\\n            }\\n        }\\n         num=stoi(temp1);\\n        change=\\'-\\';\\n   \\n        for(int i=0;i<temp2.length();i++){\\n            \\n            if(temp2[i]!=\\'0\\' && change==\\'-\\'){\\n               \\n                     change=temp2[i];\\n               \\n                     temp2[i]=\\'0\\';\\n       \\n            }else if(temp2[i]==change){\\n                temp2[i]=\\'0\\';\\n            }\\n          \\n        }\\n        \\n        int num2=stoi(temp2);\\n        cout<<num2<<endl;\\n        return num-num2;\\n       \\n   \\n    }\\n};\\n\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4095792,
                "title": "simple-python-solution-98",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n\\n        def get_maxmin_value(pos: int, value: int):\\n            num_copy = str(num)\\n            return int( num_copy.replace( num_copy[pos], str(value) ) )\\n\\n        min_value, max_value = 0, 0\\n        max_pos, min_pos = 0, 0\\n\\n        # Find the first non-nine digit to get the max_pos\\n        # Remaping the first digit with zero will end up to the min value, So min_pos always will be 0.\\n        for max_pos, i in enumerate(str(num)):\\n            if i != \"9\":\\n               break\\n\\n        # Get the Max Value\\n        max_value = get_maxmin_value(max_pos, 9)\\n\\n        # Get the Min Value\\n        min_value = get_maxmin_value(min_pos, 0)\\n\\n        return max_value - min_value\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n\\n        def get_maxmin_value(pos: int, value: int):\\n            num_copy = str(num)\\n            return int( num_copy.replace( num_copy[pos], str(value) ) )\\n\\n        min_value, max_value = 0, 0\\n        max_pos, min_pos = 0, 0\\n\\n        # Find the first non-nine digit to get the max_pos\\n        # Remaping the first digit with zero will end up to the min value, So min_pos always will be 0.\\n        for max_pos, i in enumerate(str(num)):\\n            if i != \"9\":\\n               break\\n\\n        # Get the Max Value\\n        max_value = get_maxmin_value(max_pos, 9)\\n\\n        # Get the Min Value\\n        min_value = get_maxmin_value(min_pos, 0)\\n\\n        return max_value - min_value\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4088522,
                "title": "java-simple-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        \\n        StringBuilder min = new StringBuilder(Integer.toString(num));\\n        StringBuilder max = new StringBuilder(Integer.toString(num));\\n        \\n        char changed = min.charAt(0);\\n        for (int i = 0; i < min.length(); i++) {\\n            if (min.charAt(i) == changed) {\\n                min.setCharAt(i, \\'0\\');\\n            }\\n        }\\n\\n        int i = 0;\\n        while (i < max.length() && max.charAt(i) == \\'9\\') {\\n            i++;\\n        }\\n        if (i == max.length()) {\\n            return Integer.valueOf(max.toString()) - Integer.valueOf(min.toString()); \\n        }\\n\\n        changed = max.charAt(i);\\n        for (; i < max.length(); i++) {\\n            if (max.charAt(i) == changed) {\\n                max.setCharAt(i, \\'9\\');\\n            }\\n        }\\n\\n        return Integer.valueOf(max.toString()) - Integer.valueOf(min.toString()); \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        \\n        StringBuilder min = new StringBuilder(Integer.toString(num));\\n        StringBuilder max = new StringBuilder(Integer.toString(num));\\n        \\n        char changed = min.charAt(0);\\n        for (int i = 0; i < min.length(); i++) {\\n            if (min.charAt(i) == changed) {\\n                min.setCharAt(i, \\'0\\');\\n            }\\n        }\\n\\n        int i = 0;\\n        while (i < max.length() && max.charAt(i) == \\'9\\') {\\n            i++;\\n        }\\n        if (i == max.length()) {\\n            return Integer.valueOf(max.toString()) - Integer.valueOf(min.toString()); \\n        }\\n\\n        changed = max.charAt(i);\\n        for (; i < max.length(); i++) {\\n            if (max.charAt(i) == changed) {\\n                max.setCharAt(i, \\'9\\');\\n            }\\n        }\\n\\n        return Integer.valueOf(max.toString()) - Integer.valueOf(min.toString()); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065798,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        numstr = str(num)\\n        \\n        replacemax, replacemin = \"\", \"\"\\n\\n        # Map 1st non-zero digit to 9 to get largest number\\n        for i in numstr:\\n            if i != \\'9\\':\\n                replacemax = i\\n                break\\n        \\n        # Map 1st non-zero digit to 0 to get smallest number\\n        for i in numstr:\\n            if i != \\'0\\':\\n                replacemin = i\\n                break\\n        \\n        if replacemax != \\'\\':\\n            numstrmax = numstr.replace(replacemax, \\'9\\')\\n        else:\\n            numstrmax = numstr\\n        \\n        if replacemin != \\'\\':\\n            numstrmin = numstr.replace(replacemin, \\'0\\')\\n        else:\\n            numstrmin = numstr\\n\\n        return int(numstrmax) - int(numstrmin)\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        numstr = str(num)\\n        \\n        replacemax, replacemin = \"\", \"\"\\n\\n        # Map 1st non-zero digit to 9 to get largest number\\n        for i in numstr:\\n            if i != \\'9\\':\\n                replacemax = i\\n                break\\n        \\n        # Map 1st non-zero digit to 0 to get smallest number\\n        for i in numstr:\\n            if i != \\'0\\':\\n                replacemin = i\\n                break\\n        \\n        if replacemax != \\'\\':\\n            numstrmax = numstr.replace(replacemax, \\'9\\')\\n        else:\\n            numstrmax = numstr\\n        \\n        if replacemin != \\'\\':\\n            numstrmin = numstr.replace(replacemin, \\'0\\')\\n        else:\\n            numstrmin = numstr\\n\\n        return int(numstrmax) - int(numstrmin)\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058681,
                "title": "easy-solution-in-java",
                "content": "# Intuition\\nSolved using a bit of Strings and a bit of Maths.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        int max = 0;\\n        int min = 0;\\n        String temp = Integer.toString(num);\\n        int digit = 0;\\n        int digit_to_replace = 0;\\n        boolean not_found = true;\\n        for(int i = 0; i < temp.length(); i++)\\n        {\\n            char digitChar = temp.charAt(i);\\n            digit = Character.getNumericValue(digitChar);\\n            if(digit < 9 && not_found)\\n            {\\n                not_found = false;\\n                digit_to_replace = digit;\\n            }\\n            if(digit == digit_to_replace)\\n                digit = 9;\\n            max += digit * Math.pow(10,(temp.length() -1) - i);\\n        }\\n        not_found = true;\\n        for(int i = 0; i < temp.length(); i++)\\n        {\\n            char digitChar = temp.charAt(i);\\n            digit = Character.getNumericValue(digitChar);\\n            if(digit > 0 && not_found)\\n            {\\n                not_found = false;\\n                digit_to_replace = digit;\\n            }\\n            if(digit == digit_to_replace)\\n                digit = 0;\\n            min += digit * Math.pow(10,(temp.length() -1) - i);\\n        }\\n    return max-min;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        int max = 0;\\n        int min = 0;\\n        String temp = Integer.toString(num);\\n        int digit = 0;\\n        int digit_to_replace = 0;\\n        boolean not_found = true;\\n        for(int i = 0; i < temp.length(); i++)\\n        {\\n            char digitChar = temp.charAt(i);\\n            digit = Character.getNumericValue(digitChar);\\n            if(digit < 9 && not_found)\\n            {\\n                not_found = false;\\n                digit_to_replace = digit;\\n            }\\n            if(digit == digit_to_replace)\\n                digit = 9;\\n            max += digit * Math.pow(10,(temp.length() -1) - i);\\n        }\\n        not_found = true;\\n        for(int i = 0; i < temp.length(); i++)\\n        {\\n            char digitChar = temp.charAt(i);\\n            digit = Character.getNumericValue(digitChar);\\n            if(digit > 0 && not_found)\\n            {\\n                not_found = false;\\n                digit_to_replace = digit;\\n            }\\n            if(digit == digit_to_replace)\\n                digit = 0;\\n            min += digit * Math.pow(10,(temp.length() -1) - i);\\n        }\\n    return max-min;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049959,
                "title": "c-the-easiest-solution-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        var numberString = num.ToString();\\n        var numberArray = numberString.Select(c=>c.ToString()).ToArray();\\n\\n        //Calculate the ith position of the first non 9 number\\n        var i=0;\\n        while(i < numberArray.Length - 1 && numberArray[i] == \"9\"){\\n            i++;\\n        }\\n        \\n        string number1 = numberString.Replace(numberArray[i],\"9\");\\n        string number2 = numberString.Replace(numberArray[0],\"0\");\\n        return int.Parse(number1) - int.Parse(number2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        var numberString = num.ToString();\\n        var numberArray = numberString.Select(c=>c.ToString()).ToArray();\\n\\n        //Calculate the ith position of the first non 9 number\\n        var i=0;\\n        while(i < numberArray.Length - 1 && numberArray[i] == \"9\"){\\n            i++;\\n        }\\n        \\n        string number1 = numberString.Replace(numberArray[i],\"9\");\\n        string number2 = numberString.Replace(numberArray[0],\"0\");\\n        return int.Parse(number1) - int.Parse(number2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048622,
                "title": "change-the-leftmost-value",
                "content": "# Intuition\\nTo get the max value, always try to make 9 the leftmost value, if its already 9, turn the 2nd to leftmost into a 9 and so on.\\nTo get the max value, always try to make 0 the leftmost value, if its already 0, turn the 2nd to leftmost into a 0 and so on.\\n\\n\\n# Approach\\nTo set the max value, search the leftmost digit that is not a 9 and change all those into 9s.\\n\\nTo set the min value, search the leftmost digit that is not a 0 and change all those into 0s.\\n\\nThen substract both values.\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        strNum = str(num)\\n        minNum = self._setMin(strNum)\\n        print(minNum)\\n        maxNum = self._setMax(strNum)\\n        print(maxNum)\\n\\n        return maxNum - minNum\\n\\n    def _setMax(num, strNum):\\n        digitToChange = \"9\"\\n        for digit in strNum:\\n            if digit != \"9\":\\n                digitToChange = digit\\n                break\\n\\n        i = 0\\n        for digit in strNum:\\n            if digit == digitToChange:\\n                strNum = strNum[:i] + \"9\" + strNum[i + 1 :]\\n            i += 1\\n\\n        return int(strNum)\\n\\n    def _setMin(num, strNum):\\n        digitToChange = \"0\"\\n        for digit in strNum:\\n            if digit != \"0\":\\n                digitToChange = digit\\n                break\\n\\n        i = 0\\n        for digit in strNum:\\n            if digit == digitToChange:\\n                strNum = strNum[:i] + \"0\" + strNum[i + 1 :]\\n            i += 1\\n\\n        return int(strNum)\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        strNum = str(num)\\n        minNum = self._setMin(strNum)\\n        print(minNum)\\n        maxNum = self._setMax(strNum)\\n        print(maxNum)\\n\\n        return maxNum - minNum\\n\\n    def _setMax(num, strNum):\\n        digitToChange = \"9\"\\n        for digit in strNum:\\n            if digit != \"9\":\\n                digitToChange = digit\\n                break\\n\\n        i = 0\\n        for digit in strNum:\\n            if digit == digitToChange:\\n                strNum = strNum[:i] + \"9\" + strNum[i + 1 :]\\n            i += 1\\n\\n        return int(strNum)\\n\\n    def _setMin(num, strNum):\\n        digitToChange = \"0\"\\n        for digit in strNum:\\n            if digit != \"0\":\\n                digitToChange = digit\\n                break\\n\\n        i = 0\\n        for digit in strNum:\\n            if digit == digitToChange:\\n                strNum = strNum[:i] + \"0\" + strNum[i + 1 :]\\n            i += 1\\n\\n        return int(strNum)\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048017,
                "title": "simple-c-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string s1 = s;\\n        bool flag = false;\\n        char b = \\'a\\';\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'9\\')continue;\\n            if(flag==false){\\n                flag = true;\\n                b= s[i];\\n                s[i]=\\'9\\';\\n            }\\n            else{\\n                if(s[i]==b)s[i]=\\'9\\';\\n            }\\n        }\\n        int num1 = stoi(s);\\n        char a = s1[0];\\n        for(int i=0;i<s1.length();i++){\\n            if(s1[i]==a)s1[i]=\\'0\\';\\n        }\\n        int num2 = stoi(s1);\\n    return num1-num2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string s1 = s;\\n        bool flag = false;\\n        char b = \\'a\\';\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'9\\')continue;\\n            if(flag==false){\\n                flag = true;\\n                b= s[i];\\n                s[i]=\\'9\\';\\n            }\\n            else{\\n                if(s[i]==b)s[i]=\\'9\\';\\n            }\\n        }\\n        int num1 = stoi(s);\\n        char a = s1[0];\\n        for(int i=0;i<s1.length();i++){\\n            if(s1[i]==a)s1[i]=\\'0\\';\\n        }\\n        int num2 = stoi(s1);\\n    return num1-num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038328,
                "title": "python-simple-solution-math-string",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```python\\nclass Solution:\\n  def minMaxDifference(self, num: int) -> int:\\n    max_replace = \\'\\'\\n    num_str = str(num)\\n    for s in num_str:\\n      if s != \\'9\\':\\n        max_replace = s\\n        break\\n    max_ = num\\n    if max_replace != \\'\\':\\n      max_ = int(num_str.replace(max_replace, \\'9\\'))\\n    num_str = str(num)\\n    min_ = int(num_str.replace(num_str[0], \\'0\\'))\\n    return max_ - min_\\n```\\n",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```python\\nclass Solution:\\n  def minMaxDifference(self, num: int) -> int:\\n    max_replace = \\'\\'\\n    num_str = str(num)\\n    for s in num_str:\\n      if s != \\'9\\':\\n        max_replace = s\\n        break\\n    max_ = num\\n    if max_replace != \\'\\':\\n      max_ = int(num_str.replace(max_replace, \\'9\\'))\\n    num_str = str(num)\\n    min_ = int(num_str.replace(num_str[0], \\'0\\'))\\n    return max_ - min_\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023774,
                "title": "basic-java-soln-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String s=Integer.toString(num);\\n        int max=Integer.parseInt(s.replace(s.charAt(0),\\'9\\'));\\n        if(max==num){\\n            for(int i=1;i<s.length();i++){\\n                if(s.charAt(i)!=\\'9\\'){\\n                    max=Integer.parseInt(s.replace(s.charAt(i),\\'9\\'));\\n                    break;\\n                }\\n            }\\n        }\\n        s=Integer.toString(num);\\n        int min=Integer.parseInt(s.replace(s.charAt(0),\\'0\\'));\\n        return max-min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String s=Integer.toString(num);\\n        int max=Integer.parseInt(s.replace(s.charAt(0),\\'9\\'));\\n        if(max==num){\\n            for(int i=1;i<s.length();i++){\\n                if(s.charAt(i)!=\\'9\\'){\\n                    max=Integer.parseInt(s.replace(s.charAt(i),\\'9\\'));\\n                    break;\\n                }\\n            }\\n        }\\n        s=Integer.toString(num);\\n        int min=Integer.parseInt(s.replace(s.charAt(0),\\'0\\'));\\n        return max-min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983855,
                "title": "simple-and-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar minMaxDifference = function (num) {\\n  const numStr = num.toString();\\n  let maximum = num;\\n  let minimum = num;\\n\\n  for (let i = 0; i <= 9; i++) {\\n    const replaced = numStr.replace(new RegExp(i, \\'g\\'), \\'9\\');\\n    maximum = Math.max(maximum, parseInt(replaced));\\n\\n    if (i !== 0) {\\n      const replacedWithZero = numStr.replace(new RegExp(i, \\'g\\'), \\'0\\');\\n      minimum = Math.min(minimum, parseInt(replacedWithZero));\\n    }\\n  }\\n\\n  return maximum - minimum;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minMaxDifference = function (num) {\\n  const numStr = num.toString();\\n  let maximum = num;\\n  let minimum = num;\\n\\n  for (let i = 0; i <= 9; i++) {\\n    const replaced = numStr.replace(new RegExp(i, \\'g\\'), \\'9\\');\\n    maximum = Math.max(maximum, parseInt(replaced));\\n\\n    if (i !== 0) {\\n      const replacedWithZero = numStr.replace(new RegExp(i, \\'g\\'), \\'0\\');\\n      minimum = Math.min(minimum, parseInt(replacedWithZero));\\n    }\\n  }\\n\\n  return maximum - minimum;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3977320,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a=str(num)\\n        b=\\'\\'\\n        c=\\'\\'\\n        d=\\'\\'\\n        e=\\'\\'\\n        f=\\'\\'\\n        for i in a :\\n            if i!=\\'9\\' :\\n                b+=i\\n                break\\n        for i in a :\\n            if i!=\\'0\\' :\\n                e+=i\\n                break\\n        for i in a :\\n            if i!=b :\\n                c+=i\\n            else :\\n                c+=\\'9\\'\\n            if i!=e :\\n                f+=i\\n            else :\\n                f+=\\'0\\'\\n        return int(c)-int(f)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a=str(num)\\n        b=\\'\\'\\n        c=\\'\\'\\n        d=\\'\\'\\n        e=\\'\\'\\n        f=\\'\\'\\n        for i in a :\\n            if i!=\\'9\\' :\\n                b+=i\\n                break\\n        for i in a :\\n            if i!=\\'0\\' :\\n                e+=i\\n                break\\n        for i in a :\\n            if i!=b :\\n                c+=i\\n            else :\\n                c+=\\'9\\'\\n            if i!=e :\\n                f+=i\\n            else :\\n                f+=\\'0\\'\\n        return int(c)-int(f)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3973906,
                "title": "o-logn-time-c",
                "content": "![image.png](https://assets.leetcode.com/users/images/e96daee6-2f39-46f7-a159-d9aa09e22d12_1693271407.5745378.png)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int d1 = 0;\\n        string n;\\n        while(num) {\\n            if(num % 10 != 9) d1 = num % 10;\\n            n = char((num % 10) + \\'0\\') + n;\\n            num /= 10;\\n        }\\n        int d2 = n[0] - \\'0\\', mx = 0, mn = 0;\\n        for(int i = 0; i < n.size(); i++) {\\n            mx = (n[i] - \\'0\\' == d1 ? mx * 10 + 9 : mx * 10 + (n[i] - \\'0\\'));\\n            mn = (n[i] - \\'0\\' == d2 ? mn * 10 : mn * 10 + (n[i] - \\'0\\'));\\n        }\\n        return mx - mn;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int d1 = 0;\\n        string n;\\n        while(num) {\\n            if(num % 10 != 9) d1 = num % 10;\\n            n = char((num % 10) + \\'0\\') + n;\\n            num /= 10;\\n        }\\n        int d2 = n[0] - \\'0\\', mx = 0, mn = 0;\\n        for(int i = 0; i < n.size(); i++) {\\n            mx = (n[i] - \\'0\\' == d1 ? mx * 10 + 9 : mx * 10 + (n[i] - \\'0\\'));\\n            mn = (n[i] - \\'0\\' == d2 ? mn * 10 : mn * 10 + (n[i] - \\'0\\'));\\n        }\\n        return mx - mn;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964686,
                "title": "the-fastest-in-dart",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\n  int minMaxDifference(int num) {\\n    String temp = num.toString();\\n    String temp2 = num.toString();\\n    int n = temp.length;\\n\\n    int chI = -1;\\n\\n    for (int i = 0; i < n; i++) {\\n      if (temp[i] != \\'9\\') {\\n        chI = i;\\n        break;\\n      }\\n    }\\n\\n    if (chI != -1) {\\n      String c = temp[chI];\\n      temp = temp.replaceRange(chI, chI + 1, \\'9\\');\\n\\n      for (int i = chI + 1; i < n; i++) {\\n        if (temp[i] == c) {\\n          temp = temp.replaceRange(i, i + 1, \\'9\\');\\n        }\\n      }\\n    }\\n\\n    int chI2 = -1;\\n    for (int j = 0; j < n; j++) {\\n      if (temp2[j] != \\'0\\') {\\n        chI2 = j;\\n        break;\\n      }\\n    }\\n\\n    if (chI2 != -1) {\\n      String c = temp2[chI2];\\n      temp2 = temp2.replaceRange(chI2, chI2 + 1, \\'0\\');\\n      for (int i = chI2 + 1; i < n; i++) {\\n        if (temp2[i] == c) {\\n          temp2 = temp2.replaceRange(i, i + 1, \\'0\\');\\n        }\\n      }\\n    }\\n\\n    int nums1 = int.parse(temp);\\n    int nums2 = int.parse(temp2);\\n    return nums1 - nums2;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int minMaxDifference(int num) {\\n    String temp = num.toString();\\n    String temp2 = num.toString();\\n    int n = temp.length;\\n\\n    int chI = -1;\\n\\n    for (int i = 0; i < n; i++) {\\n      if (temp[i] != \\'9\\') {\\n        chI = i;\\n        break;\\n      }\\n    }\\n\\n    if (chI != -1) {\\n      String c = temp[chI];\\n      temp = temp.replaceRange(chI, chI + 1, \\'9\\');\\n\\n      for (int i = chI + 1; i < n; i++) {\\n        if (temp[i] == c) {\\n          temp = temp.replaceRange(i, i + 1, \\'9\\');\\n        }\\n      }\\n    }\\n\\n    int chI2 = -1;\\n    for (int j = 0; j < n; j++) {\\n      if (temp2[j] != \\'0\\') {\\n        chI2 = j;\\n        break;\\n      }\\n    }\\n\\n    if (chI2 != -1) {\\n      String c = temp2[chI2];\\n      temp2 = temp2.replaceRange(chI2, chI2 + 1, \\'0\\');\\n      for (int i = chI2 + 1; i < n; i++) {\\n        if (temp2[i] == c) {\\n          temp2 = temp2.replaceRange(i, i + 1, \\'0\\');\\n        }\\n      }\\n    }\\n\\n    int nums1 = int.parse(temp);\\n    int nums2 = int.parse(temp2);\\n    return nums1 - nums2;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3886114,
                "title": "python-simple-python-solution",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 40 ms, faster than 74.50% of Python3 online submissions for Maximum Difference by Remapping a Digit.\\n# Memory Usage: 16.4 MB, less than 37.05% of Python3 online submissions for Maximum Difference by Remapping a Digit.\\n\\n\\tclass Solution:\\n\\t\\tdef minMaxDifference(self, num: int) -> int:\\n\\n\\t\\t\\tdigits = str(num)\\n\\n\\t\\t\\tfirst_digit_max , first_digit_min = \\'\\' , \\'\\'\\n\\n\\t\\t\\tfor digit in digits:\\n\\n\\t\\t\\t\\tif digit != \\'9\\' and first_digit_max == \\'\\':\\n\\t\\t\\t\\t\\tfirst_digit_max = digit\\n\\n\\t\\t\\t\\tif digit != \\'0\\' and first_digit_min == \\'\\':\\n\\t\\t\\t\\t\\tfirst_digit_min = digit\\n\\n\\t\\t\\tif first_digit_max == \\'\\':\\n\\t\\t\\t\\treturn num\\n\\n\\t\\t\\tmax_value = digits.replace(first_digit_max , \\'9\\')\\n\\n\\t\\t\\tmin_value = digits.replace(first_digit_min , \\'0\\')\\n\\n\\t\\t\\tresult = int(max_value) - int(min_value)\\n\\n\\t\\t\\treturn result\\n\\t\\t\\t\\n\\tTime Complexity : O(n)\\n\\tSpace Complexity : O(1)\\n\\t\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "String",
                    "Greedy"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 40 ms, faster than 74.50% of Python3 online submissions for Maximum Difference by Remapping a Digit.\\n# Memory Usage: 16.4 MB, less than 37.05% of Python3 online submissions for Maximum Difference by Remapping a Digit.\\n\\n\\tclass Solution:\\n\\t\\tdef minMaxDifference(self, num: int) -> int:\\n\\n\\t\\t\\tdigits = str(num)\\n\\n\\t\\t\\tfirst_digit_max , first_digit_min = \\'\\' , \\'\\'\\n\\n\\t\\t\\tfor digit in digits:\\n\\n\\t\\t\\t\\tif digit != \\'9\\' and first_digit_max == \\'\\':\\n\\t\\t\\t\\t\\tfirst_digit_max = digit\\n\\n\\t\\t\\t\\tif digit != \\'0\\' and first_digit_min == \\'\\':\\n\\t\\t\\t\\t\\tfirst_digit_min = digit\\n\\n\\t\\t\\tif first_digit_max == \\'\\':\\n\\t\\t\\t\\treturn num\\n\\n\\t\\t\\tmax_value = digits.replace(first_digit_max , \\'9\\')\\n\\n\\t\\t\\tmin_value = digits.replace(first_digit_min , \\'0\\')\\n\\n\\t\\t\\tresult = int(max_value) - int(min_value)\\n\\n\\t\\t\\treturn result\\n\\t\\t\\t\\n\\tTime Complexity : O(n)\\n\\tSpace Complexity : O(1)\\n\\t\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3864910,
                "title": "java-2ms-beats-41-71",
                "content": "# Intuition & Approach\\nTransform integers to lists of digits and process them that way. Then transform lists of digits back to integers for the final subtraction.\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n\\n        LinkedList<Integer> origNumList = convertIntToList(num);\\n\\n        // to get maximum, change leftmost non-9 digit to a 9\\n        LinkedList<Integer> maxNumList = new LinkedList<>(origNumList);\\n        for (int i = 0; i < maxNumList.size(); ++i) {\\n            if (maxNumList.get(i) != 9) {\\n                int d1 = maxNumList.get(i);\\n                for (int j = i; j < maxNumList.size(); ++j) {\\n                    if (maxNumList.get(j) == d1) {\\n                        maxNumList.set(j, 9);\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n\\n        // to get minimum, change leftmost non-0 digit to 0\\n        LinkedList<Integer> minNumList = new LinkedList<>(origNumList);\\n        for (int i = 0; i < minNumList.size(); ++i) {\\n            if (minNumList.get(i) != 0) {\\n                int d1 = minNumList.get(i);\\n                for (int j = i; j < minNumList.size(); ++j) {\\n                    if (minNumList.get(j) == d1) {\\n                        minNumList.set(j, 0);\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n\\n        return convertListToInt(maxNumList) - convertListToInt(minNumList);\\n    }\\n\\n    private LinkedList<Integer> convertIntToList(int n) {\\n        LinkedList<Integer> list = new LinkedList<>();\\n        while (n > 0) {\\n            list.addFirst(n % 10);\\n            n /= 10;\\n        }\\n        return list;\\n    }\\n\\n    private int convertListToInt(LinkedList<Integer> list) {\\n        int sum = 0;\\n        int power = 1;\\n        while (!list.isEmpty()) {\\n            sum += list.removeLast() * power;\\n            power *= 10;\\n        }\\n        return sum;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n\\n        LinkedList<Integer> origNumList = convertIntToList(num);\\n\\n        // to get maximum, change leftmost non-9 digit to a 9\\n        LinkedList<Integer> maxNumList = new LinkedList<>(origNumList);\\n        for (int i = 0; i < maxNumList.size(); ++i) {\\n            if (maxNumList.get(i) != 9) {\\n                int d1 = maxNumList.get(i);\\n                for (int j = i; j < maxNumList.size(); ++j) {\\n                    if (maxNumList.get(j) == d1) {\\n                        maxNumList.set(j, 9);\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n\\n        // to get minimum, change leftmost non-0 digit to 0\\n        LinkedList<Integer> minNumList = new LinkedList<>(origNumList);\\n        for (int i = 0; i < minNumList.size(); ++i) {\\n            if (minNumList.get(i) != 0) {\\n                int d1 = minNumList.get(i);\\n                for (int j = i; j < minNumList.size(); ++j) {\\n                    if (minNumList.get(j) == d1) {\\n                        minNumList.set(j, 0);\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n\\n        return convertListToInt(maxNumList) - convertListToInt(minNumList);\\n    }\\n\\n    private LinkedList<Integer> convertIntToList(int n) {\\n        LinkedList<Integer> list = new LinkedList<>();\\n        while (n > 0) {\\n            list.addFirst(n % 10);\\n            n /= 10;\\n        }\\n        return list;\\n    }\\n\\n    private int convertListToInt(LinkedList<Integer> list) {\\n        int sum = 0;\\n        int power = 1;\\n        while (!list.isEmpty()) {\\n            sum += list.removeLast() * power;\\n            power *= 10;\\n        }\\n        return sum;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861082,
                "title": "easy-cpp-solution-beats-100-in-runtime-using-to-string-function",
                "content": "![image.png](https://assets.leetcode.com/users/images/f08ea107-94f1-4b94-b7e0-1aa20801db1e_1691125280.383094.png)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string mini = to_string(num);\\n        string maxi = to_string(num);\\n        // flags to get the first digit which needed to be changed to \\n        // convert the num to minimum or maximum\\n        char tochangemx = \\'a\\', tochangemi = \\'a\\';\\n        for(int i=0; i<maxi.length(); i++){\\n            if(maxi[i] != \\'9\\' && tochangemx == \\'a\\'){\\n                tochangemx = maxi[i];\\n                maxi[i] = \\'9\\';\\n            }\\n            else if(maxi[i] == tochangemx)\\n                maxi[i] = \\'9\\';\\n\\n            if(mini[i] != \\'0\\' && tochangemi == \\'a\\'){\\n                tochangemi = mini[i];\\n                mini[i] = \\'0\\';\\n            }\\n            else if(mini[i] == tochangemi)\\n                mini[i] = \\'0\\';\\n        }\\n        return stoi(maxi) - stoi(mini);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string mini = to_string(num);\\n        string maxi = to_string(num);\\n        // flags to get the first digit which needed to be changed to \\n        // convert the num to minimum or maximum\\n        char tochangemx = \\'a\\', tochangemi = \\'a\\';\\n        for(int i=0; i<maxi.length(); i++){\\n            if(maxi[i] != \\'9\\' && tochangemx == \\'a\\'){\\n                tochangemx = maxi[i];\\n                maxi[i] = \\'9\\';\\n            }\\n            else if(maxi[i] == tochangemx)\\n                maxi[i] = \\'9\\';\\n\\n            if(mini[i] != \\'0\\' && tochangemi == \\'a\\'){\\n                tochangemi = mini[i];\\n                mini[i] = \\'0\\';\\n            }\\n            else if(mini[i] == tochangemi)\\n                mini[i] = \\'0\\';\\n        }\\n        return stoi(maxi) - stoi(mini);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3857300,
                "title": "helper-function-vs-two-for-loops",
                "content": "## Two for loops\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num_max = str(num)\\n        num_min = num_max\\n        for digit in num_max:\\n            if digit != \"9\":\\n                num_max = num_max.replace(digit, \"9\")\\n                break\\n        \\n        for digit in num_min:\\n            if digit != \"0\":\\n                num_min = num_min.replace(digit, \"0\")\\n                break\\n        \\n        return int(num_max) - int(num_min)\\n```\\n\\n## Helper function\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num = str(num)\\n\\n        def repl(digit: str, number: str) -> int:\\n            for i in number:\\n                if i != digit:\\n                    return int(number.replace(i, digit))\\n            return int(number)\\n       \\n        return repl(\"9\", num) - repl(\"0\", num)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num_max = str(num)\\n        num_min = num_max\\n        for digit in num_max:\\n            if digit != \"9\":\\n                num_max = num_max.replace(digit, \"9\")\\n                break\\n        \\n        for digit in num_min:\\n            if digit != \"0\":\\n                num_min = num_min.replace(digit, \"0\")\\n                break\\n        \\n        return int(num_max) - int(num_min)\\n```\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num = str(num)\\n\\n        def repl(digit: str, number: str) -> int:\\n            for i in number:\\n                if i != digit:\\n                    return int(number.replace(i, digit))\\n            return int(number)\\n       \\n        return repl(\"9\", num) - repl(\"0\", num)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3853595,
                "title": "python-easy-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        x=num\\n        p=str(num)\\n        p=list(p)\\n        n=len(p)\\n        q=list(p)\\n        g=-1\\n        for i in range(n):\\n            if(int(p[i])<9):\\n                g=p[i]\\n                break\\n        s=q[0]\\n        for i in range(n):\\n            if(int(q[i])==int(s)):\\n                \\n                q[i]=\"0\"\\n        if(g!=-1):\\n            for i in range(n):\\n                if(p[i]==g):\\n                    p[i]=\"9\"\\n                    \\n        return abs(int(\"\".join(p))-int(\"\".join(q)))\\n\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        x=num\\n        p=str(num)\\n        p=list(p)\\n        n=len(p)\\n        q=list(p)\\n        g=-1\\n        for i in range(n):\\n            if(int(p[i])<9):\\n                g=p[i]\\n                break\\n        s=q[0]\\n        for i in range(n):\\n            if(int(q[i])==int(s)):\\n                \\n                q[i]=\"0\"\\n        if(g!=-1):\\n            for i in range(n):\\n                if(p[i]==g):\\n                    p[i]=\"9\"\\n                    \\n        return abs(int(\"\".join(p))-int(\"\".join(q)))\\n\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3825915,
                "title": "brute-force-just-replace-start-on-9-and-0",
                "content": "# Intuition\\n\\nBrute force - just replace start on 9 and 0\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        final var str = String.valueOf(num);\\n        final var n = str.length();\\n\\n        var max = \"\";\\n        var min = \"0\";\\n\\n        var start = 0;\\n        var maxChar = str.charAt(start);\\n        while(maxChar == \\'9\\' && start < n - 1){\\n            max += str.charAt(start);\\n            start++;\\n            maxChar = str.charAt(start);\\n        }\\n        for(int i = start; i < n; i++){\\n            final var c = str.charAt(i);\\n            if(c != maxChar){\\n                max += c;\\n            }else{\\n                max += \"9\";\\n            }\\n        }\\n\\n        final var minChar = str.charAt(0);\\n        for(int i = 1; i < n; i++){\\n            final var c = str.charAt(i);\\n            if(c != minChar){\\n                min += c;\\n            }else{\\n                min += \"0\";\\n            }\\n        }\\n\\n        return Integer.parseInt(max) - Integer.parseInt(min);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        final var str = String.valueOf(num);\\n        final var n = str.length();\\n\\n        var max = \"\";\\n        var min = \"0\";\\n\\n        var start = 0;\\n        var maxChar = str.charAt(start);\\n        while(maxChar == \\'9\\' && start < n - 1){\\n            max += str.charAt(start);\\n            start++;\\n            maxChar = str.charAt(start);\\n        }\\n        for(int i = start; i < n; i++){\\n            final var c = str.charAt(i);\\n            if(c != maxChar){\\n                max += c;\\n            }else{\\n                max += \"9\";\\n            }\\n        }\\n\\n        final var minChar = str.charAt(0);\\n        for(int i = 1; i < n; i++){\\n            final var c = str.charAt(i);\\n            if(c != minChar){\\n                min += c;\\n            }else{\\n                min += \"0\";\\n            }\\n        }\\n\\n        return Integer.parseInt(max) - Integer.parseInt(min);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3764759,
                "title": "simple-kotlin-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    fun minMaxDifference(num: Int): Int {\\n        val numAsString = num.toString()\\n        val digitToMax = numAsString.firstOrNull { it < \\'9\\' }\\n    \\n        val max = if (digitToMax != null)\\n                    numAsString.replace(digitToMax, \\'9\\')\\n                  else numAsString\\n        val min = numAsString.replace(numAsString.first(), \\'0\\')\\n\\n        return max.toInt() - min.toInt()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun minMaxDifference(num: Int): Int {\\n        val numAsString = num.toString()\\n        val digitToMax = numAsString.firstOrNull { it < \\'9\\' }\\n    \\n        val max = if (digitToMax != null)\\n                    numAsString.replace(digitToMax, \\'9\\')\\n                  else numAsString\\n        val min = numAsString.replace(numAsString.first(), \\'0\\')\\n\\n        return max.toInt() - min.toInt()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3743020,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    num = num.toString()\\n    let max = 0\\n    let element = 0\\n    for (let i = 0; i < num.length; i++) {\\n        if (num[i] != \\'9\\') {\\n            element = num[i]\\n            break;\\n        }\\n    }\\n    max = num.replaceAll(element, \"9\") \\n    let min = num.replaceAll(num[0], \"0\")\\n    return max - min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    num = num.toString()\\n    let max = 0\\n    let element = 0\\n    for (let i = 0; i < num.length; i++) {\\n        if (num[i] != \\'9\\') {\\n            element = num[i]\\n            break;\\n        }\\n    }\\n    max = num.replaceAll(element, \"9\") \\n    let min = num.replaceAll(num[0], \"0\")\\n    return max - min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3739713,
                "title": "find-the-indices-of-digits-to-replace",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String numStr = String.valueOf(num);\\n        int minIndex = -1, maxIndex = -1;\\n        for(int i = 0; i < numStr.length(); i++) {\\n            if(numStr.charAt(i) != \\'9\\' && maxIndex == -1) maxIndex = i;\\n            if(numStr.charAt(i) != \\'0\\' && minIndex == -1) minIndex = i;\\n            if(minIndex != -1 && maxIndex != -1)\\n                break;\\n        }\\n        int min = num;\\n        if(minIndex != -1) min = Integer.parseInt(numStr.replace(numStr.charAt(minIndex), \\'0\\'));\\n        int max = num;\\n        if(maxIndex != -1) max = Integer.parseInt(numStr.replace(numStr.charAt(maxIndex), \\'9\\'));\\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String numStr = String.valueOf(num);\\n        int minIndex = -1, maxIndex = -1;\\n        for(int i = 0; i < numStr.length(); i++) {\\n            if(numStr.charAt(i) != \\'9\\' && maxIndex == -1) maxIndex = i;\\n            if(numStr.charAt(i) != \\'0\\' && minIndex == -1) minIndex = i;\\n            if(minIndex != -1 && maxIndex != -1)\\n                break;\\n        }\\n        int min = num;\\n        if(minIndex != -1) min = Integer.parseInt(numStr.replace(numStr.charAt(minIndex), \\'0\\'));\\n        int max = num;\\n        if(maxIndex != -1) max = Integer.parseInt(numStr.replace(numStr.charAt(maxIndex), \\'9\\'));\\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3735969,
                "title": "c-beginner-friendly-best-method-o-logn-beats-99-fast-and-easy",
                "content": "# Intuition\\nThe initial intuition while approaching this problem can be to consider digits fulfilling the criteria either:\\n1. Digit with max occurences in the number.\\n2. Digit with highest place value.\\n3. Smallest digit in a number.\\n\\nBut on evaluation, you will find that the place value factor overpowers the other two criterias.\\n\\n# Approach\\nMax: To get the max number possible, select the highest place value digit which is not 9 and replace all possible occurences of that digit with 9.\\n\\nMin: Select the highest place value digit (num[0]) [even if this digit is 9] and replace all occurences of this number with 0.\\n\\nGet the difference of the max-min: Voila!\\n\\n# Complexity\\n# - Time complexity: O(log(num))\\n\\n1. Converting the input number to a string using to_string(num) takes O(log(num)) time, where log denotes the logarithm with base 10.\\n2. The first while loop iterates through the string until it finds the first digit that is not equal to 9. In the worst case, all digits could be 9, so this loop can iterate up to O(log(num)) times.\\n3. The second while loop iterates through the string once and performs constant time operations inside the loop. Therefore, it also takes O(log(num)) time.\\n\\n* Overall, the time complexity of the code is O(log(num))\\n\\n# **- Space complexity: O(log(num))**\\n1. The string s is used to store the string representation of the input number. Its length is equal to the number of digits in the input number, which is O(log(num)).\\n2. The remaining variables (n, i, m, max, min, copy, and digit) are all single integers or constants, so they require constant space.\\n\\n* Therefore, the space complexity of the code is O(log(num)).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s;\\n        int n=0;\\n        int i=0;\\n        s=to_string(num);\\n        int m=s[0]-\\'0\\';\\n        // cout<<\"M:\"<<m<<endl;\\n        while(i<s.size()){\\n            if(s[i]!=\\'9\\'){\\n                n=s[i]-\\'0\\';\\n                break;\\n            }\\n            i++;\\n        }\\n        i=0;\\n        int max=0;\\n        int min=0;\\n        int copy=0;\\n        int digit=0;\\n        while(i<s.size()){\\n            digit=s[i]-\\'0\\';\\n            if(digit==n){\\n                digit=9;\\n            }\\n            max=max*10+digit;\\n            i++;\\n        }\\n        i=0;\\n        while(i<s.size()){\\n            digit=s[i]-\\'0\\';\\n            if(digit==m){\\n                digit=0;\\n            }\\n            min=min*10+digit;\\n            i++;\\n        }\\n        // cout<<max<<endl;\\n        // cout<<min<<endl;\\n        return max-min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s;\\n        int n=0;\\n        int i=0;\\n        s=to_string(num);\\n        int m=s[0]-\\'0\\';\\n        // cout<<\"M:\"<<m<<endl;\\n        while(i<s.size()){\\n            if(s[i]!=\\'9\\'){\\n                n=s[i]-\\'0\\';\\n                break;\\n            }\\n            i++;\\n        }\\n        i=0;\\n        int max=0;\\n        int min=0;\\n        int copy=0;\\n        int digit=0;\\n        while(i<s.size()){\\n            digit=s[i]-\\'0\\';\\n            if(digit==n){\\n                digit=9;\\n            }\\n            max=max*10+digit;\\n            i++;\\n        }\\n        i=0;\\n        while(i<s.size()){\\n            digit=s[i]-\\'0\\';\\n            if(digit==m){\\n                digit=0;\\n            }\\n            min=min*10+digit;\\n            i++;\\n        }\\n        // cout<<max<<endl;\\n        // cout<<min<<endl;\\n        return max-min;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3706980,
                "title": "very-simple-c-code",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe have to select 1st element from start which is not \\'9\\' and change all its occurances to \\'9\\' which will give us max Values.\\n\\nOn the other hand we have to change 1st element and all its occurances to zero to get minimum.\\n\\nmake sure to use string for the easy traversal.\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nWe can maximum traverse whole string of length N.\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nNo extra space have been used\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str = to_string(num);\\n        \\n        char check1=str[0];\\n        char check2 = str[0];\\n        for(int i=0 ; i<str.length() ; i++){\\n            if(str[i] != \\'9\\'){\\n                check1 = str[i];\\n                break;\\n            }    \\n        }\\n        \\n        string str_max = str;\\n        string str_min = str;\\n        \\n        int i=0;\\n        while(i<str.length()){\\n            if(str_max[i] == check1){\\n                str_max[i] = \\'9\\';\\n            }\\n            \\n            if(str_min[i] == check2){\\n                str_min[i] = \\'0\\';\\n            }\\n            \\n            i++;\\n        }\\n        \\n        int maxNum = stoi(str_max);\\n        int minNum = stoi(str_min);\\n        \\n        return (maxNum-minNum);\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string str = to_string(num);\\n        \\n        char check1=str[0];\\n        char check2 = str[0];\\n        for(int i=0 ; i<str.length() ; i++){\\n            if(str[i] != \\'9\\'){\\n                check1 = str[i];\\n                break;\\n            }    \\n        }\\n        \\n        string str_max = str;\\n        string str_min = str;\\n        \\n        int i=0;\\n        while(i<str.length()){\\n            if(str_max[i] == check1){\\n                str_max[i] = \\'9\\';\\n            }\\n            \\n            if(str_min[i] == check2){\\n                str_min[i] = \\'0\\';\\n            }\\n            \\n            i++;\\n        }\\n        \\n        int maxNum = stoi(str_max);\\n        int minNum = stoi(str_min);\\n        \\n        return (maxNum-minNum);\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3703204,
                "title": "python-greedy-solution",
                "content": "# Intuition\\n--> Replace the occurances of first non 9 digit with 9 to get max value.\\n--> Replace the occurances of first non 0 digit with 0 to get min value.\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        maxnum=str(num)\\n        minnum=str(num)\\n        for x in maxnum:\\n            if x!=\"9\":\\n                maxnum=maxnum.replace(x,\"9\")\\n                break\\n        for x in minnum:\\n            if x!=\"0\":\\n                minnum=minnum.replace(x,\"0\")\\n                break\\n        return int(maxnum)-int(minnum)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        maxnum=str(num)\\n        minnum=str(num)\\n        for x in maxnum:\\n            if x!=\"9\":\\n                maxnum=maxnum.replace(x,\"9\")\\n                break\\n        for x in minnum:\\n            if x!=\"0\":\\n                minnum=minnum.replace(x,\"0\")\\n                break\\n        return int(maxnum)-int(minnum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3702563,
                "title": "shortest-easiest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int n) {\\n        string s=to_string(n);\\n        string a=\"\",b=\"\";\\n        char p,q;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'9\\'){\\n                p=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'0\\'){\\n                q=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==p)a+=\\'9\\';\\n            else a+=s[i];\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==q)b+=\\'0\\';\\n            else b+=s[i];\\n        }\\n        int A=stoi(a),B=stoi(b);\\n        int k=A-B;\\n        return k;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int n) {\\n        string s=to_string(n);\\n        string a=\"\",b=\"\";\\n        char p,q;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'9\\'){\\n                p=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'0\\'){\\n                q=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==p)a+=\\'9\\';\\n            else a+=s[i];\\n        }\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==q)b+=\\'0\\';\\n            else b+=s[i];\\n        }\\n        int A=stoi(a),B=stoi(b);\\n        int k=A-B;\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3698169,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    // find lowest find hihest\\n    let min = Infinity;\\n    let max = -Infinity;\\n    let lst = num.toString().split(\\'\\');\\n    let lst2 = [...lst];\\n    let lst3 = [...lst];\\n    let minChange = lst[0];\\n\\n    for(let c of lst){\\n        if (Number(c)!= 0 && max == -Infinity)max = Number(c);\\n        if (Number(c) != 9 && min == Infinity) min = Number(c);\\n\\n    }\\n\\n// get max\\n    for(let i=0;i<lst2.length;i++){\\n        let n = Number(lst2[i]);\\n        if (n == min)lst2[i] = \"9\"\\n    }\\n\\n    // get min\\n    for(let i=0;i<lst3.length;i++){\\n        let n = Number(lst3[i]);\\n        if (n == max)lst3[i] = \"0\"\\n    }\\n\\n    return Number(lst2.join(\\'\\')) - Number(lst3.join(\\'\\'));\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    // find lowest find hihest\\n    let min = Infinity;\\n    let max = -Infinity;\\n    let lst = num.toString().split(\\'\\');\\n    let lst2 = [...lst];\\n    let lst3 = [...lst];\\n    let minChange = lst[0];\\n\\n    for(let c of lst){\\n        if (Number(c)!= 0 && max == -Infinity)max = Number(c);\\n        if (Number(c) != 9 && min == Infinity) min = Number(c);\\n\\n    }\\n\\n// get max\\n    for(let i=0;i<lst2.length;i++){\\n        let n = Number(lst2[i]);\\n        if (n == min)lst2[i] = \"9\"\\n    }\\n\\n    // get min\\n    for(let i=0;i<lst3.length;i++){\\n        let n = Number(lst3[i]);\\n        if (n == max)lst3[i] = \"0\"\\n    }\\n\\n    return Number(lst2.join(\\'\\')) - Number(lst3.join(\\'\\'));\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3692564,
                "title": "1ms-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        int z=num,y=0,i,q=num;\\n        char c=\\'x\\';\\n        String s=String.valueOf(q);\\n        for(i=0;i<s.length();i++){ //Taking 1st number from left excluding 9 \\n            if(s.charAt(i)!=\\'9\\'){\\n             c=s.charAt(i);\\n             break;\\n            }\\n        }\\n        char x=s.charAt(0);  // replacing\\n         s=s.replace(c,\\'9\\');\\n        String s1=String.valueOf(q);\\n        s1=s1.replace(x,\\'0\\');\\n        \\n        int n1=Integer.parseInt(s);\\n        int n2=Integer.parseInt(s1);\\n        return n1-n2;\\n    }\\n\\n    // 86791     //86791\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        int z=num,y=0,i,q=num;\\n        char c=\\'x\\';\\n        String s=String.valueOf(q);\\n        for(i=0;i<s.length();i++){ //Taking 1st number from left excluding 9 \\n            if(s.charAt(i)!=\\'9\\'){\\n             c=s.charAt(i);\\n             break;\\n            }\\n        }\\n        char x=s.charAt(0);  // replacing\\n         s=s.replace(c,\\'9\\');\\n        String s1=String.valueOf(q);\\n        s1=s1.replace(x,\\'0\\');\\n        \\n        int n1=Integer.parseInt(s);\\n        int n2=Integer.parseInt(s1);\\n        return n1-n2;\\n    }\\n\\n    // 86791     //86791\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3667965,
                "title": "java-solution-using-simulation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String s1 = Integer.toString(num);\\n        String s2 = Integer.toString(num);\\n\\n        //finding the maximum\\n        char max1 = \\'9\\';\\n\\n        for(int i = 0 ; i < s1.length() ; i++){\\n            if(s1.charAt(i) == \\'9\\'){\\n                continue;\\n            }else{\\n                max1 = s1.charAt(i);\\n                break;\\n            }\\n        }\\n\\n        String max = s1.replace(max1 , \\'9\\');\\n        \\n\\n        //finding the minimum\\n        char min1 = \\'0\\';\\n\\n        for(int i = 0 ; i < s2.length() ; i++){\\n            if(s2.charAt(i) == \\'0\\'){\\n                continue;\\n            }else{\\n                min1 = s2.charAt(i);\\n                break;\\n            }\\n        }\\n\\n        String min = s2.replace(min1 , \\'0\\');\\n\\n        return Integer.parseInt(max) - Integer.parseInt(min);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String s1 = Integer.toString(num);\\n        String s2 = Integer.toString(num);\\n\\n        //finding the maximum\\n        char max1 = \\'9\\';\\n\\n        for(int i = 0 ; i < s1.length() ; i++){\\n            if(s1.charAt(i) == \\'9\\'){\\n                continue;\\n            }else{\\n                max1 = s1.charAt(i);\\n                break;\\n            }\\n        }\\n\\n        String max = s1.replace(max1 , \\'9\\');\\n        \\n\\n        //finding the minimum\\n        char min1 = \\'0\\';\\n\\n        for(int i = 0 ; i < s2.length() ; i++){\\n            if(s2.charAt(i) == \\'0\\'){\\n                continue;\\n            }else{\\n                min1 = s2.charAt(i);\\n                break;\\n            }\\n        }\\n\\n        String min = s2.replace(min1 , \\'0\\');\\n\\n        return Integer.parseInt(max) - Integer.parseInt(min);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3666078,
                "title": "java-solution-probably-the-easiest-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe may consider input num as a String. It will help to find the numbers that we have to change.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe create String max. It`s the input num in string view. Then we look for the first number that we could change to 9 (the maximum digit). It can be any number except 9. In the same way we find min value. Then we just return max-min.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String max = String.valueOf(num);\\n        String min = String.valueOf(num);\\n\\n\\n        for(int i=0;i<max.length();i++)\\n            if(max.charAt(i)!=\\'9\\') {\\n                max=max.replace(max.charAt(i), \\'9\\');\\n                break;\\n            }\\n        for(int i=0;i<min.length();i++)\\n            if(max.charAt(i)!=\\'0\\') {\\n                min=min.replace(min.charAt(i),\\'0\\');\\n                break;\\n            }\\n\\n        return Integer.parseInt(max)-Integer.parseInt(min);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String max = String.valueOf(num);\\n        String min = String.valueOf(num);\\n\\n\\n        for(int i=0;i<max.length();i++)\\n            if(max.charAt(i)!=\\'9\\') {\\n                max=max.replace(max.charAt(i), \\'9\\');\\n                break;\\n            }\\n        for(int i=0;i<min.length();i++)\\n            if(max.charAt(i)!=\\'0\\') {\\n                min=min.replace(min.charAt(i),\\'0\\');\\n                break;\\n            }\\n\\n        return Integer.parseInt(max)-Integer.parseInt(min);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3643340,
                "title": "very-easy-understandable-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num=str(num)\\n        l=s=0\\n        for i in range(len(num)):\\n            if num[i]!=\"9\":\\n                l=num[i]\\n                break\\n        for i in range(len(num)):\\n            if num[i]!=\"0\":\\n                s=num[i]\\n                break\\n        large=\"\"\\n        for i in range(len(num)):\\n            if num[i] == l:\\n                large+=\"9\"\\n            else:\\n                large+=num[i]\\n        small=\"\"\\n        for i in range(len(num)):\\n            if num[i] == s:\\n                small+=\"0\"\\n            else:\\n                small+=num[i]\\n        \\n        return int(large)-int(small)\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num=str(num)\\n        l=s=0\\n        for i in range(len(num)):\\n            if num[i]!=\"9\":\\n                l=num[i]\\n                break\\n        for i in range(len(num)):\\n            if num[i]!=\"0\":\\n                s=num[i]\\n                break\\n        large=\"\"\\n        for i in range(len(num)):\\n            if num[i] == l:\\n                large+=\"9\"\\n            else:\\n                large+=num[i]\\n        small=\"\"\\n        for i in range(len(num)):\\n            if num[i] == s:\\n                small+=\"0\"\\n            else:\\n                small+=num[i]\\n        \\n        return int(large)-int(small)\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630011,
                "title": "easy-to-understand-c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        //max number\\n        string mx = to_string(num);\\n        //min number\\n        string mn = to_string(num);\\n\\n        for(int i = 0; i<mx.size(); i++)\\n        {\\n            if(mx[i]-\\'0\\' != 9)\\n            {\\n                char ch = mx[i];\\n                for(int j = 0; j<mx.size(); j++)\\n                {\\n                    if(mx[j] == ch)\\n                    {\\n                        mx[j] = \\'9\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        for(int i = 0; i<mn.size(); i++)\\n        {\\n            if(mn[i]-\\'0\\' != 0)\\n            {\\n                char ch = mn[i];\\n                for(int j = 0; j<mn.size(); j++)\\n                {\\n                    if(mn[j] == ch)\\n                    {\\n                        mn[j] = \\'0\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        return stoll(mx) - stoll(mn);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        //max number\\n        string mx = to_string(num);\\n        //min number\\n        string mn = to_string(num);\\n\\n        for(int i = 0; i<mx.size(); i++)\\n        {\\n            if(mx[i]-\\'0\\' != 9)\\n            {\\n                char ch = mx[i];\\n                for(int j = 0; j<mx.size(); j++)\\n                {\\n                    if(mx[j] == ch)\\n                    {\\n                        mx[j] = \\'9\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        for(int i = 0; i<mn.size(); i++)\\n        {\\n            if(mn[i]-\\'0\\' != 0)\\n            {\\n                char ch = mn[i];\\n                for(int j = 0; j<mn.size(); j++)\\n                {\\n                    if(mn[j] == ch)\\n                    {\\n                        mn[j] = \\'0\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        return stoll(mx) - stoll(mn);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3627729,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        auto str = to_string(num);\\n        char substitute = 0;\\n        for (auto& c : str) {\\n            if (c != \\'9\\' && !substitute) substitute = c;\\n            if (c == substitute) c = \\'9\\';\\n        }\\n        const auto ma = stoi(str);\\n        str = to_string(num);\\n        substitute = 0;\\n        for (auto& c : str) {\\n            if (c != \\'0\\' && !substitute) substitute = c;\\n            if (c == substitute) c = \\'0\\';\\n        }\\n        const auto mi = stoi(str);\\n        return ma - mi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        auto str = to_string(num);\\n        char substitute = 0;\\n        for (auto& c : str) {\\n            if (c != \\'9\\' && !substitute) substitute = c;\\n            if (c == substitute) c = \\'9\\';\\n        }\\n        const auto ma = stoi(str);\\n        str = to_string(num);\\n        substitute = 0;\\n        for (auto& c : str) {\\n            if (c != \\'0\\' && !substitute) substitute = c;\\n            if (c == substitute) c = \\'0\\';\\n        }\\n        const auto mi = stoi(str);\\n        return ma - mi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3618998,
                "title": "easy-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String p=String.valueOf(num);\\n        String r[]=p.split(\"\");\\n        int max=Integer.MIN_VALUE,min=Integer.MAX_VALUE;\\n     for(int i=0;i<r.length;i++){\\n           for(int j=0;j<10;j++){\\n               String t=p.replaceAll(r[i],String.valueOf(j));\\n               if(Integer.parseInt(t)>max){\\n                   max=Integer.parseInt(t);\\n               }\\n                if(Integer.parseInt(t)<min){\\n                   min=Integer.parseInt(t);\\n               }\\n           }\\n     }\\n     return Math.abs(min-max);\\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String p=String.valueOf(num);\\n        String r[]=p.split(\"\");\\n        int max=Integer.MIN_VALUE,min=Integer.MAX_VALUE;\\n     for(int i=0;i<r.length;i++){\\n           for(int j=0;j<10;j++){\\n               String t=p.replaceAll(r[i],String.valueOf(j));\\n               if(Integer.parseInt(t)>max){\\n                   max=Integer.parseInt(t);\\n               }\\n                if(Integer.parseInt(t)<min){\\n                   min=Integer.parseInt(t);\\n               }\\n           }\\n     }\\n     return Math.abs(min-max);\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3615387,
                "title": "clean-c-solution-with-explanation-beats-100-runtime-and-95-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt has a greedy approach:\\n* In order to get the highest number from the given digits, we want to replace the first non-9 digit with a 9. Let\\'s replace it with a 9 then, and if the replaced digit has multiple occurrences, replace all the occurrences as well. That way, we will always guarantee that we will get the highest number.\\n* Similarly, in order to get the lowest number from the given digits, we want to replace the first non-0 digit with a 0. Let\\'s replace it with a 0 then, and if the replaced digit has multiple occurrences, replace all of the occurrences as well. That way, we will always guarantee that we will get the lowest number.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Convert the number to a string.\\n2. First, we will start by replacing the digits to 9. We create a loop to get the first non-9 digit.\\n3. Then we replace all of the occurrences of this digit to 9.\\n4. If all of the digits are 9, then we can just return the number because this is the highest possible number we can get.\\n5. We do the exact same thing for the minimum number as well, but insteaf of 9 it is 0.\\n\\n# Complexity\\n- Time complexity: O(log n) -- we loop on the digits of the number.\\n- Space complexity: O(log n) -- because of strNum.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int maxNum = getMaxMinNum(num, \\'9\\');\\n        int minNum = getMaxMinNum(num, \\'0\\');\\n        return maxNum - minNum;\\n    }\\n\\n    int getMaxMinNum(int num, char search) {\\n        string strNum = to_string(num);\\n        int i = 0;\\n        while (i < strNum.size() && strNum[i] == search) {\\n            i++;\\n        }\\n        if (i >= strNum.size()) {\\n            return num;\\n        }\\n        char digit = strNum[i];\\n        for (int j = 0; j < strNum.size(); j++) {\\n            if (strNum[j] == digit) {\\n                strNum[j] = search;\\n            }\\n        }\\n        return stoi(strNum);\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int maxNum = getMaxMinNum(num, \\'9\\');\\n        int minNum = getMaxMinNum(num, \\'0\\');\\n        return maxNum - minNum;\\n    }\\n\\n    int getMaxMinNum(int num, char search) {\\n        string strNum = to_string(num);\\n        int i = 0;\\n        while (i < strNum.size() && strNum[i] == search) {\\n            i++;\\n        }\\n        if (i >= strNum.size()) {\\n            return num;\\n        }\\n        char digit = strNum[i];\\n        for (int j = 0; j < strNum.size(); j++) {\\n            if (strNum[j] == digit) {\\n                strNum[j] = search;\\n            }\\n        }\\n        return stoi(strNum);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3614228,
                "title": "easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n       String number = num+\"\";\\n        int n = number.length();\\n        int max = 0;\\n        int min = 0;\\n        int replaceMax = -1;\\n        int replaceMin = number.charAt(0) - \\'0\\';\\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c != 9)\\n            {\\n                replaceMax = c;\\n                break;\\n            }\\n        }\\n        \\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c == replaceMax)\\n                max = max*10 + 9;\\n            else\\n                max = max*10 + c;\\n            \\n            if (c == replaceMin)\\n                min = min*10;\\n            else\\n                min = min*10 +c;\\n        }\\n        \\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n       String number = num+\"\";\\n        int n = number.length();\\n        int max = 0;\\n        int min = 0;\\n        int replaceMax = -1;\\n        int replaceMin = number.charAt(0) - \\'0\\';\\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c != 9)\\n            {\\n                replaceMax = c;\\n                break;\\n            }\\n        }\\n        \\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c == replaceMax)\\n                max = max*10 + 9;\\n            else\\n                max = max*10 + c;\\n            \\n            if (c == replaceMin)\\n                min = min*10;\\n            else\\n                min = min*10 +c;\\n        }\\n        \\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3592768,
                "title": "very-easy-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = \"\";\\n        int a=0 , b = 0;\\n        int ans = INT_MAX;\\n        int ans1 = INT_MIN;\\n        while(num >= 1){\\n            s = s + char(\\'0\\' + num%10);\\n            num = num/10;\\n           \\n        }\\n        reverse(s.begin(), s.end());\\n         string s2 = s;\\n\\n        int j = 0;\\n        while(s[j] == \\'9\\') {\\n            ++j;\\n        }\\n        char temp1 = s[j];\\n     \\n        for(int i = 0; i < s.size() ;i++){\\n            if(s[i] == temp1){\\n                s[i] = 9 +\\'0\\';       \\n            }\\n          \\n        }  \\n          char temp = s2[0];\\n        for(int i = 0 ; i < s2.size() ; i++){\\n           \\n            if(s2[i] == temp){\\n                s2[i] = 0 + \\'0\\';\\n            }\\n         \\n        }\\n     \\n      for(int i = 0 ; i <s.size() ;i++){\\n          a = a * 10 + s[i] - \\'0\\';\\n      }\\n         for(int i = 0 ; i <s2.size() ;i++){\\n          b = b * 10 + s2[i] - \\'0\\';\\n      }\\n     return a - b;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = \"\";\\n        int a=0 , b = 0;\\n        int ans = INT_MAX;\\n        int ans1 = INT_MIN;\\n        while(num >= 1){\\n            s = s + char(\\'0\\' + num%10);\\n            num = num/10;\\n           \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3590854,
                "title": "c-easy-and-readable-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/23b28c6e-2b47-4fce-b545-fce19f8965ba_1685739449.8736384.png)\\n\\n**Don\\'t hesitate to suggest or ask bellow about something that you don\\'t understand**\\n\\n```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        int index = 0;\\n        string s = num.ToString();\\n        while (index < s.Length - 1 && s[index] == \\'9\\')\\n            index++;\\n        return int.Parse(s.Replace(s[index], \\'9\\')) - int.Parse(s.Replace(s[0], \\'0\\'));\\n    }\\n}\\n```\\n\\nIf you like it don\\'t forget to **upvote!**",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        int index = 0;\\n        string s = num.ToString();\\n        while (index < s.Length - 1 && s[index] == \\'9\\')\\n            index++;\\n        return int.Parse(s.Replace(s[index], \\'9\\')) - int.Parse(s.Replace(s[0], \\'0\\'));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3560291,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int max=0;\\n        int min=0;\\n        string s=to_string(num);\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'9\\'){\\n                char temp=s[i];\\n                s[i]=\\'9\\';\\n                for(int j=i+1;j<s.length();j++){\\n                   \\n                    if(s[j]==temp){\\n                        \\n                        s[j]=\\'9\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        max=stoi(s);\\n        s=to_string(num);\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'0\\'){\\n                char temp=s[i];\\n                s[i]=\\'0\\';\\n                for(int j=i+1;j<s.length();j++){\\n                    if(s[j]==temp){\\n                        s[j]=\\'0\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        min=stoi(s);\\n        //cout<<max<<\",\"<<min;\\n        return max-min; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int max=0;\\n        int min=0;\\n        string s=to_string(num);\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'9\\'){\\n                char temp=s[i];\\n                s[i]=\\'9\\';\\n                for(int j=i+1;j<s.length();j++){\\n                   \\n                    if(s[j]==temp){\\n                        \\n                        s[j]=\\'9\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        max=stoi(s);\\n        s=to_string(num);\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'0\\'){\\n                char temp=s[i];\\n                s[i]=\\'0\\';\\n                for(int j=i+1;j<s.length();j++){\\n                    if(s[j]==temp){\\n                        s[j]=\\'0\\';\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        min=stoi(s);\\n        //cout<<max<<\",\"<<min;\\n        return max-min; \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3545795,
                "title": "java-simple-and-readable",
                "content": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        var snum = \"\"+num;\\n        var minimized = minimize(snum.toCharArray());\\n        var maximized = maximize(snum.toCharArray());\\n        return maximized-minimized;\\n    }\\n    \\n    public int minimize(char[] arr){\\n        for (int i=0;i<arr.length;i++){\\n            if (arr[i]!=\\'0\\') {replace(arr,arr[i],\\'0\\'); break;}\\n        }\\n        return Integer.parseInt(new String(arr));\\n    }\\n    \\n    public int maximize(char[] arr){\\n        for (int i=0;i<arr.length;i++){\\n            if (arr[i]!=\\'9\\') {replace(arr,arr[i],\\'9\\'); break;}\\n        }\\n        return Integer.parseInt(new String(arr));\\n    }\\n    \\n    public void replace(char[] arr, char from, char to){\\n        for (int i=0;i<arr.length;i++) if (arr[i]==from) arr[i]=to;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        var snum = \"\"+num;\\n        var minimized = minimize(snum.toCharArray());\\n        var maximized = maximize(snum.toCharArray());\\n        return maximized-minimized;\\n    }\\n    \\n    public int minimize(char[] arr){\\n        for (int i=0;i<arr.length;i++){\\n            if (arr[i]!=\\'0\\') {replace(arr,arr[i],\\'0\\'); break;}\\n        }\\n        return Integer.parseInt(new String(arr));\\n    }\\n    \\n    public int maximize(char[] arr){\\n        for (int i=0;i<arr.length;i++){\\n            if (arr[i]!=\\'9\\') {replace(arr,arr[i],\\'9\\'); break;}\\n        }\\n        return Integer.parseInt(new String(arr));\\n    }\\n    \\n    public void replace(char[] arr, char from, char to){\\n        for (int i=0;i<arr.length;i++) if (arr[i]==from) arr[i]=to;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3498063,
                "title": "maximum-difference-by-remapping-a-digit",
                "content": "------------- Easy C++ Solution -----------------\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string t = s;\\n        char first = s[0];\\n        for (char& c : s) {\\n            if (c == first) {\\n                c = \\'0\\';\\n            }\\n        }\\n        int mi = stoi(s);\\n        for (int i = 0; i < t.size(); ++i) {\\n            if (t[i] != \\'9\\') {\\n                char second = t[i];\\n                for (int j = i; j < t.size(); ++j) {\\n                    if (t[j] == second) {\\n                        t[j] = \\'9\\';\\n                    }\\n                }\\n                return stoi(t) - mi;\\n            }\\n        }\\n        return num - mi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s = to_string(num);\\n        string t = s;\\n        char first = s[0];\\n        for (char& c : s) {\\n            if (c == first) {\\n                c = \\'0\\';\\n            }\\n        }\\n        int mi = stoi(s);\\n        for (int i = 0; i < t.size(); ++i) {\\n            if (t[i] != \\'9\\') {\\n                char second = t[i];\\n                for (int j = i; j < t.size(); ++j) {\\n                    if (t[j] == second) {\\n                        t[j] = \\'9\\';\\n                    }\\n                }\\n                return stoi(t) - mi;\\n            }\\n        }\\n        return num - mi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489715,
                "title": "c-greedy",
                "content": "\\n```\\nclass Solution \\n{\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        vector<int> digits;\\n        while (num > 0)\\n        {\\n            digits.push_back(num % 10);\\n            num /= 10;\\n        }\\n\\n        reverse(digits.begin(), digits.end());\\n\\n        vector<int> maxd = digits;\\n        int target = -1;\\n        int maxint = 0;\\n        for (int i = 0; i < maxd.size(); ++i)\\n        {\\n            if (maxd[i] != 9 && target == -1)\\n            {\\n                target = maxd[i];\\n            }\\n\\n            if (maxd[i] == target)\\n            {\\n                maxd[i] = 9;\\n            }\\n\\n            maxint = maxint * 10 + maxd[i];\\n        }\\n\\n        vector<int> mind = digits;\\n        target = -1;\\n        int minint = 0;\\n        for (int i = 0; i < mind.size(); ++i)\\n        {\\n            if (mind[i] != 0 && target == -1)\\n            {\\n                target = mind[i];\\n            }\\n\\n            if (mind[i] == target)\\n            {\\n                mind[i] = 0;\\n            }\\n\\n            minint = minint * 10 + mind[i];\\n        }\\n\\n        return maxint - minint;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        vector<int> digits;\\n        while (num > 0)\\n        {\\n            digits.push_back(num % 10);\\n            num /= 10;\\n        }\\n\\n        reverse(digits.begin(), digits.end());\\n\\n        vector<int> maxd = digits;\\n        int target = -1;\\n        int maxint = 0;\\n        for (int i = 0; i < maxd.size(); ++i)\\n        {\\n            if (maxd[i] != 9 && target == -1)\\n            {\\n                target = maxd[i];\\n            }\\n\\n            if (maxd[i] == target)\\n            {\\n                maxd[i] = 9;\\n            }\\n\\n            maxint = maxint * 10 + maxd[i];\\n        }\\n\\n        vector<int> mind = digits;\\n        target = -1;\\n        int minint = 0;\\n        for (int i = 0; i < mind.size(); ++i)\\n        {\\n            if (mind[i] != 0 && target == -1)\\n            {\\n                target = mind[i];\\n            }\\n\\n            if (mind[i] == target)\\n            {\\n                mind[i] = 0;\\n            }\\n\\n            minint = minint * 10 + mind[i];\\n        }\\n\\n        return maxint - minint;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3480649,
                "title": "java-greedy-explained",
                "content": "**Idea:** Swap all occurences of first digit with 0 to get the minimum number and the all the occurences of the first non-9 digit with 9 to get the maximum\\n>**T/S:** O(lg num)/O(lg num)\\n```\\npublic int minMaxDifference(int num) {\\n\\tvar s = String.valueOf(num);\\n\\treturn max(num, s) - min(s);\\n}\\n\\nprivate static int max(int num, String s) {\\n\\tfor (var i = 0; i < s.length(); i++)\\n\\t\\tif (s.charAt(i) != \\'9\\')\\n\\t\\t\\treturn Integer.parseInt(s.replaceAll(String.valueOf(s.charAt(i)), \"9\"));\\n\\treturn num;\\n}\\n\\nprivate int min(String s) {\\n\\treturn Integer.parseInt(s.replaceAll(String.valueOf(s.charAt(0)), \"0\"));\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int minMaxDifference(int num) {\\n\\tvar s = String.valueOf(num);\\n\\treturn max(num, s) - min(s);\\n}\\n\\nprivate static int max(int num, String s) {\\n\\tfor (var i = 0; i < s.length(); i++)\\n\\t\\tif (s.charAt(i) != \\'9\\')\\n\\t\\t\\treturn Integer.parseInt(s.replaceAll(String.valueOf(s.charAt(i)), \"9\"));\\n\\treturn num;\\n}\\n\\nprivate int min(String s) {\\n\\treturn Integer.parseInt(s.replaceAll(String.valueOf(s.charAt(0)), \"0\"));\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3469851,
                "title": "direct-replacement",
                "content": "# Intuition\\nMax value is obtained by replacing the first non-9 most significant digit with 9\\nMin value is obtained by replacing the first most significant digit with 0\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nfunction minMaxDifference(num: number): number {\\n    const digits = toDigits(num)\\n    const to9 = digits.find(n => n !== 9)\\n    const to0 = digits[0]\\n    const max = digits.map(n => n === to9 ? 9 : n)\\n    const min = digits.map(n => n === to0 ? 0 : n)\\n    return Number(max.join(\\'\\')) - Number(min.join(\\'\\'))\\n};\\n\\nfunction toDigits(n: number): number[] {\\n    const result: number[] = []\\n    while (n > 0) {\\n        result.push(n % 10)\\n        n = Math.floor(n / 10)\\n    }\\n    return result.reverse()\\n}\\n// \\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction minMaxDifference(num: number): number {\\n    const digits = toDigits(num)\\n    const to9 = digits.find(n => n !== 9)\\n    const to0 = digits[0]\\n    const max = digits.map(n => n === to9 ? 9 : n)\\n    const min = digits.map(n => n === to0 ? 0 : n)\\n    return Number(max.join(\\'\\')) - Number(min.join(\\'\\'))\\n};\\n\\nfunction toDigits(n: number): number[] {\\n    const result: number[] = []\\n    while (n > 0) {\\n        result.push(n % 10)\\n        n = Math.floor(n / 10)\\n    }\\n    return result.reverse()\\n}\\n// \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3464557,
                "title": "easy-solution-in-6-lines",
                "content": "# My approach\\n- Convert the number to an array to get the digits;\\n- Find the first number that is smaller than 9;\\n- Find the first number that is greater than 0;\\n- Map over digits:\\n  - If the digit is equal to desired digit remap to 9 for max and 0 for min;\\n  - Else return the original digit (note: +n to convert the character back to an int);\\n  - Join the array to get the number.\\n- Return the difference between min and max. \\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function (num) {\\n    let digits = num.toString().split(\\'\\')\\n    let firstNonNine = digits.find(n => n < 9);\\n    let firstNonZero = digits.find(n => n > 0);\\n\\n    let max = digits.map(n => n === firstNonNine ? 9 : +n).join(\\'\\');\\n    let min = digits.map(n => n === firstNonZero ? 0 : +n).join(\\'\\');\\n\\n    return max - min;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function (num) {\\n    let digits = num.toString().split(\\'\\')\\n    let firstNonNine = digits.find(n => n < 9);\\n    let firstNonZero = digits.find(n => n > 0);\\n\\n    let max = digits.map(n => n === firstNonNine ? 9 : +n).join(\\'\\');\\n    let min = digits.map(n => n === firstNonZero ? 0 : +n).join(\\'\\');\\n\\n    return max - min;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3461196,
                "title": "c-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int>digits;\\n        int min=0;\\n        int max=0;\\n        while(num){\\n            int val=num%10;\\n            num/=10;\\n            digits.push_back(val);\\n        }\\n        reverse(digits.begin(),digits.end());\\n        //max\\n         int val;\\n\\n         for(int i=0;i<digits.size();i++){\\n         if(digits[i]!=9){\\n           val=digits[i];\\n           break;\\n         }\\n             \\n          \\n         }\\n        for(auto n:digits){\\n            //max\\n            if(n==val)\\n                max=max*10+9;\\n            else\\n              max=max*10+n;\\n        \\n            }\\n             cout<<max<<endl;\\n             //min\\n             int n=digits[0];\\n             for(auto x:digits){\\n               if(n==x)\\n                  min=min*10+0;\\n                else\\n                  min=min*10+x;\\n             }\\n             cout<<min<<endl;\\n        return max-min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int>digits;\\n        int min=0;\\n        int max=0;\\n        while(num){\\n            int val=num%10;\\n            num/=10;\\n            digits.push_back(val);\\n        }\\n        reverse(digits.begin(),digits.end());\\n        //max\\n         int val;\\n\\n         for(int i=0;i<digits.size();i++){\\n         if(digits[i]!=9){\\n           val=digits[i];\\n           break;\\n         }\\n             \\n          \\n         }\\n        for(auto n:digits){\\n            //max\\n            if(n==val)\\n                max=max*10+9;\\n            else\\n              max=max*10+n;\\n        \\n            }\\n             cout<<max<<endl;\\n             //min\\n             int n=digits[0];\\n             for(auto x:digits){\\n               if(n==x)\\n                  min=min*10+0;\\n                else\\n                  min=min*10+x;\\n             }\\n             cout<<min<<endl;\\n        return max-min;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3428576,
                "title": "easy-to-understand-solution-in-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        Max = 0\\n        Min = 0\\n        number = str(num)\\n        for i in number:\\n            if i < \\'9\\':\\n                Max = Max + int(number.replace(i,\\'9\\'))\\n                break\\n        for i in number:\\n            if i != \\'0\\':\\n                Min = Min + int(number.replace(i,\\'0\\'))\\n                break\\n        if number.count(number[0]) == len(number) and number[0] == \\'9\\':\\n            return num\\n        return Max - Min\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        Max = 0\\n        Min = 0\\n        number = str(num)\\n        for i in number:\\n            if i < \\'9\\':\\n                Max = Max + int(number.replace(i,\\'9\\'))\\n                break\\n        for i in number:\\n            if i != \\'0\\':\\n                Min = Min + int(number.replace(i,\\'0\\'))\\n                break\\n        if number.count(number[0]) == len(number) and number[0] == \\'9\\':\\n            return num\\n        return Max - Min\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3424697,
                "title": "c-solution-using-math-greedy",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        List<int> digits = new List<int>();\\n        while(num > 0){\\n            digits.Add(num % 10);\\n            num/= 10;\\n        }\\n        int d1 = -1, d2 = digits[digits.Count - 1];\\n        int minNumber = 0, maxNumber = 0;\\n        for(int i = digits.Count - 1;i >= 0;i--){\\n            if(digits[i] != d2)\\n                 minNumber+= (digits[i] * (int)Math.Pow(10,i));\\n            if(d1 == -1 && digits[i] != 9)\\n                d1 = digits[i];\\n            if(digits[i] == d1)\\n                maxNumber+= (9 * (int)Math.Pow(10,i));\\n            else maxNumber+= (digits[i] * (int)Math.Pow(10,i));\\n        }\\n        return maxNumber - minNumber;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        List<int> digits = new List<int>();\\n        while(num > 0){\\n            digits.Add(num % 10);\\n            num/= 10;\\n        }\\n        int d1 = -1, d2 = digits[digits.Count - 1];\\n        int minNumber = 0, maxNumber = 0;\\n        for(int i = digits.Count - 1;i >= 0;i--){\\n            if(digits[i] != d2)\\n                 minNumber+= (digits[i] * (int)Math.Pow(10,i));\\n            if(d1 == -1 && digits[i] != 9)\\n                d1 = digits[i];\\n            if(digits[i] == d1)\\n                maxNumber+= (9 * (int)Math.Pow(10,i));\\n            else maxNumber+= (digits[i] * (int)Math.Pow(10,i));\\n        }\\n        return maxNumber - minNumber;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423670,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n let arr = String(num).split(\"\"); \\n let max = \\'\\';\\n let min =\\'\\';\\n let isOne =true;\\n let signed =0;\\n for(let i=0; i<arr.length; i++){\\n     if(i==0 || isOne){\\n         if(arr[i]==9){\\n              max += 9;\\n         } else{\\n              max += 9;\\n              isOne=false;\\n              signed=i;\\n         }\\n     }else if(arr[i]==arr[signed]){\\n         max+=9;\\n     }else{\\n         max+=arr[i];\\n     };\\n }\\n for(let j=0; j<arr.length; j++){\\n     if(j==0){\\n         min+=0;\\n     }else if(arr[j]==arr[0]){\\n         min+=0;\\n     }else{\\n         min+=arr[j]\\n     }\\n }\\n return +max - +min;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n let arr = String(num).split(\"\"); \\n let max = \\'\\';\\n let min =\\'\\';\\n let isOne =true;\\n let signed =0;\\n for(let i=0; i<arr.length; i++){\\n     if(i==0 || isOne){\\n         if(arr[i]==9){\\n              max += 9;\\n         } else{\\n              max += 9;\\n              isOne=false;\\n              signed=i;\\n         }\\n     }else if(arr[i]==arr[signed]){\\n         max+=9;\\n     }else{\\n         max+=arr[i];\\n     };\\n }\\n for(let j=0; j<arr.length; j++){\\n     if(j==0){\\n         min+=0;\\n     }else if(arr[j]==arr[0]){\\n         min+=0;\\n     }else{\\n         min+=arr[j]\\n     }\\n }\\n return +max - +min;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3418136,
                "title": "simple-and-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int n=num;\\n        string s=to_string(num);\\n        string s1=s;\\n        int a;\\n        char c=s[0];\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==c){\\n                s[i]=\\'0\\';\\n            }\\n        }\\n        while(n!=0){\\n            if(n%10!=9){\\n                a=n%10;\\n            }\\n            n=n/10;\\n        }\\n        string str=to_string(a);\\n        for(int i=0;i<s1.length();i++){\\n            if(s1[i]==str[0]){\\n                s1[i]=\\'9\\';\\n            }\\n        }\\n        return stoi(s1)-stoi(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int n=num;\\n        string s=to_string(num);\\n        string s1=s;\\n        int a;\\n        char c=s[0];\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==c){\\n                s[i]=\\'0\\';\\n            }\\n        }\\n        while(n!=0){\\n            if(n%10!=9){\\n                a=n%10;\\n            }\\n            n=n/10;\\n        }\\n        string str=to_string(a);\\n        for(int i=0;i<s1.length();i++){\\n            if(s1[i]==str[0]){\\n                s1[i]=\\'9\\';\\n            }\\n        }\\n        return stoi(s1)-stoi(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411409,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n        \\n    const n = num.toString();\\n    let s = n;\\n    for (let i = 0; i < s.length; i++) {\\n      if (s[i] !== \\'9\\') {\\n        const x = s[i];\\n        for (let j = i; j < s.length; j++) {\\n          if (s[j] === x) {\\n            s = s.slice(0, j) + \\'9\\' + s.slice(j + 1);\\n          }\\n        }\\n        break;\\n      }\\n    }\\n    const h = parseInt(s);\\n    s = n;\\n    for (let i = 0; i < s.length; i++) {\\n      if (s[i] !== \\'0\\') {\\n        const x = s[i];\\n        for (let j = i; j < s.length; j++) {\\n          if (s[j] === x) {\\n            s = s.slice(0, j) + \\'0\\' + s.slice(j + 1);\\n          }\\n        }\\n        break;\\n      }\\n    }\\n    const l = parseInt(s);\\n    return h - l;\\n  }\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n        \\n    const n = num.toString();\\n    let s = n;\\n    for (let i = 0; i < s.length; i++) {\\n      if (s[i] !== \\'9\\') {\\n        const x = s[i];\\n        for (let j = i; j < s.length; j++) {\\n          if (s[j] === x) {\\n            s = s.slice(0, j) + \\'9\\' + s.slice(j + 1);\\n          }\\n        }\\n        break;\\n      }\\n    }\\n    const h = parseInt(s);\\n    s = n;\\n    for (let i = 0; i < s.length; i++) {\\n      if (s[i] !== \\'0\\') {\\n        const x = s[i];\\n        for (let j = i; j < s.length; j++) {\\n          if (s[j] === x) {\\n            s = s.slice(0, j) + \\'0\\' + s.slice(j + 1);\\n          }\\n        }\\n        break;\\n      }\\n    }\\n    const l = parseInt(s);\\n    return h - l;\\n  }\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3398775,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String number = num+\"\";\\n        int n = number.length();\\n        int max = 0;\\n        int min = 0;\\n        int replaceMax = -1;\\n        int replaceMin = number.charAt(0) - \\'0\\';\\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c != 9)\\n            {\\n                replaceMax = c;\\n                break;\\n            }\\n        }\\n        \\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c == replaceMax)\\n                max = max*10 + 9;\\n            else\\n                max = max*10 + c;\\n            \\n            if (c == replaceMin)\\n                min = min*10;\\n            else\\n                min = min*10 +c;\\n        }\\n        \\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String number = num+\"\";\\n        int n = number.length();\\n        int max = 0;\\n        int min = 0;\\n        int replaceMax = -1;\\n        int replaceMin = number.charAt(0) - \\'0\\';\\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c != 9)\\n            {\\n                replaceMax = c;\\n                break;\\n            }\\n        }\\n        \\n        for (int i = 0; i<n; i++)\\n        {\\n            int c = number.charAt(i) - \\'0\\';\\n            if (c == replaceMax)\\n                max = max*10 + 9;\\n            else\\n                max = max*10 + c;\\n            \\n            if (c == replaceMin)\\n                min = min*10;\\n            else\\n                min = min*10 +c;\\n        }\\n        \\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3393653,
                "title": "c-easy-to-understand-greedy",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int>v;\\n        while(num>0){\\n            v.push_back(num%10);\\n            num/=10;\\n\\n        }\\n\\n        reverse(v.begin(),v.end());\\n        vector<int>miniV,maxiV;\\n        for(int i=0;i<v.size();i++){\\n            if(v[i]==v[0]){\\n                miniV.push_back(0);\\n            }\\n        else\\n        miniV.push_back(v[i]);\\n        }\\n        int it =-1;\\n        for(int j=0;j<v.size();j++){\\n            if(v[j]!=9){\\n                it = j;\\n                break;\\n            }\\n        }\\n        for(int i=0;i<v.size();i++){\\n            if(it!=-1 && v[i]==v[it]){\\n                maxiV.push_back(9);\\n            }\\n            else \\n            maxiV.push_back(v[i]);\\n        }\\n\\n        int mini =0,maxi =0;\\n        for(int it=0;it<maxiV.size();it++){\\n            maxi*=10;\\n            maxi+=maxiV[it];\\n        }\\n        for(int it =0;it<miniV.size();it++){\\n            mini*=10;\\n            mini+=miniV[it];\\n        }\\n\\n        return abs(mini-maxi);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int>v;\\n        while(num>0){\\n            v.push_back(num%10);\\n            num/=10;\\n\\n        }\\n\\n        reverse(v.begin(),v.end());\\n        vector<int>miniV,maxiV;\\n        for(int i=0;i<v.size();i++){\\n            if(v[i]==v[0]){\\n                miniV.push_back(0);\\n            }\\n        else\\n        miniV.push_back(v[i]);\\n        }\\n        int it =-1;\\n        for(int j=0;j<v.size();j++){\\n            if(v[j]!=9){\\n                it = j;\\n                break;\\n            }\\n        }\\n        for(int i=0;i<v.size();i++){\\n            if(it!=-1 && v[i]==v[it]){\\n                maxiV.push_back(9);\\n            }\\n            else \\n            maxiV.push_back(v[i]);\\n        }\\n\\n        int mini =0,maxi =0;\\n        for(int it=0;it<maxiV.size();it++){\\n            maxi*=10;\\n            maxi+=maxiV[it];\\n        }\\n        for(int it =0;it<miniV.size();it++){\\n            mini*=10;\\n            mini+=miniV[it];\\n        }\\n\\n        return abs(mini-maxi);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3379767,
                "title": "python-solution",
                "content": "\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n\\n        s = str(num)\\n\\n        pos = 0\\n\\n        D = {} \\n        d = {} \\n\\n        d[s[0]] = \\'0\\'\\n\\n        for i in range(len(s)):\\n            if s[i] != \\'9\\':\\n                pos = i \\n                D[s[i]] = \\'9\\'\\n                break \\n                \\n        tmp1 = \"\"\\n        tmp2 = \"\" \\n        for i in range(len(s)):\\n            if s[i] in D:\\n                tmp1 += D[s[i]]\\n            else:\\n                tmp1 += s[i]\\n\\n            if s[i] in d: \\n                tmp2 += d[s[i]]\\n            else:\\n                tmp2 += s[i]\\n\\n        return int(tmp1) - int(tmp2)\\n\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n\\n        s = str(num)\\n\\n        pos = 0\\n\\n        D = {} \\n        d = {} \\n\\n        d[s[0]] = \\'0\\'\\n\\n        for i in range(len(s)):\\n            if s[i] != \\'9\\':\\n                pos = i \\n                D[s[i]] = \\'9\\'\\n                break \\n                \\n        tmp1 = \"\"\\n        tmp2 = \"\" \\n        for i in range(len(s)):\\n            if s[i] in D:\\n                tmp1 += D[s[i]]\\n            else:\\n                tmp1 += s[i]\\n\\n            if s[i] in d: \\n                tmp2 += d[s[i]]\\n            else:\\n                tmp2 += s[i]\\n\\n        return int(tmp1) - int(tmp2)\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3375209,
                "title": "python-easy-solution-by-replacing",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        bignum = str(num)\\n        smallnum = str(num)\\n\\n        for i in range(len(bignum)):\\n            if bignum[i] != \\'9\\':\\n                bignum = bignum.replace(bignum[i], \\'9\\')\\n                break\\n        \\n        for i in range(len(smallnum)):\\n            if smallnum[i] != \\'0\\':\\n                smallnum = smallnum.replace(smallnum[i], \\'0\\')\\n                break\\n        \\n        return int(bignum) - int(smallnum)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        bignum = str(num)\\n        smallnum = str(num)\\n\\n        for i in range(len(bignum)):\\n            if bignum[i] != \\'9\\':\\n                bignum = bignum.replace(bignum[i], \\'9\\')\\n                break\\n        \\n        for i in range(len(smallnum)):\\n            if smallnum[i] != \\'0\\':\\n                smallnum = smallnum.replace(smallnum[i], \\'0\\')\\n                break\\n        \\n        return int(bignum) - int(smallnum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359590,
                "title": "cpp-100-faster-solution",
                "content": "![Screenshot (788).png](https://assets.leetcode.com/users/images/0b3dba12-ecb7-4694-b14d-5e1ce56b9a38_1680189022.830886.png)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int tmp=num;\\n        vector<int> t;\\n\\n        while(tmp>0){\\n            t.push_back(tmp%10);\\n            tmp=tmp/10;\\n        }\\n\\n        int largest=9;\\n        int smallest=t.back();\\n\\n        for(int i=int(t.size())-1;i>=0;i--){\\n            if(t[i]!=9){\\n                largest=t[i];\\n                break;\\n            }\\n        }\\n        \\n        int a=0,b=0;\\n        for(int i=int(t.size())-1;i>=0;i--){\\n            if(t[i]==largest){\\n                a=a*10+9;\\n            }\\n            else{\\n                a=a*10+t[i];\\n            }\\n            if(t[i]==smallest){\\n                b=b*10;\\n            }\\n            else{\\n                b=b*10+t[i];\\n            }\\n        }\\n        return a-b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int tmp=num;\\n        vector<int> t;\\n\\n        while(tmp>0){\\n            t.push_back(tmp%10);\\n            tmp=tmp/10;\\n        }\\n\\n        int largest=9;\\n        int smallest=t.back();\\n\\n        for(int i=int(t.size())-1;i>=0;i--){\\n            if(t[i]!=9){\\n                largest=t[i];\\n                break;\\n            }\\n        }\\n        \\n        int a=0,b=0;\\n        for(int i=int(t.size())-1;i>=0;i--){\\n            if(t[i]==largest){\\n                a=a*10+9;\\n            }\\n            else{\\n                a=a*10+t[i];\\n            }\\n            if(t[i]==smallest){\\n                b=b*10;\\n            }\\n            else{\\n                b=b*10+t[i];\\n            }\\n        }\\n        return a-b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3353947,
                "title": "simple-and-short-solution-c-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n       string mx = to_string(number);\\n         string mn = to_string(number);\\n        char c=mx[0];char ch = mx[0];\\n         for(int i=0;i<mx.size();i++){\\n             if(mx[i]!=\\'9\\'){\\n                 c=mx[i];\\n                 break;\\n             }\\n\\n         }\\n         for(int i=0;i<mx.size();i++){\\n             if(mx[i]==c){\\n                 mx[i]=\\'9\\';\\n             }\\n         }\\n         for(int i=0;i<mx.size();i++){\\n             if(mn[i]==ch){\\n                 mn[i]=\\'0\\';\\n             }\\n         }\\n         int mx_num= stoi(mx);\\n          int mn_num= stoi(mn);\\n          return mx_num - mn_num;\\n\\n\\n    }\\n};\\n```\\n![download.jfif](https://assets.leetcode.com/users/images/1b764323-225d-4d4c-ae2a-b673fa9f5e5d_1680063659.1243157.jpeg)\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n       string mx = to_string(number);\\n         string mn = to_string(number);\\n        char c=mx[0];char ch = mx[0];\\n         for(int i=0;i<mx.size();i++){\\n             if(mx[i]!=\\'9\\'){\\n                 c=mx[i];\\n                 break;\\n             }\\n\\n         }\\n         for(int i=0;i<mx.size();i++){\\n             if(mx[i]==c){\\n                 mx[i]=\\'9\\';\\n             }\\n         }\\n         for(int i=0;i<mx.size();i++){\\n             if(mn[i]==ch){\\n                 mn[i]=\\'0\\';\\n             }\\n         }\\n         int mx_num= stoi(mx);\\n          int mn_num= stoi(mn);\\n          return mx_num - mn_num;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3321395,
                "title": "python3-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a = str(num)\\n        for i in range(len(a)):\\n            if a[i] != \\'9\\':\\n                a = a.replace(a[i], \\'9\\')\\n                break\\n        return int(a) - int(str(num).replace(str(num)[0], \\'0\\'))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        a = str(num)\\n        for i in range(len(a)):\\n            if a[i] != \\'9\\':\\n                a = a.replace(a[i], \\'9\\')\\n                break\\n        return int(a) - int(str(num).replace(str(num)[0], \\'0\\'))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3310502,
                "title": "c-solutions-easy-to-understand-beginner-friendly",
                "content": "\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    int maximumdigit(int num)\\n    {\\n        string str = to_string(num);\\n\\n        char fdigit = 0;\\n       \\n\\n        for (int i = 0; i < str.length(); i++)\\n        {\\n            if (str[i] != \\'9\\')\\n             {\\n                fdigit = str[i];\\n                break;\\n            }\\n            \\n           \\n        }\\n\\n        for (int i = 0; i < str.length(); i++)\\n        {\\n\\n            if (str[i] == fdigit)\\n            {\\n                str[i] = \\'9\\';\\n            }\\n        }\\n        return stoi(str);\\n    }\\n    int minimumdigit(int num)\\n    {\\n\\n        string ptr = to_string(num);\\n        char sdigit = 0;\\n\\n      \\n        for (int i = 0; i < ptr.length(); i++)\\n        {\\n            if (ptr[i] == \\'0\\')\\n            {\\n                sdigit = ptr[i];\\n                break;\\n            }\\n           \\n        }\\n\\n        for (int i = 0; i < ptr.length(); i++)\\n        {\\n\\n            if (ptr[i] == sdigit)\\n            {\\n                ptr[i] = \\'0\\';\\n            }\\n        }\\n\\n        return stoi(ptr);\\n    }\\n\\n    int minMaxDifference(int num)\\n    {\\n        int m = maximumdigit(num) - minimumdigit(num);\\n        return m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int maximumdigit(int num)\\n    {\\n        string str = to_string(num);\\n\\n        char fdigit = 0;\\n       \\n\\n        for (int i = 0; i < str.length(); i++)\\n        {\\n            if (str[i] != \\'9\\')\\n             {\\n                fdigit = str[i];\\n                break;\\n            }\\n            \\n           \\n        }\\n\\n        for (int i = 0; i < str.length(); i++)\\n        {\\n\\n            if (str[i] == fdigit)\\n            {\\n                str[i] = \\'9\\';\\n            }\\n        }\\n        return stoi(str);\\n    }\\n    int minimumdigit(int num)\\n    {\\n\\n        string ptr = to_string(num);\\n        char sdigit = 0;\\n\\n      \\n        for (int i = 0; i < ptr.length(); i++)\\n        {\\n            if (ptr[i] == \\'0\\')\\n            {\\n                sdigit = ptr[i];\\n                break;\\n            }\\n           \\n        }\\n\\n        for (int i = 0; i < ptr.length(); i++)\\n        {\\n\\n            if (ptr[i] == sdigit)\\n            {\\n                ptr[i] = \\'0\\';\\n            }\\n        }\\n\\n        return stoi(ptr);\\n    }\\n\\n    int minMaxDifference(int num)\\n    {\\n        int m = maximumdigit(num) - minimumdigit(num);\\n        return m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3310399,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String x=String.valueOf(num);\\n        char y=x.charAt(0);\\n        char z=x.charAt(0);\\n        int i=0;\\n        if(y==\\'9\\')\\n        {\\n            while(i<x.length()&&x.charAt(i)==\\'9\\')\\n            {\\n                i++;\\n            }\\n           \\n        } \\n        String num1=\"\";\\n        String num2=\"\";\\n        if(i>=x.length())\\n        {\\n            num1+=x;\\n        }\\n        else\\n        {\\n            y=x.charAt(i);\\n            for( i=0;i<x.length();i++)\\n            {\\n                if(x.charAt(i)==y)\\n                {\\n                    num1+=\\'9\\';\\n                }\\n                else\\n                {\\n                    num1+=x.charAt(i);\\n                }\\n            }\\n        }\\n        \\n        for( i=0;i<x.length();i++)\\n        {\\n            if(x.charAt(i)==z)\\n            {\\n                num2+=\\'0\\';\\n            }\\n            else\\n            {\\n                num2+=x.charAt(i);\\n            }\\n        }\\n    \\n        return Integer.parseInt(num1)-Integer.parseInt(num2);\\n\\n\\n    }\\n}\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/85ac5db4-6458-4240-a07b-5fe88f90d945_1679124300.8784058.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String x=String.valueOf(num);\\n        char y=x.charAt(0);\\n        char z=x.charAt(0);\\n        int i=0;\\n        if(y==\\'9\\')\\n        {\\n            while(i<x.length()&&x.charAt(i)==\\'9\\')\\n            {\\n                i++;\\n            }\\n           \\n        } \\n        String num1=\"\";\\n        String num2=\"\";\\n        if(i>=x.length())\\n        {\\n            num1+=x;\\n        }\\n        else\\n        {\\n            y=x.charAt(i);\\n            for( i=0;i<x.length();i++)\\n            {\\n                if(x.charAt(i)==y)\\n                {\\n                    num1+=\\'9\\';\\n                }\\n                else\\n                {\\n                    num1+=x.charAt(i);\\n                }\\n            }\\n        }\\n        \\n        for( i=0;i<x.length();i++)\\n        {\\n            if(x.charAt(i)==z)\\n            {\\n                num2+=\\'0\\';\\n            }\\n            else\\n            {\\n                num2+=x.charAt(i);\\n            }\\n        }\\n    \\n        return Integer.parseInt(num1)-Integer.parseInt(num2);\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3309865,
                "title": "javascript-o-1-no-tostring-native-math-solution",
                "content": "Why O(1)? because an input num can be max 100.000.000 which is static\\n\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nfunction minMaxDifference(num: number): number {\\n    const digits = [];\\n    let maxDigit = 9;\\n    let minDigit = 0;\\n    let maxNum = 0;\\n    let minNum = 0;\\n\\n    // convert 12345 into [1, 2, 3, 4, 5]\\n    while (num > 0) {\\n        // \"unshift\" is fine here since max digits is 8\\n        digits.unshift(num % 10);\\n        num = Math.floor(num / 10);\\n    }\\n\\n    for (let i = 0; i < digits.length; i++) {\\n        const digit = digits[i];\\n        const parsedNum = digit % 10;\\n\\n        // find digit which should be replaced with 9 (max) and 0 (min)\\n        if (parsedNum !== 9 && maxDigit === 9) {\\n            maxDigit = parsedNum;\\n        }\\n\\n        if (minDigit === 0) {\\n            minDigit = parsedNum;\\n        }\\n\\n        maxNum *= 10;\\n        minNum *= 10;\\n\\n        if (digit === maxDigit) {\\n            maxNum += 9;\\n        } else {\\n            maxNum += digit;\\n        }\\n\\n        if (digit === minDigit) {\\n            minNum += 0;\\n        } else {\\n            minNum += digit;\\n        }\\n    }\\n\\n    return maxNum - minNum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction minMaxDifference(num: number): number {\\n    const digits = [];\\n    let maxDigit = 9;\\n    let minDigit = 0;\\n    let maxNum = 0;\\n    let minNum = 0;\\n\\n    // convert 12345 into [1, 2, 3, 4, 5]\\n    while (num > 0) {\\n        // \"unshift\" is fine here since max digits is 8\\n        digits.unshift(num % 10);\\n        num = Math.floor(num / 10);\\n    }\\n\\n    for (let i = 0; i < digits.length; i++) {\\n        const digit = digits[i];\\n        const parsedNum = digit % 10;\\n\\n        // find digit which should be replaced with 9 (max) and 0 (min)\\n        if (parsedNum !== 9 && maxDigit === 9) {\\n            maxDigit = parsedNum;\\n        }\\n\\n        if (minDigit === 0) {\\n            minDigit = parsedNum;\\n        }\\n\\n        maxNum *= 10;\\n        minNum *= 10;\\n\\n        if (digit === maxDigit) {\\n            maxNum += 9;\\n        } else {\\n            maxNum += digit;\\n        }\\n\\n        if (digit === minDigit) {\\n            minNum += 0;\\n        } else {\\n            minNum += digit;\\n        }\\n    }\\n\\n    return maxNum - minNum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3305690,
                "title": "o-1-space-solution-java",
                "content": "# Intuition\\nmin = replace the first digit to 0.\\nmax = find the first non-9 digit , replace it to 9.\\nreturn max - min\\n\\n# Approach\\njust Math\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    private int length(int num) {\\n        return (int)Math.floor(Math.log10(num) + 1);\\n    }\\n    private int nth(int num, int pos) {\\n        return num / (int)Math.pow(10, pos) % 10;\\n    }\\n    private int remapDigit(int num, int from, int to) {\\n        int res = 0, base = 1;\\n        while(num > 0) {\\n            int d = num % 10;\\n            res += base * (d == from ? to: d);\\n            num /= 10;\\n            base *= 10;\\n        }\\n        return res;\\n    }\\n\\n    public int minMaxDifference(int num) {\\n        int len = length(num);\\n        int first = nth(num, --len);\\n        int min = remapDigit(num, first, 0);\\n        while(first == 9 && len > 0) {\\n            first = nth(num, --len);\\n        }\\n        return remapDigit(num, first, 9) - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    private int length(int num) {\\n        return (int)Math.floor(Math.log10(num) + 1);\\n    }\\n    private int nth(int num, int pos) {\\n        return num / (int)Math.pow(10, pos) % 10;\\n    }\\n    private int remapDigit(int num, int from, int to) {\\n        int res = 0, base = 1;\\n        while(num > 0) {\\n            int d = num % 10;\\n            res += base * (d == from ? to: d);\\n            num /= 10;\\n            base *= 10;\\n        }\\n        return res;\\n    }\\n\\n    public int minMaxDifference(int num) {\\n        int len = length(num);\\n        int first = nth(num, --len);\\n        int min = remapDigit(num, first, 0);\\n        while(first == 9 && len > 0) {\\n            first = nth(num, --len);\\n        }\\n        return remapDigit(num, first, 9) - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297095,
                "title": "javascript-solution-99-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    num = num.toString()\\n    let m=num\\n    let o=num\\n    let l= num.length\\n    let b\\n    let c\\n    let j\\n    let k\\n    for(let i=0; i<l; i++){\\n      if(!b&&num[i]!==\\'9\\'){\\n          b=num[i]\\n          j=i\\n      }  \\n      if(!c&&num[i]!==\\'0\\'){\\n          c=num[i]\\n          k=i\\n      }  \\n      if(b&&c){\\n          break\\n      }\\n    }\\n    // console.log(b,c)\\n   while(j!==-1||k!==-1){\\n        if(j!==-1){\\n             m=m.replace(b,\\'9\\')\\n             j=m.indexOf(b)\\n        }\\n        if(k!==-1){\\n             o=o.replace(c,\\'0\\')\\n             k=o.indexOf(c)\\n        }\\n   }\\n  return Number(m)-Number(o)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    num = num.toString()\\n    let m=num\\n    let o=num\\n    let l= num.length\\n    let b\\n    let c\\n    let j\\n    let k\\n    for(let i=0; i<l; i++){\\n      if(!b&&num[i]!==\\'9\\'){\\n          b=num[i]\\n          j=i\\n      }  \\n      if(!c&&num[i]!==\\'0\\'){\\n          c=num[i]\\n          k=i\\n      }  \\n      if(b&&c){\\n          break\\n      }\\n    }\\n    // console.log(b,c)\\n   while(j!==-1||k!==-1){\\n        if(j!==-1){\\n             m=m.replace(b,\\'9\\')\\n             j=m.indexOf(b)\\n        }\\n        if(k!==-1){\\n             o=o.replace(c,\\'0\\')\\n             k=o.indexOf(c)\\n        }\\n   }\\n  return Number(m)-Number(o)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3296343,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n        char ch;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]!=\\'9\\')\\n            {\\n                ch=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==ch)\\n            {\\n                s[i]=\\'9\\';\\n            }\\n        }\\n        long long int max_ele=stoi(s);\\n        s=to_string(num);\\n        char c=s[0];\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==c)\\n            {\\n                s[i]=\\'0\\';\\n            }\\n        }\\n        long long int min_ele=stoi(s);\\n        // cout<<max_ele<<endl;\\n        // cout<<min_ele<<endl;\\n        long long int diff=max_ele-min_ele;\\n        return diff;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n        char ch;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]!=\\'9\\')\\n            {\\n                ch=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==ch)\\n            {\\n                s[i]=\\'9\\';\\n            }\\n        }\\n        long long int max_ele=stoi(s);\\n        s=to_string(num);\\n        char c=s[0];\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==c)\\n            {\\n                s[i]=\\'0\\';\\n            }\\n        }\\n        long long int min_ele=stoi(s);\\n        // cout<<max_ele<<endl;\\n        // cout<<min_ele<<endl;\\n        long long int diff=max_ele-min_ele;\\n        return diff;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3294344,
                "title": "c-simple-few-lines-tostring-replace-12ms-100",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int MinMaxDifference(int num) \\n    {\\n        var (s, hi) = (num.ToString(), 0);\\n\\n        for(var len1 = s.Length-1; hi < len1 && s[hi]==\\'9\\'; hi++) { } \\n\\n        return int.Parse(s.Replace(s[hi], \\'9\\')) - int.Parse(s.Replace(s[0], \\'0\\'));\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinMaxDifference(int num) \\n    {\\n        var (s, hi) = (num.ToString(), 0);\\n\\n        for(var len1 = s.Length-1; hi < len1 && s[hi]==\\'9\\'; hi++) { } \\n\\n        return int.Parse(s.Replace(s[hi], \\'9\\')) - int.Parse(s.Replace(s[0], \\'0\\'));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3290139,
                "title": "java-no-external-libraries",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        char[] numArr = String.valueOf(num).toCharArray();\\n        return getMax(num, numArr) - getMin(num, numArr);\\n    }\\n\\n    private int getMin(int num, char[] numArr) {\\n        int min = Integer.MAX_VALUE;\\n        int numChosen = 0;\\n\\n        for (char ch: numArr) {\\n            int chNum = Character.getNumericValue(ch);\\n            int remappedNumber = remapNumber(num, chNum, \\n            numChosen, numArr);\\n            min = Math.min(min, remappedNumber);\\n        }\\n\\n        return min;\\n    }\\n\\n    private int getMax(int num, char[] numArr) {\\n        int max = Integer.MIN_VALUE;\\n        int numChosen = 9;\\n\\n        for (char ch: numArr) {\\n            int chNum = Character.getNumericValue(ch);\\n            int remappedNumber = remapNumber(num, chNum, \\n            numChosen, numArr);\\n            max = Math.max(max, remappedNumber);\\n        }\\n\\n        return max;\\n    }\\n\\n    private int remapNumber(int num, \\n    int numToRemap, int numChosen, char[] numArr) {\\n        StringBuilder build = new StringBuilder();\\n\\n        for (char ch: numArr) {\\n            int chNum = Character.getNumericValue(ch);\\n\\n            if (chNum == numToRemap)\\n                build.append(numChosen);\\n            else\\n                build.append(ch);\\n        }\\n\\n        int toNum = Integer.valueOf(build.toString());\\n        return removeLeadingZeros(toNum);\\n    }\\n\\n    private int removeLeadingZeros(int num) {\\n        int counter = 0;\\n        String numStr = String.valueOf(num);\\n        int n = numStr.length();\\n\\n        while (n > 1 && numStr.charAt(0) == \\'0\\')\\n            counter++;\\n        \\n        return Integer.valueOf(numStr.substring(counter, n));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        char[] numArr = String.valueOf(num).toCharArray();\\n        return getMax(num, numArr) - getMin(num, numArr);\\n    }\\n\\n    private int getMin(int num, char[] numArr) {\\n        int min = Integer.MAX_VALUE;\\n        int numChosen = 0;\\n\\n        for (char ch: numArr) {\\n            int chNum = Character.getNumericValue(ch);\\n            int remappedNumber = remapNumber(num, chNum, \\n            numChosen, numArr);\\n            min = Math.min(min, remappedNumber);\\n        }\\n\\n        return min;\\n    }\\n\\n    private int getMax(int num, char[] numArr) {\\n        int max = Integer.MIN_VALUE;\\n        int numChosen = 9;\\n\\n        for (char ch: numArr) {\\n            int chNum = Character.getNumericValue(ch);\\n            int remappedNumber = remapNumber(num, chNum, \\n            numChosen, numArr);\\n            max = Math.max(max, remappedNumber);\\n        }\\n\\n        return max;\\n    }\\n\\n    private int remapNumber(int num, \\n    int numToRemap, int numChosen, char[] numArr) {\\n        StringBuilder build = new StringBuilder();\\n\\n        for (char ch: numArr) {\\n            int chNum = Character.getNumericValue(ch);\\n\\n            if (chNum == numToRemap)\\n                build.append(numChosen);\\n            else\\n                build.append(ch);\\n        }\\n\\n        int toNum = Integer.valueOf(build.toString());\\n        return removeLeadingZeros(toNum);\\n    }\\n\\n    private int removeLeadingZeros(int num) {\\n        int counter = 0;\\n        String numStr = String.valueOf(num);\\n        int n = numStr.length();\\n\\n        while (n > 1 && numStr.charAt(0) == \\'0\\')\\n            counter++;\\n        \\n        return Integer.valueOf(numStr.substring(counter, n));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3284640,
                "title": "simple-o-n-python3-solution-beats-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor this problem, we need to find the difference between the highest and lowest numbers that can be made by changing a single type of digit. For example, with the number 1337, the possible digits we can change to get the highest and lowest values are 1, 3 and 7. The easiest way to do this is by casting our input from type `int` to type `str` and changing the individual characters before casting back to an `int` for comparison.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStore our maximum and minimum in two variables `lowest` and `highest`. We can deduce automatically that the lowest value can be achieved by **changing the first digit to 0**, as this will give us at least one order of magnitude difference - for our example 1337, the smallest possible number is 337. This means we only have to work to find the *largest* possible value by going through the possible digits in the number and changing them to 9.\\n\\nIn order to optimize this process, we can construct a set containing only the unique digits and loop through it to find our max. For every possible digit `i` in our set, call `s.replace(i, \\'9\\')` on a copy of our number cast it back to an `int`. If this result is bigger than our current value for `highest`, change it accordingly. Finally, return the result of `highest - lowest` for the answer\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\nThe function requires a single pass over the input `num` to construct the set. Each call to `s.replace()` also scales linearly with the size of the input.\\n\\n- Space complexity: $$O(k)$$\\nSome extra space is required for storing our unique characters, so the complexity is $$O(k)$$ where $$k$$ is the number of unique digits in `num` \\n\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        s = str(num)\\n        uniques = set(s)\\n        lowest = int(s.replace(s[0], \\'0\\'))\\n        highest = 0\\n\\n        for i in list(uniques):\\n            hi_num = s.replace(i, \\'9\\')\\n            highest = max(highest, int(hi_num))\\n\\n        return highest - lowest\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        s = str(num)\\n        uniques = set(s)\\n        lowest = int(s.replace(s[0], \\'0\\'))\\n        highest = 0\\n\\n        for i in list(uniques):\\n            hi_num = s.replace(i, \\'9\\')\\n            highest = max(highest, int(hi_num))\\n\\n        return highest - lowest\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3268962,
                "title": "easy-c-approach-100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int> vec1;\\n        int sum1=0,sum2=0,flag=1;\\n        while(num!=0){\\n            vec1.push_back(num%10);\\n            num=num/10;\\n        }\\n        int d=vec1.size();\\n        for(int i=d-1;i>=0;i--){\\n            if(vec1[i]!=9){\\n                flag=0;\\n                for(int j=d-1;j>=0;j--){\\n                    if(vec1[j]==vec1[i]){\\n                        sum1=sum1*10+9;\\n                    }\\n                    else{\\n                        sum1=sum1*10+vec1[j];\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        if(flag==1){\\n            for(int j=d-1;j>=0;j--){\\n                sum1=sum1*10+vec1[j];\\n            }\\n        }\\n        int temp=vec1[d-1];\\n        for(int i=d-1;i>=0;i--){\\n            if(vec1[i]==temp){\\n                sum2=sum2*10+0;\\n            }\\n            else{\\n                sum2=sum2*10+vec1[i];\\n            }\\n        }\\n        cout<<sum1<<\\' \\'<<sum2;\\n        return sum1-sum2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Dynamic Programming",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        vector<int> vec1;\\n        int sum1=0,sum2=0,flag=1;\\n        while(num!=0){\\n            vec1.push_back(num%10);\\n            num=num/10;\\n        }\\n        int d=vec1.size();\\n        for(int i=d-1;i>=0;i--){\\n            if(vec1[i]!=9){\\n                flag=0;\\n                for(int j=d-1;j>=0;j--){\\n                    if(vec1[j]==vec1[i]){\\n                        sum1=sum1*10+9;\\n                    }\\n                    else{\\n                        sum1=sum1*10+vec1[j];\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        if(flag==1){\\n            for(int j=d-1;j>=0;j--){\\n                sum1=sum1*10+vec1[j];\\n            }\\n        }\\n        int temp=vec1[d-1];\\n        for(int i=d-1;i>=0;i--){\\n            if(vec1[i]==temp){\\n                sum2=sum2*10+0;\\n            }\\n            else{\\n                sum2=sum2*10+vec1[i];\\n            }\\n        }\\n        cout<<sum1<<\\' \\'<<sum2;\\n        return sum1-sum2;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3260920,
                "title": "python-2-ways",
                "content": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:  # O(log n) time & space\\n        s = str(num)\\n        c = next((c for c in s if c != \"9\"), \"0\")\\n        return int(s.replace(c, \"9\")) - int(s.replace(s[0], \"0\"))\\n\\n    def minMaxDifference(self, num: int) -> int:  # O(log n) time & O(1) space\\n\\n        def get_digits(x: int) -> Generator:\\n            if x:\\n                x, r = divmod(x, 10)\\n                yield from get_digits(x)\\n                yield r\\n\\n        minimum = maximum = 0\\n        first_digit, first_not_nine = 0, 9\\n        for n in get_digits(num):\\n            if not first_digit:\\n                first_digit = n\\n            if n != 9 and first_not_nine == 9:\\n                first_not_nine = n\\n            minimum = minimum * 10 + n * (first_digit != n)\\n            maximum = maximum * 10 + (n, 9)[first_not_nine == n]\\n\\n        return maximum - minimum\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:  # O(log n) time & space\\n        s = str(num)\\n        c = next((c for c in s if c != \"9\"), \"0\")\\n        return int(s.replace(c, \"9\")) - int(s.replace(s[0], \"0\"))\\n\\n    def minMaxDifference(self, num: int) -> int:  # O(log n) time & O(1) space\\n\\n        def get_digits(x: int) -> Generator:\\n            if x:\\n                x, r = divmod(x, 10)\\n                yield from get_digits(x)\\n                yield r\\n\\n        minimum = maximum = 0\\n        first_digit, first_not_nine = 0, 9\\n        for n in get_digits(num):\\n            if not first_digit:\\n                first_digit = n\\n            if n != 9 and first_not_nine == 9:\\n                first_not_nine = n\\n            minimum = minimum * 10 + n * (first_digit != n)\\n            maximum = maximum * 10 + (n, 9)[first_not_nine == n]\\n\\n        return maximum - minimum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3257236,
                "title": "easy-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n        string num1= to_string(number);\\n        string num2=to_string(number);\\n        \\n        char c=num1[0],ch=num1[0];\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]!=\\'9\\'){\\n                c=num1[i];\\n                break;\\n            }\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]==c) num1[i]=\\'9\\';\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num2[i]==ch) num2[i]=\\'0\\';\\n        }\\n        \\n        int max_num=stoi(num1);\\n        int min_num=stoi(num2);\\n        return max_num -min_num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n        string num1= to_string(number);\\n        string num2=to_string(number);\\n        \\n        char c=num1[0],ch=num1[0];\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]!=\\'9\\'){\\n                c=num1[i];\\n                break;\\n            }\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]==c) num1[i]=\\'9\\';\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num2[i]==ch) num2[i]=\\'0\\';\\n        }\\n        \\n        int max_num=stoi(num1);\\n        int min_num=stoi(num2);\\n        return max_num -min_num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3256653,
                "title": "easy-simple-solution-c-by-string-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n        int n=s.size();\\n        char c;\\n        for(int i=0;i<n;i++){\\n            if(s[i]!=\\'9\\'){\\n                c=s[i];\\n                break;\\n            }\\n        }\\n        string maxVal=s;\\n        for(int i=0;i<n;i++){\\n            if(maxVal[i]==c)\\n                maxVal[i]=\\'9\\';\\n        }\\n        string minVal=s;\\n        c=s[0];\\n        for(int i=0;i<n;i++)\\n            if(minVal[i]==c)\\n                minVal[i]=\\'0\\';\\n        return stoi(maxVal)-stoi(minVal);\\n                \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n        int n=s.size();\\n        char c;\\n        for(int i=0;i<n;i++){\\n            if(s[i]!=\\'9\\'){\\n                c=s[i];\\n                break;\\n            }\\n        }\\n        string maxVal=s;\\n        for(int i=0;i<n;i++){\\n            if(maxVal[i]==c)\\n                maxVal[i]=\\'9\\';\\n        }\\n        string minVal=s;\\n        c=s[0];\\n        for(int i=0;i<n;i++)\\n            if(minVal[i]==c)\\n                minVal[i]=\\'0\\';\\n        return stoi(maxVal)-stoi(minVal);\\n                \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254367,
                "title": "javascript-o-n-with-nice-formatting",
                "content": "# Intuition\\nTo get a max number from a number like 99123, we need to replace the first digit that is not \"9\" with a \"9\". In this case we\\'d replace \"1\" with a \"9\".\\n\\nFor min number, replace the first digit that is not 0 with a zero.\\n\\n# Complexity\\nTime complexity:\\n\\n- 1 loop to split string\\n- 1 loop to get max number\\n- 1 loop to get min number\\n- 1 loop to join digits\\n\\nTotal is 4n, i.e. $$O(n)$$\\n\\n\\n# Code\\n```\\nfunction minMaxDifference (num) {\\n    const digits = num.toString().split(\\'\\');\\n    const maxNumber = join(replaceWith(digits, \\'9\\'));\\n    const minNumber = join(replaceWith(digits, \\'0\\'));\\n    return maxNumber - minNumber;\\n};\\n\\nfunction replaceWith(originalDigits, replaceWith) {\\n    let digitToReplace = null;\\n    const digits = [...originalDigits];\\n    \\n    for (let i = 0; i < digits.length; i++) {\\n        const thisDigit = digits[i];\\n\\n        // E.g. if the number starts with 9 like 99199, do not replace 9 with 9\\n        if (digitToReplace === null && thisDigit === replaceWith) {\\n            continue;\\n        }\\n\\n        // Find the first digit that is not \"replaceWith\"\\n        if (digitToReplace === null) {\\n            digitToReplace = thisDigit;\\n        }\\n\\n        if (thisDigit === digitToReplace) {\\n            digits[i] = replaceWith;\\n        }\\n    }\\n\\n    return digits;\\n}\\n\\nfunction join(digits) {\\n    return Number(digits.join(\\'\\'));\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction minMaxDifference (num) {\\n    const digits = num.toString().split(\\'\\');\\n    const maxNumber = join(replaceWith(digits, \\'9\\'));\\n    const minNumber = join(replaceWith(digits, \\'0\\'));\\n    return maxNumber - minNumber;\\n};\\n\\nfunction replaceWith(originalDigits, replaceWith) {\\n    let digitToReplace = null;\\n    const digits = [...originalDigits];\\n    \\n    for (let i = 0; i < digits.length; i++) {\\n        const thisDigit = digits[i];\\n\\n        // E.g. if the number starts with 9 like 99199, do not replace 9 with 9\\n        if (digitToReplace === null && thisDigit === replaceWith) {\\n            continue;\\n        }\\n\\n        // Find the first digit that is not \"replaceWith\"\\n        if (digitToReplace === null) {\\n            digitToReplace = thisDigit;\\n        }\\n\\n        if (thisDigit === digitToReplace) {\\n            digits[i] = replaceWith;\\n        }\\n    }\\n\\n    return digits;\\n}\\n\\nfunction join(digits) {\\n    return Number(digits.join(\\'\\'));\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3254365,
                "title": "c-easy-100-faster-95-space",
                "content": "# Intuition\\nWhile traversing number, if we find the first digit that is not equal to 9 then we store the that digit.\\nWe will use this digit for swapping to \\'9\\' and \\'0\\' for maximum and minimum number.\\n\\n# Approach\\nIterative approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n\\n        string str_max = to_string(num);\\n        string str_min = to_string(num);\\n        int n = str_max.size();\\n\\n        char d1 = str_max[0];\\n        char d2 = str_max[0];\\n\\n        int i=0;\\n\\n        while(i<n){\\n            if(str_max[i] != \\'9\\'){\\n                d1 = str_max[i];\\n                break;\\n            }\\n            i++;\\n        }\\n\\n        for(int i=0; i<n; i++)\\n            if(str_max[i]==d1) \\n                str_max[i]=\\'9\\';\\n        \\n        for(int i=0; i<n; i++)\\n            if(str_min[i]==d2) \\n                str_min[i]=\\'0\\';\\n        \\n\\n        int max = stoi(str_max);\\n        int min = stoi(str_min);\\n\\n        return max-min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n\\n        string str_max = to_string(num);\\n        string str_min = to_string(num);\\n        int n = str_max.size();\\n\\n        char d1 = str_max[0];\\n        char d2 = str_max[0];\\n\\n        int i=0;\\n\\n        while(i<n){\\n            if(str_max[i] != \\'9\\'){\\n                d1 = str_max[i];\\n                break;\\n            }\\n            i++;\\n        }\\n\\n        for(int i=0; i<n; i++)\\n            if(str_max[i]==d1) \\n                str_max[i]=\\'9\\';\\n        \\n        for(int i=0; i<n; i++)\\n            if(str_min[i]==d2) \\n                str_min[i]=\\'0\\';\\n        \\n\\n        int max = stoi(str_max);\\n        int min = stoi(str_min);\\n\\n        return max-min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243152,
                "title": "100-beats-simple-python-solution",
                "content": "# Intuition\\nUsed Hint\\n\\n# Approach\\nConvert integer into string\\nTo get maximum , replace first character with \\'9\\'\\nTo get minimum , replace first non-nine character with \\'0\\'\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        s = str(num)\\n        Min= int(s.replace(s[0], \\'0\\'))\\n        for c in s:\\n            if c != \\'9\\':\\n                s = s.replace(c, \\'9\\')\\n                break\\n        Max= int(s)\\n        return Max - Min\\n             \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minMaxDifference(self, num):\\n        s = str(num)\\n        Min= int(s.replace(s[0], \\'0\\'))\\n        for c in s:\\n            if c != \\'9\\':\\n                s = s.replace(c, \\'9\\')\\n                break\\n        Max= int(s)\\n        return Max - Min\\n             \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240239,
                "title": "java-somewhat-strange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int minMaxDifference(int num) {\\n    int n = 0;\\n\\n    for(int copy = num; copy != 0; copy /= 10, n++);\\n\\n    int t[] = new int[n];\\n    for(int copy = num, i = n-1; copy != 0; copy /= 10, i--) t[i] = copy % 10;\\n\\n    int d = -1;\\n    for(int i = 0; i != n; i++) \\n      if(t[i] != 9){d = t[i]; break;}\\n\\n    int maxi = 0;\\n    for(int i = 0; i != n; i++){\\n      maxi *= 10;\\n      if(t[i] == 9 || d == t[i]) maxi += 9;\\n      else maxi += t[i];\\n    } \\n\\n    int mini = 0;\\n    for(int i = 1; i != n; i++){\\n      mini *= 10;\\n      if(t[i] == t[0] ) mini += 0;\\n      else mini += t[i];\\n    }  \\n\\n    return maxi - mini;\\n\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int minMaxDifference(int num) {\\n    int n = 0;\\n\\n    for(int copy = num; copy != 0; copy /= 10, n++);\\n\\n    int t[] = new int[n];\\n    for(int copy = num, i = n-1; copy != 0; copy /= 10, i--) t[i] = copy % 10;\\n\\n    int d = -1;\\n    for(int i = 0; i != n; i++) \\n      if(t[i] != 9){d = t[i]; break;}\\n\\n    int maxi = 0;\\n    for(int i = 0; i != n; i++){\\n      maxi *= 10;\\n      if(t[i] == 9 || d == t[i]) maxi += 9;\\n      else maxi += t[i];\\n    } \\n\\n    int mini = 0;\\n    for(int i = 1; i != n; i++){\\n      mini *= 10;\\n      if(t[i] == t[0] ) mini += 0;\\n      else mini += t[i];\\n    }  \\n\\n    return maxi - mini;\\n\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3239682,
                "title": "minmaxdifference",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n     num = num.toString()\\n    let max = 0\\n    let element = 0\\n    for (let i = 0; i < num.length; i++) {\\n        if (num[i] != \\'9\\') {\\n            element = num[i]\\n            // console.log(element);\\n            break;\\n        }\\n\\n    }\\n    max = num.replaceAll(element, \"9\") \\n    let min = num.replaceAll(num[0], \"0\")\\n    return max - min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n     num = num.toString()\\n    let max = 0\\n    let element = 0\\n    for (let i = 0; i < num.length; i++) {\\n        if (num[i] != \\'9\\') {\\n            element = num[i]\\n            // console.log(element);\\n            break;\\n        }\\n\\n    }\\n    max = num.replaceAll(element, \"9\") \\n    let min = num.replaceAll(num[0], \"0\")\\n    return max - min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3236524,
                "title": "c-string-based-6-liner",
                "content": "# Description\\n\\nUpon careful study of the problem it becomes clear that the maximum number can be obtained from the original by replacing the first digit in it that is not equal to 9 by 9. The minimum number can be obtained by zeroing the most significant digit of the number by replacing its first digit with 0. In this solution the number is converted to a string and then the replacements described above are made in copies of this string.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        auto s = to_string(num);\\n        auto a(s), b(s);\\n        auto it = find_if(s.begin(), s.end(), [](char c) { return c != \\'9\\'; });\\n        replace(a.begin(), a.end(), it == s.end() ? s[0] : *it, \\'9\\');\\n        replace(b.begin(), b.end(), s[0], \\'0\\');\\n        return stoi(a) - stoi(b);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        auto s = to_string(num);\\n        auto a(s), b(s);\\n        auto it = find_if(s.begin(), s.end(), [](char c) { return c != \\'9\\'; });\\n        replace(a.begin(), a.end(), it == s.end() ? s[0] : *it, \\'9\\');\\n        replace(b.begin(), b.end(), s[0], \\'0\\');\\n        return stoi(a) - stoi(b);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235312,
                "title": "very-easy-to-understand-code-in-c",
                "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/2566.%20Maximum%20Difference%20by%20Remapping%20a%20Digit.CPP\\n\\nThis Repository contains all LEETCODE SOLUTION IN C++\\nIf you find it helpful PLEASE LEAVE A STAR\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n        string num1= to_string(number);\\n        string num2=to_string(number);\\n        \\n        char c=num1[0],ch=num1[0];\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]!=\\'9\\'){\\n                c=num1[i];\\n                break;\\n            }\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]==c) num1[i]=\\'9\\';\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num2[i]==ch) num2[i]=\\'0\\';\\n        }\\n        \\n        int max_num=stoi(num1);\\n        int min_num=stoi(num2);\\n        return max_num -min_num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int number) {\\n        string num1= to_string(number);\\n        string num2=to_string(number);\\n        \\n        char c=num1[0],ch=num1[0];\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]!=\\'9\\'){\\n                c=num1[i];\\n                break;\\n            }\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num1[i]==c) num1[i]=\\'9\\';\\n        }\\n        \\n        for(int i=0; i<num1.size(); i++)\\n        {\\n            if(num2[i]==ch) num2[i]=\\'0\\';\\n        }\\n        \\n        int max_num=stoi(num1);\\n        int min_num=stoi(num2);\\n        return max_num -min_num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232765,
                "title": "simple-c-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        string s=to_string(num);\\n        int i=0, n=s.size();\\n        while(i<n && s[i]==\\'9\\') i++;\\n        string t=s;\\n        if(i<n)\\n        {\\n            char ch=s[i];\\n            for(int x=0; x<n; x++)\\n            {\\n                if(s[x]==ch) s[x]=\\'9\\';\\n            }\\n        }\\n        int a=stoi(s);\\n        s=t;\\n        i=0;\\n        while(i<n && s[i]==\\'0\\') i++;\\n        if(i<n)\\n        {\\n            char ch=s[i];\\n            for(int x=0; x<n; x++)\\n            {\\n                if(s[x]==ch) s[x]=\\'0\\';\\n            }\\n        }\\n        int b=stoi(s);\\n        return a-b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minMaxDifference(int num) \\n    {\\n        string s=to_string(num);\\n        int i=0, n=s.size();\\n        while(i<n && s[i]==\\'9\\') i++;\\n        string t=s;\\n        if(i<n)\\n        {\\n            char ch=s[i];\\n            for(int x=0; x<n; x++)\\n            {\\n                if(s[x]==ch) s[x]=\\'9\\';\\n            }\\n        }\\n        int a=stoi(s);\\n        s=t;\\n        i=0;\\n        while(i<n && s[i]==\\'0\\') i++;\\n        if(i<n)\\n        {\\n            char ch=s[i];\\n            for(int x=0; x<n; x++)\\n            {\\n                if(s[x]==ch) s[x]=\\'0\\';\\n            }\\n        }\\n        int b=stoi(s);\\n        return a-b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232670,
                "title": "c-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Generate ```Min``` Number\\n- Generate ```Max``` Number\\n- Return ```Max - Min```\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n\\n        //Converting Integer to String\\n        string mx = to_string(num) , mn = mx;\\n        char c = mn[0];\\n        \\n        //Generating Minimum Number\\n        //For a number to be minimum, the Left most digit should be zero\\n        // eg : 9876 --> 0876\\n        for(int i = 0; i < mn.size(); i++)\\n            mn[i] = (mn[i] == c) ?  \\'0\\' : mn[i];\\n        \\n        //Generating Max Number\\n        //For a number to be maximum, the Left most digit should be 9\\n        // eg : 1456 --> 9456\\n        for(int i = 0; i < mx.size(); i++){\\n            if(mx[i] != \\'9\\'){\\n                char c = mx[i];\\n                while(i < mx.size()){\\n                    if(mx[i] == c) mx[i] = \\'9\\';\\n                    i++;\\n                }\\n                break;\\n            }\\n        }\\n\\n        //Return Max - Min\\n        return stoi(mx) - stoi(mn);\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```Min```\n```Max```\n```Max - Min```\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n\\n        //Converting Integer to String\\n        string mx = to_string(num) , mn = mx;\\n        char c = mn[0];\\n        \\n        //Generating Minimum Number\\n        //For a number to be minimum, the Left most digit should be zero\\n        // eg : 9876 --> 0876\\n        for(int i = 0; i < mn.size(); i++)\\n            mn[i] = (mn[i] == c) ?  \\'0\\' : mn[i];\\n        \\n        //Generating Max Number\\n        //For a number to be maximum, the Left most digit should be 9\\n        // eg : 1456 --> 9456\\n        for(int i = 0; i < mx.size(); i++){\\n            if(mx[i] != \\'9\\'){\\n                char c = mx[i];\\n                while(i < mx.size()){\\n                    if(mx[i] == c) mx[i] = \\'9\\';\\n                    i++;\\n                }\\n                break;\\n            }\\n        }\\n\\n        //Return Max - Min\\n        return stoi(mx) - stoi(mn);\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232310,
                "title": "o-n-time-o-1-space-optimal-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n#### To get max value:\\n- We try to the find the first digit in num whose value is not equal to 9. Then we replace that digit with 0 for all its occurances in num.\\n- In case we can\\'t find this digit then we don\\'t need to modify num, we can say max = num. Now max = modified number.\\n#### To get min value:\\n- Similarly we try to the find the first digit in num whose value is not equal to 0. Then we replace that digit with 9 for all its occurances in num. Now min = modified number.\\n- In case we can\\'t find this digit then we don\\'t need to modify num, we can say min = num.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n#### minMaxDifference method:\\n- x = first occurring digit that is not equal to 9. In case all digits in num are 9 then x = 9, since 9 will be returned from the find() method.\\n- y = first occurring digit that is not equal to 0. In case all digits in num are 0 then x = 0, since 0 will be returned by the find() method.\\n- If x equals 9 then max = num, else max = modified number where x is replaced with 9.\\n- If y equals 0 then min = num, else min = modified number where y is replaced with 0.\\n- Return max - min.\\n\\n#### find method:\\n- By default initialize val to be the last digit in num, i.e. val = num % 10\\n- Change num = num / 10 (so that we can start considering from the last second digit onwards until the first digit)\\n- While num > 0, if digit d != n then val = d (note: n is either 0 or 9, based on the param value we have passed)\\n- Return val\\n\\n#### modify method:\\n- modified number is initialized to 0\\n- Iterate through the digits of num from right to left.\\n- Digit d = n % 10, if d == find, then multiply replace with the multiplier else multiply d with the multiplier.\\n- Note the multiplier will be as follows: 1, 10, 100, 1000, 10000 and so on. We use this so that we can place our next digit in front of the current digits in the modified number.\\n- Consider e.g. 3456 where find = 3, replace = 9. Then the modified number will be as follows: 6, 56, 456, 9456.\\n    - 6*1    + 0\\n    - 5*10   + 6\\n    - 4*100  + 56\\n    - 9*1000 + 456\\n\\n# Complexity\\n- Time complexity: **O(N)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int modify(int num, int find, int replace){\\n        int modified = 0, n = 0, multiplier, d;\\n        while(num > 0){\\n            d = num % 10;\\n            multiplier = (int)Math.pow(10,n);\\n            modified += (d == find) ? replace*multiplier : d*multiplier;\\n            n++;\\n            num /= 10;\\n        }\\n        return modified;\\n    }\\n    public int find(int num, int n){\\n        int d, val = num%10;\\n        num /= 10;\\n\\n        while(num>0){\\n            d = num%10;\\n            if(d != n) val = d;\\n            num /= 10;\\n        }\\n        return val;\\n    }\\n    public int minMaxDifference(int num) {\\n        int x, y, max, min;\\n        x = find(num, 9);\\n        y = find(num, 0);\\n        \\n        max = (x == 9) ? num : modify(num, x, 9);\\n        min = (y == 0) ? num : modify(num, y, 0);\\n        \\n        return  max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int modify(int num, int find, int replace){\\n        int modified = 0, n = 0, multiplier, d;\\n        while(num > 0){\\n            d = num % 10;\\n            multiplier = (int)Math.pow(10,n);\\n            modified += (d == find) ? replace*multiplier : d*multiplier;\\n            n++;\\n            num /= 10;\\n        }\\n        return modified;\\n    }\\n    public int find(int num, int n){\\n        int d, val = num%10;\\n        num /= 10;\\n\\n        while(num>0){\\n            d = num%10;\\n            if(d != n) val = d;\\n            num /= 10;\\n        }\\n        return val;\\n    }\\n    public int minMaxDifference(int num) {\\n        int x, y, max, min;\\n        x = find(num, 9);\\n        y = find(num, 0);\\n        \\n        max = (x == 9) ? num : modify(num, x, 9);\\n        min = (y == 0) ? num : modify(num, y, 0);\\n        \\n        return  max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231568,
                "title": "python-solution-simple-mapping-to-0-or-9",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num = str(num)\\n        firstNonNine = \\'0\\'\\n        for n in num:\\n            if n != \\'9\\':\\n                firstNonNine = n\\n                break\\n        return int(num.replace(firstNonNine,\"9\")) - int(num.replace(num[0],\"0\"))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n        num = str(num)\\n        firstNonNine = \\'0\\'\\n        for n in num:\\n            if n != \\'9\\':\\n                firstNonNine = n\\n                break\\n        return int(num.replace(firstNonNine,\"9\")) - int(num.replace(num[0],\"0\"))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230208,
                "title": "quick-and-easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n\\n        a = str(num)\\n        b = str(num).replace(a[0], \\'0\\')\\n\\n        for i in range(len(a)):\\n            if a[i]!=\\'9\\':\\n                a = a.replace(a[i], \\'9\\')\\n                break\\n\\n        return int(a) - int(b)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minMaxDifference(self, num: int) -> int:\\n\\n        a = str(num)\\n        b = str(num).replace(a[0], \\'0\\')\\n\\n        for i in range(len(a)):\\n            if a[i]!=\\'9\\':\\n                a = a.replace(a[i], \\'9\\')\\n                break\\n\\n        return int(a) - int(b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3229243,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        var list = new List<int>();\\n        while(num > 0){\\n            int n = num % 10;\\n            list.Add(n);\\n            num /= 10;\\n        }\\n        list.Reverse();\\n        int up = 0, down = list[0], max= 0, min = 0;\\n        for(int i = 0; i < list.Count; i++){\\n            if(list[i] < 9){\\n                up = list[i];\\n                break;\\n            }\\n        }\\n        for(int j = 0; j < list.Count; j++){\\n            if(list[j] == up){\\n                max = max*10+9;\\n            }else{\\n                max = max*10+list[j];\\n            }\\n            if(list[j] == down){\\n                min = min*10+0;\\n            }else{\\n                min = min*10+list[j];\\n            }\\n        }\\n        Console.WriteLine(max);\\n        Console.WriteLine(min);\\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinMaxDifference(int num) {\\n        var list = new List<int>();\\n        while(num > 0){\\n            int n = num % 10;\\n            list.Add(n);\\n            num /= 10;\\n        }\\n        list.Reverse();\\n        int up = 0, down = list[0], max= 0, min = 0;\\n        for(int i = 0; i < list.Count; i++){\\n            if(list[i] < 9){\\n                up = list[i];\\n                break;\\n            }\\n        }\\n        for(int j = 0; j < list.Count; j++){\\n            if(list[j] == up){\\n                max = max*10+9;\\n            }else{\\n                max = max*10+list[j];\\n            }\\n            if(list[j] == down){\\n                min = min*10+0;\\n            }else{\\n                min = min*10+list[j];\\n            }\\n        }\\n        Console.WriteLine(max);\\n        Console.WriteLine(min);\\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3228214,
                "title": "java-simple-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n0(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0(1)\\n# Code\\n```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String n = Integer.toString(num);\\n        int len = n.length();\\n        int min =num; int max = num;\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            if(c!=\\'9\\'){\\n                max = Integer.parseInt(n.replaceAll(Character.toString(c),\"9\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            if(c!=\\'0\\'){\\n                min = Integer.parseInt(n.replaceAll(Character.toString(c),\"0\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n        return max-min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minMaxDifference(int num) {\\n        String n = Integer.toString(num);\\n        int len = n.length();\\n        int min =num; int max = num;\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            if(c!=\\'9\\'){\\n                max = Integer.parseInt(n.replaceAll(Character.toString(c),\"9\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n        for(int i=0; i<len; i++){\\n            char c = n.charAt(i);\\n            if(c!=\\'0\\'){\\n                min = Integer.parseInt(n.replaceAll(Character.toString(c),\"0\"));\\n                break;\\n            } else{\\n                continue;\\n            }\\n        }\\n        return max-min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3227815,
                "title": "c-o-logn-by-string-approach",
                "content": "```C++\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string maxs = to_string(num), mins = maxs;\\n        int n = maxs.length();\\n        for(int i = 0; i<n;i++)  {\\n            if(maxs[i] != \\'9\\') {\\n                char c = maxs[i];\\n                for(int j = i;j<n;j++) if(maxs[j]==c) maxs[j]=\\'9\\';\\n                break;\\n            }\\n        }\\n        char c = mins[0];\\n        for(int j= 0; j<n;j++) if(mins[j]==c) mins[j]=\\'0\\';\\n        return stoi(maxs) - stoi(mins);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```C++\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string maxs = to_string(num), mins = maxs;\\n        int n = maxs.length();\\n        for(int i = 0; i<n;i++)  {\\n            if(maxs[i] != \\'9\\') {\\n                char c = maxs[i];\\n                for(int j = i;j<n;j++) if(maxs[j]==c) maxs[j]=\\'9\\';\\n                break;\\n            }\\n        }\\n        char c = mins[0];\\n        for(int j= 0; j<n;j++) if(mins[j]==c) mins[j]=\\'0\\';\\n        return stoi(maxs) - stoi(mins);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3225980,
                "title": "c-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n       char x;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]!=\\'9\\')\\n            {\\n                x=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(x==s[i])\\n            {\\n                s[i]=\\'9\\';\\n            }\\n        }\\n        int n=stoi(s);\\n        string s1=to_string(num);\\n        char y=s1[0];\\n        for(int i=0;i<s1.size();i++)\\n        {\\n            if(y==s1[i])\\n            {\\n                s1[i]=\\'0\\';\\n            }\\n        }\\n        int m=stoi(s1);\\n        return n-m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        string s=to_string(num);\\n       char x;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]!=\\'9\\')\\n            {\\n                x=s[i];\\n                break;\\n            }\\n        }\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(x==s[i])\\n            {\\n                s[i]=\\'9\\';\\n            }\\n        }\\n        int n=stoi(s);\\n        string s1=to_string(num);\\n        char y=s1[0];\\n        for(int i=0;i<s1.size();i++)\\n        {\\n            if(y==s1[i])\\n            {\\n                s1[i]=\\'0\\';\\n            }\\n        }\\n        int m=stoi(s1);\\n        return n-m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3225227,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num)\\n    {\\n        string s=to_string(num);\\n        char c1=s[0],c2=\\'9\\';\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]-\\'0\\'<9)\\n            {\\n                c2=s[i];\\n                break;\\n            }\\n        }\\n        string max=\"\",min=\"\";\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]==c1)\\n            {\\n                min+=\\'0\\';\\n            }\\n            else\\n            {\\n                min+=s[i];\\n            }\\n            if(s[i]==c2)\\n            {\\n                max+=\\'9\\';\\n            }\\n            else\\n            {\\n                max+=s[i];\\n            }\\n        }\\n        return stoi(max)-stoi(min);\\n        \\n    }\\n};\\n```\\nIf you like the solution plz upvote.\\n=",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num)\\n    {\\n        string s=to_string(num);\\n        char c1=s[0],c2=\\'9\\';\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]-\\'0\\'<9)\\n            {\\n                c2=s[i];\\n                break;\\n            }\\n        }\\n        string max=\"\",min=\"\";\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]==c1)\\n            {\\n                min+=\\'0\\';\\n            }\\n            else\\n            {\\n                min+=s[i];\\n            }\\n            if(s[i]==c2)\\n            {\\n                max+=\\'9\\';\\n            }\\n            else\\n            {\\n                max+=s[i];\\n            }\\n        }\\n        return stoi(max)-stoi(min);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3223911,
                "title": "easy-solution-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n      string str=  to_string(num);\\n        char v;\\n        for(int i=0;i<str.size();i++){\\n            if(str[i] == \\'9\\') continue;\\n            else{\\n                 v = str[i];\\n                str[i] = \\'9\\';\\n                break;\\n            }\\n        }\\n        for(int i=0;i<str.size();i++){\\n            if(v == str[i]){\\n                str[i] = \\'9\\';\\n            }\\n        }\\n        \\n        string st = to_string(num);\\n        \\n        char a = st[0];\\n        for(int i=0;i<st.size();i++){\\n            if(st[i] == a){\\n                st[i] = \\'0\\';\\n            }\\n        }\\n        \\n        int num1 = stoi(str);\\n        int num2 = stoi(st);\\n        return num1-num2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n      string str=  to_string(num);\\n        char v;\\n        for(int i=0;i<str.size();i++){\\n            if(str[i] == \\'9\\') continue;\\n            else{\\n                 v = str[i];\\n                str[i] = \\'9\\';\\n                break;\\n            }\\n        }\\n        for(int i=0;i<str.size();i++){\\n            if(v == str[i]){\\n                str[i] = \\'9\\';\\n            }\\n        }\\n        \\n        string st = to_string(num);\\n        \\n        char a = st[0];\\n        for(int i=0;i<st.size();i++){\\n            if(st[i] == a){\\n                st[i] = \\'0\\';\\n            }\\n        }\\n        \\n        int num1 = stoi(str);\\n        int num2 = stoi(st);\\n        return num1-num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3223184,
                "title": "easy-to-follow-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic int minMaxDifference(int num) {\\n        String parsedInt = String.valueOf(num);\\n        char[] arr = parsedInt.toCharArray();\\n        char charToReplace = arr[0];\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] != \\'9\\') {\\n                charToReplace = arr[i];\\n                break;\\n            }\\n        }\\n        String maxReplaced = parsedInt.replaceAll(String.valueOf(charToReplace), \"9\");\\n        charToReplace = arr[0];\\n        String minReplaced = parsedInt.replaceAll(String.valueOf(charToReplace), \"0\");\\n        return Integer.parseInt(maxReplaced) - Integer.parseInt(minReplaced);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic int minMaxDifference(int num) {\\n        String parsedInt = String.valueOf(num);\\n        char[] arr = parsedInt.toCharArray();\\n        char charToReplace = arr[0];\\n        for (int i = 0; i < arr.length; i++) {\\n            if (arr[i] != \\'9\\') {\\n                charToReplace = arr[i];\\n                break;\\n            }\\n        }\\n        String maxReplaced = parsedInt.replaceAll(String.valueOf(charToReplace), \"9\");\\n        charToReplace = arr[0];\\n        String minReplaced = parsedInt.replaceAll(String.valueOf(charToReplace), \"0\");\\n        return Integer.parseInt(maxReplaced) - Integer.parseInt(minReplaced);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3222415,
                "title": "elixir-use-recursive",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 298ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 52.9MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndefmodule Solution do\\n  @spec min_max_difference(num :: integer) :: integer\\n  def min_max_difference(num) do\\n    min_max_difference(Integer.to_string(num), 0)\\n  end\\n\\n  @spec min_max_difference(num_str :: String.t, i :: integer) :: integer\\n  def min_max_difference(num_str, i) do\\n    if String.at(num_str, i) != \"9\" or i >= String.length(num_str) - 1 do\\n      String.to_integer(String.replace(num_str, String.at(num_str, i), \"9\")) - String.to_integer(String.replace(num_str, String.at(num_str, 0), \"0\"))\\n    else\\n      min_max_difference(num_str, i + 1)\\n    end\\n  end\\nend\\n\\n```",
                "solutionTags": [
                    "Elixir"
                ],
                "code": "```\\ndefmodule Solution do\\n  @spec min_max_difference(num :: integer) :: integer\\n  def min_max_difference(num) do\\n    min_max_difference(Integer.to_string(num), 0)\\n  end\\n\\n  @spec min_max_difference(num_str :: String.t, i :: integer) :: integer\\n  def min_max_difference(num_str, i) do\\n    if String.at(num_str, i) != \"9\" or i >= String.length(num_str) - 1 do\\n      String.to_integer(String.replace(num_str, String.at(num_str, i), \"9\")) - String.to_integer(String.replace(num_str, String.at(num_str, 0), \"0\"))\\n    else\\n      min_max_difference(num_str, i + 1)\\n    end\\n  end\\nend\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3221103,
                "title": "easy-and-faster-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(d), where d is the number of digits in the input integer num\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(d), where d is the number of digits in the input integer num\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int ref1=-1, ref2=-1, max=0, min=0;\\n        vector<int> arrmax;\\n        vector<int> arrmin;\\n        while(num){\\n            arrmax.push_back(num%10);\\n            if(num%10!=9) ref1 = num%10;\\n            arrmin.push_back(num%10);\\n            if(num%10!=0) ref2 = num%10;\\n            num/=10;\\n        }\\n        for(int i=0; i < arrmax.size(); i++){\\n            if(ref1!=-1){\\n                if(arrmax[i]==ref1) arrmax[i] = 9;\\n            }\\n            if(ref2!=-1){\\n                if(arrmin[i]==ref2) arrmin[i] = 0;\\n            }\\n        }\\n        for(int i=arrmax.size()-1, j=0; i > -1; i--, j++){\\n            max = max*10 + arrmax[i];\\n            min = min*10 + arrmin[i];\\n        }\\n        return max-min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        int ref1=-1, ref2=-1, max=0, min=0;\\n        vector<int> arrmax;\\n        vector<int> arrmin;\\n        while(num){\\n            arrmax.push_back(num%10);\\n            if(num%10!=9) ref1 = num%10;\\n            arrmin.push_back(num%10);\\n            if(num%10!=0) ref2 = num%10;\\n            num/=10;\\n        }\\n        for(int i=0; i < arrmax.size(); i++){\\n            if(ref1!=-1){\\n                if(arrmax[i]==ref1) arrmax[i] = 9;\\n            }\\n            if(ref2!=-1){\\n                if(arrmin[i]==ref2) arrmin[i] = 0;\\n            }\\n        }\\n        for(int i=arrmax.size()-1, j=0; i > -1; i--, j++){\\n            max = max*10 + arrmax[i];\\n            min = min*10 + arrmin[i];\\n        }\\n        return max-min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3221089,
                "title": "easy-javascript-solution-short-simple",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    let numStr=num.toString()\\n    let max=num\\n    let min=Number(numStr.replaceAll(numStr[0],0))\\n    for(let n of numStr){\\n        if(n!==\\'9\\'){\\n            max=numStr.replaceAll(n,9)\\n            break\\n        }\\n    }\\n    return max-min\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minMaxDifference = function(num) {\\n    let numStr=num.toString()\\n    let max=num\\n    let min=Number(numStr.replaceAll(numStr[0],0))\\n    for(let n of numStr){\\n        if(n!==\\'9\\'){\\n            max=numStr.replaceAll(n,9)\\n            break\\n        }\\n    }\\n    return max-min\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3220997,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func minMaxDifference(_ num: Int) -> Int {\\n        \\n        let str = \"\\\\(num)\"\\n\\n        let ma: Int = {\\n            guard let ind = str.firstIndex(where: { $0 != \"9\" }) else { return num }\\n            return Int(str.replacingOccurrences(of: \"\\\\(str[ind])\", with: \"9\"))!\\n        }()\\n\\n        let mi: Int = {\\n            guard let ind = str.firstIndex(where: { $0 != \"0\" }) else { return num }\\n            return Int(str.replacingOccurrences(of: \"\\\\(str[ind])\", with: \"0\"))!\\n        }()\\n\\n        return ma - mi\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minMaxDifference(_ num: Int) -> Int {\\n        \\n        let str = \"\\\\(num)\"\\n\\n        let ma: Int = {\\n            guard let ind = str.firstIndex(where: { $0 != \"9\" }) else { return num }\\n            return Int(str.replacingOccurrences(of: \"\\\\(str[ind])\", with: \"9\"))!\\n        }()\\n\\n        let mi: Int = {\\n            guard let ind = str.firstIndex(where: { $0 != \"0\" }) else { return num }\\n            return Int(str.replacingOccurrences(of: \"\\\\(str[ind])\", with: \"0\"))!\\n        }()\\n\\n        return ma - mi\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3220465,
                "title": "c-int-to-str-str-to-list",
                "content": "# Code\\n```\\npublic class Solution \\n{\\n    public int MinMaxDifference(int num) \\n    {\\n        var s = num.ToString();\\n        var list1 = new List<int>();\\n        var list2 = new List<int>();\\n        var target1 = -1;\\n        var target2 = -1;\\n        foreach (var ch in s) \\n        {\\n            list1.Add(ch - \\'0\\');\\n            list2.Add(ch - \\'0\\');\\n        }\\n\\n        for (var i = 0; i < list1.Count; i++) \\n        {\\n            if (list1[i] != 9 && target1 == -1) \\n                target1 = list1[i];\\n            \\n            if (list1[i] == target1)\\n                list1[i] = 9;\\n        }\\n\\n        for (var j = 0; j < list2.Count; j++)\\n        {\\n            if (list2[j] != 0 && target2 == -1)\\n                target2 = list2[j];\\n            \\n            if (list2[j] == target2)\\n                list2[j] = 0;\\n        }\\n\\n        var max = 0;\\n        var min = 0;\\n\\n        while (list1.Count > 0) \\n        {\\n            max = max * 10 + list1[0];\\n            list1.RemoveAt(0);\\n        }\\n\\n        while (list2.Count > 0)\\n        {\\n            min = min * 10 + list2[0];\\n            list2.RemoveAt(0);\\n        }\\n        return max - min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int MinMaxDifference(int num) \\n    {\\n        var s = num.ToString();\\n        var list1 = new List<int>();\\n        var list2 = new List<int>();\\n        var target1 = -1;\\n        var target2 = -1;\\n        foreach (var ch in s) \\n        {\\n            list1.Add(ch - \\'0\\');\\n            list2.Add(ch - \\'0\\');\\n        }\\n\\n        for (var i = 0; i < list1.Count; i++) \\n        {\\n            if (list1[i] != 9 && target1 == -1) \\n                target1 = list1[i];\\n            \\n            if (list1[i] == target1)\\n                list1[i] = 9;\\n        }\\n\\n        for (var j = 0; j < list2.Count; j++)\\n        {\\n            if (list2[j] != 0 && target2 == -1)\\n                target2 = list2[j];\\n            \\n            if (list2[j] == target2)\\n                list2[j] = 0;\\n        }\\n\\n        var max = 0;\\n        var min = 0;\\n\\n        while (list1.Count > 0) \\n        {\\n            max = max * 10 + list1[0];\\n            list1.RemoveAt(0);\\n        }\\n\\n        while (list2.Count > 0)\\n        {\\n            min = min * 10 + list2[0];\\n            list2.RemoveAt(0);\\n        }\\n        return max - min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3218675,
                "title": "javascript-100-o-1-time-o-1-space",
                "content": "![image.png](https://assets.leetcode.com/users/images/ed178548-b7db-4504-9ebf-2a4cecffa394_1677078928.3783584.png)\\n\\n# Approach\\nGiven that there are at most 9 digits in `num` ($$1 <= num <= 10^8$$), and only 10 distinct digits (0 to 9), we could simply bruteforce the solution in $$O(9 * 10)$$ runtime.\\n\\nThis can be slightly optimized by checking `num` left to right (starting from most significant digit) with the assumption that:\\n\\n1. Maximum value can be found by replacing the leftmost digit with a 9, unless it\\'s a 9 already (then we check the next digit)\\n2. Minimum value can be found by replacing the leftmost digit with a 0, unless it\\'s a 0 already (then we check the next digit)\\n\\n```\\nvar minMaxDifference = function(num) {\\n    const min = getMin(`${ num }`);\\n    const max = getMax(`${ num }`);\\n\\n    return max - min;\\n};\\n\\nfunction getMin(num) {\\n    let i = 0;\\n    while (num[i] == \\'0\\') i++;\\n    return +num.replaceAll(num[i], 0);\\n}\\n\\nfunction getMax(num) {\\n    let i = 0;\\n    while (num[i] == \\'9\\') i++;\\n    return +num.replaceAll(num[i], 9);\\n}\\n```\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n  As per task description, both `getMin` and `getMax` worst case runtime is $$O(9)$$, or $$O(1)$$ simplified\\n\\n- Space complexity: $$O(1)$$",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minMaxDifference = function(num) {\\n    const min = getMin(`${ num }`);\\n    const max = getMax(`${ num }`);\\n\\n    return max - min;\\n};\\n\\nfunction getMin(num) {\\n    let i = 0;\\n    while (num[i] == \\'0\\') i++;\\n    return +num.replaceAll(num[i], 0);\\n}\\n\\nfunction getMax(num) {\\n    let i = 0;\\n    while (num[i] == \\'9\\') i++;\\n    return +num.replaceAll(num[i], 9);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3218551,
                "title": "c",
                "content": "```\\nint minMaxDifference(int num){\\n\\tassert(num >= 0);\\n\\n\\tint8_t digits[10];\\n\\tint digitsLen = 0;\\n\\twhile (num > 0){\\n\\t\\tdigits[digitsLen] = num % 10;\\n\\t\\tdigitsLen += 1;\\n\\n\\t\\tnum /= 10;\\n\\t}\\n\\n\\tfor (int i = digitsLen - 1; i >= 0; i -= 1){\\n\\t\\tif (digits[i] < 9){\\n\\t\\t\\tconst int oldDigit = digits[i];\\n\\t\\t\\tfor (int j = 0, weight = 1; j <= i; j += 1, weight *= 10){\\n\\t\\t\\t\\tif (oldDigit == digits[j]){\\n\\t\\t\\t\\t\\tnum += weight * (9 - oldDigit);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (digitsLen - 1 >= 0){\\n\\t\\tconst int oldDigit = digits[digitsLen - 1];\\n\\t\\tfor (int i = 0, weight = 1; i < digitsLen; i += 1, weight *= 10){\\n\\t\\t\\tif (oldDigit == digits[i]){\\n\\t\\t\\t\\tnum += weight * oldDigit;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn num;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minMaxDifference(int num){\\n\\tassert(num >= 0);\\n\\n\\tint8_t digits[10];\\n\\tint digitsLen = 0;\\n\\twhile (num > 0){\\n\\t\\tdigits[digitsLen] = num % 10;\\n\\t\\tdigitsLen += 1;\\n\\n\\t\\tnum /= 10;\\n\\t}\\n\\n\\tfor (int i = digitsLen - 1; i >= 0; i -= 1){\\n\\t\\tif (digits[i] < 9){\\n\\t\\t\\tconst int oldDigit = digits[i];\\n\\t\\t\\tfor (int j = 0, weight = 1; j <= i; j += 1, weight *= 10){\\n\\t\\t\\t\\tif (oldDigit == digits[j]){\\n\\t\\t\\t\\t\\tnum += weight * (9 - oldDigit);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tif (digitsLen - 1 >= 0){\\n\\t\\tconst int oldDigit = digits[digitsLen - 1];\\n\\t\\tfor (int i = 0, weight = 1; i < digitsLen; i += 1, weight *= 10){\\n\\t\\t\\tif (oldDigit == digits[i]){\\n\\t\\t\\t\\tnum += weight * oldDigit;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn num;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3217972,
                "title": "easy-to-understand-beginner-friendly-c-solution",
                "content": "\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        \\n        string temp = to_string(num);\\n        string maxS,minS;\\n         int n = temp.length();\\n        \\n        int index =0;\\n        \\n        for(int i=0;i<n;i++){\\n            if(temp[i] != \\'9\\'){\\n                index = i;\\n                break;\\n            }\\n        }\\n        \\n        \\n        \\n       \\n        \\n        char c = temp[index];\\n        temp[index] = \\'9\\';\\n        \\n        for(int i=index+1;i<n;i++){\\n            if(temp[i] == c){\\n                temp[i] = \\'9\\';\\n            }\\n            \\n            \\n            \\n        }\\n        \\n        maxS = temp;\\n        temp = to_string(num);\\n        c = temp[0];\\n        temp[0] = \\'0\\';\\n        \\n        for(int i=1;i<n;i++){\\n            if(temp[i] == c){\\n                temp[i] = \\'0\\';\\n            }\\n        }\\n        \\n        minS = temp;\\n        int maxNUM = stoi(maxS);\\n        int minNUM = stoi(minS);\\n        \\n        \\n        \\n        \\n        return maxNUM-minNUM;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minMaxDifference(int num) {\\n        \\n        string temp = to_string(num);\\n        string maxS,minS;\\n         int n = temp.length();\\n        \\n        int index =0;\\n        \\n        for(int i=0;i<n;i++){\\n            if(temp[i] != \\'9\\'){\\n                index = i;\\n                break;\\n            }\\n        }\\n        \\n        \\n        \\n       \\n        \\n        char c = temp[index];\\n        temp[index] = \\'9\\';\\n        \\n        for(int i=index+1;i<n;i++){\\n            if(temp[i] == c){\\n                temp[i] = \\'9\\';\\n            }\\n            \\n            \\n            \\n        }\\n        \\n        maxS = temp;\\n        temp = to_string(num);\\n        c = temp[0];\\n        temp[0] = \\'0\\';\\n        \\n        for(int i=1;i<n;i++){\\n            if(temp[i] == c){\\n                temp[i] = \\'0\\';\\n            }\\n        }\\n        \\n        minS = temp;\\n        int maxNUM = stoi(maxS);\\n        int minNUM = stoi(minS);\\n        \\n        \\n        \\n        \\n        return maxNUM-minNUM;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1805828,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1807089,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1807954,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805692,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1806025,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805712,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805560,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 2048438,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1909077,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1887397,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805828,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1807089,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1807954,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805692,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1806025,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805712,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1805560,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 2048438,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1909077,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            },
            {
                "id": 1887397,
                "content": [
                    {
                        "username": "manshi_1422",
                        "content": "anyone with me who couldn\\'t solve it :((( "
                    },
                    {
                        "username": "yeedaKing",
                        "content": "The question is actually quite simple, but it's easy to overcomplicate it since the question doesn't explain it that well IMO.  Logically, to create the smallest number, just replace the first digit (and all other occurrences of that first digit) with \"0\" (you don't have to worry about leading zeroes in the input).  For the largest number, find the first digit in num that isn't \"9\".  By changing the first digit in num that isn't \"9\" (and all other occurrences), you'll always create the largest number.  Basically, it doesn't matter how many occurrences of a number there are, it only matters the position of the number.  I hope this helps!"
                    },
                    {
                        "username": "Suffolk",
                        "content": "Max or min is only related to highest digit, question description said a lot, it\\'s a trap"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "abhi_shek123",
                        "content": "i doesnt feel it was easy problem on leetcode testcases were confusing who else feels  the same  but it has got a good acceptance rate"
                    },
                    {
                        "username": "arman_cod-bud",
                        "content": "yes leet-code easy questions are way harder than other sites relatively yet exciting too."
                    },
                    {
                        "username": "maroshim",
                        "content": "The Hint is not correct:\\nTry to remap the first non-zero digit to 9 to obtain the maximum number.\\nTry to remap the first non-nine digit to 0 to obtain the minimum number.\\n\\nIt must be change to:\\nTry to remap the first non-nine digit to 9 to obtain the maximum number.\\nTry to remap the first non-zero digit to 0 to obtain the minimum number."
                    },
                    {
                        "username": "okaykartik",
                        "content": "yes, the hint is wrong"
                    },
                    {
                        "username": "bhruti1",
                        "content": "Seriously man i am dumb............\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "motidivya",
                        "content": "Same here man ... Koi na, we\\'ll practice and Machayenge"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "in this i stored the digits of the number in a vector and then i checked for the vary first element of vector which is less than 9 and once i got it i sotred it in variable ind then i run a for loop and for maximum i changed all the digits to 9 whcih are equals to vec[ind] and for minimum i changed all the digits to 0 which are equals to vec[ind] and then return maxi-mini;"
                    },
                    {
                        "username": "kartikhustles",
                        "content": "https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3202294/java-solution-1ms-beats-100-easy-to-understand/?orderBy=most_votes\\n\\nCheck my Solution.......Hope you will understand it"
                    },
                    {
                        "username": "thatsiddharth",
                        "content": " // Convert the input integer to a string\\n    \\n    // Make a copy of the string\\n \\n    // Loop through each character in the string\\n    \\n        // If the character is \\'9\\', skip it\\n       \\n        // Otherwise, set the character as the maximum value\\n       \\n    // Replace the maximum value in the string with \\'9\\' to get the maximum number\\n    \\n    // Convert the maximum string to an integer\\n\\n    // Replace the first digit in the string with \\'0\\' to get the minimum number\\n   \\n    // Convert the minimum string to an integer\\n\\n    // Return the difference between the maximum and minimum values\\n"
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "Easy and simple solution \\nMy solution Link : ->https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/solutions/3201866/c-easy-and-simple-solution-o-1-space/?orderBy=most_votes\\nDon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "swecpp",
                        "content": "To achive maximum number find first digit less than maximum digit"
                    },
                    {
                        "username": "rajat_sharma2809",
                        "content": "While coding I am getting an unusual error:\\n{TypeError: \\'int\\' object is not subscriptable\\n    if digs_min[i] == remap: }\\n\\nHere it is saying that digs_min is an int datatype. But when I execute print(digs_min), the output comes - [1,1,8,9,1] which is a list.\\nI don\\'t understand why can\\'t I access digs_min[0] or digs_min[i] where i is an integer in the program???"
                    },
                    {
                        "username": "bparanj",
                        "content": "This error occurs when you try to index an object that is not indexable. The error message implies that you\\'re trying to access an element of an integer as if it were a list or a string, which is not allowed in Python. \\n\\nIn your case, you mention that `digs_min` is an integer, but the error message suggests that it\\'s being treated like a list (with the subscripting operation).\\n\\nIf `digs_min` is indeed a list as per your output [1,1,8,9,1], then the error may be arising from elsewhere in your code where `digs_min` has been unintentionally redefined as an integer.\\n\\nPlease ensure that `digs_min` isn\\'t being re-assigned as an integer later in your code. Also, verify that this list isn\\'t being overwritten or updated in a way that changes its data type to an integer. Doing so would render it un-indexable, causing the error you\\'re seeing. \\n\\nFor more specific help, you may need to provide the section of your code where this error is happening."
                    },
                    {
                        "username": "meanup",
                        "content": "Did anyone notice the Notes sections of this problem?\n\"We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\" 😂"
                    }
                ]
            }
        ]
    }
]