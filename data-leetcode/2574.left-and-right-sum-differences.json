[
    {
        "title": "Left and Right Sum Differences",
        "question_content": "Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:\n\n    answer.length == nums.length.\n    answer[i] = |leftSum[i] - rightSum[i]|.\n\nWhere:\n\n    leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.\n    rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.\n\nReturn the array answer.\n&nbsp;\nExample 1:\n\nInput: nums = [10,4,8,3]\nOutput: [15,1,11,22]\nExplanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].\nThe array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].\n\nExample 2:\n\nInput: nums = [1]\nOutput: [0]\nExplanation: The array leftSum is [0] and the array rightSum is [0].\nThe array answer is [|0 - 0|] = [0].\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 1000\n\t1 <= nums[i] <= 105",
        "solutions": [
            {
                "id": 3231177,
                "title": "simple-total-sum-partial-sum-o-n-time-o-1-space",
                "content": "Up vote if you like the solution \\n\\n# Approach\\nFirst evaluate rsum by taking sum of all elements\\nthen while iterating, keeep adding new element to lsum and subtracting it from the rsum.\\n\\n# Code\\n```\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ans;\\n        int lsum = 0, rsum = 0;\\n        for(int i = 0; i < nums.size(); ++i ) rsum += nums[i];\\n        for(int i = 0; i < nums.size(); ++i){\\n            rsum -= nums[i];\\n            ans.push_back(abs(lsum - rsum));\\n            lsum += nums[i];\\n        }\\n        return ans;\\n    }\\n```\\n\\nHere is an article of my last interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ans;\\n        int lsum = 0, rsum = 0;\\n        for(int i = 0; i < nums.size(); ++i ) rsum += nums[i];\\n        for(int i = 0; i < nums.size(); ++i){\\n            rsum -= nums[i];\\n            ans.push_back(abs(lsum - rsum));\\n            lsum += nums[i];\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3233427,
                "title": "java-actual-constant-space-solution",
                "content": "# Intuition\\nSome solutions claim to use $$O(1)$$ memory, but still create a new results array of equal length to `nums`, which is $$O(n)$$. Instead we can realise that \\'Left and Right Sum\\' is just a synonym of \\'Prefix and Suffix Sum\\', so we can keep track of both and thereby only use constant memory.\\n\\n# Approach\\nLoop through the array once and sum up the values as `rightSum`, then loop through it again and this time keep track of `leftSum` while also updating `nums` to its new values.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0, n = nums.length;\\n        for(int num : nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            int val = nums[i];\\n            rightSum -= val;\\n            nums[i] = Math.abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n        return nums;\\n    }\\n}\\n```\\n\\nSince someone asked, but deleted their comment, here\\'s an alternate version without the `val`variable. Personally I feel like the code becomes a bit less readable, but that\\'s mostly a matter of personal preference.\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0, n = nums.length;\\n        for(int num : nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n            nums[i] = Math.abs((leftSum - nums[i]) - rightSum);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0, n = nums.length;\\n        for(int num : nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            int val = nums[i];\\n            rightSum -= val;\\n            nums[i] = Math.abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n        return nums;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0, n = nums.length;\\n        for(int num : nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n            nums[i] = Math.abs((leftSum - nums[i]) - rightSum);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230880,
                "title": "python3-prefix-suffix-sum",
                "content": "\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        prefix = 0 \\n        suffix = sum(nums)\\n        ans = []\\n        for x in nums: \\n            prefix += x\\n            ans.append(abs(prefix - suffix))\\n            suffix -= x\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        prefix = 0 \\n        suffix = sum(nums)\\n        ans = []\\n        for x in nums: \\n            prefix += x\\n            ans.append(abs(prefix - suffix))\\n            suffix -= x\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230781,
                "title": "python3-c-java-prevsum-o-1",
                "content": "# Please UPVOTE\\uD83D\\uDE0A\\n\\n# Python3\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        ans=[0]\\n        for i in nums: ans+=[ans[-1]+i]\\n        a=[]\\n        for i in range(1,len(ans)):\\n            a+=[abs(ans[-1]-ans[i]-ans[i-1])]   \\n        return a\\n        \\n```\\n# C++\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>ans,a;\\n        a.push_back(0);\\n        for(int i=0;i<nums.size();i++) a.push_back(a.back()+nums[i]);\\n        for(int i=1;i<a.size();i++) ans.push_back(abs(a[nums.size()]-a[i]-a[i-1]));\\n        return ans;\\n    }\\n};\\n```\\n# Java\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        ans=[0]\\n        for i in nums: ans+=[ans[-1]+i]\\n        a=[]\\n        for i in range(1,len(ans)):\\n            a+=[abs(ans[-1]-ans[i]-ans[i-1])]   \\n        return a\\n        \\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>ans,a;\\n        a.push_back(0);\\n        for(int i=0;i<nums.size();i++) a.push_back(a.back()+nums[i]);\\n        for(int i=1;i<a.size();i++) ans.push_back(abs(a[nums.size()]-a[i]-a[i-1]));\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232380,
                "title": "100-solution-explained-code-video-explanation",
                "content": "# Video Explanation\\nhttps://youtu.be/vckSAv3-tuE\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> lsum, res;\\n        int total = 0;\\n        \\n        int n = nums.size();\\n        int sum = 0;\\n        for(int i = 0; i<n; i++){\\n            lsum.push_back(sum);\\n            sum += nums[i];\\n            total +=nums[i];\\n        }\\n\\n        sum = 0;\\n        vector<int> rsum(n, 0);\\n        for(int i = n-1; i>=0; i--){\\n            rsum[i] = sum;\\n            sum +=nums[i];\\n        }\\n        \\n        for(int i = 0; i<n; i++){\\n            res.push_back(abs(lsum[i]-rsum[i]));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```\\n\\nWe can also use std::partial_sum() to generate the left sum prefix.",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> lsum, res;\\n        int total = 0;\\n        \\n        int n = nums.size();\\n        int sum = 0;\\n        for(int i = 0; i<n; i++){\\n            lsum.push_back(sum);\\n            sum += nums[i];\\n            total +=nums[i];\\n        }\\n\\n        sum = 0;\\n        vector<int> rsum(n, 0);\\n        for(int i = n-1; i>=0; i--){\\n            rsum[i] = sum;\\n            sum +=nums[i];\\n        }\\n        \\n        for(int i = 0; i<n; i++){\\n            res.push_back(abs(lsum[i]-rsum[i]));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232184,
                "title": "clean-js-map-and-reduce",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n) because of it generates a new array\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRigthDifference = function(nums) {\\n    let leftSum = 0;\\n    let rightSum = nums.reduce((sum,curr)=>sum += curr,0);\\n\\n    return nums.map((curr,i)=>{\\n        //leftSum - (rightSum - curr)\\n        rightSum -= curr;\\n        let res = Math.abs(leftSum - rightSum );\\n        leftSum += curr;\\n        return res\\n    });\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRigthDifference = function(nums) {\\n    let leftSum = 0;\\n    let rightSum = nums.reduce((sum,curr)=>sum += curr,0);\\n\\n    return nums.map((curr,i)=>{\\n        //leftSum - (rightSum - curr)\\n        rightSum -= curr;\\n        let res = Math.abs(leftSum - rightSum );\\n        leftSum += curr;\\n        return res\\n    });\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3231269,
                "title": "prefix-sum",
                "content": "**C++**\\n```cpp\\nvector<int> leftRigthDifference(vector<int>& nums) {\\n    vector<int> res, ps(nums.size() + 1);\\n    partial_sum(begin(nums), end(nums), begin(ps) + 1);\\n    for (int i = 0; i < nums.size(); ++i)\\n        res.push_back(abs(ps.back() - ps[i + 1] - ps[i]));\\n    return res;\\n}\\n```\\n## No Raw Loops Version\\nHere, we reuse the input array for prefix sum, and for the output. \\n**C++**\\n```cpp\\nvector<int> leftRigthDifference(vector<int>& n) {\\n    int prev = 0;\\n    partial_sum(begin(n), end(n), begin(n));\\n    transform(begin(n), end(n), begin(n), [&](int val){\\n        return abs(n.back() - val - exchange(prev, val));\\n    });\\n    return n;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nvector<int> leftRigthDifference(vector<int>& nums) {\\n    vector<int> res, ps(nums.size() + 1);\\n    partial_sum(begin(nums), end(nums), begin(ps) + 1);\\n    for (int i = 0; i < nums.size(); ++i)\\n        res.push_back(abs(ps.back() - ps[i + 1] - ps[i]));\\n    return res;\\n}\\n```\n```cpp\\nvector<int> leftRigthDifference(vector<int>& n) {\\n    int prev = 0;\\n    partial_sum(begin(n), end(n), begin(n));\\n    transform(begin(n), end(n), begin(n), [&](int val){\\n        return abs(n.back() - val - exchange(prev, val));\\n    });\\n    return n;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3231038,
                "title": "no-extra-space-c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) \\n    {\\n        long long total = 0;\\n        for (int num : nums) total += num;\\n        \\n        vector<int>ans;\\n        long long leftSum = 0;\\n        for (int i = 0; i < nums.size(); i++)\\n        {\\n            long long rightSum = total - (leftSum + nums[i]);\\n            ans.push_back(abs(rightSum - leftSum));\\n            leftSum += nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) \\n    {\\n        long long total = 0;\\n        for (int num : nums) total += num;\\n        \\n        vector<int>ans;\\n        long long leftSum = 0;\\n        for (int i = 0; i < nums.size(); i++)\\n        {\\n            long long rightSum = total - (leftSum + nums[i]);\\n            ans.push_back(abs(rightSum - leftSum));\\n            leftSum += nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308546,
                "title": "easy-java-solution-intuition-lbeginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTake 2 array left[] and right[] and calculate the prefix sum for both the array from left to right for left[] array and right to left for right[] array and after that just interate over left array and get the Absolute value from both the array left[i] - right[i] and store it into the left[] to reduce the space complexity.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int left[] = new int[nums.length];\\n        int leftSum = 0;\\n        for(int i = 0 ; i < nums.length ; i ++){\\n            left[i] = leftSum;\\n            leftSum += nums[i];\\n        }\\n        int right[] = new int[nums.length];\\n        int rightSum = 0;\\n        for(int i = nums.length - 1; i >= 0; i --){\\n            right[i] = rightSum;\\n            rightSum += nums[i];\\n        }\\n        for(int i = 0 ; i < nums.length; i ++){\\n            left[i] = Math.abs(left[i]- right[i]);\\n        }\\n        return left;\\n    }\\n}\\n```\\n**Please UPVOTE if you like it\\nHappy coding**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int left[] = new int[nums.length];\\n        int leftSum = 0;\\n        for(int i = 0 ; i < nums.length ; i ++){\\n            left[i] = leftSum;\\n            leftSum += nums[i];\\n        }\\n        int right[] = new int[nums.length];\\n        int rightSum = 0;\\n        for(int i = nums.length - 1; i >= 0; i --){\\n            right[i] = rightSum;\\n            rightSum += nums[i];\\n        }\\n        for(int i = 0 ; i < nums.length; i ++){\\n            left[i] = Math.abs(left[i]- right[i]);\\n        }\\n        return left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246853,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        for i in range(len(nums)):\\n            answer.append(abs(sum(nums[:i]) - sum(nums[i+1:])))\\n        return answer\\n         \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        answer = []\\n        for i in range(len(nums)):\\n            answer.append(abs(sum(nums[:i]) - sum(nums[i+1:])))\\n        return answer\\n         \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3412048,
                "title": "c-and-c-very-easy-solution",
                "content": "![photo_2023-04-13_13-45-22.jpg](https://assets.leetcode.com/users/images/969a61cd-12f8-48ff-84b2-3f49710e9087_1681375666.5967984.jpeg)\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n      int leftSum = 0, rightSum = 0, n = nums.size();\\n        for(int num : nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            int val = nums[i];\\n            rightSum -= val;\\n            nums[i] = abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n        return nums;  \\n    }\\n};\\n\\n        \\n```\\n```C# []\\npublic class Solution {\\n    public int[] LeftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0, n = nums.Length;\\n        foreach(int num in nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            int val = nums[i];\\n            rightSum -= val;\\n            nums[i] = Math.Abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n        return nums;  \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C#",
                    "Array"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n      int leftSum = 0, rightSum = 0, n = nums.size();\\n        for(int num : nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            int val = nums[i];\\n            rightSum -= val;\\n            nums[i] = abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n        return nums;  \\n    }\\n};\\n\\n        \\n```\n```C# []\\npublic class Solution {\\n    public int[] LeftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0, n = nums.Length;\\n        foreach(int num in nums) rightSum += num;\\n        for(int i = 0; i < n; i++) {\\n            int val = nums[i];\\n            rightSum -= val;\\n            nums[i] = Math.Abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n        return nums;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233731,
                "title": "python-3-6-lines-w-example-t-m-69-ms-14-mb",
                "content": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        left, right = 0, sum(nums)      #  Example:  nums = [10,4,8,3]\\n\\n        for i, num in enumerate(nums):  #   num  left  right    nums\\n                                        #   \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n            left+= num                  #          0     25     [ ^ 10, 4, 8, 3]\\n            nums[i] = abs(right-left)   #    10   10     25     [15, ^  4, 8, 3]   <\\u2013\\u2013|25-10| = 15\\n            right-= num                 #     4   14     15     [15, 1, ^  8, 3]   <\\u2013\\u2013|15-14| =  1\\n                                        #     8   22     11     [15, 1,11, ^  3]   <\\u2013\\u2013|11-22| = 11\\n        return nums                     #     3   25      3     [15, 1,11,22 ^ ]   <\\u2013\\u2013|11-22| = 11\\n                                        #   return [15, 1,11,22]\\n\\n```\\n[https://leetcode.com/problems/left-and-right-sum-differences/submissions/905441768/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        left, right = 0, sum(nums)      #  Example:  nums = [10,4,8,3]\\n\\n        for i, num in enumerate(nums):  #   num  left  right    nums\\n                                        #   \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n            left+= num                  #          0     25     [ ^ 10, 4, 8, 3]\\n            nums[i] = abs(right-left)   #    10   10     25     [15, ^  4, 8, 3]   <\\u2013\\u2013|25-10| = 15\\n            right-= num                 #     4   14     15     [15, 1, ^  8, 3]   <\\u2013\\u2013|15-14| =  1\\n                                        #     8   22     11     [15, 1,11, ^  3]   <\\u2013\\u2013|11-22| = 11\\n        return nums                     #     3   25      3     [15, 1,11,22 ^ ]   <\\u2013\\u2013|11-22| = 11\\n                                        #   return [15, 1,11,22]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231441,
                "title": "javascript-2574-left-and-right-sum-differences",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nleftSum = pre = prefix sum\\nrightSum = suf = suffix sum\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n1\\n```\\nvar leftRigthDifference = function (a) {\\n    let pre = [0];\\n    for (let e of a) pre.push(e + pre[pre.length - 1]);\\n    pre.pop();\\n\\n    a = a.reverse();\\n    let suf = [0];\\n    for (let e of a) suf.push(e + suf[suf.length - 1]);\\n    suf.pop();\\n    suf.reverse();\\n\\n    let an = [];\\n    for (let i = 0; i < pre.length; i++)\\n        an.push(Math.abs(pre[i] - suf[i]));\\n\\n    return an;\\n};\\n```\\n\\n2\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = [0];\\n    let suf = [0];\\n    for (let i = 0; i < n - 1; i++) {\\n        pre.push(a[i] + pre[pre.length - 1]);\\n        suf.push(a[n - 1 - i] + suf[suf.length - 1]);\\n    }\\n\\n    let an = [];\\n    for (let i = 0; i < n; i++) {\\n        an.push(Math.abs(pre[i] - suf[n - 1 - i]));\\n    }\\n    return an;\\n};\\n```\\n\\n3\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = new Array(n).fill(0);\\n    let suf = new Array(n).fill(0);\\n    for (let i = 0, j = n - 1; i < n - 1; i++, j--) {\\n        pre[i + 1] = a[i] + pre[i];\\n        suf[j - 1] = a[j] + suf[j];\\n    }\\n\\n    let an = new Array(n).fill(0);\\n    for (let i = 0; i < n; i++) {\\n        an[i] = Math.abs(pre[i] - suf[i]);\\n    }\\n    return an;\\n};\\n```\\n\\n4\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = new Array(n).fill(0);\\n    let suf = new Array(n).fill(0);\\n    let an = new Array(n).fill(0);\\n\\n    for (let i = 1, j = n - 2; i < n; i++, j--) {\\n        pre[i] = a[i - 1] + pre[i - 1];\\n        suf[j] = a[j + 1] + suf[j + 1];\\n    }\\n    for (let i = 0; i < n; i++) {\\n        an[i] = Math.abs(pre[i] - suf[i]);\\n    }\\n\\n    return an;\\n};\\n```\\n\\n5\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = 0;\\n    let suf = a.reduce((su, x) => su + x, 0); // sum\\n\\n    let an = new Array(n).fill(0);\\n    for (let i = 0; i < n; i++) {\\n        suf -= a[i];\\n        an[i] = Math.abs(pre - suf);\\n        pre += a[i];\\n    }\\n    return an;\\n};\\n```\\n\\n6\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let suf = new Array(n).fill(0);\\n    for (let i = n - 1, s = 0; i >= 0; i--) {\\n        suf[i] = a[i] + (suf[i + 1] || 0);\\n    }\\n\\n    let an = new Array(n).fill(0);\\n    let pre = 0;\\n    for (let i = 0; i < n; i++) {\\n        an[i] = Math.abs(pre - (suf[i + 1] || 0));\\n        pre += a[i];\\n    }\\n    return an;\\n};\\n```\\n\\n7\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let suf = new Array(n).fill(0);\\n    for (let i = n - 1, s = 0; i >= 0; i--) {\\n        suf[i] = a[i] + (suf[i + 1] || 0);\\n    }\\n\\n    let pre = 0;\\n    return suf.map((e, i) => {\\n        let ret = Math.abs(pre - (suf[i + 1] || 0));\\n        pre += a[i];\\n        return ret;\\n    });\\n};\\n```\\n\\n8 - simple\\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length,\\n        pre = new Array(n),\\n        suf = new Array(n);\\n    for (let i = 0, /**/ s = 0; i < n; i++) pre[i] = s += a[i];\\n    for (let i = n - 1, s = 0; i >= 0; i--) suf[i] = s += a[i];\\n\\n    let an = new Array(n);\\n    for (let i = 0; i < n; i++)\\n        an[i] = Math.abs((pre[i - 1] || 0) - (suf[i + 1] || 0));\\n    return an;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar leftRigthDifference = function (a) {\\n    let pre = [0];\\n    for (let e of a) pre.push(e + pre[pre.length - 1]);\\n    pre.pop();\\n\\n    a = a.reverse();\\n    let suf = [0];\\n    for (let e of a) suf.push(e + suf[suf.length - 1]);\\n    suf.pop();\\n    suf.reverse();\\n\\n    let an = [];\\n    for (let i = 0; i < pre.length; i++)\\n        an.push(Math.abs(pre[i] - suf[i]));\\n\\n    return an;\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = [0];\\n    let suf = [0];\\n    for (let i = 0; i < n - 1; i++) {\\n        pre.push(a[i] + pre[pre.length - 1]);\\n        suf.push(a[n - 1 - i] + suf[suf.length - 1]);\\n    }\\n\\n    let an = [];\\n    for (let i = 0; i < n; i++) {\\n        an.push(Math.abs(pre[i] - suf[n - 1 - i]));\\n    }\\n    return an;\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = new Array(n).fill(0);\\n    let suf = new Array(n).fill(0);\\n    for (let i = 0, j = n - 1; i < n - 1; i++, j--) {\\n        pre[i + 1] = a[i] + pre[i];\\n        suf[j - 1] = a[j] + suf[j];\\n    }\\n\\n    let an = new Array(n).fill(0);\\n    for (let i = 0; i < n; i++) {\\n        an[i] = Math.abs(pre[i] - suf[i]);\\n    }\\n    return an;\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = new Array(n).fill(0);\\n    let suf = new Array(n).fill(0);\\n    let an = new Array(n).fill(0);\\n\\n    for (let i = 1, j = n - 2; i < n; i++, j--) {\\n        pre[i] = a[i - 1] + pre[i - 1];\\n        suf[j] = a[j + 1] + suf[j + 1];\\n    }\\n    for (let i = 0; i < n; i++) {\\n        an[i] = Math.abs(pre[i] - suf[i]);\\n    }\\n\\n    return an;\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let pre = 0;\\n    let suf = a.reduce((su, x) => su + x, 0); // sum\\n\\n    let an = new Array(n).fill(0);\\n    for (let i = 0; i < n; i++) {\\n        suf -= a[i];\\n        an[i] = Math.abs(pre - suf);\\n        pre += a[i];\\n    }\\n    return an;\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let suf = new Array(n).fill(0);\\n    for (let i = n - 1, s = 0; i >= 0; i--) {\\n        suf[i] = a[i] + (suf[i + 1] || 0);\\n    }\\n\\n    let an = new Array(n).fill(0);\\n    let pre = 0;\\n    for (let i = 0; i < n; i++) {\\n        an[i] = Math.abs(pre - (suf[i + 1] || 0));\\n        pre += a[i];\\n    }\\n    return an;\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length;\\n\\n    let suf = new Array(n).fill(0);\\n    for (let i = n - 1, s = 0; i >= 0; i--) {\\n        suf[i] = a[i] + (suf[i + 1] || 0);\\n    }\\n\\n    let pre = 0;\\n    return suf.map((e, i) => {\\n        let ret = Math.abs(pre - (suf[i + 1] || 0));\\n        pre += a[i];\\n        return ret;\\n    });\\n};\\n```\n```\\nvar leftRigthDifference = function (a) {\\n    let n = a.length,\\n        pre = new Array(n),\\n        suf = new Array(n);\\n    for (let i = 0, /**/ s = 0; i < n; i++) pre[i] = s += a[i];\\n    for (let i = n - 1, s = 0; i >= 0; i--) suf[i] = s += a[i];\\n\\n    let an = new Array(n);\\n    for (let i = 0; i < n; i++)\\n        an[i] = Math.abs((pre[i - 1] || 0) - (suf[i + 1] || 0));\\n    return an;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3439149,
                "title": "beats-99-9-c-easy-solution-time-complexity-o-n-space-complexity-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Using two pointers to track the value of leftSum and rightSum.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& arr) {\\n        vector<int> ans;\\n        int sum = 0;\\n        int n = arr.size();\\n        int ls = 0, rs = 0;\\n        for(int i = 0 ; i < n ; i++) sum += arr[i];\\n        int ts = sum;\\n        for(int i = 0 ; i < n ; i++)\\n        {\\n            rs = ts - arr[i];\\n            ts -= arr[i];\\n            ls = sum - arr[i] - rs;\\n            ans.push_back(abs(rs-ls));\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Two Pointers",
                    "Suffix Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& arr) {\\n        vector<int> ans;\\n        int sum = 0;\\n        int n = arr.size();\\n        int ls = 0, rs = 0;\\n        for(int i = 0 ; i < n ; i++) sum += arr[i];\\n        int ts = sum;\\n        for(int i = 0 ; i < n ; i++)\\n        {\\n            rs = ts - arr[i];\\n            ts -= arr[i];\\n            ls = sum - arr[i] - rs;\\n            ans.push_back(abs(rs-ls));\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3310558,
                "title": "3-lines-of-code-awesome-logic-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        answer=[]\\n        for i in range(len(nums)):\\n            answer.append(abs(sum(nums[:i])-sum(nums[i+1:])))\\n        return answer\\n    #please upvote me it would encourage me alot\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        answer=[]\\n        for i in range(len(nums)):\\n            answer.append(abs(sum(nums[:i])-sum(nums[i+1:])))\\n        return answer\\n    #please upvote me it would encourage me alot\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232378,
                "title": "c-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& v) {\\n        int n=v.size();\\n        vector<int>left(n,0);\\n        vector<int>right(n,0);\\n        int s=0;\\n        for(int i=n-2;i>=0;i--){\\n            s+=v[i+1];\\n            left[i]=s;\\n        }\\n        s=0;\\n        for(int i=1;i<n;i++){\\n            s+=v[i-1];\\n            right[i]=s;\\n        }\\n        vector<int>ans;\\n        for(int i=0;i<n;i++){\\n            ans.push_back(abs(left[i]-right[i]));\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote (2).jpg](https://assets.leetcode.com/users/images/c44c8f10-3d46-4228-908f-b730f938eebe_1677407738.1776164.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& v) {\\n        int n=v.size();\\n        vector<int>left(n,0);\\n        vector<int>right(n,0);\\n        int s=0;\\n        for(int i=n-2;i>=0;i--){\\n            s+=v[i+1];\\n            left[i]=s;\\n        }\\n        s=0;\\n        for(int i=1;i<n;i++){\\n            s+=v[i-1];\\n            right[i]=s;\\n        }\\n        vector<int>ans;\\n        for(int i=0;i<n;i++){\\n            ans.push_back(abs(left[i]-right[i]));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230806,
                "title": "2574-left-and-right-sum-differences-java-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] leftSum = new int[n];\\n        int[] rightSum = new int[n];\\n        \\n        for(int i=1; i<n; i++){\\n            leftSum[i] = leftSum[i-1] + nums[i-1];\\n        }\\n        for (int i = n-2; i >= 0; i--) {\\n        rightSum[i] = rightSum[i+1] + nums[i+1];\\n        }\\n        int[] answer = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            answer[i] = Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] leftSum = new int[n];\\n        int[] rightSum = new int[n];\\n        \\n        for(int i=1; i<n; i++){\\n            leftSum[i] = leftSum[i-1] + nums[i-1];\\n        }\\n        for (int i = n-2; i >= 0; i--) {\\n        rightSum[i] = rightSum[i+1] + nums[i+1];\\n        }\\n        int[] answer = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            answer[i] = Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3789083,
                "title": "java-easy-solution-100-faster",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n       int leftSum = 0, rightSum = 0;\\n       for(int n : nums) rightSum += n;\\n       for(int i = 0; i < nums.length; i ++) {\\n           leftSum += nums[i];\\n           rightSum -= nums[i];\\n           nums[i] = Math.abs((leftSum - nums[i]) - rightSum);\\n       } \\n       return nums;\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n       int leftSum = 0, rightSum = 0;\\n       for(int n : nums) rightSum += n;\\n       for(int i = 0; i < nums.length; i ++) {\\n           leftSum += nums[i];\\n           rightSum -= nums[i];\\n           nums[i] = Math.abs((leftSum - nums[i]) - rightSum);\\n       } \\n       return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231017,
                "title": "c-using-l-vector-and-r-vector",
                "content": "**connect with me on linkedin** https://www.linkedin.com/in/raghav-upadhyay-80336b229/\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> left;\\n        vector<int> ri;\\n        vector<int> res;\\n        int sum=0;\\n        for(int i=0;i<nums.size();i++){\\n            left.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        sum=0;\\n        for(int i=nums.size()-1;i>=0;i--){\\n            ri.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        reverse(ri.begin(),ri.end());\\n        for(int i=0;i<nums.size();i++){\\n            res.push_back(abs(ri[i]-left[i]));\\n        }\\n        return res;\\n    }\\n};\\n```\\n\\n# Don\\'t forgot to upvote \\u2B06\\uFE0F\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> left;\\n        vector<int> ri;\\n        vector<int> res;\\n        int sum=0;\\n        for(int i=0;i<nums.size();i++){\\n            left.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        sum=0;\\n        for(int i=nums.size()-1;i>=0;i--){\\n            ri.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        reverse(ri.begin(),ri.end());\\n        for(int i=0;i<nums.size();i++){\\n            res.push_back(abs(ri[i]-left[i]));\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230893,
                "title": "prefix-suffix-sum-easy",
                "content": "# Complexity\\n- Time `O(N)`\\n- Space `O(1) if result list is ingore`\\n\\n# Code\\n```\\nclass Solution(object):\\n    def leftRigthDifference(self, nums):\\n        prefix, suffix = 0, sum(nums)\\n        res = []\\n        for num in nums:\\n            suffix -= num\\n            res.append(abs(prefix - suffix))\\n            prefix += num\\n        return res\\n```\\n**UpVote**, if you like it :)",
                "solutionTags": [
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution(object):\\n    def leftRigthDifference(self, nums):\\n        prefix, suffix = 0, sum(nums)\\n        res = []\\n        for num in nums:\\n            suffix -= num\\n            res.append(abs(prefix - suffix))\\n            prefix += num\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411979,
                "title": "javascript-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:84%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:89%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n*/\\nvar leftRigthDifference = function(nums) {\\n  let result = [];\\n  \\n  let left = 0;\\n  let right = 0;\\n  \\n  for (var i = 0; i < nums.length; i++) {\\n    right += nums[i];\\n  }\\n  \\n  for (var i = 0; i < nums.length; i++) {\\n    right -= nums[i];\\n    result.push(Math.abs(left - right));\\n    left += nums[i];\\n  }\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n*/\\nvar leftRigthDifference = function(nums) {\\n  let result = [];\\n  \\n  let left = 0;\\n  let right = 0;\\n  \\n  for (var i = 0; i < nums.length; i++) {\\n    right += nums[i];\\n  }\\n  \\n  for (var i = 0; i < nums.length; i++) {\\n    right -= nums[i];\\n    result.push(Math.abs(left - right));\\n    left += nums[i];\\n  }\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3247298,
                "title": "python3-beats-93-96-beginner-easy-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/c3e006fb-465a-4819-98bc-d82365ffbe6b_1677754147.4238694.png)\\n\\n# Code\\n```\\n#This solution beats 93.96% \\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        lst=[]\\n        for i in range(len(nums)):\\n            lst.append(abs(sum((nums[:i]))-(sum(nums[i+1:]))))\\n        return lst\\n```\\n```\\n                            or\\n```\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        return [abs(sum((nums[:i]))-(sum(nums[i+1:]))) for i in range(len(nums))]\\n```\\n![image.png](https://assets.leetcode.com/users/images/90fa1eb9-2ed4-490b-880a-2e6d3be9c47c_1677754065.72238.png)",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\n#This solution beats 93.96% \\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        lst=[]\\n        for i in range(len(nums)):\\n            lst.append(abs(sum((nums[:i]))-(sum(nums[i+1:]))))\\n        return lst\\n```\n```\\n                            or\\n```\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        return [abs(sum((nums[:i]))-(sum(nums[i+1:]))) for i in range(len(nums))]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230777,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftsum[]=new int[nums.length];\\n        leftsum[0]=0;\\n        int sum=nums[0];\\n        for(int i=1;i<nums.length;i++){\\n            leftsum[i]=sum;\\n            sum+=nums[i];\\n        }\\n        int rightsum[]=new int[nums.length];\\n        rightsum[nums.length-1]=0;\\n        int sum1=nums[nums.length-1];\\n        for(int i=nums.length-2;i>=0;i--){\\n            rightsum[i]=sum1;\\n            sum1+=nums[i];\\n        }\\n        int ans[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++){\\n            ans[i]=Math.abs(rightsum[i]-leftsum[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/cd04e7f5-4dfd-489d-843a-fef89f61d986_1677384037.466637.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftsum[]=new int[nums.length];\\n        leftsum[0]=0;\\n        int sum=nums[0];\\n        for(int i=1;i<nums.length;i++){\\n            leftsum[i]=sum;\\n            sum+=nums[i];\\n        }\\n        int rightsum[]=new int[nums.length];\\n        rightsum[nums.length-1]=0;\\n        int sum1=nums[nums.length-1];\\n        for(int i=nums.length-2;i>=0;i--){\\n            rightsum[i]=sum1;\\n            sum1+=nums[i];\\n        }\\n        int ans[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++){\\n            ans[i]=Math.abs(rightsum[i]-leftsum[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550439,
                "title": "c-simple-easy-to-understand",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int ps = 0, ss = 0;\\n        for(auto &i: nums)ss += i;//get suffix sum\\n        vector<int> ans;\\n        for(auto &i: nums){\\n            ss -= i;//sum of i+1 to n\\n            ans.push_back(abs(ss-ps));\\n            ps += i;//sum of 0 to i\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int ps = 0, ss = 0;\\n        for(auto &i: nums)ss += i;//get suffix sum\\n        vector<int> ans;\\n        for(auto &i: nums){\\n            ss -= i;//sum of i+1 to n\\n            ans.push_back(abs(ss-ps));\\n            ps += i;//sum of 0 to i\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3340960,
                "title": "easy-java-code-different-approach",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] answer = new int[nums.length];\\n        int leftSum, rightSum;\\n\\n        for(int i = 0; i < answer.length; i++){\\n            leftSum = 0;\\n            for(int j = 0; j < i; j++){\\n                leftSum += nums[j];\\n            }\\n            rightSum = 0;\\n            for(int j = i+1; j < nums.length; j++){\\n                rightSum += nums[j];\\n            }\\n\\n            if(leftSum - rightSum >= 0){\\n                answer[i] = leftSum - rightSum;\\n            }\\n            else{\\n                answer[i] = -(leftSum - rightSum);\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```\\nPlease upvote me, it encourages me alot!!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] answer = new int[nums.length];\\n        int leftSum, rightSum;\\n\\n        for(int i = 0; i < answer.length; i++){\\n            leftSum = 0;\\n            for(int j = 0; j < i; j++){\\n                leftSum += nums[j];\\n            }\\n            rightSum = 0;\\n            for(int j = i+1; j < nums.length; j++){\\n                rightSum += nums[j];\\n            }\\n\\n            if(leftSum - rightSum >= 0){\\n                answer[i] = leftSum - rightSum;\\n            }\\n            else{\\n                answer[i] = -(leftSum - rightSum);\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231265,
                "title": "no-extra-space-c-java-easy-to-understand-o-n-time",
                "content": "---------------------------------------------------------------------\\r\\n                                JAVA CODE\\r\\nclass Solution {\\r\\n    public int[] leftRigthDifference(int[] nums) {\\r\\n        \\r\\n        //total sum\\r\\n        int val=0;\\r\\n        for(int it: nums){\\r\\n            val+=it;\\r\\n        }\\r\\n        int leftsum=0;\\r\\n        int ans[]=new int[nums.length];\\r\\n        for(int i=0;i<nums.length;i++){\\r\\n        //val-leftsum-nums[i] give u the right most value  and we just have to sub rightsum-leftsum\\r\\n            ans[i]=Math.abs((val-leftsum-nums[i])-leftsum);\\r\\n            leftsum+=nums[i];\\r\\n        }\\r\\n        return ans;\\r\\n    }\\r\\n}\\r\\n\\r\\n----------------------------------------------------------------------\\r\\n                                C++ CODE\\r\\n\\r\\nclass Solution {\\r\\npublic:\\r\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\r\\n\\r\\n        int val=0;\\r\\n        for(int it: nums){\\r\\n            val+=it;\\r\\n        }\\r\\n        int leftsum=0;\\r\\n       vector<int>ans(nums.size());\\r\\n        for(int i=0;i<nums.size();i++){\\r\\n            ans[i]=abs((val-leftsum-nums[i])-leftsum);\\r\\n            leftsum+=nums[i];\\r\\n        }\\r\\n        return ans;\\r\\n    }\\r\\n};",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "class Solution {\\r\\n    public int[] leftRigthDifference(int[] nums) {\\r\\n        \\r\\n        //total sum\\r\\n        int val=0;\\r\\n        for(int it: nums){\\r\\n            val+=it;\\r\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3231147,
                "title": "effective-solution-in-o-n-time-prefix-sum",
                "content": "```\\n// INTUITION-\\n/*\\n   1. Make a suffix array(sum)\\n   2. Make a prefix array(sum)\\n   3. Take their absolute difference and return it.\\n*/\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> pref(n), suff(n);\\n        pref[0] = nums[0];\\n        suff[n-1] = nums[n-1];\\n        for(int i = 1 ; i < n ; i++) pref[i] = pref[i-1]+nums[i];\\n        for(int i = n-2 ; i >= 0 ; i--) suff[i] = suff[i+1]+nums[i];\\n        for(int i = 0 ; i < n ; i++) pref[i] = abs(pref[i]-suff[i]);\\n        return pref;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Prefix Sum"
                ],
                "code": "```\\n// INTUITION-\\n/*\\n   1. Make a suffix array(sum)\\n   2. Make a prefix array(sum)\\n   3. Take their absolute difference and return it.\\n*/\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> pref(n), suff(n);\\n        pref[0] = nums[0];\\n        suff[n-1] = nums[n-1];\\n        for(int i = 1 ; i < n ; i++) pref[i] = pref[i-1]+nums[i];\\n        for(int i = n-2 ; i >= 0 ; i--) suff[i] = suff[i+1]+nums[i];\\n        for(int i = 0 ; i < n ; i++) pref[i] = abs(pref[i]-suff[i]);\\n        return pref;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231042,
                "title": "c-with-explanation",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- The problem requires finding the absolute difference between the sum of elements to the left and right of each index in the given array. To solve this problem, we can follow the below steps:\\n\\n    1. Initialize two arrays, left and right of size n, where n is the size of the input array nums.\\n    2. Traverse through the input array nums and calculate the prefix sum for the left array. For each index i, the value at the index i in the left array will be the sum of all elements to the left of i in the input array.\\n    3. Traverse through the input array nums in reverse order and calculate the prefix sum for the right array. For each index i, the value at the index i in the right array will be the sum of all elements to the right of i in the input array.\\n    4. Traverse through the input array nums again and calculate the absolute difference between the corresponding values in the left and right arrays. Store the absolute difference in an array called ans.\\n    5. Return the array ans.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n    - The time complexity of this solution is $$O(n)$$, where n is the size of the input array, as we are traversing through the input array three times.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n   - The space complexity is also $$O(n)$$, as we are using two extra arrays of size n.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n\\n        int n = nums.size();\\n        vector<int> left(n), right(n);\\n        \\n        // Calculate prefix sum for left array\\n        for(int i = 1; i < n; i++) {\\n            left[i] = left[i-1] + nums[i-1];\\n        }\\n        \\n        // Calculate prefix sum for right array\\n        for(int i = n-2; i >= 0; i--) {\\n            right[i] = right[i+1] + nums[i+1];\\n        }\\n        \\n        // Calculate absolute difference between left and right sums\\n        vector<int> ans(n);\\n        for(int i = 0; i < n; i++) {\\n            ans[i] = abs(left[i] - right[i]);\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n\\n        int n = nums.size();\\n        vector<int> left(n), right(n);\\n        \\n        // Calculate prefix sum for left array\\n        for(int i = 1; i < n; i++) {\\n            left[i] = left[i-1] + nums[i-1];\\n        }\\n        \\n        // Calculate prefix sum for right array\\n        for(int i = n-2; i >= 0; i--) {\\n            right[i] = right[i+1] + nums[i+1];\\n        }\\n        \\n        // Calculate absolute difference between left and right sums\\n        vector<int> ans(n);\\n        for(int i = 0; i < n; i++) {\\n            ans[i] = abs(left[i] - right[i]);\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230898,
                "title": "straight-easy-clean-java",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int lsum[] = new int[nums.length];\\n        int rsum[] = new int[nums.length];\\n        int res[] = new int[nums.length];\\n        for(int i=1; i<nums.length; i++)    lsum[i] = lsum[i-1]+nums[i-1];\\n        for(int i=nums.length-2; i>=0; i--)    rsum[i] = rsum[i+1] + nums[i+1];\\n        for(int i=0; i<nums.length; i++)   res[i] = Math.abs(lsum[i]-rsum[i]);\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int lsum[] = new int[nums.length];\\n        int rsum[] = new int[nums.length];\\n        int res[] = new int[nums.length];\\n        for(int i=1; i<nums.length; i++)    lsum[i] = lsum[i-1]+nums[i-1];\\n        for(int i=nums.length-2; i>=0; i--)    rsum[i] = rsum[i+1] + nums[i+1];\\n        for(int i=0; i<nums.length; i++)   res[i] = Math.abs(lsum[i]-rsum[i]);\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230829,
                "title": "c-prefix-and-suffix-sum",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> pre(n,0),suff(n,0);\\n        pre[0] = 0;\\n        suff[n-1] = 0;\\n        for(int i=1;i<n;i++){\\n            pre[i] = pre[i-1]+nums[i-1];\\n        }\\n        for(int i=n-2;i>=0;i--){\\n            suff[i] = suff[i+1] + nums[i+1];\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            nums[i] = abs(pre[i]-suff[i]);\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Suffix Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> pre(n,0),suff(n,0);\\n        pre[0] = 0;\\n        suff[n-1] = 0;\\n        for(int i=1;i<n;i++){\\n            pre[i] = pre[i-1]+nums[i-1];\\n        }\\n        for(int i=n-2;i>=0;i--){\\n            suff[i] = suff[i+1] + nums[i+1];\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            nums[i] = abs(pre[i]-suff[i]);\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3509890,
                "title": "simple-approach-o-n-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>ans(n);\\n        vector<int>left(n,0);\\n        vector<int>right(n,0);\\n\\n        for(int i=1;i<n;i++) left[i]=left[i-1]+nums[i-1];\\n        for(int i=n-2;i>=0;i--) right[i]=right[i+1]+nums[i+1];\\n\\n        for(int i=0;i<n;i++) ans[i]=abs(left[i]-right[i]);\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int>ans(n);\\n        vector<int>left(n,0);\\n        vector<int>right(n,0);\\n\\n        for(int i=1;i<n;i++) left[i]=left[i-1]+nums[i-1];\\n        for(int i=n-2;i>=0;i--) right[i]=right[i+1]+nums[i+1];\\n\\n        for(int i=0;i<n;i++) ans[i]=abs(left[i]-right[i]);\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359406,
                "title": "leftrigthdifference",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe \"leftRigthDifference\" function takes a vector of integers as input and returns another vector that contains the absolute difference between the sum of elements on the left and right side of each element in the input vector. The intuition behind this function is to calculate the difference between the sum of the elements on the left and right side of each element in the vector and store it in the resulting vector.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo implement the \"leftRigthDifference\" function, the solution uses an iterator to iterate through each element in the input vector \"nums.\" If the iterator is pointing to the first element, the function calculates the sum of all the elements in the vector except the first element and stores it in the resulting vector \"res.\" Similarly, if the iterator is pointing to the last element, the function calculates the sum of all the elements in the vector except the last element and stores it in the resulting vector \"res.\" For all the other elements in the vector, the function calculates the absolute difference between the sum of the elements on the left and right side of the current element and stores it in the resulting vector \"res.\"\\n# Complexity\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the \"leftRigthDifference\" function is O(n^2) because for each element in the input vector \"nums,\" the function calculates the sum of the elements on both the left and right sides. The space complexity of the function is also O(n) because the resulting vector \"res\" has the same size as the input vector \"nums.\"\\n# Code\\n```\\nclass Solution {\\n public:\\n  vector<int> leftRigthDifference(vector<int>& nums) {\\n    vector<int> res;\\n\\n    for (std::vector<int>::iterator iterator = nums.begin();\\n         iterator != nums.end(); ++iterator) {\\n      if (iterator == nums.begin())\\n        res.push_back(accumulate(nums.begin() + 1, nums.end(), 0));\\n      else if (iterator == nums.end() - 1)\\n        res.push_back(accumulate(nums.begin(), nums.end() - 1, 0));\\n      else {\\n        res.push_back(abs(accumulate(nums.begin(), iterator, 0) -\\n                          accumulate(iterator + 1, nums.end(), 0)));\\n      }\\n    }\\n\\n    return (res);\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  vector<int> leftRigthDifference(vector<int>& nums) {\\n    vector<int> res;\\n\\n    for (std::vector<int>::iterator iterator = nums.begin();\\n         iterator != nums.end(); ++iterator) {\\n      if (iterator == nums.begin())\\n        res.push_back(accumulate(nums.begin() + 1, nums.end(), 0));\\n      else if (iterator == nums.end() - 1)\\n        res.push_back(accumulate(nums.begin(), nums.end() - 1, 0));\\n      else {\\n        res.push_back(abs(accumulate(nums.begin(), iterator, 0) -\\n                          accumulate(iterator + 1, nums.end(), 0)));\\n      }\\n    }\\n\\n    return (res);\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345110,
                "title": "easy-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        ls = rs = 0\\n        leftSum = [0]\\n        rightSum = []\\n        for i in range(0,len(nums)-1):\\n            ls = ls+nums[i]\\n            leftSum.append(ls)\\n        for j in range(len(nums)-1,0,-1):\\n            rs = rs+nums[j]\\n            rightSum.append(rs)\\n        rightSum.reverse()\\n        rightSum.append(0)\\n        res = [abs(i - j) for i, j in zip(leftSum, rightSum)]\\n        return res\\n\\n                    \\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        ls = rs = 0\\n        leftSum = [0]\\n        rightSum = []\\n        for i in range(0,len(nums)-1):\\n            ls = ls+nums[i]\\n            leftSum.append(ls)\\n        for j in range(len(nums)-1,0,-1):\\n            rs = rs+nums[j]\\n            rightSum.append(rs)\\n        rightSum.reverse()\\n        rightSum.append(0)\\n        res = [abs(i - j) for i, j in zip(leftSum, rightSum)]\\n        return res\\n\\n                    \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3268511,
                "title": "python-easy-o-n-no-extra-memory",
                "content": "\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```python []\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        sumLeft, sumRight = 0, sum(nums)\\n        for i, n in enumerate(nums):\\n            sumRight -= n\\n            nums[i] = abs(sumLeft - sumRight)\\n            sumLeft += n\\n        return nums\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python []\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        sumLeft, sumRight = 0, sum(nums)\\n        for i, n in enumerate(nums):\\n            sumRight -= n\\n            nums[i] = abs(sumLeft - sumRight)\\n            sumLeft += n\\n        return nums\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254945,
                "title": "python-3-variant-solutions",
                "content": "# Code V1\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        res = []\\n\\n        for i in range(len(nums)):\\n\\n            suma = abs(sum(nums[:i+1]) - sum(nums[i:]))\\n\\n            res.append(suma)\\n\\n        return res\\n\\n\\n```\\n# Code V2\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        res = []\\n\\n        for i in range(len(nums)):\\n\\n            leftSum = sum(nums[:i+1])\\n\\n            rightSum = sum(nums[i:])\\n\\n            res.append(abs(leftSum - rightSum))\\n\\n        return res\\n\\n\\n```\\n# Code v3\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        return [abs(sum(nums[:i + 1]) - sum(nums[i:])) for i in range(len(nums))]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        res = []\\n\\n        for i in range(len(nums)):\\n\\n            suma = abs(sum(nums[:i+1]) - sum(nums[i:]))\\n\\n            res.append(suma)\\n\\n        return res\\n\\n\\n```\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        res = []\\n\\n        for i in range(len(nums)):\\n\\n            leftSum = sum(nums[:i+1])\\n\\n            rightSum = sum(nums[i:])\\n\\n            res.append(abs(leftSum - rightSum))\\n\\n        return res\\n\\n\\n```\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        return [abs(sum(nums[:i + 1]) - sum(nums[i:])) for i in range(len(nums))]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3247131,
                "title": "c-2-pass",
                "content": "```c++\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& n) {\\n        int len = n.size();\\n        vector<int> res(len, 0);\\n        for (int i = len - 1, prev = 0; i >= 0; i--) \\n            res[i] = prev, prev += n[i];\\n        for (int i = 0, prev = 0; i < len; i++)\\n            res[i] = abs(prev - res[i]), prev += n[i];\\n        return res;\\n    }\\n};\\n```\\n\\n**For more solutions, check out this \\uD83C\\uDFC6  [GITHUB REPOSITORY](https://github.com/MuhtasimTanmoy/playground) with over 1500+ solutions.**",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& n) {\\n        int len = n.size();\\n        vector<int> res(len, 0);\\n        for (int i = len - 1, prev = 0; i >= 0; i--) \\n            res[i] = prev, prev += n[i];\\n        for (int i = 0, prev = 0; i < len; i++)\\n            res[i] = abs(prev - res[i]), prev += n[i];\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3242970,
                "title": "js-javascript",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRigthDifference = function(nums) {\\n    let sumRight = nums.reduce((a,b) => a + b);\\n    let sumLeft = 0;\\n    const a = nums.slice(0, nums.length - 1);\\n    a.unshift(0)\\n    \\n    for(let i = 0; i < nums.length; i++){\\n        sumRight -= nums[i]\\n        sumLeft += a[i]\\n        a[i] = Math.abs(sumLeft - sumRight)\\n    }\\n    \\n    return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRigthDifference = function(nums) {\\n    let sumRight = nums.reduce((a,b) => a + b);\\n    let sumLeft = 0;\\n    const a = nums.slice(0, nums.length - 1);\\n    a.unshift(0)\\n    \\n    for(let i = 0; i < nums.length; i++){\\n        sumRight -= nums[i]\\n        sumLeft += a[i]\\n        a[i] = Math.abs(sumLeft - sumRight)\\n    }\\n    \\n    return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3239774,
                "title": "java-easy-approach-quite-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust keep it basic focus on finding out the leftsum and rightsum array which are quite easier to think \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo create the left array you can go and create the leftsum array\\nTo create the right array you can go and create the rightsum array \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int[] leftRigthDifference(int[] nums) \\n    {\\n        int n=nums.length;\\n        int leftsum[]=new int[n];\\n        leftsum[0]=0;\\n        for(int i=1;i<n;i++)\\n        {\\n            leftsum[i]=leftsum[i-1]+nums[i-1];\\n        }\\n        int rightsum[]=new int[n];\\n         rightsum[n-1]=0;\\n        for(int i=n-2;i>=0;i--)\\n        {\\n           rightsum[i]=rightsum[i+1]+nums[i+1];\\n        }\\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            ans[i]=Math.abs(leftsum[i]-rightsum[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[] leftRigthDifference(int[] nums) \\n    {\\n        int n=nums.length;\\n        int leftsum[]=new int[n];\\n        leftsum[0]=0;\\n        for(int i=1;i<n;i++)\\n        {\\n            leftsum[i]=leftsum[i-1]+nums[i-1];\\n        }\\n        int rightsum[]=new int[n];\\n         rightsum[n-1]=0;\\n        for(int i=n-2;i>=0;i--)\\n        {\\n           rightsum[i]=rightsum[i+1]+nums[i+1];\\n        }\\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            ans[i]=Math.abs(leftsum[i]-rightsum[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233635,
                "title": "easy-java-solution-with-1ms-runtime-tc-o-n-beats-100",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int[] leftRigthDifference(int[] nums) \\n    {\\n        int[] answer = new int[nums.length];\\n\\n        int leftSum = 0, rightSum = 0;\\n        for(int I : nums) rightSum += I;\\n\\n        for(int idx=0; idx < nums.length; idx++)\\n        {\\n            rightSum -= nums[idx]; \\n            answer[idx] = Math.abs(leftSum-rightSum); \\n            leftSum += nums[idx];                   \\n        }\\n\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[] leftRigthDifference(int[] nums) \\n    {\\n        int[] answer = new int[nums.length];\\n\\n        int leftSum = 0, rightSum = 0;\\n        for(int I : nums) rightSum += I;\\n\\n        for(int idx=0; idx < nums.length; idx++)\\n        {\\n            rightSum -= nums[idx]; \\n            answer[idx] = Math.abs(leftSum-rightSum); \\n            leftSum += nums[idx];                   \\n        }\\n\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231323,
                "title": "prefix-sum-and-suffix-sum-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        long long l=0, r=0;\\n        for(auto i: nums)r+=i;\\n        vector<int> v;\\n        for(auto i: nums)\\n        {   r-=i;\\n            v.push_back(abs(r-l));\\n            l+=i;}\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        long long l=0, r=0;\\n        for(auto i: nums)r+=i;\\n        vector<int> v;\\n        for(auto i: nums)\\n        {   r-=i;\\n            v.push_back(abs(r-l));\\n            l+=i;}\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231092,
                "title": "prefix-suffix-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> l(n), r(n), ans(n);\\n        for(int i=1; i<n; i++) l[i] = l[i - 1] + nums[i - 1];\\n        for(int i=n-2; i>=0; i--) r[i] = r[i + 1] + nums[i + 1];\\n        for(int i=0; i<n; i++) ans[i] = abs(l[i] - r[i]);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Suffix Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> l(n), r(n), ans(n);\\n        for(int i=1; i<n; i++) l[i] = l[i - 1] + nums[i - 1];\\n        for(int i=n-2; i>=0; i--) r[i] = r[i + 1] + nums[i + 1];\\n        for(int i=0; i<n; i++) ans[i] = abs(l[i] - r[i]);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231016,
                "title": "prefix-sum-suffinx-sum-time-o-n-space-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size(),i;\\n        vector<int> ans(n),left(n,0),right(n,0);\\n        for(i = 0; i < n; i++){\\n            if(i==0){\\n                left[i] = nums[i];\\n            }else{\\n                left[i] = left[i-1]+nums[i];\\n            }\\n            if(i==0){\\n                right[n-i-1] = nums[n-1];\\n                \\n            }else{\\n                right[n-i-1] = nums[n-1-i]+right[n-i];\\n            }\\n        }\\n        // for(auto &i: left)cout<<i<<\" \";\\n        // cout<<endl;\\n        // for(auto &i: right)cout<<i<<\" \";\\n        for(i = 0; i < n; i++){\\n            ans[i] = abs(left[i]-right[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size(),i;\\n        vector<int> ans(n),left(n,0),right(n,0);\\n        for(i = 0; i < n; i++){\\n            if(i==0){\\n                left[i] = nums[i];\\n            }else{\\n                left[i] = left[i-1]+nums[i];\\n            }\\n            if(i==0){\\n                right[n-i-1] = nums[n-1];\\n                \\n            }else{\\n                right[n-i-1] = nums[n-1-i]+right[n-i];\\n            }\\n        }\\n        // for(auto &i: left)cout<<i<<\" \";\\n        // cout<<endl;\\n        // for(auto &i: right)cout<<i<<\" \";\\n        for(i = 0; i < n; i++){\\n            ans[i] = abs(left[i]-right[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3230923,
                "title": "cpp-o-n-time-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        \\n        vector<int>left(nums.size() , 0);\\n        vector<int>right(nums.size() ,0);\\n        int leftSum = 0;\\n        int rightSum = 0;\\n        int j = nums.size()-1;\\n        for(int i=0;i<nums.size() ; i++){\\n            left[i] = leftSum;\\n            leftSum += nums[i];\\n\\n            right[j] = rightSum;\\n            rightSum += nums[j--];\\n\\n\\n        }\\n        for(int i=0;i<nums.size() ; i++){\\n            nums[i] = abs(left[i] -right[i]);\\n        }\\n\\n        return\\xA0nums;\\n\\xA0\\xA0\\xA0\\xA0}\\n};\\n```",
                "solutionTags": [
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        \\n        vector<int>left(nums.size() , 0);\\n        vector<int>right(nums.size() ,0);\\n        int leftSum = 0;\\n        int rightSum = 0;\\n        int j = nums.size()-1;\\n        for(int i=0;i<nums.size() ; i++){\\n            left[i] = leftSum;\\n            leftSum += nums[i];\\n\\n            right[j] = rightSum;\\n            rightSum += nums[j--];\\n\\n\\n        }\\n        for(int i=0;i<nums.size() ; i++){\\n            nums[i] = abs(left[i] -right[i]);\\n        }\\n\\n        return\\xA0nums;\\n\\xA0\\xA0\\xA0\\xA0}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230916,
                "title": "python-simple-python-solution",
                "content": "\\n# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 79 ms, faster than 86.67% of Python3 online submissions for Left and Right Sum Differences.\\n# Memory Usage: 14.2 MB, less than 13.33% of Python3 online submissions for Left and Right Sum Differences.\\n\\n\\tclass Solution:\\n\\t\\tdef leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tleft_sum = [0]\\n\\t\\t\\tright_sum = [0]\\n\\n\\t\\t\\tfor num in nums[:-1]:\\n\\t\\t\\t\\tleft_sum.append(left_sum[-1] + num)\\n\\n\\t\\t\\tfor num in nums[::-1][:-1]:\\n\\t\\t\\t\\tright_sum.insert(0, right_sum[0] + num)\\n\\n\\t\\t\\tfor index in range(len(nums)):\\n\\t\\t\\t\\tresult.append(abs(left_sum[index] - right_sum[index]))\\n\\n\\t\\t\\treturn result\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Prefix Sum"
                ],
                "code": "\\n# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 79 ms, faster than 86.67% of Python3 online submissions for Left and Right Sum Differences.\\n# Memory Usage: 14.2 MB, less than 13.33% of Python3 online submissions for Left and Right Sum Differences.\\n\\n\\tclass Solution:\\n\\t\\tdef leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tleft_sum = [0]\\n\\t\\t\\tright_sum = [0]\\n\\n\\t\\t\\tfor num in nums[:-1]:\\n\\t\\t\\t\\tleft_sum.append(left_sum[-1] + num)\\n\\n\\t\\t\\tfor num in nums[::-1][:-1]:\\n\\t\\t\\t\\tright_sum.insert(0, right_sum[0] + num)\\n\\n\\t\\t\\tfor index in range(len(nums)):\\n\\t\\t\\t\\tresult.append(abs(left_sum[index] - right_sum[index]))\\n\\n\\t\\t\\treturn result\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3230910,
                "title": "very-easy-java-understandable-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n=nums.length;\\n        int left[]=new int[n];\\n        int right[]=new int[n];\\n        for(int i=0;i<n;i++){\\n            int sum=0;\\n            for(int j=i+1;j<n;j++){\\n                sum+=nums[j];\\n            }\\n            right[i]=sum;\\n        }\\n        \\n        for(int i=n-1;i>=0;i--){\\n            int sum=0;\\n            for(int j=i-1;j>=0;j--){\\n                sum+=nums[j];\\n            }\\n            left[i]=sum;\\n        }\\n        \\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++){\\n            ans[i]=Math.abs(left[i]-right[i]);\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n=nums.length;\\n        int left[]=new int[n];\\n        int right[]=new int[n];\\n        for(int i=0;i<n;i++){\\n            int sum=0;\\n            for(int j=i+1;j<n;j++){\\n                sum+=nums[j];\\n            }\\n            right[i]=sum;\\n        }\\n        \\n        for(int i=n-1;i>=0;i--){\\n            int sum=0;\\n            for(int j=i-1;j>=0;j--){\\n                sum+=nums[j];\\n            }\\n            left[i]=sum;\\n        }\\n        \\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++){\\n            ans[i]=Math.abs(left[i]-right[i]);\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230853,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] left=new int[nums.length];\\n        int[] right=new int[nums.length];\\n        int[] ans=new int[nums.length];\\n        int l=0;\\n        int r=0;\\n        for(int i=0;i<nums.length;i++){\\n                left[i]=l;\\n            l+=nums[i];\\n        }\\n        for(int i=nums.length-1;i>=0;i--){\\n                right[i]=r;\\n            r+=nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++){\\n              ans[i]=Math.abs(left[i]-right[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] left=new int[nums.length];\\n        int[] right=new int[nums.length];\\n        int[] ans=new int[nums.length];\\n        int l=0;\\n        int r=0;\\n        for(int i=0;i<nums.length;i++){\\n                left[i]=l;\\n            l+=nums[i];\\n        }\\n        for(int i=nums.length-1;i>=0;i--){\\n                right[i]=r;\\n            r+=nums[i];\\n        }\\n        for(int i=0;i<nums.length;i++){\\n              ans[i]=Math.abs(left[i]-right[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230842,
                "title": "java-prefix-sum-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int[] leftRigthDifference(int[] nums) {\\n    var n = nums.length;\\n    var sum = 0;\\n    \\n    for (var i=0; i<n; i++) {\\n      sum += nums[i];\\n      nums[i] = sum;\\n    }\\n    var ans = new int[n];\\n    \\n    for (var i=0; i<n; i++)\\n      ans[i] = Math.abs(nums[n-1] - nums[i] - (i == 0 ? 0 : nums[i-1]));\\n    \\n    return ans;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n  public int[] leftRigthDifference(int[] nums) {\\n    var n = nums.length;\\n    var sum = 0;\\n    \\n    for (var i=0; i<n; i++) {\\n      sum += nums[i];\\n      nums[i] = sum;\\n    }\\n    var ans = new int[n];\\n    \\n    for (var i=0; i<n; i++)\\n      ans[i] = Math.abs(nums[n-1] - nums[i] - (i == 0 ? 0 : nums[i-1]));\\n    \\n    return ans;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072446,
                "title": "an-easy-approach-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRightDifference = function(nums) {\\n    let sum1 = nums.reduce((a,b) => a+b, 0);\\n    let sum2 = sum1;\\n    let n = nums.length;\\n\\n    let leftSum = [];\\n    let rightSum = [];\\n\\n    \\n    for(let i=0; i<n; i++) {\\n        sum1 = sum1 - nums[i];\\n        rightSum[i] = sum1;\\n        sum2 = sum2 - nums[n-i-1];\\n        leftSum[n-i-1] = sum2;\\n    }\\n    let res = [];\\n    for(let i=0; i<n; i++) {\\n        res[i] = Math.abs(leftSum[i]-rightSum[i]);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRightDifference = function(nums) {\\n    let sum1 = nums.reduce((a,b) => a+b, 0);\\n    let sum2 = sum1;\\n    let n = nums.length;\\n\\n    let leftSum = [];\\n    let rightSum = [];\\n\\n    \\n    for(let i=0; i<n; i++) {\\n        sum1 = sum1 - nums[i];\\n        rightSum[i] = sum1;\\n        sum2 = sum2 - nums[n-i-1];\\n        leftSum[n-i-1] = sum2;\\n    }\\n    let res = [];\\n    for(let i=0; i<n; i++) {\\n        res[i] = Math.abs(leftSum[i]-rightSum[i]);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947314,
                "title": "easy-and-smart-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int rs =0;\\n        int ls =0;\\n        int [] answer = new int[nums.length];\\n        for(int i =0;i<nums.length;i++){\\n            rs+=nums[i];\\n        }\\n\\n        for(int i=0;i<nums.length;i++){\\n            rs-=nums[i];\\n            answer[i] = Math.abs(rs-ls);\\n            ls+=nums[i];\\n        }\\n        return answer ;\\n    }\\n}\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int rs =0;\\n        int ls =0;\\n        int [] answer = new int[nums.length];\\n        for(int i =0;i<nums.length;i++){\\n            rs+=nums[i];\\n        }\\n\\n        for(int i=0;i<nums.length;i++){\\n            rs-=nums[i];\\n            answer[i] = Math.abs(rs-ls);\\n            ls+=nums[i];\\n        }\\n        return answer ;\\n    }\\n}\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3882377,
                "title": "python3-solution-only-4-line-beats-98-88-in-runtime-97-89-in-memory",
                "content": "![image.png](https://assets.leetcode.com/users/images/af4a3678-1514-4a2e-95fd-e604d249f074_1691508176.1657977.png)\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        s,ayan,ans=sum(nums),0,[]\\n        for num in nums:\\n            hayan,Muwahid,ayan=ayan,s-ayan-num,ayan+num;ans.append(abs(hayan-Muwahid))\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        s,ayan,ans=sum(nums),0,[]\\n        for num in nums:\\n            hayan,Muwahid,ayan=ayan,s-ayan-num,ayan+num;ans.append(abs(hayan-Muwahid))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873457,
                "title": "efficient-java-solution-with-o-1-space",
                "content": "# Intuition\\nOrdinary solution is to calculate leftSum & rightSum & find its diff.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n) + O(n) = O(n)\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public int[] leftRightDifference(int[] nums) {\\n        if(nums != null && nums.length > 0) {\\n            int n = nums.length;\\n            int[] lsum = new int[n];\\n            int[] rsum = new int[n];\\n            for(int i = 1, j = n-2; i<n; i++,j--) {\\n                lsum[i] += lsum[i-1] + nums[i-1];\\n                rsum[j] += rsum[j+1] + nums[j+1];\\n            }\\n            for(int i =0;i<n;i++) {\\n                nums[i] = Math.abs(lsum[i] - rsum[i]);\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```\\n\\n# approach\\nWe can avoid additional space by re-using the input array.\\n\\nInput:\\n`nums = [10,4,8,3]`\\nLoop1: to calculate rsum\\n`rsum = 25`\\n\\nLoop2:\\n```\\n   for i = 0,  1,  2,  3\\nnums     = 10, 4,  8,  3  \\n------------------------\\ntemp     = 10, 4,  8,  3.   # backing up original array numbers    \\nrsum     = 15, 11, 3,  0    # rsum -= nums[i];\\nlsum     = 0,  10, 14, 22   # lsum value before updating lsum\\nnums[i]  = 15, 1,  11, 22   # res[i] -= Math.abs(rsum - lsum);\\nlsum     = 10, 14, 22, 25   # updating lsum, lsum += temp;\\n\\n```\\n\\n\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        if(nums != null && nums.length > 0) {\\n            int n = nums.length;\\n            int rsum = 0;\\n            int lsum = 0;\\n            for(int i = 0;i<n;i++){\\n                rsum += nums[i];\\n            }\\n            int temp;\\n            for(int i = 0;i<n;i++) {\\n                temp = nums[i];\\n                rsum -= nums[i];\\n                nums[i] = Math.abs(rsum - lsum);\\n                lsum += temp;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int[] leftRightDifference(int[] nums) {\\n        if(nums != null && nums.length > 0) {\\n            int n = nums.length;\\n            int[] lsum = new int[n];\\n            int[] rsum = new int[n];\\n            for(int i = 1, j = n-2; i<n; i++,j--) {\\n                lsum[i] += lsum[i-1] + nums[i-1];\\n                rsum[j] += rsum[j+1] + nums[j+1];\\n            }\\n            for(int i =0;i<n;i++) {\\n                nums[i] = Math.abs(lsum[i] - rsum[i]);\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```\n```\\n   for i = 0,  1,  2,  3\\nnums     = 10, 4,  8,  3  \\n------------------------\\ntemp     = 10, 4,  8,  3.   # backing up original array numbers    \\nrsum     = 15, 11, 3,  0    # rsum -= nums[i];\\nlsum     = 0,  10, 14, 22   # lsum value before updating lsum\\nnums[i]  = 15, 1,  11, 22   # res[i] -= Math.abs(rsum - lsum);\\nlsum     = 10, 14, 22, 25   # updating lsum, lsum += temp;\\n\\n```\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        if(nums != null && nums.length > 0) {\\n            int n = nums.length;\\n            int rsum = 0;\\n            int lsum = 0;\\n            for(int i = 0;i<n;i++){\\n                rsum += nums[i];\\n            }\\n            int temp;\\n            for(int i = 0;i<n;i++) {\\n                temp = nums[i];\\n                rsum -= nums[i];\\n                nums[i] = Math.abs(rsum - lsum);\\n                lsum += temp;\\n            }\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3760341,
                "title": "brute-force-approach-easy",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSuppose we have the following input vector: `nums = [1, 7, 3, 6, 5, 6]`.\\n\\n**Start the second loop:**\\n   - On the first iteration (`i = 0`):\\n     - Subtract `nums[0]` (1) from `right`. Now `right = 27`.\\n     - Check if `right` (27) is greater than or equal to `left` (0). It is.\\n     - Push the absolute difference between `right` and `left` (27 - 0 = 27) to `ans`.\\n     - Add `nums[0]` (1) to `left`. Now `left = 1`.\\n   - On the second iteration (`i = 1`):\\n     - Subtract `nums[1]` (7) from `right`. Now `right = 20`.\\n     - Check if `right` (20) is greater than or equal to `left` (1). It is.\\n     - Push the absolute difference between `right` and `left` (20 - 1 = 19) to `ans`.\\n     - Add `nums[1]` (7) to `left`. Now `left = 8`.\\n   - On the third iteration (`i = 2`):\\n     - Subtract `nums[2]` (3) from `right`. Now `right = 17`.\\n     - Check if `right` (17) is greater than or equal to `left` (8). It\\'s not.\\n     - Push the absolute difference between `left` and `right` (8 - 17 = 9) to `ans`.\\n     - Add `nums[2]` (3) to `left`. Now `left = 11`.\\n   - On the fourth iteration (`i = 3`):\\n     - Subtract `nums[3]` (6) from `right`. Now `right = 11`.\\n     - Check if `right` (11) is greater than or equal to `left` (11). It\\'s not.\\n     - Push the absolute difference between `left` and `right` (11 - 11 = 0) to `ans`.\\n     - Add `nums[3]` (6) to `left`. Now `left = 17`.\\n   - On the fifth iteration (`i = 4`):\\n     - Subtract `nums[4]` (5) from `right`. Now `right = 6`.\\n     - Check if `right` (6) is greater than or equal to `left` (17). It\\'s not.\\n     - Push the absolute difference between `left` and `right` (17 - 6 = 11) to `ans`.\\n     - Add `nums[4]` (5) to `left`. Now `left = 22`.\\n   - On the sixth iteration (`i = 5`):\\n     - Subtract `nums[5]` (6) from `right`. Now `right = 0`.\\n     - Check if `right` (0) is greater than or equal to `left` (22). It\\'s not.\\n     - Push the absolute difference between `left` and `right` (22 - 0 = 22) to `ans`.\\n     - Add `nums[5]` (6) to `left`. Now `left = 28`.\\n\\n\\nAfter the second loop, `ans` will contain the differences [27, 19, 9, 0, 11, 22].\\n\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int left = 0;\\n        int right = 0;\\n        vector<int> ans;\\n        for(auto it : nums){\\n            right += it;\\n        }\\n        for(int i = 0; i < nums.size(); i++){\\n            right -= nums[i];\\n            if(right >= left)\\n                ans.push_back(right - left);\\n            else\\n                ans.push_back(left - right);\\n\\n            left += nums[i];\\n        }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int left = 0;\\n        int right = 0;\\n        vector<int> ans;\\n        for(auto it : nums){\\n            right += it;\\n        }\\n        for(int i = 0; i < nums.size(); i++){\\n            right -= nums[i];\\n            if(right >= left)\\n                ans.push_back(right - left);\\n            else\\n                ans.push_back(left - right);\\n\\n            left += nums[i];\\n        }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3695295,
                "title": "simple-100-beats-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n       int l[]= new int [nums.length];\\n       int r[]= new int [nums.length];\\n       int lr[] = new int[nums.length];\\n       l[0]=0;\\n       r[nums.length-1]=0;\\n       for(int i=1; i<nums.length; i++)\\n       {\\n           l[i]=nums[i-1]+l[i-1];\\n       } \\n       for(int i=nums.length-2; i>=0; i--)\\n       {\\n           r[i]=nums[i+1]+r[i+1];\\n       }\\n       for(int i=0; i<nums.length; i++)\\n       {\\n           lr[i]=Math.abs(l[i]-r[i]);\\n       }\\n       return lr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n       int l[]= new int [nums.length];\\n       int r[]= new int [nums.length];\\n       int lr[] = new int[nums.length];\\n       l[0]=0;\\n       r[nums.length-1]=0;\\n       for(int i=1; i<nums.length; i++)\\n       {\\n           l[i]=nums[i-1]+l[i-1];\\n       } \\n       for(int i=nums.length-2; i>=0; i--)\\n       {\\n           r[i]=nums[i+1]+r[i+1];\\n       }\\n       for(int i=0; i<nums.length; i++)\\n       {\\n           lr[i]=Math.abs(l[i]-r[i]);\\n       }\\n       return lr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3639837,
                "title": "c-easiest-soln",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int leftSumArray[nums.size()],rightSumArray[nums.size()];\\n        vector<int> ans;\\n        leftSumArray[0]=0;\\n        rightSumArray[nums.size()-1]=0;\\n        for(int i=1;i<nums.size();i++){\\n            leftSumArray[i]=leftSumArray[i-1]+nums[i-1];\\n        }\\n        for(int i=nums.size()-2;i>=0;i--){\\n            rightSumArray[i]=rightSumArray[i+1]+nums[i+1];\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            int p=abs(leftSumArray[i]-rightSumArray[i]);\\n            ans.push_back(p);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int leftSumArray[nums.size()],rightSumArray[nums.size()];\\n        vector<int> ans;\\n        leftSumArray[0]=0;\\n        rightSumArray[nums.size()-1]=0;\\n        for(int i=1;i<nums.size();i++){\\n            leftSumArray[i]=leftSumArray[i-1]+nums[i-1];\\n        }\\n        for(int i=nums.size()-2;i>=0;i--){\\n            rightSumArray[i]=rightSumArray[i+1]+nums[i+1];\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            int p=abs(leftSumArray[i]-rightSumArray[i]);\\n            ans.push_back(p);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630506,
                "title": "java-easy-solution-simple-beginner-friendly",
                "content": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] leftSum = new int[n];\\n        for (int i = 1; i < n; i++) {\\n            leftSum[i] = leftSum[i - 1] + nums[i - 1];\\n        }\\n        int[] rightSum = new int[n];\\n        for (int i = n - 2; i >= 0; i--) {\\n            rightSum[i] = rightSum[i + 1] + nums[i + 1];\\n        }\\n        int ans[] = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            ans[i] = Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return ans;\\n\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/e42e5e45-18db-41e7-8fd3-76455dbb9c0d_1686602448.2860143.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] leftSum = new int[n];\\n        for (int i = 1; i < n; i++) {\\n            leftSum[i] = leftSum[i - 1] + nums[i - 1];\\n        }\\n        int[] rightSum = new int[n];\\n        for (int i = n - 2; i >= 0; i--) {\\n            rightSum[i] = rightSum[i + 1] + nums[i + 1];\\n        }\\n        int ans[] = new int[n];\\n        for (int i = 0; i < n; i++) {\\n            ans[i] = Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return ans;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3623646,
                "title": "easy-c-solution",
                "content": "# Approach\\n- Initially `leftSum` is `0`, `rightSum` is sum of all numbers from `nums`\\n- Iterate over `nums`, decraese `rightSum` and increase `leftSum` by the value and set `nums[i]`\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public int[] LeftRightDifference(int[] nums)\\n    {\\n        var leftSum = 0;\\n        var rightSum = nums.Sum();\\n\\n        for (var i = 0; i < nums.Length; i++)\\n        {\\n            var val = nums[i];\\n            rightSum -= val;\\n\\n            nums[i] = Math.Abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int[] LeftRightDifference(int[] nums)\\n    {\\n        var leftSum = 0;\\n        var rightSum = nums.Sum();\\n\\n        for (var i = 0; i < nums.Length; i++)\\n        {\\n            var val = nums[i];\\n            rightSum -= val;\\n\\n            nums[i] = Math.Abs(leftSum - rightSum);\\n            leftSum += val;\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3614649,
                "title": "cpp-solution-with-time-complexity-o-n",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> answer(n);\\n\\n        int rightSum = 0;\\n        for (int i = n - 1; i >= 0; i--) {\\n            answer[i] = rightSum;\\n            rightSum += nums[i];\\n        }\\n\\n        int leftSum = 0;\\n        for (int i = 0; i < n; i++) {\\n            answer[i] = abs(answer[i] - leftSum);\\n            leftSum += nums[i];\\n        }\\n\\n        return answer;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> answer(n);\\n\\n        int rightSum = 0;\\n        for (int i = n - 1; i >= 0; i--) {\\n            answer[i] = rightSum;\\n            rightSum += nums[i];\\n        }\\n\\n        int leftSum = 0;\\n        for (int i = 0; i < n; i++) {\\n            answer[i] = abs(answer[i] - leftSum);\\n            leftSum += nums[i];\\n        }\\n\\n        return answer;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606091,
                "title": "easy-c-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        vector<int>leftsum;\\n        vector<int>rightsum;\\n       int i=0;\\n       int sum =0;\\n       while(i<nums.size()){\\n           \\n           leftsum.push_back(sum);\\n           sum+=nums[i];\\n           \\n           i++;\\n       }\\n        sum =0;\\n       for(int i=1; i<nums.size();i++){\\n           sum+=nums[i];\\n\\n       }\\n\\n       rightsum.push_back(sum);\\n       int sub = sum;\\n       for(int i=1;i<nums.size();i++){\\n           sub -=nums[i];\\n           rightsum.push_back(sub);\\n           \\n       }\\n\\n       vector<int> ans;\\n\\n      for(int i=0; i<nums.size();i++){\\n\\n          ans.push_back(abs(rightsum[i]-leftsum[i]));\\n      }\\n\\n      return ans;\\n\\n      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        vector<int>leftsum;\\n        vector<int>rightsum;\\n       int i=0;\\n       int sum =0;\\n       while(i<nums.size()){\\n           \\n           leftsum.push_back(sum);\\n           sum+=nums[i];\\n           \\n           i++;\\n       }\\n        sum =0;\\n       for(int i=1; i<nums.size();i++){\\n           sum+=nums[i];\\n\\n       }\\n\\n       rightsum.push_back(sum);\\n       int sub = sum;\\n       for(int i=1;i<nums.size();i++){\\n           sub -=nums[i];\\n           rightsum.push_back(sub);\\n           \\n       }\\n\\n       vector<int> ans;\\n\\n      for(int i=0; i<nums.size();i++){\\n\\n          ans.push_back(abs(rightsum[i]-leftsum[i]));\\n      }\\n\\n      return ans;\\n\\n      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3585426,
                "title": "easy-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRightDifference = function(nums) {\\n    let left=0;\\n    let right=0\\n    let answer=[]\\n\\n    for (let i=0;i<nums.length;i++){\\n        right=right+nums[i]\\n    }\\n    for(let i=0;i<nums.length;i++){\\n        right=right-nums[i]\\n        answer[i]=Math.abs(left-right)\\n        left=left+nums[i]\\n    }return answer\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRightDifference = function(nums) {\\n    let left=0;\\n    let right=0\\n    let answer=[]\\n\\n    for (let i=0;i<nums.length;i++){\\n        right=right+nums[i]\\n    }\\n    for(let i=0;i<nums.length;i++){\\n        right=right-nums[i]\\n        answer[i]=Math.abs(left-right)\\n        left=left+nums[i]\\n    }return answer\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579614,
                "title": "easy-c-solution-using-arrays",
                "content": "class Solution {\\npublic:\\n\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n\\t\\n        vector<int> leftsum ; vector<int> rightsum ; \\n        int left = 0 ;  int right = 0 ;\\n         leftsum.push_back(left);\\n     for(int i=0; i<nums.size()-1; i++){\\n          left = left + nums[i];\\n         leftsum.push_back(left);\\n       }\\n     for(int i=1 ; i<nums.size(); i++){\\n         right = right+nums[i];\\n     }   \\n        rightsum.push_back(right);\\n     for(int i=1 ; i<nums.size() ;i++){\\n         right = right - nums[i];\\n         rightsum.push_back(right);\\n     }\\n     vector<int> ans ; \\n        for(int i=0 ; i<nums.size() ;i++){\\n    ans.push_back(abs(leftsum[i]-rightsum[i]));\\n        }\\n        return ans ; \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n\\t\\n        vector<int> leftsum ; vector<int> rightsum ; \\n        int left = 0 ;  int right = 0 ;\\n         leftsum.push_back(left);\\n     for(int i=0; i<nums.size()-1; i++){\\n          left = left + nums[i];\\n         leftsum.push_back(left);\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 3540444,
                "title": "easy-to-understand",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    get the total sum;\\n    then calculate leftsum\\n    now rightsum=totalsum-leftsum-elementvalue\\n    \\n    just do dry run on the first example considering this above approach\\n\\n\\n# Complexity\\n- Time complexity: O(N^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int[] sum=new int[nums.length];\\n        int leftsum,rightsum;\\n        leftsum=rightsum=0;\\n\\n        //calulate total sum\\n        int totalsum=0;\\n        for(int num:nums){\\n            totalsum+=num;\\n        }\\n\\n        for(int i=0;i<nums.length;i++){\\n           leftsum=rightsum=0;\\n            int num=nums[i];\\n\\n            //calculate leftsum\\n                if(i==0) leftsum=0;\\n                else{\\n                    for(int j=0;j<i;j++) leftsum+=nums[j];\\n                }\\n             //calculate rightsum\\n             rightsum=totalsum-leftsum-num;\\n\\n            sum[i]=Math.abs(leftsum-rightsum);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int[] sum=new int[nums.length];\\n        int leftsum,rightsum;\\n        leftsum=rightsum=0;\\n\\n        //calulate total sum\\n        int totalsum=0;\\n        for(int num:nums){\\n            totalsum+=num;\\n        }\\n\\n        for(int i=0;i<nums.length;i++){\\n           leftsum=rightsum=0;\\n            int num=nums[i];\\n\\n            //calculate leftsum\\n                if(i==0) leftsum=0;\\n                else{\\n                    for(int j=0;j<i;j++) leftsum+=nums[j];\\n                }\\n             //calculate rightsum\\n             rightsum=totalsum-leftsum-num;\\n\\n            sum[i]=Math.abs(leftsum-rightsum);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3479409,
                "title": "java-simple-o-n-solution",
                "content": "```java\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0;\\n\\n        for(int i = 1; i < nums.length; ++i)\\n            rightSum += nums[i];\\n\\n        nums[nums.length - 1] = rightSum - nums[nums.length - 1] + nums[0];\\n\\n        for(int i = 1; i < nums.length; ++i) {\\n            int v = nums[i - 1];\\n            nums[i - 1] = Math.abs(leftSum - rightSum);\\n            leftSum += v;\\n            rightSum -= nums[i];\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum = 0, rightSum = 0;\\n\\n        for(int i = 1; i < nums.length; ++i)\\n            rightSum += nums[i];\\n\\n        nums[nums.length - 1] = rightSum - nums[nums.length - 1] + nums[0];\\n\\n        for(int i = 1; i < nums.length; ++i) {\\n            int v = nums[i - 1];\\n            nums[i - 1] = Math.abs(leftSum - rightSum);\\n            leftSum += v;\\n            rightSum -= nums[i];\\n        }\\n\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3474645,
                "title": "left-right-difference",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) \\n    { int l=0,r=0,i,n,an;\\n     vector<int> ans;\\n     n=nums.size();\\n     for(i=0;i<n;i++)\\n     {\\n          r=r+nums[i];\\n     }\\n     for(i=0;i<n;i++)\\n      { \\n        r=r-nums[i];\\n        an=abs(l-r);\\n        ans.push_back(an);\\n        l=l+nums[i];\\n       \\n      }\\n      return ans;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) \\n    { int l=0,r=0,i,n,an;\\n     vector<int> ans;\\n     n=nums.size();\\n     for(i=0;i<n;i++)\\n     {\\n          r=r+nums[i];\\n     }\\n     for(i=0;i<n;i++)\\n      { \\n        r=r-nums[i];\\n        an=abs(l-r);\\n        ans.push_back(an);\\n        l=l+nums[i];\\n       \\n      }\\n      return ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3448249,
                "title": "c-python-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach: Prefix and Suffix sum\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# C++\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int presum = 0;\\n        vector<int> ans {0};\\n        for(int i = 1; i < nums.size(); i++) {\\n            presum += nums[i - 1];\\n            ans.push_back(presum);\\n        }\\n        int sufsum = 0;\\n        for(int i = nums.size() - 2; i >= 0; i--) {\\n            sufsum += nums[i + 1];\\n            ans[i] = abs(ans[i] - sufsum);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n# Python / Python3\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        pre_sum = 0\\n        ans = [0]\\n        for i in range(1, len(nums)):\\n            pre_sum += nums[i - 1]\\n            ans.append(pre_sum)\\n        suf_sum = 0\\n        for i in range(len(nums) - 2, -1, -1):\\n            suf_sum += nums[i + 1]\\n            ans[i] = abs(ans[i] - suf_sum)\\n        return ans\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int presum = 0;\\n        vector<int> ans {0};\\n        for(int i = 1; i < nums.size(); i++) {\\n            presum += nums[i - 1];\\n            ans.push_back(presum);\\n        }\\n        int sufsum = 0;\\n        for(int i = nums.size() - 2; i >= 0; i--) {\\n            sufsum += nums[i + 1];\\n            ans[i] = abs(ans[i] - sufsum);\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        pre_sum = 0\\n        ans = [0]\\n        for i in range(1, len(nums)):\\n            pre_sum += nums[i - 1]\\n            ans.append(pre_sum)\\n        suf_sum = 0\\n        for i in range(len(nums) - 2, -1, -1):\\n            suf_sum += nums[i + 1]\\n            ans[i] = abs(ans[i] - suf_sum)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3440907,
                "title": "easiest-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>ans;\\n        int n=nums.size();\\n        \\n        \\n        int l=0,r=n-1;\\n        while(l<n){ \\n        int sum1=0;\\n        int sum2=0;\\n       for(int i=0;i<l;i++){\\n             sum1=sum1+nums[i];\\n        }\\n        for(int j=l+1;j<n;j++){\\n            sum2=sum2+nums[j];\\n        }\\n        ans.push_back(abs(sum1-sum2));\\n        l++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>ans;\\n        int n=nums.size();\\n        \\n        \\n        int l=0,r=n-1;\\n        while(l<n){ \\n        int sum1=0;\\n        int sum2=0;\\n       for(int i=0;i<l;i++){\\n             sum1=sum1+nums[i];\\n        }\\n        for(int j=l+1;j<n;j++){\\n            sum2=sum2+nums[j];\\n        }\\n        ans.push_back(abs(sum1-sum2));\\n        l++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3429520,
                "title": "simple-and-easy-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. Create two arrays \"left\" and \"right\" and get the values by adding the respective elements.\\n2. Get the absolute value after subtraction.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can observe that,\\n\\n    left[i] = left[i-1]+nums[i-1];\\n\\nand\\n\\n    right[i] = right[i+1]+nums[i+1];\\n\\nStart the Left array from i=1 to i = length of left, because we want the first element to be 0.\\n\\nSame for right but opposite, start the right array from ((right.length-1) - 1) to 0, cause we want to keep the last elem to be 0.\\n\\nGet both the arrays and calculate the absolute difference of respective elements and save the answer in any of the array to save some space.\\n\\nReturn the updated array.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int[] leftRigthDifference(int[] nums) \\n    {\\n        int[] left = new int[nums.length];\\n        int[] right = new int[nums.length];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            left[i] = nums[i-1]+left[i-1];\\n        }\\n        for(int j=nums.length-2;j>=0;j--)\\n        {\\n            right[j] = right[j+1] + nums[j+1];\\n        }\\n\\n        for(int k = 0;k<nums.length;k++)\\n        {\\n            right[k] = Math.abs(left[k]-right[k]);\\n        }\\n        \\n        return right;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[] leftRigthDifference(int[] nums) \\n    {\\n        int[] left = new int[nums.length];\\n        int[] right = new int[nums.length];\\n        for(int i=1;i<nums.length;i++)\\n        {\\n            left[i] = nums[i-1]+left[i-1];\\n        }\\n        for(int j=nums.length-2;j>=0;j--)\\n        {\\n            right[j] = right[j+1] + nums[j+1];\\n        }\\n\\n        for(int k = 0;k<nums.length;k++)\\n        {\\n            right[k] = Math.abs(left[k]-right[k]);\\n        }\\n        \\n        return right;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411967,
                "title": "go-two-easy-solutions",
                "content": "# Approach \\n- Go easy solution\\n-\\n![Screenshot from 2023-04-13 13-14-18.png](https://assets.leetcode.com/users/images/0c497714-9eef-47b9-a45d-3d6e5bd258d3_1681374128.2052467.png)\\n-\\n![Screenshot from 2023-04-13 13-14-38.png](https://assets.leetcode.com/users/images/537a679b-94e2-4e75-88e4-0fde41cdd9f1_1681374141.8533583.png)\\n\\n# Complexity\\n- Time complexity:82%\\n\\n- Space complexity:93%\\n\\n# Code\\n```go []\\n\\nfunc leftRigthDifference(nums []int) []int {\\n\\tresult := make([]int, len(nums))\\n\\tleft, right := 0, 0\\n\\tfor _, num := range nums {\\n\\t\\t\\tright += num\\n\\t}\\n\\tfor i, num := range nums {\\n\\t\\t\\tright -= num\\n\\t\\t\\tresult[i] = Abs(left - right)\\n\\t\\t\\tleft += num\\n\\t}\\n\\treturn result\\n}\\n\\nfunc Abs(x int) int {\\n\\tif x < 0 {\\n\\t\\t\\treturn -x\\n\\t}\\n\\treturn x\\n}\\n```\\n```go []\\nfunc leftRigthDifference(nums[]int) []int{\\n\\tresult := []int{}\\n\\tleft := 0\\n\\tright := 0\\n\\tfor _, v := range nums{\\n\\t\\tright += v\\n\\t}\\n\\tfor _, i := range nums {\\n\\t\\tright -= i\\n\\t\\tresult = append(result, Abs(left - right))\\n\\t\\tleft += i\\n\\t}\\n\\treturn result\\n}\\n\\nfunc Abs(x int) int {\\n\\tif x < 0 {\\n\\t\\treturn -x\\n\\t}\\n\\treturn x\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go []\\n\\nfunc leftRigthDifference(nums []int) []int {\\n\\tresult := make([]int, len(nums))\\n\\tleft, right := 0, 0\\n\\tfor _, num := range nums {\\n\\t\\t\\tright += num\\n\\t}\\n\\tfor i, num := range nums {\\n\\t\\t\\tright -= num\\n\\t\\t\\tresult[i] = Abs(left - right)\\n\\t\\t\\tleft += num\\n\\t}\\n\\treturn result\\n}\\n\\nfunc Abs(x int) int {\\n\\tif x < 0 {\\n\\t\\t\\treturn -x\\n\\t}\\n\\treturn x\\n}\\n```\n```go []\\nfunc leftRigthDifference(nums[]int) []int{\\n\\tresult := []int{}\\n\\tleft := 0\\n\\tright := 0\\n\\tfor _, v := range nums{\\n\\t\\tright += v\\n\\t}\\n\\tfor _, i := range nums {\\n\\t\\tright -= i\\n\\t\\tresult = append(result, Abs(left - right))\\n\\t\\tleft += i\\n\\t}\\n\\treturn result\\n}\\n\\nfunc Abs(x int) int {\\n\\tif x < 0 {\\n\\t\\treturn -x\\n\\t}\\n\\treturn x\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3363148,
                "title": "very-easy-to-understand-90-beat-c",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nITERATIVE APPROACH\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n\\tvector<int> leftRigthDifference(vector<int> &nums)\\n\\t{\\n\\t\\tint left[nums.size()];\\n\\t\\tint right[nums.size()];\\n\\t\\tvector<int> answer;\\n\\n\\t\\tint sum = 0;\\n\\n\\t\\tfor (int i = 0; i < nums.size(); i++)\\n\\t\\t{\\n\\t\\t\\tleft[i] = sum;\\n\\t\\t\\tsum += nums[i];\\n\\t\\t}\\n\\n\\t\\tsum = 0;\\n\\n\\t\\tfor (int i = nums.size() - 1; i >= 0; i--)\\n\\t\\t{\\n\\t\\t\\tright[i] = sum;\\n\\t\\t\\tsum += nums[i];\\n\\t\\t}\\n\\n\\t\\tfor (int i = 0; i < nums.size(); i++)\\n\\t\\t{\\n\\t\\t\\tanswer.push_back(abs(right[i] - left[i]));\\n\\t\\t}\\n\\n\\t\\treturn answer;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n\\tvector<int> leftRigthDifference(vector<int> &nums)\\n\\t{\\n\\t\\tint left[nums.size()];\\n\\t\\tint right[nums.size()];\\n\\t\\tvector<int> answer;\\n\\n\\t\\tint sum = 0;\\n\\n\\t\\tfor (int i = 0; i < nums.size(); i++)\\n\\t\\t{\\n\\t\\t\\tleft[i] = sum;\\n\\t\\t\\tsum += nums[i];\\n\\t\\t}\\n\\n\\t\\tsum = 0;\\n\\n\\t\\tfor (int i = nums.size() - 1; i >= 0; i--)\\n\\t\\t{\\n\\t\\t\\tright[i] = sum;\\n\\t\\t\\tsum += nums[i];\\n\\t\\t}\\n\\n\\t\\tfor (int i = 0; i < nums.size(); i++)\\n\\t\\t{\\n\\t\\t\\tanswer.push_back(abs(right[i] - left[i]));\\n\\t\\t}\\n\\n\\t\\treturn answer;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3338807,
                "title": "no-brain-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        ans = []\\n        for i in range(len(nums)):\\n            ans.append(abs(sum(nums[:i]) - sum(nums[i+1:])))\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        ans = []\\n        for i in range(len(nums)):\\n            ans.append(abs(sum(nums[:i]) - sum(nums[i+1:])))\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3325018,
                "title": "c-solution-simple-approach",
                "content": "# Approach : Brute Force\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        \\n    vector<int> ans;\\n    int n=nums.size();\\n    int total_sum = 0;\\n    for (auto e : nums)\\n        total_sum += e;\\n\\n    int left_sum = 0;\\n    int right_sum;\\n    for (int i = 0; i < n; i++)\\n    {\\n        right_sum = total_sum - nums[i] - left_sum;\\n        int diff = left_sum - right_sum;\\n        if (diff < 0)\\n            diff *= -1;\\n        ans.push_back(diff);\\n        left_sum += nums[i];\\n    }\\n    return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        \\n    vector<int> ans;\\n    int n=nums.size();\\n    int total_sum = 0;\\n    for (auto e : nums)\\n        total_sum += e;\\n\\n    int left_sum = 0;\\n    int right_sum;\\n    for (int i = 0; i < n; i++)\\n    {\\n        right_sum = total_sum - nums[i] - left_sum;\\n        int diff = left_sum - right_sum;\\n        if (diff < 0)\\n            diff *= -1;\\n        ans.push_back(diff);\\n        left_sum += nums[i];\\n    }\\n    return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312627,
                "title": "java-fast-easy-approach-java-solution-beats-100-with-0ms-runtime",
                "content": "# Stats\\n- **RunTime**: 0 ms (*Beats 100%*)\\n\\n# Code\\n```\\npublic int[] leftRigthDifference(int[] nums) {\\n    int numsLen = nums.length, answerArr [] = new int[numsLen], leftArrSum = 0, rightArrSum = 0;\\n\\n    for (int element : nums) {\\n        rightArrSum += element;\\n    }\\n\\n    for (int index = 0; index < numsLen; index++) {\\n        rightArrSum -= nums[index]; \\n        answerArr[index] = Math.abs(leftArrSum - rightArrSum); \\n        leftArrSum += nums[index];                   \\n    }\\n\\n    return answerArr;\\n}\\n```\\n<br/>\\n<br/>\\n<br/>\\n\\nAuthor :- [*Abhinav Bhardwaj*](https://abhinavbhardwaj.in)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[] leftRigthDifference(int[] nums) {\\n    int numsLen = nums.length, answerArr [] = new int[numsLen], leftArrSum = 0, rightArrSum = 0;\\n\\n    for (int element : nums) {\\n        rightArrSum += element;\\n    }\\n\\n    for (int index = 0; index < numsLen; index++) {\\n        rightArrSum -= nums[index]; \\n        answerArr[index] = Math.abs(leftArrSum - rightArrSum); \\n        leftArrSum += nums[index];                   \\n    }\\n\\n    return answerArr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3310483,
                "title": "simple-two-approaches-solving",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        # approach 1\\n        left=[0]*len(nums)\\n        right=[0]*len(nums)\\n        ans=[]\\n        i=1\\n        j=2\\n        while i<len(nums):\\n            left[i]=left[i-1]+nums[i-1]\\n            i+=1\\n        while j<=len(nums):\\n            right[len(nums)-j]=right[len(nums)-j+1]+nums[len(nums)-j+1]\\n          j+=1\\n        for i in range(len(nums)):\\n            ans.append(abs(left[i]-right[i]))\\n        return ans\\n```\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        # approach two-simple O(n) complexity in both time and space\\n        ans=[]\\n        prefix=0\\n        suffix=sum(nums)\\n        for x in nums:\\n            prefix+=x\\n            ans.append(abs(prefix-suffix))\\n            suffix-=x\\n        return ans\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        # approach 1\\n        left=[0]*len(nums)\\n        right=[0]*len(nums)\\n        ans=[]\\n        i=1\\n        j=2\\n        while i<len(nums):\\n            left[i]=left[i-1]+nums[i-1]\\n            i+=1\\n        while j<=len(nums):\\n            right[len(nums)-j]=right[len(nums)-j+1]+nums[len(nums)-j+1]\\n          j+=1\\n        for i in range(len(nums)):\\n            ans.append(abs(left[i]-right[i]))\\n        return ans\\n```\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        # approach two-simple O(n) complexity in both time and space\\n        ans=[]\\n        prefix=0\\n        suffix=sum(nums)\\n        for x in nums:\\n            prefix+=x\\n            ans.append(abs(prefix-suffix))\\n            suffix-=x\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3281477,
                "title": "easy-python-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        left, right, final =[], [], []\\n        nums2=nums[::-1]\\n\\n        for i in range(len(nums)):\\n            if i==0:\\n                left.append(0)\\n                right.append(0)\\n            else:\\n                left.append(left[i-1]+nums[i-1])\\n                right.append(right[i-1]+nums2[i-1])\\n        right=right[::-1]\\n        \\n        for i in range(len(nums)):\\n            final.append(abs(left[i]-right[i]))\\n        return final\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        left, right, final =[], [], []\\n        nums2=nums[::-1]\\n\\n        for i in range(len(nums)):\\n            if i==0:\\n                left.append(0)\\n                right.append(0)\\n            else:\\n                left.append(left[i-1]+nums[i-1])\\n                right.append(right[i-1]+nums2[i-1])\\n        right=right[::-1]\\n        \\n        for i in range(len(nums)):\\n            final.append(abs(left[i]-right[i]))\\n        return final\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3280772,
                "title": "java",
                "content": "\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int length=nums.length;\\n        int LeftSum=0,i;\\n        int RightSum=0;\\n        int[] leftsum=new int[length];\\n        int[] rightsum=new int[length];\\n        leftsum[0]=0;\\n        rightsum[length-1]=0;\\n        for(i=0;i<length-1;i++)\\n        {\\n            leftsum[i+1]=leftsum[i]+nums[i];\\n        }\\n        for(i=length-1;i>0;i--)\\n        {\\n            rightsum[i-1]=rightsum[i]+nums[i];\\n        }\\n        int[] answer=new int[length];\\n        for(i=0;i<length;i++)\\n        {\\n            answer[i]=Math.abs(leftsum[i]-rightsum[i]);\\n        }\\n       return answer;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int length=nums.length;\\n        int LeftSum=0,i;\\n        int RightSum=0;\\n        int[] leftsum=new int[length];\\n        int[] rightsum=new int[length];\\n        leftsum[0]=0;\\n        rightsum[length-1]=0;\\n        for(i=0;i<length-1;i++)\\n        {\\n            leftsum[i+1]=leftsum[i]+nums[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3255034,
                "title": "beats-85-easy-to-understand-c-o-n-solution",
                "content": "# Intuition and Approach\\nThis problem is simple prefix-suffix sum \\nWe `just` need to calculate left sum and right sum\\nso for that create a new array `ls` and `rs`\\nthen set ls first value i.e `ls[0]=0` \\nand set rs last value i.e. `rs[n.size()-1]=0`\\n\\nnow traverse through the n vector and add the value to ls \\ni.e `ls[i]=ls[i-1]+n[i-1];`\\nand similarly for rs but start from the `end-2` positon\\ni.e `rs[i]=rs[i+1]+n[i+1];`\\n\\n`abs()` function work like mod hence convert value to positive form or its absolute one\\n\\nNow push the values to the new vector created.\\n \\nWe can also clear the array ls and rs to free up the memory \\nby creating them as dynamic array \\ni.e. `int *ls=new int[n.size()]`\\nand after using it we can delete it using `delete[] first;`\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)+O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code - Using Simple Static Array\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& n) {\\n        vector<int> v;\\n        //creating leftsum and rightsum vectors\\n        int ls[n.size()];\\n        int rs[n.size()];\\n        setting their base values\\n        ls[0]=0;\\n        rs[n.size()-1]=0;\\n        //traversing through them\\n        for(int i=1;i<n.size();i++){\\n            ls[i]=ls[i-1]+n[i-1];\\n        }\\n        for(int i=(n.size()-2);i>=0;i--){\\n            rs[i]=rs[i+1]+n[i+1];\\n        }\\n        //pushing their differences in vector v\\n        for(int i=0;i<n.size();i++){\\n            v.push_back(abs(ls[i]-rs[i]));\\n        }\\n        return v;\\n    }\\n};\\n```\\n\\n# Code - Using Dynamic Array\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& n) {\\n        vector<int> v;\\n        int h=n.size();\\n        int *ls=new int[h];\\n        int *rs=new int[h];\\n\\n        ls[0]=0;\\n        rs[n.size()-1]=0;\\n        for(int i=1;i<n.size();i++){\\n            ls[i]=ls[i-1]+n[i-1];\\n        }\\n        for(int i=(n.size()-2);i>=0;i--){\\n            rs[i]=rs[i+1]+n[i+1];\\n        }\\n        for(int i=0;i<n.size();i++){\\n            v.push_back(abs(ls[i]-rs[i]));\\n        }\\n        delete[] ls;\\n        delete[] rs;\\n        return v;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Suffix Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& n) {\\n        vector<int> v;\\n        //creating leftsum and rightsum vectors\\n        int ls[n.size()];\\n        int rs[n.size()];\\n        setting their base values\\n        ls[0]=0;\\n        rs[n.size()-1]=0;\\n        //traversing through them\\n        for(int i=1;i<n.size();i++){\\n            ls[i]=ls[i-1]+n[i-1];\\n        }\\n        for(int i=(n.size()-2);i>=0;i--){\\n            rs[i]=rs[i+1]+n[i+1];\\n        }\\n        //pushing their differences in vector v\\n        for(int i=0;i<n.size();i++){\\n            v.push_back(abs(ls[i]-rs[i]));\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3255009,
                "title": "reduce-for-of-math-abs-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRigthDifference = function(nums) {\\n    const totalSum = nums.reduce((acc, num) => acc + num, 0);\\n\\n    const res = [];\\n    let leftSum = 0;\\n    for (const num of nums) {\\n        res.push(Math.abs(totalSum - num - 2 * leftSum));\\n        leftSum += num;\\n    }\\n\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRigthDifference = function(nums) {\\n    const totalSum = nums.reduce((acc, num) => acc + num, 0);\\n\\n    const res = [];\\n    let leftSum = 0;\\n    for (const num of nums) {\\n        res.push(Math.abs(totalSum - num - 2 * leftSum));\\n        leftSum += num;\\n    }\\n\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3238073,
                "title": "python-1-liner",
                "content": "\\n# Code\\n```\\nclass Solution(object):\\n    def leftRightDifference(self, nums):\\n        return [abs(sum(nums[:n]) - sum(nums[n+1:])) for n, i in enumerate(nums)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def leftRightDifference(self, nums):\\n        return [abs(sum(nums[:n]) - sum(nums[n+1:])) for n, i in enumerate(nums)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237056,
                "title": "javascript-1-line",
                "content": "# Code\\n```js\\nconst leftRigthDifference = nums =>\\n  nums.map((num, i) =>\\n    Math.abs(\\n      nums.slice(0, i).reduce((acc, cur) => acc + cur, 0) -\\n        nums.slice(i + 1).reduce((acc, cur) => acc + cur, 0)\\n    )\\n  );\\n```\\n\\n**Note**: Please keep in mind that while one-liners are fun to write, they may not be suitable for production code since they can be hard to read and reason about.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst leftRigthDifference = nums =>\\n  nums.map((num, i) =>\\n    Math.abs(\\n      nums.slice(0, i).reduce((acc, cur) => acc + cur, 0) -\\n        nums.slice(i + 1).reduce((acc, cur) => acc + cur, 0)\\n    )\\n  );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3234374,
                "title": "space-optimized-rust-solution",
                "content": "# Intuition\\nThere is no need to calculate and store`leftSum`and`rightSum`. We can calculate them on the fly simply by calculating the sum of`nums`.\\nAlso, since we are given ownership of`nums`, we can modify`nums`in-place to avoid a second allocation for our final answer.\\n\\n# Approach\\nWe scan through`nums`twice, once to calculate it sum and again to get our final answer.\\nIn order to calculate the left sum during the second scan, we need a buffer, contains the last element we iterated over.\\n\\n# Complexity\\n- Time complexity:\\n    $$O(n)$$\\n\\n- Space complexity:\\n    Not counting`nums`: $$O(1)$$\\n    Counting`nums`: $$O(n)$$\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn left_rigth_difference(mut nums: Vec<i32>) -> Vec<i32> {\\n        let mut left = 0;\\n        let mut right: i32 = nums.iter().sum();\\n        let mut buf = 0;\\n        nums\\n            .iter_mut()\\n            .for_each(|i| {\\n                right -= *i;\\n                left += buf;\\n                buf = *i;\\n                *i = (left - right).abs();\\n            });\\n        nums\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn left_rigth_difference(mut nums: Vec<i32>) -> Vec<i32> {\\n        let mut left = 0;\\n        let mut right: i32 = nums.iter().sum();\\n        let mut buf = 0;\\n        nums\\n            .iter_mut()\\n            .for_each(|i| {\\n                right -= *i;\\n                left += buf;\\n                buf = *i;\\n                *i = (left - right).abs();\\n            });\\n        nums\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3232640,
                "title": "c-accepted-solution-both-o-n-and-o-n-2-approaches",
                "content": "# Approach 1\\n- Time complexity: O(N)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector <int> leftSum;\\n        vector <int> rightSum;\\n        vector <int> ans;\\n        int left_sum=0;\\n        int right_sum=0;\\n        for(int i=0;i<nums.size();i++){\\n                leftSum.push_back(left_sum);\\n                rightSum.push_back(right_sum);\\n                left_sum+=nums[i];\\n                right_sum+=nums[nums.size()-1-i];\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<leftSum[i]<<\" \"<<rightSum[i]<<endl;\\n            ans.push_back(abs(leftSum[i]-rightSum[nums.size()-1-i]));\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n# Approach 2\\n- Time complexity: O(N^2)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ans;\\n        vector<int> leftSum;\\n        vector<int> rightSum;\\n        int j=nums.size()-1;\\n        int sum=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(i==nums.size()-1){\\n                rightSum.push_back(0);\\n            }else{\\n                sum=0;\\n                for(int j=i+1;j<nums.size();j++){\\n                    sum+=nums[j];\\n                }\\n                rightSum.push_back(sum);\\n            }\\n        }\\n        for(int i=nums.size()-1;i>=0;i--){\\n            if(i==0){\\n                leftSum.push_back(0);\\n            }else{\\n                sum=0;\\n                for(int j=i-1;j>=0;j--){\\n                    sum+=nums[j];\\n                }\\n                leftSum.push_back(sum);\\n            }\\n        }\\n        reverse(leftSum.begin(),leftSum.end());\\n        for(int i=0;i<nums.size();i++){\\n            ans.push_back(abs(leftSum[i]-rightSum[i]));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector <int> leftSum;\\n        vector <int> rightSum;\\n        vector <int> ans;\\n        int left_sum=0;\\n        int right_sum=0;\\n        for(int i=0;i<nums.size();i++){\\n                leftSum.push_back(left_sum);\\n                rightSum.push_back(right_sum);\\n                left_sum+=nums[i];\\n                right_sum+=nums[nums.size()-1-i];\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            cout<<leftSum[i]<<\" \"<<rightSum[i]<<endl;\\n            ans.push_back(abs(leftSum[i]-rightSum[nums.size()-1-i]));\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ans;\\n        vector<int> leftSum;\\n        vector<int> rightSum;\\n        int j=nums.size()-1;\\n        int sum=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(i==nums.size()-1){\\n                rightSum.push_back(0);\\n            }else{\\n                sum=0;\\n                for(int j=i+1;j<nums.size();j++){\\n                    sum+=nums[j];\\n                }\\n                rightSum.push_back(sum);\\n            }\\n        }\\n        for(int i=nums.size()-1;i>=0;i--){\\n            if(i==0){\\n                leftSum.push_back(0);\\n            }else{\\n                sum=0;\\n                for(int j=i-1;j>=0;j--){\\n                    sum+=nums[j];\\n                }\\n                leftSum.push_back(sum);\\n            }\\n        }\\n        reverse(leftSum.begin(),leftSum.end());\\n        for(int i=0;i<nums.size();i++){\\n            ans.push_back(abs(leftSum[i]-rightSum[i]));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3232178,
                "title": "c-100-faster-time-complexity-o-n-space-complexity-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>a,b,ans;\\n        a.emplace_back(0);\\n        b.emplace_back(0);\\n        int sum=0;\\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            sum+=nums[i];\\n            a.emplace_back(sum);\\n        }\\n        sum=0;\\n        for(int i=nums.size()-1;i>0;i--)\\n        {\\n            sum+=nums[i];   \\n            b.emplace_back(sum);\\n        }\\n        reverse(b.begin(),b.end());\\n        for(int i=0;i<a.size();i++)\\n            ans.emplace_back(abs(a[i]-b[i]));\\n        return ans;\\n    }\\n};\\nfeel free to ask your doubt happy to help.......\\nIf it help you than plz upvote it.....Thanks!!!!",
                "solutionTags": [
                    "C",
                    "Array",
                    "Math",
                    "Greedy"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>a,b,ans;\\n        a.emplace_back(0);\\n        b.emplace_back(0);\\n        int sum=0;\\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            sum+=nums[i];\\n            a.emplace_back(sum);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3231989,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> left(n, 0);\\n        vector<int> right(n, 0); \\n        vector<int> ans(n);\\n        \\n        // \\u0432\\u044B\\u0447\\u0438\\u0441\\u043B\\u044F\\u0435\\u043C \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432\\u044B left \\u0438 right\\n        for (int i = 1; i < n; i++) {\\n            left[i] = left[i-1] + nums[i-1];\\n        }\\n        for (int i = n-2; i >= 0; i--) {\\n            right[i] = right[i+1] + nums[i+1];\\n        }\\n        \\n        // \\u0432\\u044B\\u0447\\u0438\\u0441\\u043B\\u044F\\u0435\\u043C \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 ans\\n        for (int i = 0; i < n; i++) {\\n            ans[i] = abs(left[i] - right[i]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> left(n, 0);\\n        vector<int> right(n, 0); \\n        vector<int> ans(n);\\n        \\n        // \\u0432\\u044B\\u0447\\u0438\\u0441\\u043B\\u044F\\u0435\\u043C \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432\\u044B left \\u0438 right\\n        for (int i = 1; i < n; i++) {\\n            left[i] = left[i-1] + nums[i-1];\\n        }\\n        for (int i = n-2; i >= 0; i--) {\\n            right[i] = right[i+1] + nums[i+1];\\n        }\\n        \\n        // \\u0432\\u044B\\u0447\\u0438\\u0441\\u043B\\u044F\\u0435\\u043C \\u043C\\u0430\\u0441\\u0441\\u0438\\u0432 ans\\n        for (int i = 0; i < n; i++) {\\n            ans[i] = abs(left[i] - right[i]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231871,
                "title": "java-100-tc-o-n-sc-o-1-easy-to-understand",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] ans = new int[n];\\n        int sum = 0, leftSum = 0;\\n\\n        for(int i = 0; i < n; i++){\\n            sum += nums[i];\\n        }\\n\\n        for(int i = 0; i < n; i++){\\n            int rightSum = sum - leftSum - nums[i];\\n            ans[i] = Math.abs(rightSum - leftSum);\\n            leftSum += nums[i];\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] ans = new int[n];\\n        int sum = 0, leftSum = 0;\\n\\n        for(int i = 0; i < n; i++){\\n            sum += nums[i];\\n        }\\n\\n        for(int i = 0; i < n; i++){\\n            int rightSum = sum - leftSum - nums[i];\\n            ans[i] = Math.abs(rightSum - leftSum);\\n            leftSum += nums[i];\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231216,
                "title": "easy-to-understand-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum[]=new int[nums.length];\\n        int rightSum[]=new int[nums.length];\\n        int ans[]=new int [nums.length];\\n        for(int i=0;i<nums.length;i++){\\n            int sum=0;\\n            for(int j=i+1;j<nums.length;j++){\\n                sum+=nums[j];\\n            }\\n            leftSum[i]=sum;\\n        }\\n        for(int i=nums.length-1;i>=0;i--){\\n            int sum=0;\\n            for(int j=i-1;j>=0;j--){\\n                sum+=nums[j];\\n            }\\n            rightSum[i]=sum;\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            ans[i]=Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int leftSum[]=new int[nums.length];\\n        int rightSum[]=new int[nums.length];\\n        int ans[]=new int [nums.length];\\n        for(int i=0;i<nums.length;i++){\\n            int sum=0;\\n            for(int j=i+1;j<nums.length;j++){\\n                sum+=nums[j];\\n            }\\n            leftSum[i]=sum;\\n        }\\n        for(int i=nums.length-1;i>=0;i--){\\n            int sum=0;\\n            for(int j=i-1;j>=0;j--){\\n                sum+=nums[j];\\n            }\\n            rightSum[i]=sum;\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            ans[i]=Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231182,
                "title": "c-easy-solution-constant-space-o-n-time-comments",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        //right variable denotes sum to our right \\n        //left variable denotes sum to our left \\n        int right = 0,  left = 0 ;\\n        vector<int> ans;\\n        \\n        //Store the sum to our right \\n        for(auto i : nums)\\n            right += i;\\n        \\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            // Substract the the current element\\n            // from the sum to our right \\n            right -= nums[i];\\n            ans.push_back(abs(left-right));\\n            \\n            //Add The current element to left side of sum\\n            left += nums[i];\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        //right variable denotes sum to our right \\n        //left variable denotes sum to our left \\n        int right = 0,  left = 0 ;\\n        vector<int> ans;\\n        \\n        //Store the sum to our right \\n        for(auto i : nums)\\n            right += i;\\n        \\n        for(int i = 0 ; i<nums.size() ; i++)\\n        {\\n            // Substract the the current element\\n            // from the sum to our right \\n            right -= nums[i];\\n            ans.push_back(abs(left-right));\\n            \\n            //Add The current element to left side of sum\\n            left += nums[i];\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231175,
                "title": "left-and-right-sum-differences-simple-cpp-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> lsum;\\n        vector<int> rsum;\\n        vector<int> ans;\\n        int sum1=0,sum2=0;\\n        for(int i=0;i<nums.size();i++){\\n            lsum.push_back(sum1);\\n            sum1 += nums[i];\\n        }\\n        for(int i=nums.size()-1;i>=0;i--){\\n            rsum.push_back(sum2);\\n            sum2 += nums[i];\\n        }\\n        reverse(rsum.begin(),rsum.end());\\n        for(int i=0;i<nums.size();i++){\\n            int x = abs(lsum[i]-rsum[i]);\\n            ans.push_back(x);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> lsum;\\n        vector<int> rsum;\\n        vector<int> ans;\\n        int sum1=0,sum2=0;\\n        for(int i=0;i<nums.size();i++){\\n            lsum.push_back(sum1);\\n            sum1 += nums[i];\\n        }\\n        for(int i=nums.size()-1;i>=0;i--){\\n            rsum.push_back(sum2);\\n            sum2 += nums[i];\\n        }\\n        reverse(rsum.begin(),rsum.end());\\n        for(int i=0;i<nums.size();i++){\\n            int x = abs(lsum[i]-rsum[i]);\\n            ans.push_back(x);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231045,
                "title": "easy-java-solution",
                "content": "# Intuition\\nUsing one math trick ,for any i, leftsum=totalsum-rightsum-nums[i],where as rightsum can be calculated running one for loop from i+1 to length -1 of the array. For last index of result array we need to calculate separetly which is totalsum -nums[lastIndex]\\nPlease upvote if you find it is understandble.\\n\\n# Approach\\nUsing one math trick ,for any i, leftsum=totalsum-rightsum-nums[i],where as rightsum can be calculated running one for loop from i+1 to length -1 of the array. For last index of result array we need to calculate separetly which is totalsum -nums[lastIndex]\\n# Complexity\\n- Time complexity:\\nTC::O(N^2)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums)\\n    {\\n        int[] answer=new int[nums.length];\\n        int totalSum=0;\\n        //int leftSum=0;\\n       // int rightSum=0;\\n        for(int n:nums)\\n        {\\n            totalSum+=n;\\n        }\\n        for(int i=0;i<nums.length-1;i++)\\n        { \\n            int rightSum=0;\\n            int leftSum=0;\\n            int diff=0;          \\n            for(int j=i+1;j<nums.length;j++)\\n            {\\n                rightSum+=nums[j];\\n                leftSum=(totalSum-rightSum)-nums[i];\\n                diff=Math.abs(leftSum-rightSum);\\n                answer[i]=diff;\\n           } \\n        }\\n        answer[answer.length-1]=Math.abs(totalSum-nums[nums.length-1]);\\n        return answer;\\n    }\\n}\\n       /* for(int i=0;i<nums.length-1;i++)\\n        { \\n            int low=0;\\n            int mid=i;\\n            int high=mid+1;\\n            int leftSum=0;\\n            int rightSum=0;\\n            \\n            while(low<mid)\\n            {\\n                 leftSum=nums[low++];\\n            }\\n            \\n            while(high<nums.length)\\n            {\\n                 rightSum=nums[high++];\\n            }\\n             int diff=Math.abs(leftSum-rightSum);\\n             answer[i]=diff;\\n        }\\n        return answer;\\n        }\\n    }*/\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums)\\n    {\\n        int[] answer=new int[nums.length];\\n        int totalSum=0;\\n        //int leftSum=0;\\n       // int rightSum=0;\\n        for(int n:nums)\\n        {\\n            totalSum+=n;\\n        }\\n        for(int i=0;i<nums.length-1;i++)\\n        { \\n            int rightSum=0;\\n            int leftSum=0;\\n            int diff=0;          \\n            for(int j=i+1;j<nums.length;j++)\\n            {\\n                rightSum+=nums[j];\\n                leftSum=(totalSum-rightSum)-nums[i];\\n                diff=Math.abs(leftSum-rightSum);\\n                answer[i]=diff;\\n           } \\n        }\\n        answer[answer.length-1]=Math.abs(totalSum-nums[nums.length-1]);\\n        return answer;\\n    }\\n}\\n       /* for(int i=0;i<nums.length-1;i++)\\n        { \\n            int low=0;\\n            int mid=i;\\n            int high=mid+1;\\n            int leftSum=0;\\n            int rightSum=0;\\n            \\n            while(low<mid)\\n            {\\n                 leftSum=nums[low++];\\n            }\\n            \\n            while(high<nums.length)\\n            {\\n                 rightSum=nums[high++];\\n            }\\n             int diff=Math.abs(leftSum-rightSum);\\n             answer[i]=diff;\\n        }\\n        return answer;\\n        }\\n    }*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230840,
                "title": "java-prefix-sum-solution-only-two-passes",
                "content": "\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] res = new int[n];\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum += nums[i];\\n            res[i] = sum;\\n        }\\n        sum = 0;\\n        for (int i = n - 1; i >= 0; i--) {\\n            sum += nums[i];\\n            res[i] = Math.abs(res[i] - sum);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int n = nums.length;\\n        int[] res = new int[n];\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            sum += nums[i];\\n            res[i] = sum;\\n        }\\n        sum = 0;\\n        for (int i = n - 1; i >= 0; i--) {\\n            sum += nums[i];\\n            res[i] = Math.abs(res[i] - sum);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057514,
                "title": "lightweight-solution-that-uses-incoming-array-as-resulting-array",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    fun leftRightDifference(nums: IntArray): IntArray {\\n        var rightSum = (1 until nums.size).sumBy{ nums[it] }\\n        var leftSum = nums[0]\\n        nums[0] = rightSum.absoluteValue\\n        (1 until nums.size).forEach{index->\\n            val current = nums[index]\\n            rightSum -= current\\n            nums[index] = (leftSum - rightSum).absoluteValue\\n            leftSum += current\\n        }\\n        return nums\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun leftRightDifference(nums: IntArray): IntArray {\\n        var rightSum = (1 until nums.size).sumBy{ nums[it] }\\n        var leftSum = nums[0]\\n        nums[0] = rightSum.absoluteValue\\n        (1 until nums.size).forEach{index->\\n            val current = nums[index]\\n            rightSum -= current\\n            nums[index] = (leftSum - rightSum).absoluteValue\\n            leftSum += current\\n        }\\n        return nums\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3937858,
                "title": "left-and-right-sum-differences-in-java",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int n=nums.length;\\n        int ans[]=new int[n];\\n        int left[]=new int[n];\\n        int right[]=new int[n];\\n        left[0]=0;\\n        right[n-1]=0;\\n        int sum=0;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            sum=sum+nums[i];\\n            left[i+1]=sum;\\n        }\\n        sum=0;\\n        for(int i=n-1;i>0;i--)\\n        {\\n            sum=sum+nums[i];\\n            right[i-1]=sum;\\n        }\\n        for(int i=0;i<n;i++)\\n            ans[i]=Math.abs(left[i]-right[i]);\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int n=nums.length;\\n        int ans[]=new int[n];\\n        int left[]=new int[n];\\n        int right[]=new int[n];\\n        left[0]=0;\\n        right[n-1]=0;\\n        int sum=0;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            sum=sum+nums[i];\\n            left[i+1]=sum;\\n        }\\n        sum=0;\\n        for(int i=n-1;i>0;i--)\\n        {\\n            sum=sum+nums[i];\\n            right[i-1]=sum;\\n        }\\n        for(int i=0;i<n;i++)\\n            ans[i]=Math.abs(left[i]-right[i]);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3920058,
                "title": "java-in-space",
                "content": "# Intuition\\nKeep and update left- and right-sum at each iteration. Be careful about updating ```nums```. You need to update left-sum beforehand.\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int ls=0, rs=0;\\n        for(int i:nums) rs+=i;\\n        for(int i=0; i<nums.length; ++i) {\\n            ls+=nums[i]; rs-=nums[i];\\n            nums[i] = Math.abs(rs-(ls-nums[i]));\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```nums```\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int ls=0, rs=0;\\n        for(int i:nums) rs+=i;\\n        for(int i=0; i<nums.length; ++i) {\\n            ls+=nums[i]; rs-=nums[i];\\n            nums[i] = Math.abs(rs-(ls-nums[i]));\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3766857,
                "title": "left-and-right-sum-differences-java-solution-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int left_sum[] = new int[nums.length];\\n        int right_sum[] = new int[nums.length];\\n\\n        for(int i=1; i<nums.length; i++){\\n            left_sum[i] = left_sum[i-1] + nums[i-1];\\n        }\\n\\n        for(int i=nums.length - 2; i>=0; i--){\\n            right_sum[i] = right_sum[i+1] + nums[i+1];\\n        }\\n\\n        for(int i=0; i<nums.length; i++){\\n            nums[i] = Math.abs(left_sum[i] - right_sum[i]);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int left_sum[] = new int[nums.length];\\n        int right_sum[] = new int[nums.length];\\n\\n        for(int i=1; i<nums.length; i++){\\n            left_sum[i] = left_sum[i-1] + nums[i-1];\\n        }\\n\\n        for(int i=nums.length - 2; i>=0; i--){\\n            right_sum[i] = right_sum[i+1] + nums[i+1];\\n        }\\n\\n        for(int i=0; i<nums.length; i++){\\n            nums[i] = Math.abs(left_sum[i] - right_sum[i]);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3712695,
                "title": "simple-prefix-array-and-suffix-array-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nMake to arrays->\\nfirst containing left elements sum\\nsecond containing right elements sum\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] arr) {\\n        int n=arr.length;\\n        int[] prefix=new int[n];\\n        int[] suffix=new int[n];\\n        prefix[0]=0;\\n        suffix[n-1]=0;\\n        for(int i=1;i<n;i++){\\n            prefix[i]=prefix[i-1]+arr[i-1];\\n        }\\n        // for(int i : prefix){\\n        //     System.out.print(i+\" \");\\n        // }\\n        for(int i=n-2;i>=0;i--){\\n            suffix[i]=suffix[i+1]+arr[i+1];\\n        }\\n        // for(int i : suffix){\\n        //     System.out.print(i+\" \");\\n        // }\\n        int res[]=new int[n];\\n        for(int i=0;i<n;i++){\\n            res[i]=Math.abs(prefix[i]-suffix[i]);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] arr) {\\n        int n=arr.length;\\n        int[] prefix=new int[n];\\n        int[] suffix=new int[n];\\n        prefix[0]=0;\\n        suffix[n-1]=0;\\n        for(int i=1;i<n;i++){\\n            prefix[i]=prefix[i-1]+arr[i-1];\\n        }\\n        // for(int i : prefix){\\n        //     System.out.print(i+\" \");\\n        // }\\n        for(int i=n-2;i>=0;i--){\\n            suffix[i]=suffix[i+1]+arr[i+1];\\n        }\\n        // for(int i : suffix){\\n        //     System.out.print(i+\" \");\\n        // }\\n        int res[]=new int[n];\\n        for(int i=0;i<n;i++){\\n            res[i]=Math.abs(prefix[i]-suffix[i]);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3692805,
                "title": "simple-solution-c-o-n-runtime-o-1-space",
                "content": "# Intuition & Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n*We need to perform |prefixSum[i] - suffixSum[i]|.\\nWe can achieve that in a single extra array. First we perform prefix sum, and store it the array. Then instead of creating a new SuffixSum array, we can use a single variabe store the suffixSum for an index at a time and perform the opertion prefixSum[i] - suffixSum and update the resulting array.*\\n\\n![Screenshot 2023-06-28 165251.png](https://assets.leetcode.com/users/images/09ad37cc-d0ba-40eb-b5b3-9cc047e54ee5_1687951388.1397085.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n*O(N)*\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n*O(1) - as we do not use any extra memory, other than what the function demands/returns.*\\n\\n## Please upvote if you like the approach\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] LeftRightDifference(int[] nums) {\\n        int n = nums.Length;\\n        int[] result = new int[n];\\n        //if only one element is present - result will be \\'[0]\\'\\n        if (n == 1)\\n            return result;\\n\\n        //perform prefix-sum\\n        for (int i = 1; i < n; i++)\\n            result[i] = result[i - 1] + nums[i - 1];\\n\\n        //saving suffixSum in a variable\\n        //and performing operation of |leftSum - rightSum|\\n        int suffixSum = 0;\\n        for (int i = n - 2; i >= 0; i--)\\n        {\\n            suffixSum += nums[i + 1];\\n            result[i] = Math.Abs(result[i] - suffixSum);\\n        }\\n\\n        return result;\\n    }\\n}\\n```\\n\\n## Please upvote if you like the approach\\n![Upvote please - Monkey.jpg](https://assets.leetcode.com/users/images/38da1172-74fb-49e8-b7c8-acd0f02c2704_1687951829.5965254.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] LeftRightDifference(int[] nums) {\\n        int n = nums.Length;\\n        int[] result = new int[n];\\n        //if only one element is present - result will be \\'[0]\\'\\n        if (n == 1)\\n            return result;\\n\\n        //perform prefix-sum\\n        for (int i = 1; i < n; i++)\\n            result[i] = result[i - 1] + nums[i - 1];\\n\\n        //saving suffixSum in a variable\\n        //and performing operation of |leftSum - rightSum|\\n        int suffixSum = 0;\\n        for (int i = n - 2; i >= 0; i--)\\n        {\\n            suffixSum += nums[i + 1];\\n            result[i] = Math.Abs(result[i] - suffixSum);\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3673032,
                "title": "easy-solution-c-leetcode-beats-90",
                "content": "# Intuition\\nFirst thing that comes to mind is find the rightsum array for each element then the leftsum array and then find the answer but to reduce ttime we can use suffix sum and hen element by element decrease it and increase the prefix sum of a paricular array.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nCalculate the toal prefix sum of the array first. Which will act as the rightsum. Now for each element subtract it from the total sum making it the rightsum and subtract it from the leftsum (initially 0) then add the same element to leftsum for the next iteration.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        int ls=0;\\n        int rs=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            rs+=nums[i];\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            rs-=nums[i];\\n            int x=nums[i];\\n            nums[i]=abs(rs-ls);\\n            ls+=x;\\n        }\\n        return nums;\\n        \\n    }\\n};\\n```\\nPlease upvote.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        int ls=0;\\n        int rs=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            rs+=nums[i];\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            rs-=nums[i];\\n            int x=nums[i];\\n            nums[i]=abs(rs-ls);\\n            ls+=x;\\n        }\\n        return nums;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3553048,
                "title": "c-simple-o-n-time-beginner-friendly-faster-than-85-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        vector<int> ans;  // Create a vector to store the differences between left and right sums\\n        int leftsum = 0;  // Variable to store the sum of elements on the left side of the current element\\n\\n        // Calculate the total sum of all elements in the input vector\\n        for(auto x : nums){\\n            leftsum += x; \\n        }\\n\\n        int rightsum = 0;  // Variable to store the sum of elements on the right side of the current element\\n\\n        // Iterate through the input vector to calculate the differences between left and right sums\\n        for(auto x: nums){\\n            leftsum -= x;  // Decrease the left sum by the current element\\n            ans.push_back(abs(leftsum - rightsum));  // Calculate the absolute difference between the left and right sums and store it in the answer vector\\n            rightsum += x;  // Increase the right sum by the current element\\n        }\\n        \\n        return ans;  // Return the vector containing the differences between left and right sums for each element\\n    }\\n};\\n```\\n\\n\\n**Time Complexity: **\\n\\nThe code has a linear time complexity of O(n), where n is the size of the input vector nums. This is because the code iterates through the input vector twice, performing constant-time operations in each iteration.\\n\\n**Space Complexity:**\\n\\nThe code has a space complexity of O(n), where n is the size of the input vector nums. This is because the code uses an additional vector ans to store the differences between left and right sums, which can have a maximum size of n.\\n\\n\\n\\n",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n        vector<int> ans;  // Create a vector to store the differences between left and right sums\\n        int leftsum = 0;  // Variable to store the sum of elements on the left side of the current element\\n\\n        // Calculate the total sum of all elements in the input vector\\n        for(auto x : nums){\\n            leftsum += x; \\n        }\\n\\n        int rightsum = 0;  // Variable to store the sum of elements on the right side of the current element\\n\\n        // Iterate through the input vector to calculate the differences between left and right sums\\n        for(auto x: nums){\\n            leftsum -= x;  // Decrease the left sum by the current element\\n            ans.push_back(abs(leftsum - rightsum));  // Calculate the absolute difference between the left and right sums and store it in the answer vector\\n            rightsum += x;  // Increase the right sum by the current element\\n        }\\n        \\n        return ans;  // Return the vector containing the differences between left and right sums for each element\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3508731,
                "title": "left-and-right-sum-difference-java-solution-1ms-beats-99-92",
                "content": "# Intuition\\nCheck for the border test cases and decalre those conditions.\\nNow we have to calculate the difference of the left and right create both the arrays. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst we declare the conditions for the border domains.\\nNext create the leftSum array and the rightSum array. \\nPre Declared the leftmost value and rightmost value of the respective array 0 as they don\\'t have any element preceding them in they defined order.\\nNow for printing modulus of the difference, check which of the sum is greater than the other and then subtract the lower one from the higher.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n      int[] leftSum = new int[nums.length];\\n      int[] rightSum = new int[nums.length];\\n      int[] answer = new int[nums.length];\\n      if(nums.length == 1){\\n          answer[0] = 0;\\n      } else {\\n        leftSum[0] = 0;\\n        rightSum[nums.length - 1] = 0;\\n\\n        for(int i = 1 ; i < nums.length ; i++){\\n          leftSum[i] = nums[i-1] + leftSum[i-1]; \\n        }\\n\\n        for(int i = nums.length - 2; i >= 0 ; i--){\\n          rightSum[i] = rightSum[i+1] + nums[i+1];\\n        }\\n\\n        for(int i = 0 ; i < nums.length ; i++){\\n          if(leftSum[i] > rightSum[i]){\\n            answer[i] = leftSum[i] - rightSum[i];\\n          }else {\\n            answer[i] = rightSum[i] - leftSum[i];\\n          }\\n        }\\n      }\\n\\n      return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n      int[] leftSum = new int[nums.length];\\n      int[] rightSum = new int[nums.length];\\n      int[] answer = new int[nums.length];\\n      if(nums.length == 1){\\n          answer[0] = 0;\\n      } else {\\n        leftSum[0] = 0;\\n        rightSum[nums.length - 1] = 0;\\n\\n        for(int i = 1 ; i < nums.length ; i++){\\n          leftSum[i] = nums[i-1] + leftSum[i-1]; \\n        }\\n\\n        for(int i = nums.length - 2; i >= 0 ; i--){\\n          rightSum[i] = rightSum[i+1] + nums[i+1];\\n        }\\n\\n        for(int i = 0 ; i < nums.length ; i++){\\n          if(leftSum[i] > rightSum[i]){\\n            answer[i] = leftSum[i] - rightSum[i];\\n          }else {\\n            answer[i] = rightSum[i] - leftSum[i];\\n          }\\n        }\\n      }\\n\\n      return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497398,
                "title": "c-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLeft sum at [i] would be sum of element of LeftSum[i-1] and nums[i-1]\\nRight sum at [i] would be sum of element of RightSum[i+1] and nums[i+1]\\nThe difference at [i] would be abs(LeftSum[i] - RightSum[i])\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> leftSum(n, 0);\\n        vector<int> rightSum(n, 0); \\n        vector<int> ans(n);\\n        \\n        for (int i = 1; i < n; i++) {\\n            leftSum[i] = leftSum[i-1] + nums[i-1];\\n        }\\n        for (int i = n-2; i >= 0; i--) {\\n            rightSum[i] = rightSum[i+1] + nums[i+1];\\n        }\\n        \\n        for (int i = 0; i < n; i++) {\\n            ans[i] = abs(leftSum[i] - rightSum[i]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<int> leftSum(n, 0);\\n        vector<int> rightSum(n, 0); \\n        vector<int> ans(n);\\n        \\n        for (int i = 1; i < n; i++) {\\n            leftSum[i] = leftSum[i-1] + nums[i-1];\\n        }\\n        for (int i = n-2; i >= 0; i--) {\\n            rightSum[i] = rightSum[i+1] + nums[i+1];\\n        }\\n        \\n        for (int i = 0; i < n; i++) {\\n            ans[i] = abs(leftSum[i] - rightSum[i]);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3491905,
                "title": "contest-optimized-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] prefix  = new int[nums.length];\\n        int[] ans  = new int[nums.length];\\n        \\n        for(int i=0;i<nums.length;i++){\\n            if(i==0) prefix[i]=nums[i];\\n            else  prefix[i]=prefix[i-1]+nums[i];\\n        }\\n        \\n        int n = nums.length;\\n        if(n==1) return ans;\\n        \\n        for(int i = 0;i<n;i++){\\n            int leftsum = prefix[i]-nums[i];\\n            int rightsum = prefix[n-1]-prefix[i];\\n            ans[i]=Math.abs(rightsum-leftsum);\\n        }\\n        \\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] prefix  = new int[nums.length];\\n        int[] ans  = new int[nums.length];\\n        \\n        for(int i=0;i<nums.length;i++){\\n            if(i==0) prefix[i]=nums[i];\\n            else  prefix[i]=prefix[i-1]+nums[i];\\n        }\\n        \\n        int n = nums.length;\\n        if(n==1) return ans;\\n        \\n        for(int i = 0;i<n;i++){\\n            int leftsum = prefix[i]-nums[i];\\n            int rightsum = prefix[n-1]-prefix[i];\\n            ans[i]=Math.abs(rightsum-leftsum);\\n        }\\n        \\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484383,
                "title": "very-easy-solution",
                "content": ">\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        res = []\\n\\n        for i in range(len(nums)):\\n            res.append(abs(sum(nums[0:i])-sum(nums[i+1:])))\\n\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        res = []\\n\\n        for i in range(len(nums)):\\n            res.append(abs(sum(nums[0:i])-sum(nums[i+1:])))\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3480918,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nNavigate from first index to current index(excluded) and from current index(excluded) to last index.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nRequires two loops. The outer loop is used to maintain the index for the answer[] and to maintain the current index for nums[];\\nThe inner loop is used to calculate the sum from the first index to current index i.e., leftSum and from current index to last index i.e, rightSum.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int answer[] = new int[nums.length];\\n        int leftSum;\\n        int rightSum;\\n\\n        for(int i = 0; i < nums.length; i++) {\\n            leftSum = 0;\\n            rightSum = 0;\\n            for(int j = 0; j < nums.length; j++) {\\n                if(j < i) {\\n                    leftSum += nums[j];\\n                } else if(j > i && j < nums.length) {\\n                    rightSum += nums[j];\\n                }\\n            }\\n            answer[i] = Math.abs(leftSum - rightSum);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int answer[] = new int[nums.length];\\n        int leftSum;\\n        int rightSum;\\n\\n        for(int i = 0; i < nums.length; i++) {\\n            leftSum = 0;\\n            rightSum = 0;\\n            for(int j = 0; j < nums.length; j++) {\\n                if(j < i) {\\n                    leftSum += nums[j];\\n                } else if(j > i && j < nums.length) {\\n                    rightSum += nums[j];\\n                }\\n            }\\n            answer[i] = Math.abs(leftSum - rightSum);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444475,
                "title": "ruby-solution-easy-to-understand",
                "content": "```\\n# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef left_rigth_difference(nums)\\n    answer = []\\n    n = nums.size - 1\\n    left_sum, right_sum = 0, 0\\n    \\n    # calculate left sum and push to answer array\\n    (0..n).each do |idx|\\n        answer << left_sum\\n        left_sum += nums[idx]\\n    end\\n    \\n    # calculate right sum and update each answer array value\\n    (0..n).each do |idx|\\n        answer[n - idx] = (answer[n - idx] - right_sum).abs\\n        right_sum += nums[n - idx]\\n    end\\n    \\n    answer\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef left_rigth_difference(nums)\\n    answer = []\\n    n = nums.size - 1\\n    left_sum, right_sum = 0, 0\\n    \\n    # calculate left sum and push to answer array\\n    (0..n).each do |idx|\\n        answer << left_sum\\n        left_sum += nums[idx]\\n    end\\n    \\n    # calculate right sum and update each answer array value\\n    (0..n).each do |idx|\\n        answer[n - idx] = (answer[n - idx] - right_sum).abs\\n        right_sum += nums[n - idx]\\n    end\\n    \\n    answer\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3428410,
                "title": "dart-solution",
                "content": "```\\nclass Solution {\\n  List<int> leftRigthDifference(List<int> nums) {\\n    final result = <int>[];\\n\\n    for (var i = 0; i < nums.length; i++) {\\n      int sumL = 0;\\n      int sumR = 0;\\n      for (var l = i - 1; l >= 0; l--) {\\n        sumL += nums[l];\\n      }\\n      for (var r = i + 1; r < nums.length; r++) {\\n        sumR += nums[r];\\n      }\\n      int answer = (sumL - sumR);\\n      answer = answer < 0 ? answer * -1 : answer;\\n      result.add(answer);\\n    }\\n    return result;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  List<int> leftRigthDifference(List<int> nums) {\\n    final result = <int>[];\\n\\n    for (var i = 0; i < nums.length; i++) {\\n      int sumL = 0;\\n      int sumR = 0;\\n      for (var l = i - 1; l >= 0; l--) {\\n        sumL += nums[l];\\n      }\\n      for (var r = i + 1; r < nums.length; r++) {\\n        sumR += nums[r];\\n      }\\n      int answer = (sumL - sumR);\\n      answer = answer < 0 ? answer * -1 : answer;\\n      result.add(answer);\\n    }\\n    return result;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408420,
                "title": "c-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ls(nums.size());\\n        int sum=0;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            if(i==0)\\n                ls[i]=0;\\n            else\\n            {   sum=sum+nums[i-1];\\n                ls[i]=sum;\\n            }\\n        }\\n        vector<int> rs(nums.size());\\n        sum=0;\\n        for(int i=nums.size()-1;i>=0;i--)\\n        {\\n            if(i==nums.size()-1)\\n                rs[nums.size()-1]=0;\\n            else\\n            {\\n                sum=sum+nums[i+1];\\n                rs[i]=sum;\\n            }\\n        }\\n        vector<int> ret(nums.size());\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            ret[i]=abs(ls[i]-rs[i]);\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ls(nums.size());\\n        int sum=0;\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            if(i==0)\\n                ls[i]=0;\\n            else\\n            {   sum=sum+nums[i-1];\\n                ls[i]=sum;\\n            }\\n        }\\n        vector<int> rs(nums.size());\\n        sum=0;\\n        for(int i=nums.size()-1;i>=0;i--)\\n        {\\n            if(i==nums.size()-1)\\n                rs[nums.size()-1]=0;\\n            else\\n            {\\n                sum=sum+nums[i+1];\\n                rs[i]=sum;\\n            }\\n        }\\n        vector<int> ret(nums.size());\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            ret[i]=abs(ls[i]-rs[i]);\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3399245,
                "title": "python3-runtime-44-ms-beats-97-35-memory-13-6-mb-beats-94-44",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nReduce the need of summing all the left and right elements of the array with each iteration.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ninput = [10,4,8,3]\\n\\nindex = 0:\\n- sum_all = 25\\n- sum_all - input[0] = 25 - 10 = 15\\n\\nindex = 1:\\n- output[1-1] - input[1] - input[1-1] = 15 - 4 - 10 = 1\\n\\nindex = 2:\\n- output[2-1] - input[2] - input[2-1] = 1 - 8 - 4 = -11\\n\\nindex = 3:\\n- output[3-1] - input[3] - input[3-1] = -11 - 3 - 8 = -22\\n\\nresults = [15,1,-11,-22]\\nanswer = abs(results) = [15,1,11,22]\\noutput = [15,1,11,22]\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nI believe is a 2*O(n) since we need to iterate over n twice.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nNot sure how to determine this one yet.\\n\\n# Code\\n```\\nclass Solution(object):\\n    def leftRigthDifference(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n\\n        if len(nums) == 1:\\n            return [0]\\n        else:\\n            answer = []\\n            for idx, num in enumerate(nums):\\n                if idx == 0:\\n                    answer.append(sum(nums) - num)\\n                else:\\n                    answer.append(answer[idx - 1] - num - nums[idx - 1])\\n            return [abs(val) for val in answer]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def leftRigthDifference(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \"\"\"\\n\\n        if len(nums) == 1:\\n            return [0]\\n        else:\\n            answer = []\\n            for idx, num in enumerate(nums):\\n                if idx == 0:\\n                    answer.append(sum(nums) - num)\\n                else:\\n                    answer.append(answer[idx - 1] - num - nums[idx - 1])\\n            return [abs(val) for val in answer]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3398101,
                "title": "swift-solution-beats-97-64",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func leftRigthDifference(_ nums: [Int]) -> [Int] {\\n        var sum = 0\\n        var result: [Int] = []\\n        result.reserveCapacity(nums.count)\\n\\n        for i in 0..<nums.count {\\n            result.append(sum)\\n            sum += nums[i]\\n        }\\n\\n        sum = 0\\n        for i in 0..<nums.count {\\n            result[nums.count-1-i] = abs(result[nums.count-1-i] - sum)\\n            sum += nums[nums.count-1-i]\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    func leftRigthDifference(_ nums: [Int]) -> [Int] {\\n        var sum = 0\\n        var result: [Int] = []\\n        result.reserveCapacity(nums.count)\\n\\n        for i in 0..<nums.count {\\n            result.append(sum)\\n            sum += nums[i]\\n        }\\n\\n        sum = 0\\n        for i in 0..<nums.count {\\n            result[nums.count-1-i] = abs(result[nums.count-1-i] - sum)\\n            sum += nums[nums.count-1-i]\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3371970,
                "title": "java-simple-for-beginners",
                "content": "![Screenshot (158).png](https://assets.leetcode.com/users/images/d01dd729-dcfb-4644-96e6-71cc684ceefc_1680462911.7737868.png)class Solution {\\n\\n    public int[] leftRigthDifference(int[] nums) {\\n        int left=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n              left+=nums[i];\\n        }\\n        int right=0;\\n        int arr[]=new int[nums.length];\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            left-=nums[i];\\n            arr[i]=Math.abs(right-left);\\n            right+=nums[i];\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int[] leftRigthDifference(int[] nums) {\\n        int left=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n              left+=nums[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3361295,
                "title": "easy-and-simple-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n-we will be calculating the left and right sum individually and solve the problem \\n# Complexity\\n- Time complexity:0(n)*/TC/*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* leftRigthDifference(int* nums, int numsSize, int* returnSize)\\n{\\n    int i,j=numsSize-1;\\n    int right[numsSize];\\n    int rsum=0;\\n    int lsum=0;\\n    int k,l;\\n    int left[numsSize];\\n    for(i=0;i<numsSize;i++)\\n    {\\n        k=nums[i];\\n        left[i]=lsum;\\n        lsum+=k;\\n        l=nums[j];\\n        right[j]=rsum;\\n        rsum+=l;\\n        j--;\\n    }\\n    for(i=0;i<numsSize;i++)\\n    {\\n        nums[i]=abs(right[i]-left[i]);\\n    }\\n    *returnSize=numsSize;\\n    return nums;\\n    \\n}\\n```\\n#### upvote me if you like the solution comment if have doubts\\n![images.jpeg](https://assets.leetcode.com/users/images/b7f67147-80eb-4539-b7aa-bcc2360feae7_1682789369.176082.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* leftRigthDifference(int* nums, int numsSize, int* returnSize)\\n{\\n    int i,j=numsSize-1;\\n    int right[numsSize];\\n    int rsum=0;\\n    int lsum=0;\\n    int k,l;\\n    int left[numsSize];\\n    for(i=0;i<numsSize;i++)\\n    {\\n        k=nums[i];\\n        left[i]=lsum;\\n        lsum+=k;\\n        l=nums[j];\\n        right[j]=rsum;\\n        rsum+=l;\\n        j--;\\n    }\\n    for(i=0;i<numsSize;i++)\\n    {\\n        nums[i]=abs(right[i]-left[i]);\\n    }\\n    *returnSize=numsSize;\\n    return nums;\\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3356247,
                "title": "c-easy",
                "content": "\\n# Code\\n```\\npublic class Solution {\\n    public int[] LeftRigthDifference(int[] nums) {\\n\\n            int len = nums.Length;\\n            int[] res = new int[len];\\n\\n            for (int j = 0; j < len; j++)\\n            {\\n\\n                res[j] = Math.Abs(nums.Take(j).Sum() - nums.Skip(j + 1).Sum());\\n            }\\n\\n\\n            return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] LeftRigthDifference(int[] nums) {\\n\\n            int len = nums.Length;\\n            int[] res = new int[len];\\n\\n            for (int j = 0; j < len; j++)\\n            {\\n\\n                res[j] = Math.Abs(nums.Take(j).Sum() - nums.Skip(j + 1).Sum());\\n            }\\n\\n\\n            return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334602,
                "title": "c-prefix-sum-faster-easy-to-understand",
                "content": "* ***Prefix Sum***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // find prefix_sum array\\n        \\n        for(int i = 1; i < n; i++)\\n        {\\n            nums[i] += nums[i - 1];\\n        }\\n        \\n        int total = nums[n - 1];\\n        \\n        // generate ans array\\n        \\n        vector<int> ans(n);\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int left = 0, right = 0;\\n            \\n            if(i - 1 >= 0)\\n            {\\n                left = nums[i - 1];\\n            }\\n            \\n            right = total - nums[i];\\n            \\n            ans[i] = abs(right - left);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // find prefix_sum array\\n        \\n        for(int i = 1; i < n; i++)\\n        {\\n            nums[i] += nums[i - 1];\\n        }\\n        \\n        int total = nums[n - 1];\\n        \\n        // generate ans array\\n        \\n        vector<int> ans(n);\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int left = 0, right = 0;\\n            \\n            if(i - 1 >= 0)\\n            {\\n                left = nums[i - 1];\\n            }\\n            \\n            right = total - nums[i];\\n            \\n            ans[i] = abs(right - left);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329946,
                "title": "simple-java-solution-100-faster-o-n",
                "content": "# Intuition\\n Calculating sums and using left and rigth sum .\\n\\n# Approach\\n Simple Iterative  approach .\\n\\n# Complexity\\n- Time complexity:O(n)\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums)\\n    {\\n        int left =0;\\n        int right=0;\\n        int sum=0;\\n\\n        int[] ans = new int[nums.length];\\n\\n        for(int i=0 ;i<nums.length;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            right = sum-left-nums[i];\\n            ans[i]=Math.abs(right-left);\\n            left += nums[i];\\n\\n\\n\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Iterator",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums)\\n    {\\n        int left =0;\\n        int right=0;\\n        int sum=0;\\n\\n        int[] ans = new int[nums.length];\\n\\n        for(int i=0 ;i<nums.length;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            right = sum-left-nums[i];\\n            ans[i]=Math.abs(right-left);\\n            left += nums[i];\\n\\n\\n\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3315936,
                "title": "simple-and-beginner-friendly-solution-using-c",
                "content": "# Intuition\\nI ALL TIME TELL FIRST READ A QUESTION CAREFULLY AND THAN SHOW THE INPUT AND OUTPUT OF OUR TEST CASES. FIRST THINK ABOUT HOW TO ADD NUMS ELEMENT AND PUSH INTO WHICH ARRAY.\\n\\n# Approach\\n->LEFTANS ARRAY: TRAVERSE OUT NUMS ARRAY AND ADD THAT ELEMENT AND PUSH INTO OUT LEFTANS ARRAY SAME.\\n->RIGHTANS ARRAY: TRAVERSE OUT NUMS ARRAY AND ADD THAT ELEMENT AND PUSH INTO OUT RIGHTANS ARRAY.BECAUSE OF ADD LEFT SO ELEMENT I REVERSE THE RIGHT ARRAY. AND THAN TAKE A DIFFRENCE OF BOTH ARRAY.\\nfunction:\\nABS(): ABS FUNCTION ARE USED LIKE A COMPLIMENT THE ELEMENT.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int size=nums.size();\\n        vector<int> Leftans;\\n        vector<int> Rightans;\\n        vector<int> ans;\\n        int diff=0;\\n        int sum1=0;\\n        int sum2=0;\\n\\n        for(int i=0;i<size;i++)\\n        {\\n            Leftans.push_back(sum1);\\n            sum1=sum1+nums[i];\\n        }\\n\\n        \\n        for(int i=size-1;i>=0;i--)\\n        {\\n            Rightans.push_back(sum2);\\n            sum2=sum2+nums[i];\\n        }\\n        reverse(Rightans.begin(),Rightans.end());\\n\\n       int k=0;\\n       int m=0;\\n\\n       while(k<Leftans.size() && m<Rightans.size())\\n       {  \\n           diff=abs(Leftans[k]-Rightans[m]);\\n           ans.push_back(diff);\\n           k++;\\n           m++;\\n       }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int size=nums.size();\\n        vector<int> Leftans;\\n        vector<int> Rightans;\\n        vector<int> ans;\\n        int diff=0;\\n        int sum1=0;\\n        int sum2=0;\\n\\n        for(int i=0;i<size;i++)\\n        {\\n            Leftans.push_back(sum1);\\n            sum1=sum1+nums[i];\\n        }\\n\\n        \\n        for(int i=size-1;i>=0;i--)\\n        {\\n            Rightans.push_back(sum2);\\n            sum2=sum2+nums[i];\\n        }\\n        reverse(Rightans.begin(),Rightans.end());\\n\\n       int k=0;\\n       int m=0;\\n\\n       while(k<Leftans.size() && m<Rightans.size())\\n       {  \\n           diff=abs(Leftans[k]-Rightans[m]);\\n           ans.push_back(diff);\\n           k++;\\n           m++;\\n       }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297421,
                "title": "java-solution-for-beginner",
                "content": "# Intuition\\nEasy Java Solution for beginner.\\n\\n# Approach\\n1) Uses Prefix Sum Array approach\\n2) prefixSum[i] = prefixSum[i - 1] + arr[i];\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n  int len=nums.length;      \\nint[] leftSum=new int[len];\\nint[] rightSum=new int[len];\\nint[] ans=new int[len];\\n\\nleftSum[0]=rightSum[len-1]=0;\\n\\nfor(int i=1;i<len;i++){\\n    leftSum[i]=nums[i-1]+leftSum[i-1];\\n}\\nfor(int i=len-2;i>=0;i--){\\n    rightSum[i]=nums[i+1]+rightSum[i+1];\\n}\\n\\nfor(int i=0;i<len;i++){\\n    ans[i]=Math.abs(leftSum[i]-rightSum[i]);\\n}\\n\\nreturn ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n  int len=nums.length;      \\nint[] leftSum=new int[len];\\nint[] rightSum=new int[len];\\nint[] ans=new int[len];\\n\\nleftSum[0]=rightSum[len-1]=0;\\n\\nfor(int i=1;i<len;i++){\\n    leftSum[i]=nums[i-1]+leftSum[i-1];\\n}\\nfor(int i=len-2;i>=0;i--){\\n    rightSum[i]=nums[i+1]+rightSum[i+1];\\n}\\n\\nfor(int i=0;i<len;i++){\\n    ans[i]=Math.abs(leftSum[i]-rightSum[i]);\\n}\\n\\nreturn ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3291594,
                "title": "one-traversal-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {        \\n        vector<int>res;\\n        int sum=0;\\n        for(auto x:nums)\\n            sum=sum+x;\\n        int lsum=0;\\n        int rsum=sum;\\n        for(int i=0;i<nums.size();i++){\\n            rsum=rsum-nums[i];\\n            res.push_back(abs(lsum-rsum));\\n            lsum=lsum+nums[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {        \\n        vector<int>res;\\n        int sum=0;\\n        for(auto x:nums)\\n            sum=sum+x;\\n        int lsum=0;\\n        int rsum=sum;\\n        for(int i=0;i<nums.size();i++){\\n            rsum=rsum-nums[i];\\n            res.push_back(abs(lsum-rsum));\\n            lsum=lsum+nums[i];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3287314,
                "title": "java-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int sum = 0;\\n        for(int num : nums) {\\n            sum += num;\\n        }\\n\\n        int[] ans = new int[nums.length];\\n        int leftSum = 0;\\n        int rightSum = sum;\\n        for(int i = 0; i < nums.length; i++) {\\n            rightSum -= nums[i];\\n            ans[i] = Math.abs(leftSum - rightSum);\\n            leftSum += nums[i];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int sum = 0;\\n        for(int num : nums) {\\n            sum += num;\\n        }\\n\\n        int[] ans = new int[nums.length];\\n        int leftSum = 0;\\n        int rightSum = sum;\\n        for(int i = 0; i < nums.length; i++) {\\n            rightSum -= nums[i];\\n            ans[i] = Math.abs(leftSum - rightSum);\\n            leftSum += nums[i];\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3276613,
                "title": "simple-kotlin-solution-with-o-n-time-complexity-and-o-1-space-complexity",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    fun leftRigthDifference(nums: IntArray): IntArray {\\n        val n = nums.size\\n        val ans: IntArray = IntArray(n)\\n        var rightSum = nums.sum() //rightSum at beginning is the total sum\\n        var leftSum = 0\\n\\n        for (i in nums.indices){\\n            rightSum = rightSum - nums[i] // remove the immediate index as we are finding the right sum from the given index\\n            ans[i] = Math.abs(leftSum - rightSum)\\n            leftSum = leftSum + nums[i] //eventually add the current index number\\n        }\\n\\n        return ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    fun leftRigthDifference(nums: IntArray): IntArray {\\n        val n = nums.size\\n        val ans: IntArray = IntArray(n)\\n        var rightSum = nums.sum() //rightSum at beginning is the total sum\\n        var leftSum = 0\\n\\n        for (i in nums.indices){\\n            rightSum = rightSum - nums[i] // remove the immediate index as we are finding the right sum from the given index\\n            ans[i] = Math.abs(leftSum - rightSum)\\n            leftSum = leftSum + nums[i] //eventually add the current index number\\n        }\\n\\n        return ans\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3266736,
                "title": "easy-solution-t-c-o-n-s-c-o-1",
                "content": "**INTUTION**\\n*run two loops for leftsum and rightsum\\nfrom i=0 to i<n for leftsum \\nfrom i=n-1 to i>=0 for rightsum\\nand find leftsum and rightsum\\nnow reverse the rightsum\\nnow run a loop for actual operation i,e, abs(leftsum - rightsum)*\\n**T.C.=O(N)\\nS.C.=O(N)**\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>leftsum;\\n        vector<int>rightsum;\\n        vector<int>ans;\\n        \\n        int sum=0,n=nums.size();\\n        for(int i=0;i<n;i++){\\n            leftsum.push_back(sum);\\n            sum=sum+nums[i];\\n        }\\n        sum=0;\\n        for(int j=n-1;j>=0;j--){\\n            rightsum.push_back(sum);\\n            sum=sum+nums[j];\\n        }\\n        \\n        reverse(rightsum.begin(),rightsum.end());\\n        int i=0,j=0;\\n        int diff=0;\\n        while(i<n && j<n){\\n            diff=abs(leftsum[i]-rightsum[j]);\\n            ans.push_back(diff);\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**OPTIMIZED APPROACH**\\n*this is optimized approach instead taking of two seprate vectors take two integers i.e. leftsum and rightsum and intialize them with zero\\nnow, run a loop for rightsum and store the sum of whole array nums in rightsum\\nagain run a loop for actual operation\\nsubtractact the nums[i] from rightsum \\nfind abs(leftsum-rightsum)\\nleftsum=leftsum+nums[i]*\\n**T.C.=O(N)\\nS.C.=O(1)**\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>result;\\n        \\n        int leftsum=0;\\n        int rightsum=0;\\n        int n= nums.size();\\n        \\n        for(int i=0;i<n;i++){\\n            rightsum=rightsum+nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            rightsum=rightsum-nums[i];\\n            int temp=abs(leftsum-rightsum);\\n            result.push_back(temp);\\n            leftsum=leftsum+nums[i];\\n        }\\n        return result;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>leftsum;\\n        vector<int>rightsum;\\n        vector<int>ans;\\n        \\n        int sum=0,n=nums.size();\\n        for(int i=0;i<n;i++){\\n            leftsum.push_back(sum);\\n            sum=sum+nums[i];\\n        }\\n        sum=0;\\n        for(int j=n-1;j>=0;j--){\\n            rightsum.push_back(sum);\\n            sum=sum+nums[j];\\n        }\\n        \\n        reverse(rightsum.begin(),rightsum.end());\\n        int i=0,j=0;\\n        int diff=0;\\n        while(i<n && j<n){\\n            diff=abs(leftsum[i]-rightsum[j]);\\n            ans.push_back(diff);\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>result;\\n        \\n        int leftsum=0;\\n        int rightsum=0;\\n        int n= nums.size();\\n        \\n        for(int i=0;i<n;i++){\\n            rightsum=rightsum+nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            rightsum=rightsum-nums[i];\\n            int temp=abs(leftsum-rightsum);\\n            result.push_back(temp);\\n            leftsum=leftsum+nums[i];\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3262762,
                "title": "easy-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] leftSum = new int[nums.length]; \\n        int[] rightSum = new int[nums.length]; \\n        int[] answer = new int[nums.length];\\n        leftSum[0] = 0;\\n        rightSum[nums.length - 1] = 0;\\n        for(int i = 0 ; i < nums.length - 1 ; i++)\\n        {\\n            leftSum[i + 1] = leftSum[i] + nums[i];\\n        }\\n        for(int i = nums.length - 1 ; i > 0 ; i--)\\n        {\\n            rightSum[i - 1] = rightSum[i] + nums[i]; \\n        }\\n        for(int i = 0 ; i < nums.length ; i++)\\n        {\\n            answer[i] = (int)Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int[] leftSum = new int[nums.length]; \\n        int[] rightSum = new int[nums.length]; \\n        int[] answer = new int[nums.length];\\n        leftSum[0] = 0;\\n        rightSum[nums.length - 1] = 0;\\n        for(int i = 0 ; i < nums.length - 1 ; i++)\\n        {\\n            leftSum[i + 1] = leftSum[i] + nums[i];\\n        }\\n        for(int i = nums.length - 1 ; i > 0 ; i--)\\n        {\\n            rightSum[i - 1] = rightSum[i] + nums[i]; \\n        }\\n        for(int i = 0 ; i < nums.length ; i++)\\n        {\\n            answer[i] = (int)Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3254349,
                "title": "simple-python-solution-98-6",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        left, right = 0, sum(nums)\\n        ans = []\\n        for i in range(len(nums)):\\n            ans.append(abs(right - left - nums[i]))\\n            left += nums[i]\\n            right -= nums[i]\\n        return ans    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n\\n        left, right = 0, sum(nums)\\n        ans = []\\n        for i in range(len(nums)):\\n            ans.append(abs(right - left - nums[i]))\\n            left += nums[i]\\n            right -= nums[i]\\n        return ans    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3244608,
                "title": "left-and-right-sum-differences-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int i, sum=0;\\n        vector<int> ans;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            ans.push_back(sum);\\n            sum += nums[i];\\n        }\\n        sum = 0;\\n        for(i=nums.size()-1 ; i>=0 ; i--)\\n        {\\n            ans[i] = abs(ans[i] - sum);\\n            sum += nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int i, sum=0;\\n        vector<int> ans;\\n        for(i=0 ; i<nums.size() ; i++)\\n        {\\n            ans.push_back(sum);\\n            sum += nums[i];\\n        }\\n        sum = 0;\\n        for(i=nums.size()-1 ; i>=0 ; i--)\\n        {\\n            ans[i] = abs(ans[i] - sum);\\n            sum += nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241725,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int left[]=new int[nums.length];\\n\\t\\tint right[]=new int[nums.length];\\n\\t\\tleft[0]=0;\\n\\t\\tint sum=0;\\n\\t\\tfor(int i=0;i<nums.length;i++) {  // left\\n\\t\\t\\tif(i<nums.length-1) {sum+=nums[i]; left[i+1]=sum;}\\n\\t\\t}\\n\\t\\tsum=0;\\n\\t\\tfor(int i=nums.length;i>=0;i--) {   // Right\\n\\t\\t\\tif(i<nums.length) {sum+=nums[i]; right[i]=sum;}\\n\\t\\t}\\n\\t\\t\\n\\t\\tfor(int i=1;i<right.length;i++) {\\n\\t\\t\\tright[i-1]=right[i];\\n\\t\\t}\\n\\t\\tright[right.length-1]=0;\\n\\t\\tfor(int i=0;i<nums.length;i++) {      // Final Solution \\n\\t\\t\\tnums[i]=left[i]-right[i];\\n\\t\\t\\tnums[i]=Math.abs(nums[i]);\\n\\t\\t}\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int left[]=new int[nums.length];\\n\\t\\tint right[]=new int[nums.length];\\n\\t\\tleft[0]=0;\\n\\t\\tint sum=0;\\n\\t\\tfor(int i=0;i<nums.length;i++) {  // left\\n\\t\\t\\tif(i<nums.length-1) {sum+=nums[i]; left[i+1]=sum;}\\n\\t\\t}\\n\\t\\tsum=0;\\n\\t\\tfor(int i=nums.length;i>=0;i--) {   // Right\\n\\t\\t\\tif(i<nums.length) {sum+=nums[i]; right[i]=sum;}\\n\\t\\t}\\n\\t\\t\\n\\t\\tfor(int i=1;i<right.length;i++) {\\n\\t\\t\\tright[i-1]=right[i];\\n\\t\\t}\\n\\t\\tright[right.length-1]=0;\\n\\t\\tfor(int i=0;i<nums.length;i++) {      // Final Solution \\n\\t\\t\\tnums[i]=left[i]-right[i];\\n\\t\\t\\tnums[i]=Math.abs(nums[i]);\\n\\t\\t}\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240952,
                "title": "left-and-right-sum-difference",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        lsum=[0]\\n        rsum=[0]\\n        for i in nums:\\n            lsum.append(lsum[len(lsum)-1]+i)\\n        lsum.pop()\\n        for i in reversed(nums):\\n            rsum.append(rsum[len(rsum)-1]+i)\\n        rsum.pop()\\n        rsum.reverse()\\n        res=[]\\n        for i in range(len(nums)):\\n            res.append(abs(lsum[i]-rsum[i]))\\n       \\n        return res\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        lsum=[0]\\n        rsum=[0]\\n        for i in nums:\\n            lsum.append(lsum[len(lsum)-1]+i)\\n        lsum.pop()\\n        for i in reversed(nums):\\n            rsum.append(rsum[len(rsum)-1]+i)\\n        rsum.pop()\\n        rsum.reverse()\\n        res=[]\\n        for i in range(len(nums)):\\n            res.append(abs(lsum[i]-rsum[i]))\\n       \\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240859,
                "title": "c-my-try",
                "content": "\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] LeftRigthDifference(int[] nums) {\\n    if(nums.Length == 1 && nums[0] == 1)\\n    {\\n        nums[0] = 0;\\n    }\\n    if(nums.Length == 1 && nums[0] == 2)\\n    {\\n        nums[0] = 0;\\n    }\\n    List<int> left = new List<int>();\\n    left.Add(0);\\n    List<int> rigth = new List<int>();\\n    rigth.Add(0);\\n    int item1 = 0;\\n    int item2 = 0;\\n    for(int i = 0; i < nums.Length; i++)\\n    {\\n        item1 += nums[i];\\n        left.Add(item1);\\n        if(left.Count() > nums.Length - 1)\\n        {\\n            break;\\n        }\\n    }\\n    Array.Reverse(nums);\\n    for(int i = 0;  i < nums.Length; i++)\\n    {\\n        item2 += nums[i];\\n        rigth.Add(item2);\\n        if(rigth.Count() > nums.Length - 1)\\n        {\\n            break;\\n        }\\n    }\\n    rigth.Reverse();\\n    List<int> result = new List<int>();\\n    int item3 = 0;\\n    for(int i = 0; i < nums.Length;  i++)\\n    {\\n        item3 = left[i] - rigth[i];\\n        if(item3 < 0)\\n        {\\n            item3 *= -1;\\n            result.Add(item3);\\n        }\\n        else\\n        {\\n            result.Add(item3);\\n        }\\n    } \\n    return result.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] LeftRigthDifference(int[] nums) {\\n    if(nums.Length == 1 && nums[0] == 1)\\n    {\\n        nums[0] = 0;\\n    }\\n    if(nums.Length == 1 && nums[0] == 2)\\n    {\\n        nums[0] = 0;\\n    }\\n    List<int> left = new List<int>();\\n    left.Add(0);\\n    List<int> rigth = new List<int>();\\n    rigth.Add(0);\\n    int item1 = 0;\\n    int item2 = 0;\\n    for(int i = 0; i < nums.Length; i++)\\n    {\\n        item1 += nums[i];\\n        left.Add(item1);\\n        if(left.Count() > nums.Length - 1)\\n        {\\n            break;\\n        }\\n    }\\n    Array.Reverse(nums);\\n    for(int i = 0;  i < nums.Length; i++)\\n    {\\n        item2 += nums[i];\\n        rigth.Add(item2);\\n        if(rigth.Count() > nums.Length - 1)\\n        {\\n            break;\\n        }\\n    }\\n    rigth.Reverse();\\n    List<int> result = new List<int>();\\n    int item3 = 0;\\n    for(int i = 0; i < nums.Length;  i++)\\n    {\\n        item3 = left[i] - rigth[i];\\n        if(item3 < 0)\\n        {\\n            item3 *= -1;\\n            result.Add(item3);\\n        }\\n        else\\n        {\\n            result.Add(item3);\\n        }\\n    } \\n    return result.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3240201,
                "title": "java-runtime-1-ms-100-memory-beats-76-7",
                "content": "# Java\\n\\n# Complexity\\n- Time complexity:\\n$$1(ms)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        \\n        int n = 0;\\n        int l = nums.length;\\n        int[] ans = new int[l];\\n\\n        for (int i = 0; i < l; i++) {\\n            ans[i] = n;\\n            n += nums[i];\\n        }\\n\\n        n = 0;\\n\\n        for (int i = l-1; i >= 0; i--) {\\n            ans[i] = Math.abs(ans[i] - n);\\n            n += nums[i];\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        \\n        int n = 0;\\n        int l = nums.length;\\n        int[] ans = new int[l];\\n\\n        for (int i = 0; i < l; i++) {\\n            ans[i] = n;\\n            n += nums[i];\\n        }\\n\\n        n = 0;\\n\\n        for (int i = l-1; i >= 0; i--) {\\n            ans[i] = Math.abs(ans[i] - n);\\n            n += nums[i];\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237223,
                "title": "python3-solution-with-using-two-linear-pas",
                "content": "# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        res = [0] * len(nums)\\n\\n        for i in range(1, len(res)):\\n            res[i] = res[i - 1] + nums[i - 1]\\n\\n        for i in range(len(res) - 2, -1, -1):\\n            res[i] = abs(res[i] - nums[i + 1])\\n\\n            nums[i] += nums[i + 1]\\n        \\n        return res\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        res = [0] * len(nums)\\n\\n        for i in range(1, len(res)):\\n            res[i] = res[i - 1] + nums[i - 1]\\n\\n        for i in range(len(res) - 2, -1, -1):\\n            res[i] = abs(res[i] - nums[i + 1])\\n\\n            nums[i] += nums[i + 1]\\n        \\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3236664,
                "title": "c-solution",
                "content": "```\\nvector<int> leftRigthDifference(vector<int>& nums) {\\n    int sz = nums.size();\\n    vector<int> preSum(sz), sufSum(sz);\\n    partial_sum(nums.begin(), nums.end(), preSum.begin());\\n    partial_sum(nums.rbegin(), nums.rend(), sufSum.rbegin());\\n    vector<int> res(sz);\\n    for (int i = 0; i < sz; i++) {\\n        int leftSum = i > 0 ? preSum[i - 1] : 0;\\n        int rightSum = i + 1 < sz ? sufSum[i + 1] : 0;\\n        res[i] = abs(rightSum - leftSum);\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Simulation"
                ],
                "code": "```\\nvector<int> leftRigthDifference(vector<int>& nums) {\\n    int sz = nums.size();\\n    vector<int> preSum(sz), sufSum(sz);\\n    partial_sum(nums.begin(), nums.end(), preSum.begin());\\n    partial_sum(nums.rbegin(), nums.rend(), sufSum.rbegin());\\n    vector<int> res(sz);\\n    for (int i = 0; i < sz; i++) {\\n        int leftSum = i > 0 ? preSum[i - 1] : 0;\\n        int rightSum = i + 1 < sz ? sufSum[i + 1] : 0;\\n        res[i] = abs(rightSum - leftSum);\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3235558,
                "title": "rust-solutions",
                "content": "# Code\\n\\n1. Simple solution.\\n```\\nimpl Solution {\\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\\n        let total_sum = nums.iter().sum::<i32>();\\n        let mut left_sum = 0;\\n        let mut result = Vec::with_capacity(nums.len());\\n        nums.into_iter().for_each(|x| {\\n            let right_sum = total_sum - x - left_sum;\\n            result.push((left_sum - right_sum).abs());\\n            left_sum += x;\\n        });\\n        result\\n    }\\n}\\n```\\n\\n2. Functional solution.\\n```\\nimpl Solution {\\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\\n        let mut result = nums\\n            .iter()\\n            .scan(0, |acc, &x| {\\n                *acc += x;\\n                Some(*acc)\\n            })\\n            .collect::<Vec<_>>();\\n\\n        let mut right_sum = 0;\\n        result\\n            .iter_mut()\\n            .zip(nums.into_iter())\\n            .rev()\\n            .for_each(|(acc, x)| {\\n                *acc = (*acc - x - right_sum).abs();\\n                right_sum += x;\\n            });\\n        result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Array",
                    "Math",
                    "Iterator"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\\n        let total_sum = nums.iter().sum::<i32>();\\n        let mut left_sum = 0;\\n        let mut result = Vec::with_capacity(nums.len());\\n        nums.into_iter().for_each(|x| {\\n            let right_sum = total_sum - x - left_sum;\\n            result.push((left_sum - right_sum).abs());\\n            left_sum += x;\\n        });\\n        result\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\\n        let mut result = nums\\n            .iter()\\n            .scan(0, |acc, &x| {\\n                *acc += x;\\n                Some(*acc)\\n            })\\n            .collect::<Vec<_>>();\\n\\n        let mut right_sum = 0;\\n        result\\n            .iter_mut()\\n            .zip(nums.into_iter())\\n            .rev()\\n            .for_each(|(acc, x)| {\\n                *acc = (*acc - x - right_sum).abs();\\n                right_sum += x;\\n            });\\n        result\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3234210,
                "title": "python-java-c-o-1-space",
                "content": "# Intuition\\nUse sum of the array to calculate left and right\\n\\n# Approach\\nloop through the array, update left sum, right sum = sum - A[i] - left\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: o(1)\\n\\n# Code\\nJava\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] A) {\\n        int su = 0, right = 0, left = 0, temp = 0;\\n        for(int i: A) su += i;\\n        for(int i=0; i<A.length; i++){\\n            right = su - A[i] - left;\\n            temp = A[i];\\n            A[i] = Math.abs(left - right);\\n            left += temp;\\n        }\\n        return A;\\n    }\\n}\\n```\\n\\nC++\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& A) {\\n        int su = 0, left = 0, right = 0, temp = 0;\\n        for(int i: A) su += i;\\n        for(int i=0; i< A.size(); i++){\\n            right = su - A[i] - left;\\n            temp = A[i];\\n            A[i] = abs(left - right);\\n            left += temp;\\n        }\\n        return A;\\n    }\\n};\\n```\\n\\nPython 3\\n```\\nclass Solution:\\n    def leftRigthDifference(self, A: List[int]) -> List[int]:\\n        su, left = sum(A), 0\\n        for i in range(len(A)):\\n            right = su - left - A[i]\\n            A[i], left = abs(right - left), left + A[i]\\n\\n        return A\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] A) {\\n        int su = 0, right = 0, left = 0, temp = 0;\\n        for(int i: A) su += i;\\n        for(int i=0; i<A.length; i++){\\n            right = su - A[i] - left;\\n            temp = A[i];\\n            A[i] = Math.abs(left - right);\\n            left += temp;\\n        }\\n        return A;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& A) {\\n        int su = 0, left = 0, right = 0, temp = 0;\\n        for(int i: A) su += i;\\n        for(int i=0; i< A.size(); i++){\\n            right = su - A[i] - left;\\n            temp = A[i];\\n            A[i] = abs(left - right);\\n            left += temp;\\n        }\\n        return A;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def leftRigthDifference(self, A: List[int]) -> List[int]:\\n        su, left = sum(A), 0\\n        for i in range(len(A)):\\n            right = su - left - A[i]\\n            A[i], left = abs(right - left), left + A[i]\\n\\n        return A\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3233678,
                "title": "3-ms-100-faster-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int> leftsum(n,0),rightsum(n,0);\\n        for(int i=1;i<n;i++)\\n        {\\n            leftsum[i]=nums[i-1]+leftsum[i-1];\\n        }\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            rightsum[i]=nums[i+1]+rightsum[i+1];\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            nums[i]=abs(leftsum[i]-rightsum[i]);\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int> leftsum(n,0),rightsum(n,0);\\n        for(int i=1;i<n;i++)\\n        {\\n            leftsum[i]=nums[i-1]+leftsum[i-1];\\n        }\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            rightsum[i]=nums[i+1]+rightsum[i+1];\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            nums[i]=abs(leftsum[i]-rightsum[i]);\\n        }\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232182,
                "title": "easiest-c-solution-simple-o-n-beats-90",
                "content": "# Intuition\\n\\nHere we can  do the simple appraoch by giving whole to right one and then transfering to left one by one and Abs diff of both will be our ans.\\n\\n# Complexity\\n- Time complexity:\\n  \\n      O(n)\\n\\n- Space complexity:\\n\\n\\n       O(n) --> To store answer\\n\\n\\n![upvote.jpg](https://assets.leetcode.com/users/images/2e3c34b5-887e-4a40-b550-0972f6a5d7ba_1677404042.9615998.jpeg)\\n\\n\\n# Code\\n```\\n#include<bits/stdc++.h>\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n           int n=nums.size();\\n            vector<int>ans;\\n          int leftSum=0,rightSum=0;\\n         for(int i=0;i<n;++i){\\n                rightSum+=nums[i];\\n         }\\n         // ans.push_back(abs(leftSum-rightSum));\\n           for(int i=0;i<n;++i){\\n                 leftSum+=nums[i];\\n                ans.push_back(abs(rightSum-leftSum));\\n                 rightSum-=nums[i];\\n              \\n           }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\n#include<bits/stdc++.h>\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n           int n=nums.size();\\n            vector<int>ans;\\n          int leftSum=0,rightSum=0;\\n         for(int i=0;i<n;++i){\\n                rightSum+=nums[i];\\n         }\\n         // ans.push_back(abs(leftSum-rightSum));\\n           for(int i=0;i<n;++i){\\n                 leftSum+=nums[i];\\n                ans.push_back(abs(rightSum-leftSum));\\n                 rightSum-=nums[i];\\n              \\n           }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3232109,
                "title": "scala-scanleft-scanright",
                "content": "# Code\\n```\\nobject Solution {\\n  def leftRigthDifference(nums: Array[Int]): Array[Int] = {\\n    val leftSum = nums.scanLeft(0)(_ + _)\\n    val rightSum = nums.scanRight(0)(_ + _)\\n    nums.indices.map(i => math.abs(leftSum(i) - rightSum(i + 1))).toArray\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n  def leftRigthDifference(nums: Array[Int]): Array[Int] = {\\n    val leftSum = nums.scanLeft(0)(_ + _)\\n    val rightSum = nums.scanRight(0)(_ + _)\\n    nums.indices.map(i => math.abs(leftSum(i) - rightSum(i + 1))).toArray\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3232020,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nUsing preComputation of left and right sum;\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int> left(n,0),right(n,0);\\n        int sum=nums[0];\\n        for(int i=1;i<n;i++){\\n            left[i]+=(nums[i-1]+left[i-1]) ;\\n             sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            right[i]=(sum-nums[i]);\\n            sum-=nums[i];\\n        }\\n        \\n        \\n        vector<int> ans(n,0);\\n        for(int i=0;i<n;i++){\\n            ans[i]=abs(left[i]-right[i]);\\n        }\\n        \\n        return ans;\\n            \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<int> left(n,0),right(n,0);\\n        int sum=nums[0];\\n        for(int i=1;i<n;i++){\\n            left[i]+=(nums[i-1]+left[i-1]) ;\\n             sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++){\\n            right[i]=(sum-nums[i]);\\n            sum-=nums[i];\\n        }\\n        \\n        \\n        vector<int> ans(n,0);\\n        for(int i=0;i<n;i++){\\n            ans[i]=abs(left[i]-right[i]);\\n        }\\n        \\n        return ans;\\n            \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231395,
                "title": "easy-solution-very-easy-explanation-with-dry-run-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires us to calculate the absolute difference between the sum of elements to the left of an index and the sum of elements to the right of the index. We can iterate over the array and keep track of the running sum of elements to the left of the current index and the running sum of elements to the right of the current index. We can then calculate the absolute difference between the two sums and store it in the answer array.\\n\\n---\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a variable \\'sum\\' to store the sum of all elements in the array.\\n2. Initialize a variable \\'x\\' to store the running sum of elements to the left of the current index. Initialize an empty answer vector.\\n3. Iterate over the array and for each index \\'i\\', calculate the running sum of elements to the right of the current index as \\'sum\\' - (x + nums[i]).\\n4. Calculate the absolute difference between the running sums of elements to the left and right of the current index and store it in the answer vector.\\n5. Update \\'x\\' by adding the current element to it.\\nReturn the answer vector.\\n\\n---\\n\\n\\n# Example\\nLet\\'s take the input array [10, 4, 8, 3] and go through the steps of our approach.\\n1. Calculate the sum of all elements: sum = 10 + 4 + 8 + 3 = 25.\\nInitialize x to 0 and an empty answer vector.\\n1. For i = 0, leftsum = x = 0 and rightsum = sum - (x + nums[i]) = 25 - (0 + 10) = 15. Push abs(leftsum - rightsum) = abs(0 - 15) = 15 to the answer vector. Update x to x + nums[i] = 10.\\n1. For i = 1, leftsum = x = 10 and rightsum = sum - (x + nums[i]) = 25 - (10 + 4) = 11. Push abs(leftsum - rightsum) = abs(10 - 11) = 1 to the answer vector. Update x to x + nums[i] = 14.\\n1. For i = 2, leftsum = x = 14 and rightsum = sum - (x + nums[i]) = 25 - (14 + 8) = 3. Push abs(leftsum - rightsum) = abs(14 - 3) = 11 to the answer vector. Update x to x + nums[i] = 22.\\n1. For i = 3, leftsum = x = 22 and rightsum = sum - (x + nums[i]) = 25 - (22 + 3) = 0. Push abs(leftsum - rightsum) = abs(22 - 0) = 22 to the answer vector. Update x to x + nums[i] = 25.\\n1. Return the answer vector [15, 1, 11, 22].\\n\\nOverall, the approach is to iterate over the array and keep track of the running sums of elements to the left and right of the current index. We then calculate the absolute difference between the two running sums and store it in the answer vector.\\n\\nIf you like my expalination please upvote.\\n\\n![image.png](https://assets.leetcode.com/users/images/5bc84a33-1a08-4054-a024-63d67e654483_1677389386.270541.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int sum=0;\\n        for(auto it:nums)\\n            sum+=it;\\n        int x=0;\\n        vector<int> ans;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int leftsum=x;\\n            int rightsum=sum-(x+nums[i]);\\n            ans.push_back(abs(leftsum-rightsum));\\n            x+=nums[i];\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int sum=0;\\n        for(auto it:nums)\\n            sum+=it;\\n        int x=0;\\n        vector<int> ans;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int leftsum=x;\\n            int rightsum=sum-(x+nums[i]);\\n            ans.push_back(abs(leftsum-rightsum));\\n            x+=nums[i];\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231076,
                "title": "rust-prefix-sum",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n# Code\\n```\\nimpl Solution {\\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\\n        let n = nums.len();\\n        let mut left = vec![0; n + 1];\\n        for i in 0 .. n { left[i + 1] = left[i] + nums[i]; }\\n\\n        let mut ret = vec![0; n];\\n        let mut sum = 0;\\n        for i in (0 .. n).rev() {\\n            ret[i] = i32::abs(left[i] - sum);\\n            sum += nums[i]; \\n        }\\n\\n        ret\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn left_rigth_difference(nums: Vec<i32>) -> Vec<i32> {\\n        let n = nums.len();\\n        let mut left = vec![0; n + 1];\\n        for i in 0 .. n { left[i + 1] = left[i] + nums[i]; }\\n\\n        let mut ret = vec![0; n];\\n        let mut sum = 0;\\n        for i in (0 .. n).rev() {\\n            ret[i] = i32::abs(left[i] - sum);\\n            sum += nums[i]; \\n        }\\n\\n        ret\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3231002,
                "title": "easy-to-understand-c-solution",
                "content": "## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n= nums.size();\\n        vector<int> ans(n,0), right(n,0); \\n        int rsum=0;\\n        for (int i= n-2; i>=0; i--)right[i]= right[i+1]+ nums[i+1];\\n        for (int i=0; i<n; i++){\\n            ans[i]= abs(right[i]-rsum);\\n            rsum+= nums[i];\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        int n= nums.size();\\n        vector<int> ans(n,0), right(n,0); \\n        int rsum=0;\\n        for (int i= n-2; i>=0; i--)right[i]= right[i+1]+ nums[i+1];\\n        for (int i=0; i<n; i++){\\n            ans[i]= abs(right[i]-rsum);\\n            rsum+= nums[i];\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230987,
                "title": "python-one-liner-explained",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGet the left and right sum excluding the current index and append the absolute value of the sum to the res list\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        res = []\\n\\n        for idx, num in enumerate(nums):\\n            res.append(abs(sum(nums[:idx]) - sum(nums[idx + 1:])))\\n\\n        return res\\n```\\n# One Liner\\n```\\nreturn [abs(sum(nums[:idx]) - sum(nums[idx + 1:])) for idx in range(len(nums))]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRigthDifference(self, nums: List[int]) -> List[int]:\\n        res = []\\n\\n        for idx, num in enumerate(nums):\\n            res.append(abs(sum(nums[:idx]) - sum(nums[idx + 1:])))\\n\\n        return res\\n```\n```\\nreturn [abs(sum(nums[:idx]) - sum(nums[idx + 1:])) for idx in range(len(nums))]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230985,
                "title": "easy-c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ans(nums.size(),0);\\n        int n=nums.size();\\n        int sum=0;\\n        vector<int> leftsum;\\n        vector<int> rightsum(nums.size(),0);\\n        leftsum.push_back(0);\\n        sum+=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            leftsum.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        sum=0;\\n        rightsum[n-1]=0;\\n        sum+=nums[n-1];\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            rightsum[i]=sum;;\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            ans[i]=abs(leftsum[i]-rightsum[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int> ans(nums.size(),0);\\n        int n=nums.size();\\n        int sum=0;\\n        vector<int> leftsum;\\n        vector<int> rightsum(nums.size(),0);\\n        leftsum.push_back(0);\\n        sum+=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            leftsum.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        sum=0;\\n        rightsum[n-1]=0;\\n        sum+=nums[n-1];\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            rightsum[i]=sum;;\\n            sum+=nums[i];\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            ans[i]=abs(leftsum[i]-rightsum[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230945,
                "title": "python3-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        return [abs(sum(nums[:i + 1]) - sum(nums[i:])) for i in range(len(nums))]\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/8db66b3f-e769-4f46-8ce9-dd860cf8ddbe_1677384452.5838816.png)\\n![image.png](https://assets.leetcode.com/users/images/6245cc3d-faf3-44ad-bf10-2548c943f2a4_1677384464.599859.png)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        return [abs(sum(nums[:i + 1]) - sum(nums[i:])) for i in range(len(nums))]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230884,
                "title": "simples-approach-without-using-space",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int sum = 0;\\n        for(int i : nums)\\n            sum += i;\\n        int preSum = 0;\\n        for(int i = 0; i<nums.length; i++){\\n            preSum += nums[i];\\n            int rightSum = sum - preSum;\\n            int leftSum = preSum - nums[i];\\n            nums[i] = Math.abs(leftSum - rightSum);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        int sum = 0;\\n        for(int i : nums)\\n            sum += i;\\n        int preSum = 0;\\n        for(int i = 0; i<nums.length; i++){\\n            preSum += nums[i];\\n            int rightSum = sum - preSum;\\n            int leftSum = preSum - nums[i];\\n            nums[i] = Math.abs(leftSum - rightSum);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230783,
                "title": "c-easy-and-simple-solution",
                "content": "***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>left;\\n        vector<int>right(nums.size(),0);\\n        int sum=0;\\n        left.push_back(0);\\n        sum+=nums[0];\\n        for(int i=1;i<nums.size();i++){\\n            left.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        sum=0;\\n        right[nums.size()-1]=0;\\n        sum+=nums[nums.size()-1];\\n        for(int i=nums.size()-2;i>=0;i--){\\n            right[i]=sum;\\n            sum+=nums[i];\\n        }\\n        \\n        vector<int>ans(nums.size(),0);\\n        for(int i=0;i<nums.size();i++){\\n            ans[i]=abs(left[i]-right[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRigthDifference(vector<int>& nums) {\\n        vector<int>left;\\n        vector<int>right(nums.size(),0);\\n        int sum=0;\\n        left.push_back(0);\\n        sum+=nums[0];\\n        for(int i=1;i<nums.size();i++){\\n            left.push_back(sum);\\n            sum+=nums[i];\\n        }\\n        sum=0;\\n        right[nums.size()-1]=0;\\n        sum+=nums[nums.size()-1];\\n        for(int i=nums.size()-2;i>=0;i--){\\n            right[i]=sum;\\n            sum+=nums[i];\\n        }\\n        \\n        vector<int>ans(nums.size(),0);\\n        for(int i=0;i<nums.size();i++){\\n            ans[i]=abs(left[i]-right[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4099086,
                "title": "left-and-right-sum",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nLooping through the array nums, calculating the values & storing them\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse the length of nums to construct an array and set the initall values to 0\\nloop through the leftSum from the 1st index\\nloop through the rightSum in reverse order from the last index\\nloop through the answer and minus the left & right sum disregaring the sign \\nReturn the ans\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n(o)1\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n(o)1\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRightDifference = function(nums) {\\n   const n = nums.length;\\n\\n   const leftSum  = Array(n).fill(0)\\n   for(let i = 1; i < n; i++){\\n       leftSum[i] = leftSum[i - 1] + nums [i -1]\\n   }\\n\\n   const rightSum = Array(n).fill(0)\\n   for ( let i = n - 2; i >= 0; i-- ){\\n        rightSum[i] = rightSum[i + 1] + nums[i + 1]\\n   }\\n\\n   const answer = Array(n)\\n   for (let i = 0; i < n; i++){\\n       answer[i] = Math.abs(rightSum[i] - leftSum[i])\\n   }\\n\\n   return answer\\n};\\n\\n\\n//  Space Complexity = \\n// Time complexity = pr\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar leftRightDifference = function(nums) {\\n   const n = nums.length;\\n\\n   const leftSum  = Array(n).fill(0)\\n   for(let i = 1; i < n; i++){\\n       leftSum[i] = leftSum[i - 1] + nums [i -1]\\n   }\\n\\n   const rightSum = Array(n).fill(0)\\n   for ( let i = n - 2; i >= 0; i-- ){\\n        rightSum[i] = rightSum[i + 1] + nums[i + 1]\\n   }\\n\\n   const answer = Array(n)\\n   for (let i = 0; i < n; i++){\\n       answer[i] = Math.abs(rightSum[i] - leftSum[i])\\n   }\\n\\n   return answer\\n};\\n\\n\\n//  Space Complexity = \\n// Time complexity = pr\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4099067,
                "title": "decent-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        n=len(nums)\\n        answers=[]\\n\\n        prevLeftSum=0\\n        prevRightSum=sum(nums[0:n])\\n\\n        for i in range(n):\\n            if i>0:\\n                newLeftSum=prevLeftSum+nums[i-1]\\n            else:\\n                newLeftSum=prevLeftSum\\n            if i>=0 and i<n-1:\\n                newRightSum=prevRightSum-nums[i]\\n            else:\\n                newRightSum=0\\n            answers.append(abs(newLeftSum-newRightSum))\\n            prevLeftSum=newLeftSum\\n            prevRightSum=newRightSum\\n        return answers\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        n=len(nums)\\n        answers=[]\\n\\n        prevLeftSum=0\\n        prevRightSum=sum(nums[0:n])\\n\\n        for i in range(n):\\n            if i>0:\\n                newLeftSum=prevLeftSum+nums[i-1]\\n            else:\\n                newLeftSum=prevLeftSum\\n            if i>=0 and i<n-1:\\n                newRightSum=prevRightSum-nums[i]\\n            else:\\n                newRightSum=0\\n            answers.append(abs(newLeftSum-newRightSum))\\n            prevLeftSum=newLeftSum\\n            prevRightSum=newRightSum\\n        return answers\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097541,
                "title": "easy-solution-in-java-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        \\n        int prefixSum =  nums[0];\\n        int suffixSum = 0;\\n        int [] answer = new int [nums.length];\\n        \\n        for(int num: nums){\\n            suffixSum = suffixSum + num;\\n        }\\n        suffixSum = suffixSum - nums[0];\\n        answer[0] = suffixSum; \\n        for(int i=1; i<nums.length; i++){       \\n            suffixSum = suffixSum - nums[i];\\n            answer[i] = Math.abs(suffixSum - prefixSum);\\n            prefixSum = prefixSum + nums[i];\\n        }\\n        \\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        \\n        int prefixSum =  nums[0];\\n        int suffixSum = 0;\\n        int [] answer = new int [nums.length];\\n        \\n        for(int num: nums){\\n            suffixSum = suffixSum + num;\\n        }\\n        suffixSum = suffixSum - nums[0];\\n        answer[0] = suffixSum; \\n        for(int i=1; i<nums.length; i++){       \\n            suffixSum = suffixSum - nums[i];\\n            answer[i] = Math.abs(suffixSum - prefixSum);\\n            prefixSum = prefixSum + nums[i];\\n        }\\n        \\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4094783,
                "title": "python-easy-to-understand-beginner-friendly-o-n",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        ans=[]\\n        curleftsum=0\\n        currightsum=sum(nums)\\n\\n        for i in range(len(nums)):\\n            if i==0:\\n                curleftsum=0\\n                currightsum-=nums[i]\\n            else:\\n                curleftsum+=nums[i-1]\\n                currightsum-=nums[i]\\n\\n            ans.append(abs(curleftsum-currightsum))\\n\\n        return ans\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        ans=[]\\n        curleftsum=0\\n        currightsum=sum(nums)\\n\\n        for i in range(len(nums)):\\n            if i==0:\\n                curleftsum=0\\n                currightsum-=nums[i]\\n            else:\\n                curleftsum+=nums[i-1]\\n                currightsum-=nums[i]\\n\\n            ans.append(abs(curleftsum-currightsum))\\n\\n        return ans\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4092125,
                "title": "easy-c-solution-beginner-s-friendly-full-explanation",
                "content": "# Intuition\\nVector concept\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n\\n    \\n    vector<int> left;\\n    vector<int> right;\\n    vector<int> ans;\\n    left.push_back(0);\\n    int sum=0;\\n\\n//each time it will add and put in vector\\n    for(int i=0;i<nums.size()-1;i++){\\n            sum+=nums[i];\\n            left.push_back(sum);\\n    }\\n\\n    sum=0;\\n    for(int i=0;i<nums.size();i++){\\n        sum=sum+nums[i];\\n    }\\n\\n//from the total value sub element each time.\\n    for(int i=0;i<nums.size();i++){\\n        sum=sum-nums[i];\\n        right.push_back(sum);\\n    }\\n    \\n    for(int i=0;i<left.size();i++){\\n        ans.push_back(abs(left[i]-right[i]));\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> leftRightDifference(vector<int>& nums) {\\n\\n    \\n    vector<int> left;\\n    vector<int> right;\\n    vector<int> ans;\\n    left.push_back(0);\\n    int sum=0;\\n\\n//each time it will add and put in vector\\n    for(int i=0;i<nums.size()-1;i++){\\n            sum+=nums[i];\\n            left.push_back(sum);\\n    }\\n\\n    sum=0;\\n    for(int i=0;i<nums.size();i++){\\n        sum=sum+nums[i];\\n    }\\n\\n//from the total value sub element each time.\\n    for(int i=0;i<nums.size();i++){\\n        sum=sum-nums[i];\\n        right.push_back(sum);\\n    }\\n    \\n    for(int i=0;i<left.size();i++){\\n        ans.push_back(abs(left[i]-right[i]));\\n    }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090837,
                "title": "2574-left-and-right-sum-differences",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: **O(N)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(N)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int numLength = nums.length;\\n        int leftArray[] = new int[numLength];\\n        int rightArray[] = new int[numLength];\\n\\n        int sum = 0;\\n        leftArray[0] = 0;\\n        for(int i=1;i<numLength;i++){\\n            sum+=nums[i-1];\\n            leftArray[i] = sum;\\n        }\\n\\n        sum = 0;\\n        rightArray[numLength - 1] = 0;\\n        for(int i=numLength-2;i>=0;i--){\\n            sum+=nums[i+1];\\n            rightArray[i] = sum;\\n        }\\n\\n        for(int i=0;i<numLength;i++){\\n            nums[i] = Math.abs(leftArray[i] - rightArray[i]);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int numLength = nums.length;\\n        int leftArray[] = new int[numLength];\\n        int rightArray[] = new int[numLength];\\n\\n        int sum = 0;\\n        leftArray[0] = 0;\\n        for(int i=1;i<numLength;i++){\\n            sum+=nums[i-1];\\n            leftArray[i] = sum;\\n        }\\n\\n        sum = 0;\\n        rightArray[numLength - 1] = 0;\\n        for(int i=numLength-2;i>=0;i--){\\n            sum+=nums[i+1];\\n            rightArray[i] = sum;\\n        }\\n\\n        for(int i=0;i<numLength;i++){\\n            nums[i] = Math.abs(leftArray[i] - rightArray[i]);\\n        }\\n        return nums;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089946,
                "title": "java-solution-arrays",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int l=nums.length;\\n        \\n int arr1[]=new int [l];      \\n        int sum1=0;\\n        for(int i=0;i<l;i++)\\n        {            \\n            arr1[i]=sum1;\\n            sum1=sum1+nums[i];\\n        }                               //for left sum\\n\\n       \\n int arr2[]=new int [l];\\n int sum2=0;\\n        for(int i=l-1;i>=0;i--)\\n        {\\n            arr2[i]=sum2;   \\n            sum2=sum2+nums[i];\\n        }                              //for right sum\\n\\n        \\n int arr3[]=new int [l];\\n        for(int i=0;i<l;i++)\\n        {\\n            arr3[i]=Math.abs(arr1[i]-arr2[i]);\\n        }                              //difference\\n\\nreturn arr3;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int l=nums.length;\\n        \\n int arr1[]=new int [l];      \\n        int sum1=0;\\n        for(int i=0;i<l;i++)\\n        {            \\n            arr1[i]=sum1;\\n            sum1=sum1+nums[i];\\n        }                               //for left sum\\n\\n       \\n int arr2[]=new int [l];\\n int sum2=0;\\n        for(int i=l-1;i>=0;i--)\\n        {\\n            arr2[i]=sum2;   \\n            sum2=sum2+nums[i];\\n        }                              //for right sum\\n\\n        \\n int arr3[]=new int [l];\\n        for(int i=0;i<l;i++)\\n        {\\n            arr3[i]=Math.abs(arr1[i]-arr2[i]);\\n        }                              //difference\\n\\nreturn arr3;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089017,
                "title": "easy-solution-beats-85-45-in-runtime-beats-93-59-in-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        left=[]\\n        lefty, righty = 0, 0\\n        for i in nums:\\n            left.append(lefty)\\n            lefty+=i\\n        right=[]\\n        num=nums[::-1]\\n        for i in num:\\n            right.append(righty)\\n            righty+=i\\n        right=right[::-1]\\n        res=[]\\n        for i in range(len(left)):\\n            res.append(abs(right[i]-left[i]))\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n        left=[]\\n        lefty, righty = 0, 0\\n        for i in nums:\\n            left.append(lefty)\\n            lefty+=i\\n        right=[]\\n        num=nums[::-1]\\n        for i in num:\\n            right.append(righty)\\n            righty+=i\\n        right=right[::-1]\\n        res=[]\\n        for i in range(len(left)):\\n            res.append(abs(right[i]-left[i]))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084615,
                "title": "easy-to-understand-for-java-bignner-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int[] leftSum=new int[nums.length];\\n        int[] rightSum=new int[nums.length];\\n        int sum=0;\\n        for(int i=0 ; i< nums.length ; i++){\\n            if(i==0){\\n                leftSum[0]=0;\\n            }\\n            else{\\n                sum+=nums[i-1];\\n                leftSum[i]=sum;\\n            }\\n        }\\n        sum=0;\\n        for(int i=nums.length-1 ; i>=0 ; i--){\\n            if(i==nums.length-1){\\n                rightSum[0]=0;\\n            }\\n            else{\\n                sum+=nums[i+1];\\n                rightSum[i]=sum;\\n            }\\n        }\\n        int[] ansArr=new int[nums.length] ;\\n        for(int i=0 ; i< nums.length ; i++){\\n            ansArr[i] = Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return ansArr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] leftRightDifference(int[] nums) {\\n        int[] leftSum=new int[nums.length];\\n        int[] rightSum=new int[nums.length];\\n        int sum=0;\\n        for(int i=0 ; i< nums.length ; i++){\\n            if(i==0){\\n                leftSum[0]=0;\\n            }\\n            else{\\n                sum+=nums[i-1];\\n                leftSum[i]=sum;\\n            }\\n        }\\n        sum=0;\\n        for(int i=nums.length-1 ; i>=0 ; i--){\\n            if(i==nums.length-1){\\n                rightSum[0]=0;\\n            }\\n            else{\\n                sum+=nums[i+1];\\n                rightSum[i]=sum;\\n            }\\n        }\\n        int[] ansArr=new int[nums.length] ;\\n        for(int i=0 ; i< nums.length ; i++){\\n            ansArr[i] = Math.abs(leftSum[i] - rightSum[i]);\\n        }\\n        return ansArr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084310,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* leftRightDifference(int* nums, int numsSize, int* returnSize){\\n      int numleft[numsSize],numrigth[numsSize];\\n      int *arr = malloc(sizeof(int) * numsSize);\\n      int sum_numleft = 0,sum_numright = 0;\\n\\n      int index_numright = numsSize - 2;\\n      numleft[0] = 0;\\n      numrigth[index_numright+1] = 0;\\n\\n      for(int i = 1; i  < numsSize; i ++,index_numright--){\\n        numleft[i] = sum_numleft + nums[i-1];\\n        sum_numleft += nums[i-1];\\n\\n        numrigth[index_numright] = sum_numright + nums[index_numright + 1];\\n        sum_numright += nums[index_numright +1];\\n      }\\n\\n\\n     for(int i = 0; i < numsSize; i++)\\n        arr[i] = (numleft[i] > numrigth[i]) ? numleft[i] - numrigth[i]: numrigth[i] - numleft[i];\\n     \\n     *returnSize = numsSize;\\n     \\n     return arr;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* leftRightDifference(int* nums, int numsSize, int* returnSize){\\n      int numleft[numsSize],numrigth[numsSize];\\n      int *arr = malloc(sizeof(int) * numsSize);\\n      int sum_numleft = 0,sum_numright = 0;\\n\\n      int index_numright = numsSize - 2;\\n      numleft[0] = 0;\\n      numrigth[index_numright+1] = 0;\\n\\n      for(int i = 1; i  < numsSize; i ++,index_numright--){\\n        numleft[i] = sum_numleft + nums[i-1];\\n        sum_numleft += nums[i-1];\\n\\n        numrigth[index_numright] = sum_numright + nums[index_numright + 1];\\n        sum_numright += nums[index_numright +1];\\n      }\\n\\n\\n     for(int i = 0; i < numsSize; i++)\\n        arr[i] = (numleft[i] > numrigth[i]) ? numleft[i] - numrigth[i]: numrigth[i] - numleft[i];\\n     \\n     *returnSize = numsSize;\\n     \\n     return arr;\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1814959,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1845299,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1999521,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1997493,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1817798,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1815212,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 2058378,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1941815,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1833016,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1819467,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1814959,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1845299,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1999521,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1997493,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1817798,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1815212,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 2058378,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1941815,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1833016,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            },
            {
                "id": 1819467,
                "content": [
                    {
                        "username": "dchooyc",
                        "content": "something is not Rigth.."
                    },
                    {
                        "username": "Msey",
                        "content": "rtue "
                    },
                    {
                        "username": "sahle123",
                        "content": "I didn\\'t understand you till I saw the method signature haha"
                    },
                    {
                        "username": "belokovalex",
                        "content": "0 - 15 = 15\\nwhat?? Maybe -15, where is the logic? "
                    },
                    {
                        "username": "mdzakeer1908",
                        "content": "sum = left[0] -right[0]\\nif(sum<) {sum=sum*-1}"
                    },
                    {
                        "username": "mohammedsaif2004",
                        "content": "Math.abs(0-15)=15"
                    },
                    {
                        "username": "Mathushanan",
                        "content": "not 0-15 that is |0-15|"
                    },
                    {
                        "username": "thejoxa",
                        "content": "abs()"
                    },
                    {
                        "username": "flashnelson",
                        "content": "The logic is self evident. In mathematics, | | indicates absolute value, which is the difference from 0. So, | - 15 | is 15. \\n\\nHowever, they could have included this in their description for those unfamiliar. "
                    },
                    {
                        "username": "03_Saurabh_Shukla",
                        "content": "There Is MOD operation performed as well |left - rigth|  one can use abs(l eft - right ) for same"
                    },
                    {
                        "username": "djraj47",
                        "content": "there is a mod given \\n"
                    },
                    {
                        "username": "ConorJurewicz",
                        "content": "Notice the \" -> |  0-15  |  <-  \" absolute value."
                    },
                    {
                        "username": "karakiyunlatif",
                        "content": "I dont understand this question? "
                    },
                    {
                        "username": "nitin482",
                        "content": "How I am getting to know about the index?"
                    },
                    {
                        "username": "BillyThyCoderOFEatrth",
                        "content": "If you want to sharpen your JS skills using array functions below is a hint of an approach I did to solve the question.\\n\\nHint:\\n-unshift()\\n-pop()\\n-push()\\n-shift()"
                    },
                    {
                        "username": "yeah_boi123",
                        "content": "just maintain a prefix array and a suffix array at every index and report the answer as absolute value of prefix[i]- suffix[i]"
                    },
                    {
                        "username": "pddxt_",
                        "content": "Day 99 still dont understand this question "
                    },
                    {
                        "username": "shkhiab87",
                        "content": "class Solution:\\n    def leftRightDifference(self, nums: List[int]) -> List[int]:\\n\\n        n = len(nums)\\n\\n        ls = [0]*n\\n        rs = [0]*n\\n\\n        ans = [0]*n\\n\\n        for i in range(1,n):\\n            ls[i] = ls[i-1] + nums[i-1]\\n\\n        return ls\\n\\n        for j in range(n-1, -1, -1):\\n            if j == n-1:\\n                rs[j] = 0  \\n            else:\\n                rs[j] = rs[j+1] + nums[j+1]\\n\\n        return rs\\n        \\n        for k in range(n):\\n            ans[k] = abs(ls[k]-rs[k])\\n        return ans[k]\\nwhy this is showing wrong output. if anyone find the error please explain "
                    },
                    {
                        "username": "ab-dauletkhan",
                        "content": "no need to return ls and rs, just ans"
                    },
                    {
                        "username": "20s116",
                        "content": "class Solution {\\n    public int[] leftRigthDifference(int[] nums) {\\n        long x=0;\\n        int n=nums.length;\\n        int[] ans = new int[n];\\n        int[] a = new int[n+1];\\n        a[0]=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            a[i+1]=a[i]+nums[i];\\n        }\\n        for(int i=1;i<n+1;i++) ans[i-1]=Math.abs(a[n]-a[i]-a[i-1]);\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Space Efficient\\n```\\nvar leftRigthDifference = function(nums) {\\n    let rightSum = nums.reduce((a,b) => a+b);\\n    let leftSum = 0;\\n    let length = nums.length;\\n    for (let i = 0; i < length; i++) {\\n        rightSum -= nums[i];\\n        let temp = nums[i];\\n        nums[i] = Math.abs(leftSum - rightSum);\\n        leftSum += temp;\\n    }\\n    return nums;\\n};\\n```"
                    },
                    {
                        "username": "sahle123",
                        "content": "This is not the place to be posting solutions. There\\'s a whole tab for that."
                    }
                ]
            }
        ]
    }
]