[
    {
        "title": "Count Prefixes of a Given String",
        "question_content": "You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.\nReturn the number of strings in words that are a prefix of s.\nA prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.\n&nbsp;\nExample 1:\n\nInput: words = [\"a\",\"b\",\"c\",\"ab\",\"bc\",\"abc\"], s = \"abc\"\nOutput: 3\nExplanation:\nThe strings in words which are a prefix of s = \"abc\" are:\n\"a\", \"ab\", and \"abc\".\nThus the number of strings in words which are a prefix of s is 3.\nExample 2:\n\nInput: words = [\"a\",\"a\"], s = \"aa\"\nOutput: 2\nExplanation:\nBoth of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time.\n&nbsp;\nConstraints:\n\n\t1 <= words.length <= 1000\n\t1 <= words[i].length, s.length <= 10\n\twords[i] and s consist of lowercase English letters only.",
        "solutions": [
            {
                "id": 1994777,
                "title": "java-c-python-starts-with",
                "content": "# **Explanation**\\nfor each word `w` in `words` list,\\ncheck if word `w` `startsWith` the string `s`\\n<br>\\n\\n# **Complexity**\\nTime `O(NS)`\\nSpace `O(1)`\\n<br>\\n\\n**Java**\\n```java\\n    public int countPrefixes(String[] words, String s) {\\n        int res = 0;\\n        for (String w : words)\\n            if (s.startsWith(w))\\n                res++;\\n        return res;\\n    }\\n```\\n\\n**C++**\\nTime O(NWS)\\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += s.find(w) < 1;\\n        return res; \\n    }\\n```\\n\\n**C++**\\nSuggested by @mzchen\\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += !s.compare(0, w.size(), w);\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```py\\n    def countPrefixes(self, words, s):\\n        return sum(map(s.startswith, words))\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```java\\n    public int countPrefixes(String[] words, String s) {\\n        int res = 0;\\n        for (String w : words)\\n            if (s.startsWith(w))\\n                res++;\\n        return res;\\n    }\\n```\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += s.find(w) < 1;\\n        return res; \\n    }\\n```\n```cpp\\n    int countPrefixes(vector<string>& words, string s) {\\n        int res = 0;\\n        for (auto& w : words)\\n            res += !s.compare(0, w.size(), w);\\n        return res;\\n    }\\n```\n```py\\n    def countPrefixes(self, words, s):\\n        return sum(map(s.startswith, words))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1994746,
                "title": "c-easy-o-nxs-solution-string",
                "content": "```\\nclass Solution {\\npublic:\\n    //iterate over each words[i] and take the sub-string str from s of size equals to words[i].\\n    //and compare str with words[i] if both are equal increase count by 1.\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int count=0;\\n        for(auto it: words)\\n        {\\n            string str = s.substr(0, it.size());\\n            if(str == it) count++;            \\n        }\\n        return count;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //iterate over each words[i] and take the sub-string str from s of size equals to words[i].\\n    //and compare str with words[i] if both are equal increase count by 1.\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int count=0;\\n        for(auto it: words)\\n        {\\n            string str = s.substr(0, it.size());\\n            if(str == it) count++;            \\n        }\\n        return count;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1997418,
                "title": "java-1-liner",
                "content": "```java\\npublic int countPrefixes(String[] words, String s) {\\n        return (int) Arrays.stream(words).filter(s::startsWith).count();\\n    }\\n```\\n\\nMy repositories with leetcode problems solving - [Java](https://github.com/FLlGHT/algorithms/tree/master/j-algorithms/src/main/java),  [C++](https://github.com/FLlGHT/algorithms/tree/master/c-algorithms/src/main/c%2B%2B)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\npublic int countPrefixes(String[] words, String s) {\\n        return (int) Arrays.stream(words).filter(s::startsWith).count();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2076295,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if (s[:len(i)]==i):\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if (s[:len(i)]==i):\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994712,
                "title": "c-easy-to-understand-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int counter = 0;\\n        \\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(words[i] == s.substr(0,words[i].size()))  \\n                counter++;\\n        }\\n\\n        return counter;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) \\n    {\\n        int counter = 0;\\n        \\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(words[i] == s.substr(0,words[i].size()))  \\n                counter++;\\n        }\\n\\n        return counter;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1999377,
                "title": "count-if",
                "content": "**C++**\\n```cpp\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(begin(words), end(words), [&](const auto &w){ return s.compare(0, w.size(), w) == 0; });\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(begin(words), end(words), [&](const auto &w){ return s.compare(0, w.size(), w) == 0; });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994767,
                "title": "2-lines-c-java",
                "content": "Apply **find()** in case of c++ and **indexof()** in case of java on every word and check if return position is 0.\\nReturn the count of such strings.\\n# C++\\n    int countPrefixes(vector<string>& words, string s, int cnt=0){\\n        for(auto i:words) if(s.find(i)==0) cnt++;\\n        return cnt;\\n    }\\n\\t\\n# Java\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt=0;\\n        for(var i:words) if(s.indexOf(i)==0) cnt++;\\n        return cnt;\\n    }",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "Apply **find()** in case of c++ and **indexof()** in case of java on every word and check if return position is 0.\\nReturn the count of such strings.\\n# C++\\n    int countPrefixes(vector<string>& words, string s, int cnt=0){\\n        for(auto i:words) if(s.find(i)==0) cnt++;\\n        return cnt;\\n    }\\n\\t\\n# Java\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt=0;\\n        for(var i:words) if(s.indexOf(i)==0) cnt++;\\n        return cnt;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1994720,
                "title": "c-basic-string-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt = 0;\\n        int i, j;\\n        for(i=0; i<words.size(); i++){\\n            j = 0;\\n            while(j< words[i].size()){\\n                if(words[i][j] != s[j])\\n                    break;\\n                j++;\\n            }\\n            if(j == words[i].size())\\n                cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt = 0;\\n        int i, j;\\n        for(i=0; i<words.size(); i++){\\n            j = 0;\\n            while(j< words[i].size()){\\n                if(words[i][j] != s[j])\\n                    break;\\n                j++;\\n            }\\n            if(j == words[i].size())\\n                cnt++;\\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3003590,
                "title": "python-simple-solution",
                "content": "# Approach\\nCheck for each word if is prefix of s.\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        res = 0\\n\\n        for word in words:\\n            if s.startswith(word):\\n                res += 1\\n\\n        return res\\n```\\n\\nLike it? Please upvote!",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        res = 0\\n\\n        for word in words:\\n            if s.startswith(word):\\n                res += 1\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2726605,
                "title": "java-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n        public int countPrefixes(String[] words, String s) {\\n        \\n        int result = 0;\\n        for (int i=0; i<=s.length(); i++) {\\n            String x = s.substring(0, i);\\n            for (int j = 0; j<words.length; j++) {\\n                if (x.equals(words[j]))\\n                    result++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n        public int countPrefixes(String[] words, String s) {\\n        \\n        int result = 0;\\n        for (int i=0; i<=s.length(); i++) {\\n            String x = s.substring(0, i);\\n            for (int j = 0; j<words.length; j++) {\\n                if (x.equals(words[j]))\\n                    result++;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2461131,
                "title": "3-different-fastest-approaches-with-javascript-including-one-liner",
                "content": "// approach 1 \\n\\n```\\nvar countPrefixes = function(words, s) {\\n     let counter = 0\\n     for (let i = 0; i < words.length; i++) {\\n         if (words[i]) === s.slice(0,words[i].length)) {\\n            counter++\\n        }\\n     }\\n    return counter\\n};\\n```\\n\\n// one liner approach - 2\\n\\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter((word) => word === s.slice(0,word.length)).length;\\n};\\n```\\n\\n// approach 3\\n\\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter(data=> s.indexOf(data) == 0).length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n     let counter = 0\\n     for (let i = 0; i < words.length; i++) {\\n         if (words[i]) === s.slice(0,words[i].length)) {\\n            counter++\\n        }\\n     }\\n    return counter\\n};\\n```\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter((word) => word === s.slice(0,word.length)).length;\\n};\\n```\n```\\nvar countPrefixes = function(words, s) {\\n    return words.filter(data=> s.indexOf(data) == 0).length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2084421,
                "title": "straightforward-javascript-solution-faster-than-96-67",
                "content": "```\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for (let word of words) {\\n        if (s.startsWith(word)) count++\\n    } return count;\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/9ebdaad0-0ac6-40e8-98da-26c37a70fab5_1653758537.70002.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for (let word of words) {\\n        if (s.startsWith(word)) count++\\n    } return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2008421,
                "title": "js-easiest-way",
                "content": "```\\nvar countPrefixes = function(words, s) {\\n  \\n    let cont = 0;\\n    \\n    for(i = 0; i < words.length; i++){\\n        for(j = 1; j <= s.length; j++){\\n            if(words[i] == s.slice(0, j)){\\n                cont++;\\n            }\\n        }        \\n    }\\n     return cont;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n  \\n    let cont = 0;\\n    \\n    for(i = 0; i < words.length; i++){\\n        for(j = 1; j <= s.length; j++){\\n            if(words[i] == s.slice(0, j)){\\n                cont++;\\n            }\\n        }        \\n    }\\n     return cont;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994686,
                "title": "python-straightforward-with-startswith",
                "content": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n\\n    c = 0\\n    for w in words:\\n        if s.startswith(w):\\n            c += 1\\n\\n    return c\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n\\n    c = 0\\n    for w in words:\\n        if s.startswith(w):\\n            c += 1\\n\\n    return c\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3955799,
                "title": "java-100-beats-2-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n\\n//                          Another solution\\n\\n        // int count = 0;\\n        // int low = 0;\\n        // for(int i=1; i<=s.length(); i++){\\n        //    for(int j=0; j<words.length; j++){\\n        //        if(words[j].equals(s.substring(low,i))){\\n        //           count++;\\n        //        } \\n        //    }\\n        // }\\n        // return count;\\n    } \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n\\n//                          Another solution\\n\\n        // int count = 0;\\n        // int low = 0;\\n        // for(int i=1; i<=s.length(); i++){\\n        //    for(int j=0; j<words.length; j++){\\n        //        if(words[j].equals(s.substring(low,i))){\\n        //           count++;\\n        //        } \\n        //    }\\n        // }\\n        // return count;\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994877,
                "title": "c-simple-solution-using-substr",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int cnt = 0;\\n        for(int i=0; i<n; i++) {\\n            string str = words[i];\\n            if(str == s.substr(0, str.size())) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int cnt = 0;\\n        for(int i=0; i<n; i++) {\\n            string str = words[i];\\n            if(str == s.substr(0, str.size())) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994683,
                "title": "java-easy-appraoch",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        for(int k = 0; k < words.length; k++){\\n            if(words[k].length() > s.length()){\\n                continue;\\n            }\\n            \\n            while(i < words[k].length() && words[k].charAt(i) == s.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            if(i == words[k].length()){\\n                count++;\\n            }\\n            i = 0;\\n            j = 0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        for(int k = 0; k < words.length; k++){\\n            if(words[k].length() > s.length()){\\n                continue;\\n            }\\n            \\n            while(i < words[k].length() && words[k].charAt(i) == s.charAt(j)){\\n                i++;\\n                j++;\\n            }\\n            if(i == words[k].length()){\\n                count++;\\n            }\\n            i = 0;\\n            j = 0;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994652,
                "title": "best-solution-using-set-easy-to-understand",
                "content": "Approach\\nStep 1 : Define a map and empty stirng\\nStep2 : insert prefixes in map\\nStep3 : check how many array of words element is present in map\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> mp;\\n        string st = \"\";\\n        for(int i=0;i<s.length();i++){\\n            st += s[i];\\n            mp.insert(st);\\n        }\\n        int k=0;\\n        for(auto it:words){\\n            if(mp.count(it)){\\n                k++;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```\\n\\n# ****PLEASE UPVOTE",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> mp;\\n        string st = \"\";\\n        for(int i=0;i<s.length();i++){\\n            st += s[i];\\n            mp.insert(st);\\n        }\\n        int k=0;\\n        for(auto it:words){\\n            if(mp.count(it)){\\n                k++;\\n            }\\n        }\\n        return k;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2864115,
                "title": "c-3-line-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\t//time:O(n), space: O(1)\\n\\t\\tint countPrefixes(vector<string>& words, string s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(auto wd : words)\\n\\t\\t\\t\\tif(s.find(wd) < 1) count++; //if first occurrence of sub-string is in the specified string\\n\\t\\t\\treturn count;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\t//time:O(n), space: O(1)\\n\\t\\tint countPrefixes(vector<string>& words, string s) {\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(auto wd : words)\\n\\t\\t\\t\\tif(s.find(wd) < 1) count++; //if first occurrence of sub-string is in the specified string\\n\\t\\t\\treturn count;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3583196,
                "title": "one-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n       return sum(1 for x in words if s.startswith(x))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n       return sum(1 for x in words if s.startswith(x))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2965007,
                "title": "python3-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([word for word in words if s.startswith(word)])\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/7ded423d-5651-41aa-8a7e-b8343efb856e_1672271463.1473987.png)\\n![image.png](https://assets.leetcode.com/users/images/65605e1b-564a-4ea3-8bf0-acad0d5862ea_1672271490.074425.png)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([word for word in words if s.startswith(word)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2938964,
                "title": "easy-and-fast-c-solution",
                "content": "# Approach\\nUsing **s.find(words[i])** function which returns the index of words[i] if it is present in the string s , and to check whether words[i] occurs as a prefix use **s.find(words[i])==0**  ( since prefix always occurs at index 0).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n      int countPrefix = 0;\\n\\n      for(int i=0;i<words.size();++i){\\n          if(s.find(words[i])!=string::npos && s.find(words[i])==0){\\n              countPrefix++;\\n          }\\n      }  \\n      return countPrefix;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n      int countPrefix = 0;\\n\\n      for(int i=0;i<words.size();++i){\\n          if(s.find(words[i])!=string::npos && s.find(words[i])==0){\\n              countPrefix++;\\n          }\\n      }  \\n      return countPrefix;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2768430,
                "title": "easy-o-n-maintain-a-set",
                "content": "We maintian a set called seen and add all the prefixes in the set and then simply check if the word in word list is present in the set or not\\n\\n***Leave an upvote if this helps!!!***\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        seen=set()\\n        count=0\\n        for i in range(1,len(s)+1):\\n            seen.add(s[:i])\\n        for i in words:\\n            if i in seen:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        seen=set()\\n        count=0\\n        for i in range(1,len(s)+1):\\n            seen.add(s[:i])\\n        for i in words:\\n            if i in seen:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2048968,
                "title": "easy-python-solution",
                "content": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in words:\\n            l=len(i)\\n            if i==s[:l]:\\n                c+=1\\n        return c\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in words:\\n            l=len(i)\\n            if i==s[:l]:\\n                c+=1\\n        return c\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1995252,
                "title": "c-online-with-std-count-if-and-string-rfind",
                "content": "This [stackover flow post](https://stackoverflow.com/questions/1878001/how-do-i-check-if-a-c-stdstring-starts-with-a-certain-string-and-convert-a) descrives how to you ```string::rfind``` to implement ```startsWith```, which leads to following over all code to solve to problem.\\n\\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) { return s.rfind(w, 0) == 0; });\\n}\\n```\\n\\nOne might was well could use ```string::compare``` to solve the problem as well:\\n\\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) {\\n        return s.compare(0, size(w), w) == 0;\\n    });\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```string::rfind```\n```startsWith```\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) { return s.rfind(w, 0) == 0; });\\n}\\n```\n```string::compare```\n```\\nint countPrefixes(const vector<string>& ws, const string& s) {\\n    return count_if(begin(ws), end(ws), [&](const string& w) {\\n        return s.compare(0, size(w), w) == 0;\\n    });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995152,
                "title": "c-5-lines-code-very-easy-o-n-solution",
                "content": "```\\nint countPrefixes(vector<string>& words, string s) {\\n       int c=0;\\n       for(string str:words){\\n            int len=str.length();\\n           string subs=s.substr(0,len);\\n           if(str==subs){\\n                c++;\\n           }\\n       } \\n       return c;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Iterator"
                ],
                "code": "```\\nint countPrefixes(vector<string>& words, string s) {\\n       int c=0;\\n       for(string str:words){\\n            int len=str.length();\\n           string subs=s.substr(0,len);\\n           if(str==subs){\\n                c++;\\n           }\\n       } \\n       return c;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994752,
                "title": "java",
                "content": "int ans=0;\\n        HashMap<String,Integer> l=new HashMap<>();\\n        for(String str:words)\\n            l.put(str,l.getOrDefault(str,0)+1);\\n        for(int i=0;i<=s.length();i++)\\n        {\\n            String st=s.substring(0,i);\\n            if(l.containsKey(st))\\n                ans=ans+l.get(st);\\n        }\\n        return ans;",
                "solutionTags": [
                    "Java"
                ],
                "code": "int ans=0;\\n        HashMap<String,Integer> l=new HashMap<>();\\n        for(String str:words)\\n            l.put(str,l.getOrDefault(str,0)+1);\\n        for(int i=0;i<=s.length();i++)\\n        {\\n            String st=s.substring(0,i);\\n            if(l.containsKey(st))\\n                ans=ans+l.get(st);\\n        }\\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 3827383,
                "title": "python-one-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([i for i in words if s.startswith(i)])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return len([i for i in words if s.startswith(i)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534504,
                "title": "simple-easy-100-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3450978,
                "title": "easy-to-understand",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n        if it starts with element present in array count++;\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3443668,
                "title": "simple-using-substr-c",
                "content": "`Please Upvote If you Like the Solution !!!`\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans = 0;\\n        for(auto &w : words) {\\n            int n = w.size();\\n            if(s.substr(0,n) == w) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans = 0;\\n        for(auto &w : words) {\\n            int n = w.size();\\n            if(s.substr(0,n) == w) ans++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362962,
                "title": "simple-java-3-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i =0; i<words.length; i++){\\n            if(s.startsWith(words[i])) count++;\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i =0; i<words.length; i++){\\n            if(s.startsWith(words[i])) count++;\\n        }\\n        return count;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3337621,
                "title": "esay-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        while(s.length()!=0){\\n        for(String y:words){\\n             if(y.equals(s))\\n             c++;\\n        }\\n        s=s.substring(0,s.length()-1); //Decreasing the length by 1\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        while(s.length()!=0){\\n        for(String y:words){\\n             if(y.equals(s))\\n             c++;\\n        }\\n        s=s.substring(0,s.length()-1); //Decreasing the length by 1\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3278881,
                "title": "c-easy-simple",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for (string word : words)\\n        {\\n            if(s.find(word) == 0) \\n            { \\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for (string word : words)\\n        {\\n            if(s.find(word) == 0) \\n            { \\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176731,
                "title": "simple-c-code-easy-beats-100",
                "content": "\\n\\nRuntime: Beats 100%\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto j:words){\\n            int b=1;\\n            for(int i=0;i<j.size();i++){\\n                if(j[i]!=s[i]){\\n                    b=0;\\n                    break;\\n                }\\n            }\\n            if(b==1){\\n                    c++;\\n                }\\n        }\\n        return c;\\n    }\\n};\\n```\\nHope you liked the implementation of the code, if you like it feel free to upvote \\uD83D\\uDC4D",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto j:words){\\n            int b=1;\\n            for(int i=0;i<j.size();i++){\\n                if(j[i]!=s[i]){\\n                    b=0;\\n                    break;\\n                }\\n            }\\n            if(b==1){\\n                    c++;\\n                }\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174986,
                "title": "c-o-n-simple-approach-using-string-s-find-func",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2868501,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s)\\n    {\\n        string w = \"\" ;\\n        int count = 0 ;\\n        for(int i=0 ; i<words.size() ; i++)\\n        {\\n            w = words[i] ;\\n            int j ;\\n            for(j=0 ; j<w.size() ; j++)\\n            {\\n                if(w[j]!=s[j])\\n                {\\n                    break ;\\n                }\\n            }\\n            if(j==w.size())\\n            {\\n                count++ ;\\n            }\\n        }   \\n        return count ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s)\\n    {\\n        string w = \"\" ;\\n        int count = 0 ;\\n        for(int i=0 ; i<words.size() ; i++)\\n        {\\n            w = words[i] ;\\n            int j ;\\n            for(j=0 ; j<w.size() ; j++)\\n            {\\n                if(w[j]!=s[j])\\n                {\\n                    break ;\\n                }\\n            }\\n            if(j==w.size())\\n            {\\n                count++ ;\\n            }\\n        }   \\n        return count ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2701416,
                "title": "c-easy-approach-93-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) { \\n        int ans = 0;\\n        for(int i = 0 ; i<words.size() ; i++){\\n            string element = words[i];\\n            int len = element.length();\\n            \\n            for(int j = 0 ; j<len ; j++){\\n               \\n                if(element[j] != s[j]){\\n                    break;      \\n                }     \\n                if(j==len-1){\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) { \\n        int ans = 0;\\n        for(int i = 0 ; i<words.size() ; i++){\\n            string element = words[i];\\n            int len = element.length();\\n            \\n            for(int j = 0 ; j<len ; j++){\\n               \\n                if(element[j] != s[j]){\\n                    break;      \\n                }     \\n                if(j==len-1){\\n                    ans++;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651729,
                "title": "startswith-in-java-java",
                "content": "```\\nif(you like)\\n\\tplease upvote;\\n```\\n![image.png](https://assets.leetcode.com/users/images/c46bfd5c-cd60-4a0f-a3af-d56e67ae236a_1664727810.0896583.png)\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt = 0;\\n        for(String str:words)        \\n        {\\n            if(s.startsWith(str) == true)\\n                cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nif(you like)\\n\\tplease upvote;\\n```\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int cnt = 0;\\n        for(String str:words)        \\n        {\\n            if(s.startsWith(str) == true)\\n                cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2649512,
                "title": "python-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\t\\tres = 0\\n\\t\\t\\tfor word in words:\\n\\t\\t\\t\\tif s[:len(word)] == word: res += 1\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\t\\tres = 0\\n\\t\\t\\tfor word in words:\\n\\t\\t\\t\\tif s[:len(word)] == word: res += 1\\n\\t\\t\\treturn res",
                "codeTag": "Java"
            },
            {
                "id": 2566238,
                "title": "python-straight-forward-one-liner",
                "content": "Here is what I did:\\n\\n```python\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2229509,
                "title": "javascript-straightforward-solution-simple-understandable-fast",
                "content": "**Runtime: 68 ms, faster than 91.85% of JavaScript online submissions for Count Prefixes of a Given String.\\nMemory Usage: 43 MB, less than 40.00% of JavaScript online submissions for Count Prefixes of a Given String.**\\n\\n```\\nvar countPrefixes = function(words, s) {\\n    let count = 0\\n    for (i of words) {\\n        if (s.startsWith(i)) {\\n            count++\\n        }\\n    } \\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {\\n    let count = 0\\n    for (i of words) {\\n        if (s.startsWith(i)) {\\n            count++\\n        }\\n    } \\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2007119,
                "title": "c-linq-one-line",
                "content": "```\\n\\tpublic int CountPrefixes(string[] words, string s) \\n        => words.Count(w => s.StartsWith(w));    \\n```",
                "solutionTags": [],
                "code": "```\\n\\tpublic int CountPrefixes(string[] words, string s) \\n        => words.Count(w => s.StartsWith(w));    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1997642,
                "title": "rust-solutions",
                "content": "1. Simle use of `starts_with`:\\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words.iter().filter(|w| s.starts_with(w.as_str())).count() as _\\n    }\\n}\\n```\\n2. Slice comparison\\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.as_str() == &s[..w.len()])\\n            .count() as _\\n    }\\n}\\n```\\n3. Functional solution with `zip`:\\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.chars().zip(s.chars()).all(|(a, b)| a == b))\\n            .count() as _\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words.iter().filter(|w| s.starts_with(w.as_str())).count() as _\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.as_str() == &s[..w.len()])\\n            .count() as _\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn count_prefixes(words: Vec<String>, s: String) -> i32 {\\n        words\\n            .iter()\\n            .filter(|w| w.len() <= s.len() && w.chars().zip(s.chars()).all(|(a, b)| a == b))\\n            .count() as _\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995303,
                "title": "c-very-easy-to-understand-solution-using-unordered-set",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> st;\\n        int size = s.size();\\n        for(int i = 0;i<size;i++){\\n            string temp = \"\";\\n            for(int j = 0;j<=i;j++){\\n                temp+=s[j];\\n            }\\n            st.insert(temp);\\n        }\\n        int ans = 0;\\n        for(int i = 0;i<words.size();i++){\\n            if(st.find(words[i])!=st.end())\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        unordered_set<string> st;\\n        int size = s.size();\\n        for(int i = 0;i<size;i++){\\n            string temp = \"\";\\n            for(int j = 0;j<=i;j++){\\n                temp+=s[j];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1994612,
                "title": "c-easy-to-understand-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto word:words)\\n        {\\n                string str=word;\\n                int l=word.size();\\n                string s2=s.substr(0,l);\\n                if(s2==word)\\n                    c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c=0;\\n        for(auto word:words)\\n        {\\n                string str=word;\\n                int l=word.size();\\n                string s2=s.substr(0,l);\\n                if(s2==word)\\n                    c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994558,
                "title": "java-simple",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n    \\n       int preFixCount=0;\\n       for(String curr:words){\\n           int i=0;\\n           \\n           if(curr.length()>s.length())     // if current  string length greater than s length invalid prefix\\n           continue; \\n           int j;\\n           for(j=0;j<curr.length();j++,i++){\\n               if(curr.charAt(j)==s.charAt(i))\\n               continue;\\n               else \\n               break;\\n                   \\n           }\\n           if(j==curr.length())             // if all character matches than mark valid \\n           preFixCount++;\\n       }\\n     return preFixCount;     \\n    }\\n   \\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n    \\n       int preFixCount=0;\\n       for(String curr:words){\\n           int i=0;\\n           \\n           if(curr.length()>s.length())     // if current  string length greater than s length invalid prefix\\n           continue; \\n           int j;\\n           for(j=0;j<curr.length();j++,i++){\\n               if(curr.charAt(j)==s.charAt(i))\\n               continue;\\n               else \\n               break;\\n                   \\n           }",
                "codeTag": "Java"
            },
            {
                "id": 3972694,
                "title": "javascript-easy-one-line-solution",
                "content": "# Complexity\\n- Time complexity: O(n*m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function (words, s) {\\n  return words.filter((item) => s.startsWith(item)).length\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function (words, s) {\\n  return words.filter((item) => s.startsWith(item)).length\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917786,
                "title": "go-easy",
                "content": "\\n\\n# Code\\n```\\nfunc countPrefixes(words []string, s string) int {\\n\\tvar count int\\n\\n\\tfor _, v := range words {\\n\\t\\tif strings.HasPrefix(s, v) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\n\\treturn count\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc countPrefixes(words []string, s string) int {\\n\\tvar count int\\n\\n\\tfor _, v := range words {\\n\\t\\tif strings.HasPrefix(s, v) {\\n\\t\\t\\tcount++\\n\\t\\t}\\n\\t}\\n\\n\\treturn count\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3297434,
                "title": "count-prefixes-of-a-given-string-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n*m)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int i, j, count=0;\\n        string str=\"\";\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            str += s[i];\\n            for(j=0 ; j<words.size() ; j++)\\n            {\\n                if(str==words[j])\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int i, j, count=0;\\n        string str=\"\";\\n        for(i=0 ; i<s.length() ; i++)\\n        {\\n            str += s[i];\\n            for(j=0 ; j<words.size() ; j++)\\n            {\\n                if(str==words[j])\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249714,
                "title": "pyhton3-oneliner-using-startswith",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if s.startswith(i):\\n                count += 1\\n        return count\\n\\n        #One Liner\\n\\n        return sum(1 for i in words if s.startswith(i))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if s.startswith(i):\\n                count += 1\\n        return count\\n\\n        #One Liner\\n\\n        return sum(1 for i in words if s.startswith(i))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3149760,
                "title": "pooping-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nPoop the loop\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c = 0\\n        for i in words:\\n            if i in s[:len(i)]:\\n                c+=1\\n        return c \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c = 0\\n        for i in words:\\n            if i in s[:len(i)]:\\n                c+=1\\n        return c \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114743,
                "title": "count-prefixes-of-a-given-string",
                "content": "```\\nint count=0;\\n        for(auto it:words){\\n            string str=s.substr(0,it.size());\\n            if(str==it)\\n            count++;\\n        }\\n        \\n        return count;\\n\\t\\t\\n```",
                "solutionTags": [
                    "C",
                    "Iterator"
                ],
                "code": "```\\nint count=0;\\n        for(auto it:words){\\n            string str=s.substr(0,it.size());\\n            if(str==it)\\n            count++;\\n        }\\n        \\n        return count;\\n\\t\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2804300,
                "title": "count-prefixes-of-a-given-string-solution-java",
                "content": "class Solution {\\n  public int countPrefixes(String[] words, String s) {\\n    return (int) Arrays.stream(words).filter(word -> s.startsWith(word)).count();\\n  }\\n}\\n",
                "solutionTags": [
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\n  public int countPrefixes(String[] words, String s) {\\n    return (int) Arrays.stream(words).filter(word -> s.startsWith(word)).count();\\n  }",
                "codeTag": "Java"
            },
            {
                "id": 2672445,
                "title": "java-solution-startswith-or-indexof",
                "content": "### Please Upvote :D\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        \\n        for (String str : words) {\\n            // if (s.indexOf(str) == 0) count++;\\n            if (s.startsWith(str)) count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        \\n        for (String str : words) {\\n            // if (s.indexOf(str) == 0) count++;\\n            if (s.startsWith(str)) count++;\\n        }\\n        \\n        return count;\\n    }\\n}\\n\\n// TC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651727,
                "title": "c-short-97-faster-than-all",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n     int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(auto word:words){\\n            bool isPrefix = true;\\n            for(int i=0; i<word.length(); i++){\\n                if(word[i] != s[i]){\\n                    isPrefix = false;\\n                    break;\\n                }\\n            }\\n            if(isPrefix) count++;\\n        }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(auto word:words){\\n            bool isPrefix = true;\\n            for(int i=0; i<word.length(); i++){\\n                if(word[i] != s[i]){\\n                    isPrefix = false;\\n                    break;\\n                }\\n            }\\n            if(isPrefix) count++;\\n        }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2626764,
                "title": "python-o-n",
                "content": "Time Complexcity O(N)\\nspace Complexcity O(1)\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            n=len(word)\\n            if s[0:n]==word:\\n                count+=1\\n        return count\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            n=len(word)\\n            if s[0:n]==word:\\n                count+=1\\n        return count\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2612849,
                "title": "java-soln",
                "content": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        for(int i=0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n             count++;\\n         }\\n        } \\n        return count;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        for(int i=0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n             count++;\\n         }",
                "codeTag": "Java"
            },
            {
                "id": 2601418,
                "title": "javascript-easy-solution",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i=0; i<words.length; i++) {\\n        if(words[i] === s.slice(0, words[i].length)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i=0; i<words.length; i++) {\\n        if(words[i] === s.slice(0, words[i].length)) {\\n            count++;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2561291,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ct=0;\\n        for(string&word:words){\\n          bool flag=true;\\n          if(word.length()<=s.length()){\\n             for(int i=0; i<min(word.length(),s.length()); ++i){\\n                if(word[i]!=s[i]){\\n                   flag=false;\\n                   break;\\n                }\\n             }\\n            flag?ct++:ct+=0;\\n          }\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ct=0;\\n        for(string&word:words){\\n          bool flag=true;\\n          if(word.length()<=s.length()){\\n             for(int i=0; i<min(word.length(),s.length()); ++i){\\n                if(word[i]!=s[i]){\\n                   flag=false;\\n                   break;\\n                }\\n             }\\n            flag?ct++:ct+=0;\\n          }\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2545761,
                "title": "count-prefixes-of-a-given-string",
                "content": "python3 sol\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count= 0 \\n        for i in words:\\n            if i ==s:\\n                count+=1\\n            else:\\n                if i ==s[:len(i)]:\\n                    count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count= 0 \\n        for i in words:\\n            if i ==s:\\n                count+=1\\n            else:\\n                if i ==s[:len(i)]:\\n                    count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2502759,
                "title": "easy-fast-short-solution",
                "content": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```\\n```\\n        int count = 0;\\n        for(String temp: words)\\n            if (s.indexOf(temp) == 0)\\n                count++;\\n        return count;",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2500078,
                "title": "c-solution-count-prefixes-of-a-given-string",
                "content": "```\\nclass Solution {\\nprivate:\\n    int linear_search(vector<string>& words , string prefix){\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++){\\n            if(prefix == words[i])\\n                count++;\\n        }\\n        return count;\\n    }\\n    \\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        vector<string> prefix;\\n        int count = 0;\\n        \\n        for(int i = 1 ; i <= s.length() ; i++){\\n            prefix.push_back(s.substr(0,i));\\n        }\\n        \\n        \\n        for(int i = 0 ; i < prefix.size() ; i++){\\n            count = count + linear_search(words , prefix[i]);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    int linear_search(vector<string>& words , string prefix){\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++){\\n            if(prefix == words[i])\\n                count++;\\n        }\\n        return count;\\n    }\\n    \\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        vector<string> prefix;\\n        int count = 0;\\n        \\n        for(int i = 1 ; i <= s.length() ; i++){\\n            prefix.push_back(s.substr(0,i));\\n        }\\n        \\n        \\n        for(int i = 0 ; i < prefix.size() ; i++){\\n            count = count + linear_search(words , prefix[i]);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2498493,
                "title": "java-solution-easy-100",
                "content": "public static int prefixcount(String[] words, String s) {\\n        int out = 0;\\n\\n        for (int i = 0; i < words.length; i++) {\\n            if (s.startsWith(words[i])) {\\n                out++;\\n            }\\n        }\\n        return out;",
                "solutionTags": [],
                "code": "public static int prefixcount(String[] words, String s) {\\n        int out = 0;\\n\\n        for (int i = 0; i < words.length; i++) {\\n            if (s.startsWith(words[i])) {\\n                out++;\\n            }\\n        }\\n        return out;",
                "codeTag": "Unknown"
            },
            {
                "id": 2488556,
                "title": "runtime-22-ms-faster-than-18-45-of-c-online-submissions-for-count-prefixes-of-a-given-string",
                "content": "\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n}\\n//   upvote if you like\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n    int count = 0;\\n    for (int i = 0; i < words.size(); i++)\\n    {\\n        if (s.find(words[i])==0)\\n        {\\n            count++;\\n        }\\n    }\\n    return count;\\n}\\n//   upvote if you like\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2471556,
                "title": "java-solution-0ms-100-faster-easy-to-understand-linear-search-o-n",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] arr, String s) {\\n        int cnt = 0;\\n        for (String str : arr) {\\n            if (s.startsWith(str)) cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] arr, String s) {\\n        int cnt = 0;\\n        for (String str : arr) {\\n            if (s.startsWith(str)) cnt++;\\n        }\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2402405,
                "title": "easy-and-clear-solution-python3",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            if word == s[:len(word)]:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for word in words:\\n            if word == s[:len(word)]:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2346554,
                "title": "c-brute-force-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string sk;\\n        bool istrue;\\n        int count=0;\\n        for(int i=0;i<words.size();i++){\\n            sk=words[i];\\n            for(int j=0;j<sk.length();j++){\\n                if(sk[j]!=s[j]){\\n                    istrue=false; \\n                    break;\\n                }\\n                else{\\n                     istrue=true;\\n                }\\n            }\\n            \\n            if(istrue==true){\\n                cout<<sk<<endl;\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string sk;\\n        bool istrue;\\n        int count=0;\\n        for(int i=0;i<words.size();i++){\\n            sk=words[i];\\n            for(int j=0;j<sk.length();j++){\\n                if(sk[j]!=s[j]){\\n                    istrue=false; \\n                    break;\\n                }\\n                else{\\n                     istrue=true;\\n                }\\n            }\\n            \\n            if(istrue==true){\\n                cout<<sk<<endl;\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2326109,
                "title": "one-liner-python",
                "content": "```\\nreturn sum([1 for word in words if s.startswith(word)])\\n```\\n**Please upvote if you want to see more one liners and simple solutions**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nreturn sum([1 for word in words if s.startswith(word)])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2308148,
                "title": "c-solution-easy-to-understand-one-line",
                "content": "```C#\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) => words.Count(x => s.StartsWith(x));\\n}\\n```",
                "solutionTags": [],
                "code": "```C#\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) => words.Count(x => s.StartsWith(x));\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2303504,
                "title": "cpp-trie-solution",
                "content": "```\\n class Trie{\\n        public:\\n        char c;\\n        Trie* ch[26];\\n        int we;\\n        Trie(char d){\\n            c=d;\\n            for(int i=0;i<26;i++) ch[i]=NULL;\\n            we=0;\\n        }\\n    };\\n    Trie* r=new Trie(\\'0\\');\\n    \\n    void add(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            h->ch[ind]=new Trie(s[i]);\\n            h=h->ch[ind];\\n        }\\n        h->we=1;\\n    }\\n    \\n    bool check(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            if(h->ch[ind]==NULL) return 0;\\n            h=h->ch[ind];\\n        }\\n        return 1;\\n    }\\n    int countPrefixes(vector<string>& words, string s) {\\n        add(s);\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            if(check(words[i])){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Trie"
                ],
                "code": "```\\n class Trie{\\n        public:\\n        char c;\\n        Trie* ch[26];\\n        int we;\\n        Trie(char d){\\n            c=d;\\n            for(int i=0;i<26;i++) ch[i]=NULL;\\n            we=0;\\n        }\\n    };\\n    Trie* r=new Trie(\\'0\\');\\n    \\n    void add(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            h->ch[ind]=new Trie(s[i]);\\n            h=h->ch[ind];\\n        }\\n        h->we=1;\\n    }\\n    \\n    bool check(string s){\\n        Trie* h=r;\\n        for(int i=0;i<s.size();i++){\\n            int ind=s[i]-\\'a\\';\\n            if(h->ch[ind]==NULL) return 0;\\n            h=h->ch[ind];\\n        }\\n        return 1;\\n    }\\n    int countPrefixes(vector<string>& words, string s) {\\n        add(s);\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            if(check(words[i])){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2200749,
                "title": "python-straightforward",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        countPrefixe = 0\\n        for word in words:\\n            if word in s and word == s[:len(word)]:\\n                countPrefixe += 1\\n        return countPrefixe\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        countPrefixe = 0\\n        for word in words:\\n            if word in s and word == s[:len(word)]:\\n                countPrefixe += 1\\n        return countPrefixe\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2197461,
                "title": "javascript-solution-with-foreach",
                "content": "```\\nvar countPrefixes = function(words, s) {    \\n\\n    let count = 0; \\n\\t\\n    words.forEach((word) => {\\n        if( s.startsWith(word) ) \\n\\t\\t\\tcount++;\\n    });\\n    \\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countPrefixes = function(words, s) {    \\n\\n    let count = 0; \\n\\t\\n    words.forEach((word) => {\\n        if( s.startsWith(word) ) \\n\\t\\t\\tcount++;\\n    });\\n    \\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2191967,
                "title": "my-easy-to-understand-2ms-java-code",
                "content": "```\\nclass Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c=0;\\n        for(String i:words)\\n        {\\n            if(s.startsWith(i))\\n            {\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c=0;\\n        for(String i:words)\\n        {\\n            if(s.startsWith(i))\\n            {\\n                c++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2181067,
                "title": "python-trie-for-fast-queries",
                "content": "Prefix Tree aka Trie might be an overkill for this easy problem, but when you are not allowed to use startswith and need to reduce time complexity of multiple queries it\\'s a good option - linear scan of path to get sum of all words on the path.\\n\\n```\\nclass Node(object):\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n        self.count = 0\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        root = Node()\\n        \\n        # build a trie\\n        for w in words:\\n            node = root\\n            for c in w:\\n                if c not in node.children:\\n                    node.children[c] = Node()\\n                node = node.children[c]\\n            node.count = 1 if not node.is_word else node.count + 1\\n            node.is_word = True\\n        \\n        # count prefix-words in s\\n        node = root\\n\\n        res = 0\\n        for c in s:\\n            if c in node.children:\\n                node = node.children[c]\\n                res += node.count if node.is_word else 0\\n            else:\\n                break\\n                \\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Trie"
                ],
                "code": "```\\nclass Node(object):\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n        self.count = 0\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        root = Node()\\n        \\n        # build a trie\\n        for w in words:\\n            node = root\\n            for c in w:\\n                if c not in node.children:\\n                    node.children[c] = Node()\\n                node = node.children[c]\\n            node.count = 1 if not node.is_word else node.count + 1\\n            node.is_word = True\\n        \\n        # count prefix-words in s\\n        node = root\\n\\n        res = 0\\n        for c in s:\\n            if c in node.children:\\n                node = node.children[c]\\n                res += node.count if node.is_word else 0\\n            else:\\n                break\\n                \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2147734,
                "title": "c-simple-solution",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans=0;\\n        for(auto w : words)\\n        {\\n            int count=0;\\n            for(int i=0;i<w.length();i++)\\n            {\\n               if(w[i]==s[i])\\n                   count++; \\n            }\\n            if(count==w.length())\\n                ans++;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans=0;\\n        for(auto w : words)\\n        {\\n            int count=0;\\n            for(int i=0;i<w.length();i++)\\n            {\\n               if(w[i]==s[i])\\n                   count++; \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2143292,
                "title": "c-very-easy-solution-using-sets",
                "content": "```\\nint countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        set<string>ss;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            ss.insert(s.substr(0,i+1));\\n        }\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(ss.find(words[i])!=ss.end())\\n                count++;\\n        }\\n        return count;\\n    }",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nint countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        set<string>ss;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            ss.insert(s.substr(0,i+1));\\n        }\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(ss.find(words[i])!=ss.end())\\n                count++;\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2140038,
                "title": "c-easy-traversal",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n       unordered_map<string,int>harsh;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            harsh[s.substr(0,i+1)]++;\\n        }\\n        int cnt=0;\\n        for(auto val:words)\\n        {\\n            if(harsh.find(val) != harsh.end())\\n            {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n       unordered_map<string,int>harsh;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            harsh[s.substr(0,i+1)]++;\\n        }\\n        int cnt=0;\\n        for(auto val:words)\\n        {\\n            if(harsh.find(val) != harsh.end())\\n            {\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2132698,
                "title": "easy-java-solution-faster-100",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int sum = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                sum++;\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int sum = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                sum++;\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2098364,
                "title": "python-easy-beginer-friendly",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, a: List[str], s: str) -> int:\\n        r=0\\n        for i in a:\\n            if len(i)<=len(s) and i==s[:len(i)]:\\n                r+=1\\n        return r\\n```\\n![image](https://assets.leetcode.com/users/images/c570329e-69a5-4674-aff5-3562d8a29ea8_1654088247.904313.jpeg)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, a: List[str], s: str) -> int:\\n        r=0\\n        for i in a:\\n            if len(i)<=len(s) and i==s[:len(i)]:\\n                r+=1\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2070262,
                "title": "fastest-java-solution-0ms",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c = 0;\\n        for(String word:words)\\n            if(s.startsWith(word))\\n                c++;\\n        return c;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c = 0;\\n        for(String word:words)\\n            if(s.startsWith(word))\\n                c++;\\n        return c;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2048287,
                "title": "python3-two-1-liners",
                "content": "class Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        return sum(word == s[:len(word)] for word in words)\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\n        return sum(s.find(word) == 0 for word in words)",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        return sum(word == s[:len(word)] for word in words)\\n\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n\\t\\n        return sum(s.find(word) == 0 for word in words)",
                "codeTag": "Java"
            },
            {
                "id": 2037971,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int res=0;\\n        for(int i=0;i<w.size();i++)\\n        {\\n            int flag=0;\\n            for(int j=0;j<w[i].size();j++)\\n            {\\n                if(w[i][j]!=s[j])\\n                    flag=1;\\n            }\\n            if (flag==0)\\n                res++;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int res=0;\\n        for(int i=0;i<w.size();i++)\\n        {\\n            int flag=0;\\n            for(int j=0;j<w[i].size();j++)\\n            {\\n                if(w[i][j]!=s[j])\\n                    flag=1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2022531,
                "title": "python3-one-line-solution",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([1 for w in words if w == s[:len(w)]])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([1 for w in words if w == s[:len(w)]])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2014637,
                "title": "3ms-beats-95-c-submissions-easytounderstand",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int ans=0;\\n        int n=s.size();\\n        for(auto it:a){\\n            int m=it.size();\\n            if(m<=n){\\n                int f=1;\\n                int k=0;\\n                for(auto i:it)\\n                    if(i!=s[k++])\\n                        {\\n                            f=0;\\n                            break;\\n                        }\\n                if(f)ans++;\\n            }\\n        }\\n     return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int ans=0;\\n        int n=s.size();\\n        for(auto it:a){\\n            int m=it.size();\\n            if(m<=n){\\n                int f=1;\\n                int k=0;\\n                for(auto i:it)\\n                    if(i!=s[k++])\\n                        {\\n                            f=0;\\n                            break;\\n                        }\\n                if(f)ans++;\\n            }\\n        }\\n     return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2013095,
                "title": "runtime-12-ms-c-solution",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string str=\"\";\\n        int count=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            str+=s[i];\\n            for(int j=0;j<words.size();j++)\\n            {\\n                if(words[j]==str)\\n                {\\n                    count++;\\n                }\\n                \\n            }\\n            \\n        }\\n        return count;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        string str=\"\";\\n        int count=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            str+=s[i];\\n            for(int j=0;j<words.size();j++)\\n            {\\n                if(words[j]==str)\\n                {\\n                    count++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2006744,
                "title": "c-efficient-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    bool contains(vector<string> vec, string & elem){\\n    bool result = false;\\n    if( find(vec.begin(), vec.end(), elem) != vec.end() )\\n    {\\n        result = true;\\n    }\\n    return result;\\n    }\\n    \\n    vector<string> vec;\\n    string temp=\"\";\\n    int c=0;\\n    int countPrefixes(vector<string>& words, string s) {\\n        for(int i=0;i<s.size();i++){\\n            temp+=s[i];\\n            vec.push_back(temp);\\n        }\\n        for(int i=0;i<words.size();i++){\\n            if(contains(vec,words[i])) c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool contains(vector<string> vec, string & elem){\\n    bool result = false;\\n    if( find(vec.begin(), vec.end(), elem) != vec.end() )\\n    {\\n        result = true;\\n    }\\n    return result;\\n    }\\n    \\n    vector<string> vec;\\n    string temp=\"\";\\n    int c=0;\\n    int countPrefixes(vector<string>& words, string s) {\\n        for(int i=0;i<s.size();i++){\\n            temp+=s[i];\\n            vec.push_back(temp);\\n        }\\n        for(int i=0;i<words.size();i++){\\n            if(contains(vec,words[i])) c++;\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1998165,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in range(len(words)):\\n            if s.startswith(words[i]):\\n                    c+=1\\n        return c\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        c=0\\n        for i in range(len(words)):\\n            if s.startswith(words[i]):\\n                    c+=1\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1997765,
                "title": "c-using-substr",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans1 = 0;\\n        for(int i=0;i<=s.size();i++){\\n            string h = s.substr(0,i);\\n            int x = count(words.begin(),words.end(),h);\\n            if(x>0)    ans1+=x;\\n        }\\n        return ans1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int ans1 = 0;\\n        for(int i=0;i<=s.size();i++){\\n            string h = s.substr(0,i);\\n            int x = count(words.begin(),words.end(),h);\\n            if(x>0)    ans1+=x;\\n        }\\n        return ans1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995903,
                "title": "go-golang-solution",
                "content": "```go\\nfunc countPrefixes(words []string, s string) int {\\n    ans := 0\\n    for _, word := range words {\\n        n := len(word)\\n        if n > len(s) { continue }\\n        if word == s[:n] { ans++ }\\n    }\\n    return ans\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc countPrefixes(words []string, s string) int {\\n    ans := 0\\n    for _, word := range words {\\n        n := len(word)\\n        if n > len(s) { continue }\\n        if word == s[:n] { ans++ }\\n    }\\n    return ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995794,
                "title": "easy-java-implementation",
                "content": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        \\n        for(String str : words){\\n \\xA0 \\xA0 \\xA0 \\xA0 if\\xA0(s.indexOf(str)==0) count++;\\n \\xA0 \\xA0 \\xA0 \\xA0}\\n \\xA0 \\xA0 \\xA0 \\xA0return count;\\n \\xA0 \\xA0}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        \\n        int count =0;\\n        \\n        for(String str : words){\\n \\xA0 \\xA0 \\xA0 \\xA0 if\\xA0(s.indexOf(str)==0) count++;\\n \\xA0 \\xA0 \\xA0 \\xA0}\\n \\xA0 \\xA0 \\xA0 \\xA0return count;\\n \\xA0 \\xA0}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995491,
                "title": "c-3-lines-no-substr-copy-or-global-find",
                "content": "Use `string::compare` to avoid substring copy and whole string scanning.\\n```\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(words.begin(), words.end(), [&](string &w) {\\n        return !s.compare(0, w.size(), w);\\n    });\\n}\\n```\\n\\nEven better if LeetCode allows C++20 so that we could use the standard `string::starts_with`.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint countPrefixes(vector<string>& words, string s) {\\n    return count_if(words.begin(), words.end(), [&](string &w) {\\n        return !s.compare(0, w.size(), w);\\n    });\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995485,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(w == s[:len(w)] for w in words)\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(w == s[:len(w)] for w in words)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995010,
                "title": "ruby-solution",
                "content": "```\\n# @param {String[]} words\\n# @param {String} s\\n# @return {Integer}\\ndef count_prefixes(words, s)\\n    count = 0\\n    words.each {|word| count += 1 if word == s[0...word.length]}\\n    count\\nend\\n",
                "solutionTags": [],
                "code": "```\\n# @param {String[]} words\\n# @param {String} s\\n# @return {Integer}\\ndef count_prefixes(words, s)\\n    count = 0\\n    words.each {|word| count += 1 if word == s[0...word.length]}\\n    count\\nend\\n",
                "codeTag": "Python3"
            },
            {
                "id": 1994972,
                "title": "c",
                "content": "Just use substring to check is the same or not,\\nprefix must be a substring of string and length will be prefix self length.\\n[C# testcase](https://github.com/AhChao/OnceLeetCodePerDay/blob/main/OnceLeetCodePerDay/Contest/0430/Tests/L6051CountPrefixesOfAGivenStringTests.cs)\\n```\\npublic int CountPrefixes(string[] words, string s) {\\n\\tvar result = 0;\\n\\tforeach(var i in words)\\n\\t{\\n\\t\\tif(i.Length > s.Length) continue;\\n\\t\\tresult += s.Substring(0,i.Length) == i ? 1 : 0;\\n\\t}\\n\\treturn result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int CountPrefixes(string[] words, string s) {\\n\\tvar result = 0;\\n\\tforeach(var i in words)\\n\\t{\\n\\t\\tif(i.Length > s.Length) continue;\\n\\t\\tresult += s.Substring(0,i.Length) == i ? 1 : 0;\\n\\t}\\n\\treturn result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994856,
                "title": "python-hashset",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        c = 0 \\n        n = len(words)\\n        d = []\\n        for i in range(len(s)):\\n            d.append(s[:i+1])\\n        \\n        dd = set(d)\\n        \\n        for i in words:\\n            if i in dd:\\n                c += 1 \\n        return c\\n```\\n\\nDont miss to **Upvote** Coders, wish your very **great journey of coding**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        c = 0 \\n        n = len(words)\\n        d = []\\n        for i in range(len(s)):\\n            d.append(s[:i+1])\\n        \\n        dd = set(d)\\n        \\n        for i in words:\\n            if i in dd:\\n                c += 1 \\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994706,
                "title": "easy-to-understand-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        map<string, int> mpp;\\n        int ans = 0;\\n        string str;\\n        for(auto str : words) mpp[str]++;\\n        for(int i = 0; i < s.size(); i++){\\n                str += s[i];\\n                ans += mpp[str];\\n                cout << str << \" \";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        map<string, int> mpp;\\n        int ans = 0;\\n        string str;\\n        for(auto str : words) mpp[str]++;\\n        for(int i = 0; i < s.size(); i++){\\n                str += s[i];\\n                ans += mpp[str];\\n                cout << str << \" \";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1994667,
                "title": "3-liner-easy-to-implement",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++) if(words[i] == s.substr(0,words[i].size())) count++;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0 ; i < words.size() ; i++) if(words[i] == s.substr(0,words[i].size())) count++;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994641,
                "title": "one-liner-easy-c-substr",
                "content": "```\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0; i < words.size(); i++)\\n            if(words[i].substr(0,words[i].size()) == s.substr(0,words[i].size()))\\n                count++;\\n        return count;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n        for(int i = 0; i < words.size(); i++)\\n            if(words[i].substr(0,words[i].size()) == s.substr(0,words[i].size()))\\n                count++;\\n        return count;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994629,
                "title": "very-easy-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c = 0;\\n        unordered_map<string,int> hmp;\\n        int l = s.length();\\n        for(int i=0; i<words.size(); i++) {\\n            hmp[words[i]]++;\\n        }\\n        for(int i=1; i<=l; i++) {\\n            string str = s.substr(0,i);\\n            if(hmp.find(str)!=hmp.end())\\n                c += hmp[str];\\n        }\\n        return c;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int c = 0;\\n        unordered_map<string,int> hmp;\\n        int l = s.length();\\n        for(int i=0; i<words.size(); i++) {\\n            hmp[words[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1994607,
                "title": "simple-c-substring",
                "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        int num = 0;\\n        for(auto str:words){\\n            int len = str.size();\\n            string sub = s.substr(0,len);\\n            if(str == sub)\\n                num++;\\n        }\\n        \\n        return num;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        int num = 0;\\n        for(auto str:words){\\n            int len = str.size();\\n            string sub = s.substr(0,len);\\n            if(str == sub)\\n                num++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1994580,
                "title": "java-startswith-easiest",
                "content": "```\\nclass Solution\\n{\\n    public int countPrefixes(String[] words, String s)\\n    {\\n        int count = 0;\\n        for(String word : words)\\n            if(s.startsWith(word))\\n                count++;\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int countPrefixes(String[] words, String s)\\n    {\\n        int count = 0;\\n        for(String word : words)\\n            if(s.startsWith(word))\\n                count++;\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994576,
                "title": "c-3-lines-find-function",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int a=0;\\n        for(auto i:words)   a += s.find(i)==0;\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int a=0;\\n        for(auto i:words)   a += s.find(i)==0;\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994564,
                "title": "c-4-lines-elegant-solution-using-std-mismatch",
                "content": "Built in C++ functions always comes handy in contests \\uD83D\\uDCAF\\n\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int res = 0;\\n        for(auto i: a)\\n            if(mismatch(i.begin(), i.end(), s.begin(), s.end()).first == i.end()) res++;\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& a, string s) {\\n        int res = 0;\\n        for(auto i: a)\\n            if(mismatch(i.begin(), i.end(), s.begin(), s.end()).first == i.end()) res++;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994561,
                "title": "simple-elegant-4-line-cpp-code-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int ct=0;\\n        for(int i=0; i<w.size(); i++){\\n            if(s.substr(0,w[i].length())==w[i]) ct++;\\n        }\\n        return ct;\\n    }\\n};\\n```\\nTime Complexity: O(n)\\nSpace Complexity: O(1)\\n\\nLet me know if you\\'d like to add any point of if I have missed anything.\\nHappy Coding!",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& w, string s) {\\n        int ct=0;\\n        for(int i=0; i<w.size(); i++){\\n            if(s.substr(0,w[i].length())==w[i]) ct++;\\n        }\\n        return ct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093620,
                "title": "easy-one-liner-c",
                "content": "\\n# Approach\\nUsing Count and StartsWith\\n\\n# Code\\n```\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) {\\n        return words.Count(i => s.StartsWith(i));\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int CountPrefixes(string[] words, string s) {\\n        return words.Count(i => s.StartsWith(i));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4088337,
                "title": "java-best-ever-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])){\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4085650,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n\\n        for(int i=0; i<words.size(); i++){\\n            if (s.rfind(words[i], 0) == 0) { \\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int count = 0;\\n\\n        for(int i=0; i<words.size(); i++){\\n            if (s.rfind(words[i], 0) == 0) { \\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083046,
                "title": "detailed-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe have to find how many the elements in a words(list) can be prefixes to the string **S.**\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nwe have to take a variabe named counter.\\nstr\\n```python []\\ncount=0\\n\\n```\\nThen iterate through the loop to find whether the **elements in list  will match to the string S.** \\n```python []\\n    s[:len(i)]==i:\\n\\n```\\nthen increase the count value by 1\\n```python []\\ncount+=1\\n\\n```\\nFinally return the value of the count.\\n```python []\\nreturn count\\n\\n```\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if s[:len(i)]==i:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "String Matching"
                ],
                "code": "```python []\\ncount=0\\n\\n```\n```python []\\n    s[:len(i)]==i:\\n\\n```\n```python []\\ncount+=1\\n\\n```\n```python []\\nreturn count\\n\\n```\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if s[:len(i)]==i:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081682,
                "title": "easy-to-understand-iterative",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIteratively check if each words is prefix or not\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize the count.\\n2. Iterate through each word.\\n3. If the word is the prefix of s, increment count.\\n4. Return count.\\n\\n# Complexity\\n- Time complexity: O(n*m) , n=number of words, m=size of each word\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        count=0\\n        for w in words:\\n            n=len(w)\\n            if n<=len(s) and w==s[:n]:\\n                count+=1\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        \\n        count=0\\n        for w in words:\\n            n=len(w)\\n            if n<=len(s) and w==s[:n]:\\n                count+=1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079643,
                "title": "simple-java-solution-100-beats-4-lines-of-code-with-expanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Please Upvote.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        // Variable to store the value of answer.\\n        int ans=0;\\n        // Iterate through all the strings of the array.\\n        for(String word:words){\\n            // If \\'s\\' starts with the current string then increse the answer count by one.\\n            if(s.startsWith(word)) ans++;\\n        }\\n        // Finaly return the answer.\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        // Variable to store the value of answer.\\n        int ans=0;\\n        // Iterate through all the strings of the array.\\n        for(String word:words){\\n            // If \\'s\\' starts with the current string then increse the answer count by one.\\n            if(s.startsWith(word)) ans++;\\n        }\\n        // Finaly return the answer.\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079160,
                "title": "c-100-faster-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    \\tint countOfPattern = 0;\\n\\n    \\tint inputSize = words.size();\\n\\n    \\tfor (int i = 0; i < inputSize; ++i)\\n    \\t{\\n    \\t\\tif(isPrefix(s,words[i])){\\n                countOfPattern++;\\n    \\t\\t}\\n    \\t}\\n\\n    \\treturn countOfPattern;\\n\\n    }\\n\\n\\tbool isPrefix(string str,string pattern){\\n\\n\\t\\tint size = pattern.size();\\n\\n\\t\\tfor (int i = 0; i < size; ++i)\\n\\t\\t{\\n\\t\\t\\tif(str[i] != pattern[i]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n    \\tint countOfPattern = 0;\\n\\n    \\tint inputSize = words.size();\\n\\n    \\tfor (int i = 0; i < inputSize; ++i)\\n    \\t{\\n    \\t\\tif(isPrefix(s,words[i])){\\n                countOfPattern++;\\n    \\t\\t}\\n    \\t}\\n\\n    \\treturn countOfPattern;\\n\\n    }\\n\\n\\tbool isPrefix(string str,string pattern){\\n\\n\\t\\tint size = pattern.size();\\n\\n\\t\\tfor (int i = 0; i < size; ++i)\\n\\t\\t{\\n\\t\\t\\tif(str[i] != pattern[i]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077227,
                "title": "beats-100-only-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])) count ++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i])) count ++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076286,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)       \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum(s.startswith(word) for word in words)       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073928,
                "title": "beats-100-00-of-users-with-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n         int count=0;\\n        for(String word: words)\\n        {\\n            if(s.indexOf(word)==0)\\n            {\\n                  count++;\\n            }\\n        }\\n        \\n    return count;}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n         int count=0;\\n        for(String word: words)\\n        {\\n            if(s.indexOf(word)==0)\\n            {\\n                  count++;\\n            }\\n        }\\n        \\n    return count;}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071268,
                "title": "naive-method-96-beats-simple-solution-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if len(i)<=len(s):\\n                c=0\\n                for j in range(len(i)):\\n                    if s[j]!=i[j]:\\n                        c=1\\n                        break\\n                if c==0:\\n                    count+=1\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count=0\\n        for i in words:\\n            if len(i)<=len(s):\\n                c=0\\n                for j in range(len(i)):\\n                    if s[j]!=i[j]:\\n                        c=1\\n                        break\\n                if c==0:\\n                    count+=1\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069485,
                "title": "easy-c-soln",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int m = s.size();\\n        int count = 0;\\n        string str = \"\";\\n        for(int i=0; i<m; i++){\\n            str += s[i];\\n            for(int j=0; j<n; j++){\\n                if(words[j] == str){\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int n = words.size();\\n        int m = s.size();\\n        int count = 0;\\n        string str = \"\";\\n        for(int i=0; i<m; i++){\\n            str += s[i];\\n            for(int j=0; j<n; j++){\\n                if(words[j] == str){\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4067888,
                "title": "1-line-c-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public int CountPrefixes(string[] words, string s)\\n    {\\n        return words.Count(s.StartsWith);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int CountPrefixes(string[] words, string s)\\n    {\\n        return words.Count(s.StartsWith);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064105,
                "title": "1-line-of-code-beast-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n func countPrefixes(_ words: [String], _ s: String) -> Int {\\n    \\n    return words.filter {s.hasPrefix($0)}.count\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n func countPrefixes(_ words: [String], _ s: String) -> Int {\\n    \\n    return words.filter {s.hasPrefix($0)}.count\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063523,
                "title": "c-solution-by-ajeet20-iit-kanpur",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n        int count = 0;\\n        for(int i = 0; i < s.size(); i++)\\n        {\\n            string str = s.substr(0, i+1);\\n            for(int j = 0; j < words.size(); j++) {\\n                if(words[j] == str) count++;\\n            }\\n        }    \\n        return count;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n\\n        int count = 0;\\n        for(int i = 0; i < s.size(); i++)\\n        {\\n            string str = s.substr(0, i+1);\\n            for(int j = 0; j < words.size(); j++) {\\n                if(words[j] == str) count++;\\n            }\\n        }    \\n        return count;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4062738,
                "title": "hash-map-unordered-set-c-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        unordered_map<string,int> map;\\n        for(auto it :words)\\n        {\\n            map[it]++;\\n        }\\n        int ans  = 0;\\n        unordered_set<string> seti(words.begin(), words.end());\\n        for(int j = 1;j <= s.size();j++)\\n        {\\n            string temp = s.substr(0,j);\\n            if(seti.find(temp) != seti.end())\\n            {\\n                seti.erase(temp);\\n                ans += map[temp]++;\\n                map.erase(temp);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        \\n        unordered_map<string,int> map;\\n        for(auto it :words)\\n        {\\n            map[it]++;\\n        }\\n        int ans  = 0;\\n        unordered_set<string> seti(words.begin(), words.end());\\n        for(int j = 1;j <= s.size();j++)\\n        {\\n            string temp = s.substr(0,j);\\n            if(seti.find(temp) != seti.end())\\n            {\\n                seti.erase(temp);\\n                ans += map[temp]++;\\n                map.erase(temp);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061412,
                "title": "using-hashset-without-any-in-build-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0 ; \\n        Set<String> hs = new HashSet<>() ;\\n        for(int j=1;j<=s.length();j++) {\\n               hs.add(s.substring(0,j)) ; \\n            }\\n        for(int i = 0 ; i<words.length ; i++){\\n            if(words[i].length()>s.length())continue ; \\n            // for(int j=1;j<=s.length();j++) {\\n            //     if(words[i].equals(s.substring(0,j))) {count++ ; break ;}\\n            // }\\n            if(hs.contains(words[i]))count++ ; \\n        }\\n        return count ; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0 ; \\n        Set<String> hs = new HashSet<>() ;\\n        for(int j=1;j<=s.length();j++) {\\n               hs.add(s.substring(0,j)) ; \\n            }\\n        for(int i = 0 ; i<words.length ; i++){\\n            if(words[i].length()>s.length())continue ; \\n            // for(int j=1;j<=s.length();j++) {\\n            //     if(words[i].equals(s.substring(0,j))) {count++ ; break ;}\\n            // }\\n            if(hs.contains(words[i]))count++ ; \\n        }\\n        return count ; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050484,
                "title": "js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n      return words.filter((item) => s.startsWith(item)).length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n      return words.filter((item) => s.startsWith(item)).length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050311,
                "title": "simple-easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n   let count = 0\\n    for(let i = 0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n            count = count + 1\\n         }\\n    }\\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n   let count = 0\\n    for(let i = 0; i<words.length; i++){\\n         if(s.startsWith(words[i])){\\n            count = count + 1\\n         }\\n    }\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037732,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c = 0;\\n        for(int i = 1; i<=s.length(); i++)\\n        {\\n            String s1 = s.substring(0,i);\\n            for(int j = 0; j<words.length; j++)\\n            {\\n                if(words[j].equals(s1))\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int countPrefixes(String[] words, String s) \\n    {\\n        int c = 0;\\n        for(int i = 1; i<=s.length(); i++)\\n        {\\n            String s1 = s.substring(0,i);\\n            for(int j = 0; j<words.length; j++)\\n            {\\n                if(words[j].equals(s1))\\n                c++;\\n            }\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031001,
                "title": "100-beats-in-java",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n    } \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        for (String i : words)\\n            if (s.startsWith(i)) count++;\\n        return count;\\n\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023312,
                "title": "begineers-must-see",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {int a=0;\\n    for(int j=0;j<s.length();j++){\\n        for(int i=0;i<words.length;i++){\\n            if(words[i].equals (s.substring(0,j+1)))a++;\\n        }}\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {int a=0;\\n    for(int j=0;j<s.length();j++){\\n        for(int i=0;i<words.length;i++){\\n            if(words[i].equals (s.substring(0,j+1)))a++;\\n        }}\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014679,
                "title": "3lines-code-easy-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String str:words)\\n        {\\n            if(s.indexOf(str)==0)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n        for(String str:words)\\n        {\\n            if(s.indexOf(str)==0)\\n            {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011936,
                "title": "direct-approach-using-java",
                "content": "\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        String temp = \"\";\\n        for(int i =0;i<s.length();i++){\\n            temp+=Character.toString(s.charAt(i));\\n            for(String x:words)\\n                if(temp.equals(x))\\n                    count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n        String temp = \"\";\\n        for(int i =0;i<s.length();i++){\\n            temp+=Character.toString(s.charAt(i));\\n            for(String x:words)\\n                if(temp.equals(x))\\n                    count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011673,
                "title": "easy-python-linear-search-82-72-faster",
                "content": "faster than\\xA082.72%\\n\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0        \\n        # make s into tree.\\n        \\n        # traverse for each to see. If not, then not. \\n        for word in words:\\n            \\n            # word longer, cannot be prefix\\n            if len(word) > len(s):\\n                continue\\n                \\n            for i, ch in enumerate(word):\\n                \\n                if ch != s[i]:\\n                    break\\n                    \\n                if i == len(word) - 1:\\n                    count += 1\\n        \\n        return count\\n                \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0        \\n        # make s into tree.\\n        \\n        # traverse for each to see. If not, then not. \\n        for word in words:\\n            \\n            # word longer, cannot be prefix\\n            if len(word) > len(s):\\n                continue\\n                \\n            for i, ch in enumerate(word):\\n                \\n                if ch != s[i]:\\n                    break\\n                    \\n                if i == len(word) - 1:\\n                    count += 1\\n        \\n        return count\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007127,
                "title": "easy-java-solution-0-ms-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i]))\\n                c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int c=0;\\n        for(int i=0;i<words.length;i++){\\n            if(s.startsWith(words[i]))\\n                c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005419,
                "title": "world-easy-solution-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let number=0;\\n    for(let i = 0 ; i< words.length; i++){\\n        let a = checkme(words[i], s);\\n        if(a){\\n            number++;\\n        }\\n    }\\n    return number;\\n    \\n};\\nfunction checkme(word, s){\\n    // if(word.length>s.length){\\n        for(let i = 0 ; i< word.length; i++){\\n            if(word[i]!=s[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    // }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let number=0;\\n    for(let i = 0 ; i< words.length; i++){\\n        let a = checkme(words[i], s);\\n        if(a){\\n            number++;\\n        }\\n    }\\n    return number;\\n    \\n};\\nfunction checkme(word, s){\\n    // if(word.length>s.length){\\n        for(let i = 0 ; i< word.length; i++){\\n            if(word[i]!=s[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    // }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004148,
                "title": "easy-c-solution-using-find",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string str=words[i];\\n            if(s.find(str)==0)cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int cnt=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            string str=words[i];\\n            if(s.find(str)==0)cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4000672,
                "title": "typescript-1-line-solution-o-n",
                "content": "# Complexity\\n- Time complexity: $O(n)$\\n- Space complexity: $O(1)$\\n\\n# Code\\n```\\nconst countPrefixes = (words: string[], s: string): number => words.reduce((a, w) => s.startsWith(w) ? a + 1 : a, 0)\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array",
                    "String"
                ],
                "code": "```\\nconst countPrefixes = (words: string[], s: string): number => words.reduce((a, w) => s.startsWith(w) ? a + 1 : a, 0)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989630,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n int countPrefixes(List<String> words, String s) {\\n  int result = 0;\\n\\n  for (int i = 0; i < words.length; i++) {\\n    if (s.startsWith(words[i])) {\\n      result++;\\n    }\\n  }\\n  return result;\\n}\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n int countPrefixes(List<String> words, String s) {\\n  int result = 0;\\n\\n  for (int i = 0; i < words.length; i++) {\\n    if (s.startsWith(words[i])) {\\n      result++;\\n    }\\n  }\\n  return result;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3986090,
                "title": "simple-java-solution-no-sms-nor-registration-required",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf a word is a prefix of the string s, it means the string s starts with that word. The Java String class provides a method startsWith() that can be used to determine if a string starts with a certain prefix. We can use this method to simplify our solution.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize a Counter: Start by initializing a counter to zero. This will keep track of how many words from the array are prefixes of s.\\n\\n2. Iterate Over the Words: Go through each word in the words array.\\n\\n3. Check for Prefix: For each word, check if s starts with that word using the startsWith() method. If it does, increment the counter.\\n\\n4. Return the Counter: After checking all the words, return the counter.\\n\\n# Complexity\\n- Time complexity: O(n * m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nwhere n is the number of words and m is the average length of a word. This is because the startsWith() method compares characters of the word with the string s and, in the worst case, this can be O(m).\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nas we are using only a fixed amount of extra space (the counter) regardless of the size of the input.\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n\\n        for (int i = 0; i < words.length; i++){\\n            if (s.startsWith(words[i])){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count = 0;\\n\\n        for (int i = 0; i < words.length; i++){\\n            if (s.startsWith(words[i])){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981590,
                "title": "easy-python-solution-slicing-string",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        output = 0 \\n        for i in words :\\n            if i == s[:len(i)] :\\n                output += 1\\n        return output\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        output = 0 \\n        for i in words :\\n            if i == s[:len(i)] :\\n                output += 1\\n        return output\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974113,
                "title": "check-prefix-java-o-n",
                "content": "\\tclass Solution {\\n\\t\\tpublic int countPrefixes(String[] words, String s) {\\n\\t\\t\\tint count=0;\\n\\t\\t\\tfor(String word: words){\\n\\t\\t\\t\\tint temp = word.length(); // substring length\\n\\t\\t\\t\\tif((s.length() >= temp) && word.equals(s.substring(0,temp))) count++;\\n\\t\\t\\t}\\n\\t\\t\\treturn count;\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n\\t\\tpublic int countPrefixes(String[] words, String s) {\\n\\t\\t\\tint count=0;\\n\\t\\t\\tfor(String word: words){\\n\\t\\t\\t\\tint temp = word.length(); // substring length\\n\\t\\t\\t\\tif((s.length() >= temp) && word.equals(s.substring(0,temp))) count++;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3971387,
                "title": "one-line-solution-using-list-comprehensions",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([words.count(s[:i]) for i in range(1, len(s)+1)])\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        return sum([words.count(s[:i]) for i in range(1, len(s)+1)])\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954226,
                "title": "easy",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if i == s[0:len(i)]: \\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        count = 0\\n        for i in words:\\n            if i == s[0:len(i)]: \\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946446,
                "title": "easy-php-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function countPrefixes($words, $s) {\\n        $count = 0;\\n        $sLen = strlen($s);\\n        for($i=1; $i<=$sLen; $i++){\\n            $str = substr($s,0,$i);\\n            foreach($words as $word){\\n                if($word == $str){\\n                    $count++;\\n                }\\n            }\\n        }\\n\\n        return $count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function countPrefixes($words, $s) {\\n        $count = 0;\\n        $sLen = strlen($s);\\n        for($i=1; $i<=$sLen; $i++){\\n            $str = substr($s,0,$i);\\n            foreach($words as $word){\\n                if($word == $str){\\n                    $count++;\\n                }\\n            }\\n        }\\n\\n        return $count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941401,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n  const hasPrefix = words.filter( string => {\\n    return s.startsWith(string)\\n  })\\n\\n  return hasPrefix.length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n  const hasPrefix = words.filter( string => {\\n    return s.startsWith(string)\\n  })\\n\\n  return hasPrefix.length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3941261,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int countPrefixes(List<String> words, String s) {\\n      var c = 0;\\n      for (int i = 0; i < words.length; i++) {\\n          if (s.startsWith(words[i])) {\\n              c += 1;\\n          }\\n      }\\n\\n      return c;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int countPrefixes(List<String> words, String s) {\\n      var c = 0;\\n      for (int i = 0; i < words.length; i++) {\\n          if (s.startsWith(words[i])) {\\n              c += 1;\\n          }\\n      }\\n\\n      return c;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3940064,
                "title": "javascript-single-line-functional-declarative-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    return words.filter(word => s.startsWith(word)).length\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    return words.filter(word => s.startsWith(word)).length\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937084,
                "title": "javascript-beats-32-51",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count=0;\\n   for (let index = 0; index < words.length; index++) if (s.startsWith(words[index])) count += 1;\\n   return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} s\\n * @return {number}\\n */\\nvar countPrefixes = function(words, s) {\\n    let count=0;\\n   for (let index = 0; index < words.length; index++) if (s.startsWith(words[index])) count += 1;\\n   return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3936190,
                "title": "python-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution(object):\\n    def countPrefixes(self, words, s):\\n        count = 0\\n        for i in range(len(words)):\\n            item = words[i]\\n            if s[0 : len(item)] == item:\\n                count += 1\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def countPrefixes(self, words, s):\\n        count = 0\\n        for i in range(len(words)):\\n            item = words[i]\\n            if s[0 : len(item)] == item:\\n                count += 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3932521,
                "title": "simple-approach-runtime-60ms-beat-93-in-runtime-and-memory",
                "content": "# Intuition\\n=>check prefix of each string in word if equal then increment the count otherwise pass on\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n=>create count equal to zero and iterate a loop and check for each string in word if its string equal to starting elements of prefix string increment the count otherwise pass\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        cnt=0\\n        for i in words:\\n            if i==s[:len(i)]:\\n                cnt+=1\\n        return cnt\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countPrefixes(self, words: List[str], s: str) -> int:\\n        cnt=0\\n        for i in words:\\n            if i==s[:len(i)]:\\n                cnt+=1\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931816,
                "title": "ez-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int sum=0;\\n        for(int i=0;i<words.size();i++){\\n            if(words[i].size()>s.size()){\\n                continue;\\n            }\\n            else {\\n                if(words[i]==s.substr(0,words[i].size())){\\n                    sum++;\\n                }\\n            }\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string s) {\\n        int sum=0;\\n        for(int i=0;i<words.size();i++){\\n            if(words[i].size()>s.size()){\\n                continue;\\n            }\\n            else {\\n                if(words[i]==s.substr(0,words[i].size())){\\n                    sum++;\\n                }\\n            }\\n        }\\n        return sum;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923639,
                "title": "very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n# - Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923636,
                "title": "very-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countPrefixes(String[] words, String s) {\\n        int count=0;\\n\\n        for(String word: words){\\n            if(s.startsWith(word)) count++;\\n        }\\n        return count;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1732909,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 2039571,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 1908446,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 1875133,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            },
            {
                "id": 1676289,
                "content": [
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    int countPrefixes(vector<string>& words, string allowed) {\\n        int ans=0;\\n        for(int i=0;i<words.size();i++){\\n            string s=words[i];\\n            int z=s.size();\\n            for(int k=0;k<s.size();k++){\\n               if (s[k] == allowed[k]) {\\n                   z--;\\n               }\\n            }\\n            if(z==0){\\n                ans++;\\n            }\\n        }\\n        return ans; \\n    }\\n};"
                    },
                    {
                        "username": "DeepaSingh13",
                        "content": "word =[\"feh\",\"w\",\"w\",\"lwd\",\"c\",\"s\",\"vk\",\"zwlv\",\"n\",\"w\",\"sw\",\"qrd\",\"w\",\"w\",\"mqe\",\"w\",\"w\",\"w\",\"gb\",\"w\",\"qy\",\"xs\",\"br\",\"w\",\"rypg\",\"wh\",\"g\",\"w\",\"w\",\"fh\",\"w\",\"w\",\"sccy\"]\\nString s= \"w\";\\n\\nExpected output : 14 \\nMy output : 15\\nHow the expected o/p is coming as 14 if we count manually so it is 15\\n"
                    },
                    {
                        "username": "DhanushAM",
                        "content": " \\'wh\\' is not a prefix of \\'w\\'. A prefix is a sequence of characters that appears at the beginning of a longer string. In this case, \\'w\\' is a single character, and \\'wh\\' is two characters. \\'w\\' is not a longer string containing \\'wh\\' as a prefix, so \\'wh\\' cannot be considered a prefix of \\'w\\'."
                    },
                    {
                        "username": "manuatleet12195",
                        "content": "return sum([1 for i in words if s.startswith(i)])"
                    },
                    {
                        "username": "NarayanSharma",
                        "content": "Please check the test case No 122, in this case words have \"a\" also, so its output should be 135 \\n\\n`var countPrefixes = function(words, s) {\\n    let count = 0;\\n    for(let i = 0; i < words.length; i++){\\n        if((words[i][0] === s[0]) && s.includes(words[i])){\\n            count++\\n        }\\n    }\\n    return count\\n}; `"
                    },
                    {
                        "username": "nancychauhan99",
                        "content": "What is the time complexity for best and worst case? This question has come as google interview and an official solution from leetcode is missing, why? though its a easy one but approaches to handle and TC worth discussing, NO?"
                    },
                    {
                        "username": "brandonallen",
                        "content": "[vaguely] Every solution involves some form of iterating through words[], and comparing each word to s. So if n == length(words) and m == length(s), worst case is O(n*m); if every word is a prefix, and has a length proportional to m. Best case, if every word in words isn't a prefix, and the first character isn't shared between words[i] and s, then it's O(1) time to compare each word to s, so O(n) complexity. You still have to check every word, since they aren't sorted, so you could never beat O(n).\nIf you use a trie and store the number of occurrences of each distinct element in words, if seems like you could potentially optimize slightly. But I sampled the fastest submitted code, and the constraints (n and m) are small enough that it's faster to just brute force it."
                    }
                ]
            }
        ]
    },
    {
        "title": "Check if Number Has Equal Digit Count and Digit Value",
        "question_content": "<p>You are given a <strong>0-indexed</strong> string <code>num</code> of length <code>n</code> consisting of digits.</p>\n\n<p>Return <code>true</code> <em>if for <strong>every</strong> index </em><code>i</code><em> in the range </em><code>0 &lt;= i &lt; n</code><em>, the digit </em><code>i</code><em> occurs </em><code>num[i]</code><em> times in </em><code>num</code><em>, otherwise return </em><code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;1210&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>\nnum[0] = &#39;1&#39;. The digit 0 occurs once in num.\nnum[1] = &#39;2&#39;. The digit 1 occurs twice in num.\nnum[2] = &#39;1&#39;. The digit 2 occurs once in num.\nnum[3] = &#39;0&#39;. The digit 3 occurs zero times in num.\nThe condition holds true for every index in &quot;1210&quot;, so return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;030&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>\nnum[0] = &#39;0&#39;. The digit 0 should occur zero times, but actually occurs twice in num.\nnum[1] = &#39;3&#39;. The digit 1 should occur three times, but actually occurs zero times in num.\nnum[2] = &#39;0&#39;. The digit 2 occurs zero times in num.\nThe indices 0 and 1 both violate the condition, so return false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == num.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10</code></li>\n\t<li><code>num</code> consists of digits.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 2083839,
                "title": "brute-force-and-one-liner",
                "content": "I am sure some clever solution exists, but I did not want to spend too much time.\\n\\nYou can realize that the number of strings that match the criteria is very small - 7, to be exact (see the second solution below).\\n\\n#### Brute-Force\\n**C++**\\n```cpp\\nbool digitCount(string num) {\\n    int cnt[10] = {};\\n    for (auto n : num)\\n        ++cnt[n - \\'0\\'];\\n    for (int i = 0; i < num.size(); ++i)\\n        if (cnt[i] != num[i] - \\'0\\')\\n            return false;\\n    return true;\\n}\\n```\\n\\n#### One-Liner\\n```cpp\\nbool digitCount(string &num) {\\n    return unordered_set<string>{\"1210\", \"2020\" , \"21200\", \"3211000\", \"42101000\", \"521001000\", \"6210001000\"}.count(num);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nbool digitCount(string num) {\\n    int cnt[10] = {};\\n    for (auto n : num)\\n        ++cnt[n - \\'0\\'];\\n    for (int i = 0; i < num.size(); ++i)\\n        if (cnt[i] != num[i] - \\'0\\')\\n            return false;\\n    return true;\\n}\\n```\n```cpp\\nbool digitCount(string &num) {\\n    return unordered_set<string>{\"1210\", \"2020\" , \"21200\", \"3211000\", \"42101000\", \"521001000\", \"6210001000\"}.count(num);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2084196,
                "title": "java-using-freq-array-easy-straightforward-solution",
                "content": "***UpVote if u find this Solution Useful***\\n\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freqArr = new int[10];  // n = 10 given in constraints;\\n        \\n        \\n        for(char ch : num.toCharArray()){\\n            freqArr[ch-\\'0\\']++;\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            int freq = num.charAt(i)-\\'0\\';  //freq of each indexValue;\\n            freqArr[i] = freqArr[i] - freq; \\n        }\\n        for(int i=0;i<10;i++){\\n            if(freqArr[i]!=0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freqArr = new int[10];  // n = 10 given in constraints;\\n        \\n        \\n        for(char ch : num.toCharArray()){\\n            freqArr[ch-\\'0\\']++;\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            int freq = num.charAt(i)-\\'0\\';  //freq of each indexValue;\\n            freqArr[i] = freqArr[i] - freq; \\n        }\\n        for(int i=0;i<10;i++){\\n            if(freqArr[i]!=0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083864,
                "title": "java-python-3-simple-code",
                "content": "```java\\n    public boolean digitCount(String num) {\\n        int[] cnt = new int[11];\\n        char[] charArr = num.toCharArray();\\n        for (char d : charArr) {\\n            ++cnt[d - \\'0\\'];\\n        }\\n        for (int i = 0; i < charArr.length; ++i) {\\n            if (cnt[i] != charArr[i] - \\'0\\') {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n```\\n```python\\n    def digitCount(self, num: str) -> bool:\\n        c = Counter(map(int, num))\\n        return all(c[i] == int(d) for i, d in enumerate(num))\\n```",
                "solutionTags": [],
                "code": "```java\\n    public boolean digitCount(String num) {\\n        int[] cnt = new int[11];\\n        char[] charArr = num.toCharArray();\\n        for (char d : charArr) {\\n            ++cnt[d - \\'0\\'];\\n        }\\n        for (int i = 0; i < charArr.length; ++i) {\\n            if (cnt[i] != charArr[i] - \\'0\\') {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n```\n```python\\n    def digitCount(self, num: str) -> bool:\\n        c = Counter(map(int, num))\\n        return all(c[i] == int(d) for i, d in enumerate(num))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2083791,
                "title": "confusing-yet-simple-hashmap-solution-c",
                "content": "This question was really easy, but head scratching at the same time. I had to waste so much time only because of the confusion to chose number or character type hashmap.\\nSo, for simplicity we will maintain a int to int hashmap, which will store the frequency of a particular number.\\nThen for every index, **we have to check if the frequency of that index in hashmap is equal to the number at that index**.\\nHere is the solution too \\uD83D\\uDE0A\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<int,int> mpp;\\n        int n= num.length();\\n        for(auto it:num){\\n            int x = it - \\'0\\';\\n            mpp[x]++; // Store the frequency of the char as a number\\n        }\\n        for(int i=0;i<n;i++){\\n            int x = num[i] - \\'0\\'; // get the char as number\\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0if(mpp[i] != x) // f the number is not equal to its frequency we return false\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n\\n```\\n\\n**Approach 2:**\\nWe just count the occurences of that index in the string. Thanks to @VisD566 for this approach.\\n\\n```\\nbool digitCount(string s) {\\n    for(int i=0; i<s.size(); i++){\\n        if(count(s.begin(), s.end(), i+\\'0\\') !=  s[i]-\\'0\\')\\n            return false;\\n    }\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<int,int> mpp;\\n        int n= num.length();\\n        for(auto it:num){\\n            int x = it - \\'0\\';\\n            mpp[x]++; // Store the frequency of the char as a number\\n        }\\n        for(int i=0;i<n;i++){\\n            int x = num[i] - \\'0\\'; // get the char as number\\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0if(mpp[i] != x) // f the number is not equal to its frequency we return false\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n\\n```\n```\\nbool digitCount(string s) {\\n    for(int i=0; i<s.size(); i++){\\n        if(count(s.begin(), s.end(), i+\\'0\\') !=  s[i]-\\'0\\')\\n            return false;\\n    }\\n    return true;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083892,
                "title": "c-map-solution-o-n-easy-and-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char, int> mpp;\\n        \\n        for(int i=0; i<num.size(); i++)\\n            mpp[num[i]]++;\\n        \\n\\n        for(int i=0; i<num.size(); i++){\\n            char c =\\'0\\' + i;\\n            // cout<<c<<endl;\\n            if(num[i] != \\'0\\' + mpp[c]){\\n                // cout<<num[i]<<\" \"<<mpp[c]<<endl;\\n                return false;\\n            }\\n                \\n        }\\n        \\n        return true;\\n    }\\n};\\n```\\n\\n**Check out my youtube channel for related content\\nhttps://www.youtube.com/@ignition548/featured**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char, int> mpp;\\n        \\n        for(int i=0; i<num.size(); i++)\\n            mpp[num[i]]++;\\n        \\n\\n        for(int i=0; i<num.size(); i++){\\n            char c =\\'0\\' + i;\\n            // cout<<c<<endl;\\n            if(num[i] != \\'0\\' + mpp[c]){\\n                // cout<<num[i]<<\" \"<<mpp[c]<<endl;\\n                return false;\\n            }\\n                \\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3164855,
                "title": "easy-python3-solution-using-count",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if int(num[i]) != num.count(str(i)):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if int(num[i]) != num.count(str(i)):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083889,
                "title": "straightforward",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<int,int> umap;\\n        for(int i=0;i<nums.length();i++)\\n        {\\n            string temp=\"\";\\n            temp+=nums[i];\\n            int n=stoi(temp);\\n            umap[n]++;\\n        }\\n        for(int i=0;i<nums.length();i++)\\n        {\\n            string temp=\"\";\\n            temp+=nums[i];\\n            int n=stoi(temp);\\n            \\n            //Number of times expected != Number of times occured \\n            if(n!=umap[i])\\n                return false;\\n                \\n        }\\n        return true;\\n    }\\n};\\n```\\n**Like it? Please Upvote ;-)**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<int,int> umap;\\n        for(int i=0;i<nums.length();i++)\\n        {\\n            string temp=\"\";\\n            temp+=nums[i];\\n            int n=stoi(temp);\\n            umap[n]++;\\n        }\\n        for(int i=0;i<nums.length();i++)\\n        {\\n            string temp=\"\";\\n            temp+=nums[i];\\n            int n=stoi(temp);\\n            \\n            //Number of times expected != Number of times occured \\n            if(n!=umap[i])\\n                return false;\\n                \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083808,
                "title": "java-simple",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n         \\n        int  indexCount[] = new int[10];\\n        \\n        for(char c:num.toCharArray()){\\n            indexCount[c-\\'0\\']++;\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            if(Character.getNumericValue(num.charAt(i)) != indexCount[i])\\n            return false;   \\n        }\\n            \\n        return true;\\n    }\\n}\\n   \\n\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n         \\n        int  indexCount[] = new int[10];\\n        \\n        for(char c:num.toCharArray()){\\n            indexCount[c-\\'0\\']++;\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            if(Character.getNumericValue(num.charAt(i)) != indexCount[i])\\n            return false;   \\n        }\\n            \\n        return true;\\n    }\\n}\\n   \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2132635,
                "title": "simple-and-fast-javascript-typescript-solution",
                "content": "My simple and fast JS/TS solution:\\n```\\nfunction digitCount(num: string): boolean {\\n    const arr = Array(num.length).fill(0);\\n    for (const char of num) {\\n        arr[Number(char)]++;\\n    }\\n    return arr.join(\\'\\') === num;\\n};\\n```\\n\\nResult:\\nRuntime:\\xA073 ms, faster than\\xA097.44%\\xA0of\\xA0TypeScript\\xA0online submissions for\\xA0Check if Number Has Equal Digit Count and Digit Value.\\nMemory Usage:\\xA044.5 MB, less than\\xA053.85%\\xA0of\\xA0TypeScript\\xA0online submissions for\\xA0Check if Number Has Equal Digit Count and Digit Value.\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction digitCount(num: string): boolean {\\n    const arr = Array(num.length).fill(0);\\n    for (const char of num) {\\n        arr[Number(char)]++;\\n    }\\n    return arr.join(\\'\\') === num;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2083994,
                "title": "python-3-using-counter-fast-solution-one-liner",
                "content": "Approach: Create a dict storing frequency of each number and then just compare the index with frequency.\\n\\n```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = Counter(num)\\n        for i in range(len(num)):\\n            if int(num[i])!=d.get(str(i), 0):\\n                return False\\n        return True\\n```\\n\\nTwo-Liner:\\n\\n```\\n\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = collections.Counter(num)\\n        return all([int(num[i])==d.get(str(i), 0) for i in range(len(num))])\\n```\\n\\nOne Liner (slight modification):\\n\\n```\\n\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        return all([int(num[i])==Counter(num)[f\\'{i}\\'] for i in range(len(num))])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = Counter(num)\\n        for i in range(len(num)):\\n            if int(num[i])!=d.get(str(i), 0):\\n                return False\\n        return True\\n```\n```\\n\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = collections.Counter(num)\\n        return all([int(num[i])==d.get(str(i), 0) for i in range(len(num))])\\n```\n```\\n\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        return all([int(num[i])==Counter(num)[f\\'{i}\\'] for i in range(len(num))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084001,
                "title": "brute-force-c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int> mp;\\n        for(int i=0;i<num.length();i++)\\n        {\\n             mp[num[i]]++;\\n        }\\n        for(auto ele: mp)\\n        {\\n            \\n            if(ele.second!=num[ele.first-\\'0\\']-\\'0\\')\\n                return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int> mp;\\n        for(int i=0;i<num.length();i++)\\n        {\\n             mp[num[i]]++;\\n        }\\n        for(auto ele: mp)\\n        {\\n            \\n            if(ele.second!=num[ele.first-\\'0\\']-\\'0\\')\\n                return false;\\n        }\\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2730033,
                "title": "c-easy-explained-map",
                "content": "1. create a map to calculate the frequency\\n2. iterate the string & check if frequncy is same with index+1 if not matched return false\\n3. else return true\\n\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string s) {\\n        unordered_map<char, int>mp;\\n        for(int i=0;i<s.size();i++)\\n            mp[s[i]]++;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            char c=i+\\'0\\';\\n            if(mp[c]!=s[i]-\\'0\\')\\n                return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string s) {\\n        unordered_map<char, int>mp;\\n        for(int i=0;i<s.size();i++)\\n            mp[s[i]]++;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            char c=i+\\'0\\';\\n            if(mp[c]!=s[i]-\\'0\\')\\n                return false;\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2322016,
                "title": "easy-python-solution-using-hashmap",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        \\n        h = {}\\n        n = len(num)\\n        \\n        for i in range(n):\\n            h[i] = num[i]\\n            \\n        for i in h:\\n            if(num.count(str(i))!=int(h[i])):\\n                return 0\\n        \\n        return 1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        \\n        h = {}\\n        n = len(num)\\n        \\n        for i in range(n):\\n            h[i] = num[i]\\n            \\n        for i in h:\\n            if(num.count(str(i))!=int(h[i])):\\n                return 0\\n        \\n        return 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2100089,
                "title": "easy-python-solution",
                "content": "```\\ndef digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2089906,
                "title": "o-n-solution",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n          HashMap<Integer,Integer> map = new HashMap<>();\\n//        First we are marking the frequency for the number. As we are given in the question, num.charAt(i) is the\\n//        frequency of the number i in the num String.\\n        for(int number = 0; number < num.length(); number++){\\n            int frequency = Character.getNumericValue(num.charAt(number));\\n            map.put(number,frequency);\\n        }\\n//        Now we are traversing through the string.\\n        for(int index = 0; index< num.length(); index++) {\\n//            If character at index i is less than num.length(), then only we need to know its frequency.\\n            if (Character.getNumericValue(num.charAt(index)) < num.length()) {\\n//                Get the frequency of the number and subtract 1 from it if it is present.\\n                int frequency = map.get(Character.getNumericValue(num.charAt(index))) - 1;\\n                map.put(Character.getNumericValue(num.charAt(index)), frequency);\\n            }\\n        }\\n//      If all the values are 0 , then only it is right otherwise , the frequency is either more or less than the\\n//        specified frequency, hence return false;\\n        for (int i = 0; i < num.length(); i++) {\\n            if(map.get(i) !=0){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```\\nIf you liked the solution or found the solution unique , please upvote :)\\nThank you",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n          HashMap<Integer,Integer> map = new HashMap<>();\\n//        First we are marking the frequency for the number. As we are given in the question, num.charAt(i) is the\\n//        frequency of the number i in the num String.\\n        for(int number = 0; number < num.length(); number++){\\n            int frequency = Character.getNumericValue(num.charAt(number));\\n            map.put(number,frequency);\\n        }\\n//        Now we are traversing through the string.\\n        for(int index = 0; index< num.length(); index++) {\\n//            If character at index i is less than num.length(), then only we need to know its frequency.\\n            if (Character.getNumericValue(num.charAt(index)) < num.length()) {\\n//                Get the frequency of the number and subtract 1 from it if it is present.\\n                int frequency = map.get(Character.getNumericValue(num.charAt(index))) - 1;\\n                map.put(Character.getNumericValue(num.charAt(index)), frequency);\\n            }\\n        }\\n//      If all the values are 0 , then only it is right otherwise , the frequency is either more or less than the\\n//        specified frequency, hence return false;\\n        for (int i = 0; i < num.length(); i++) {\\n            if(map.get(i) !=0){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084112,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        counter=Counter(num)\\n        for i in range(len(num)):\\n            if counter[f\\'{i}\\'] != int(num[i]):\\n                return False\\n        return True\\n```\\n\\n**Time - O(n)\\nSpace - O(n)**\\n\\n---\\n\\n***Please upvote if you find it useful***",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        counter=Counter(num)\\n        for i in range(len(num)):\\n            if counter[f\\'{i}\\'] != int(num[i]):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363169,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[]arr = new int[10];\\n\\n      for(int i=0;i<num.length();i++){\\n          arr[num.charAt(i)-\\'0\\']+=1;\\n      }\\n      //System.out.println(Arrays.toString(arr));\\n   \\n\\n      for(int i=0;i<num.length();i++){\\n          if(arr[i]!=num.charAt(i)-\\'0\\'){\\n              return false;\\n          }\\n      }\\n     return true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[]arr = new int[10];\\n\\n      for(int i=0;i<num.length();i++){\\n          arr[num.charAt(i)-\\'0\\']+=1;\\n      }\\n      //System.out.println(Arrays.toString(arr));\\n   \\n\\n      for(int i=0;i<num.length();i++){\\n          if(arr[i]!=num.charAt(i)-\\'0\\'){\\n              return false;\\n          }\\n      }\\n     return true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3282316,
                "title": "java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n  public boolean digitCount(String num) {\\n    final char[] digit = num.toCharArray(); // convert string to char array\\n    final int n = digit.length; // length of char array\\n    int[] count = new int[10]; // count arr length 10 because constraint 1<=n<=10\\n    for (char c : digit) {\\n      count[c - \\'0\\']++; // count of digits \\n    }\\n    for (int i = 0; i < n; i++) {\\n      if (digit[i] - \\'0\\' != count[i]) { // check \\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n}\\n\\n// DRY RUN TO CLEARLY UNDERSTAND THE WORKING OF CODE \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public boolean digitCount(String num) {\\n    final char[] digit = num.toCharArray(); // convert string to char array\\n    final int n = digit.length; // length of char array\\n    int[] count = new int[10]; // count arr length 10 because constraint 1<=n<=10\\n    for (char c : digit) {\\n      count[c - \\'0\\']++; // count of digits \\n    }\\n    for (int i = 0; i < n; i++) {\\n      if (digit[i] - \\'0\\' != count[i]) { // check \\n        return false;\\n      }\\n    }\\n\\n    return true;\\n  }\\n}\\n\\n// DRY RUN TO CLEARLY UNDERSTAND THE WORKING OF CODE \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2600012,
                "title": "java-hashmap-string-straightforward-solution",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        HashMap<Integer,Integer> map = new HashMap<>();\\n        for(int i=0;i<num.length();i++){\\n            int n = Character.getNumericValue(num.charAt(i));\\n            map.put(n,map.getOrDefault(n,0)+1);\\n        }\\n        for(int i=0;i<num.length();i++){\\n            if(map.containsKey(i)){\\n                int nn = map.get(i);\\n                if(nn!=Character.getNumericValue(num.charAt(i)))\\n                    return false;\\n            }\\n            else{\\n                if(Character.getNumericValue(num.charAt(i))>0)\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        HashMap<Integer,Integer> map = new HashMap<>();\\n        for(int i=0;i<num.length();i++){\\n            int n = Character.getNumericValue(num.charAt(i));\\n            map.put(n,map.getOrDefault(n,0)+1);\\n        }\\n        for(int i=0;i<num.length();i++){\\n            if(map.containsKey(i)){\\n                int nn = map.get(i);\\n                if(nn!=Character.getNumericValue(num.charAt(i)))\\n                    return false;\\n            }\\n            else{\\n                if(Character.getNumericValue(num.charAt(i))>0)\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2115384,
                "title": "python-fast-solution-faster-than-93",
                "content": "![image](https://assets.leetcode.com/users/images/2cc0a03a-545f-4144-a1be-d86804fc0d45_1654452047.1386557.png)\\n\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        base = {}\\n        for i in range(len(num)):\\n            if base.get(num[i], None) is None:\\n                base[num[i]]=1\\n            else:\\n                base[num[i]]+=1\\n            if base.get(str(i), None) is None:\\n                base[str(i)]=0\\n                \\n        for i in range(len(num)):\\n            if str(base[str(i)])!=num[i]:\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        base = {}\\n        for i in range(len(num)):\\n            if base.get(num[i], None) is None:\\n                base[num[i]]=1\\n            else:\\n                base[num[i]]+=1\\n            if base.get(str(i), None) is None:\\n                base[str(i)]=0\\n                \\n        for i in range(len(num)):\\n            if str(base[str(i)])!=num[i]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084818,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int n=num.length();\\n        map<int,int> mp;\\n        for(int i=0;i<n;i++){\\n            mp[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(mp[i]!=num[i]-\\'0\\'){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int n=num.length();\\n        map<int,int> mp;\\n        for(int i=0;i<n;i++){\\n            mp[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(mp[i]!=num[i]-\\'0\\'){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084006,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        \\n        int[] result = new int[10];\\n        for(int i=0;i<num.length();i++)\\n        {\\n            result[num.charAt(i)-\\'0\\']++;\\n        }\\n      \\n       for(int i=0;i<num.length();i++)\\n       {\\n           if(num.charAt(i)-\\'0\\'!=result[i])\\n              return false;\\n       }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        \\n        int[] result = new int[10];\\n        for(int i=0;i<num.length();i++)\\n        {\\n            result[num.charAt(i)-\\'0\\']++;\\n        }\\n      \\n       for(int i=0;i<num.length();i++)\\n       {\\n           if(num.charAt(i)-\\'0\\'!=result[i])\\n              return false;\\n       }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083852,
                "title": "javascript-map",
                "content": "```js\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function(num) {\\n    const numLength = num.length;\\n    const numArray = num.split(\\'\\').map(Number);\\n    let result = \"\";\\n    \\n    const numFreq = numArray.reduce((acc,item)=>acc.set(item,acc.get(item) + 1 || 1),new Map())\\n    \\n    for(let i=0;i<numLength;i++){\\n        result+=numFreq.get(i) || \"0\";        \\n    }\\n    \\n    return result === num\\n};\\n```",
                "solutionTags": [],
                "code": "```js\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function(num) {\\n    const numLength = num.length;\\n    const numArray = num.split(\\'\\').map(Number);\\n    let result = \"\";\\n    \\n    const numFreq = numArray.reduce((acc,item)=>acc.set(item,acc.get(item) + 1 || 1),new Map())\\n    \\n    for(let i=0;i<numLength;i++){\\n        result+=numFreq.get(i) || \"0\";        \\n    }\\n    \\n    return result === num\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3955024,
                "title": "java-100-beats-0-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        char temp[] = new char[11];\\n        int temp1 = 0 , temp2 = 0;\\n        for(int i=0; i<num.length(); i++){\\n            char ch = num.charAt(i); temp1 = ch-\\'0\\';\\n            temp[temp1]++;\\n        }\\n        for(int i=0; i<num.length(); i++){\\n            char ch = num.charAt(i); temp2 = ch-\\'0\\';\\n            if(temp[i]!=temp2) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        char temp[] = new char[11];\\n        int temp1 = 0 , temp2 = 0;\\n        for(int i=0; i<num.length(); i++){\\n            char ch = num.charAt(i); temp1 = ch-\\'0\\';\\n            temp[temp1]++;\\n        }\\n        for(int i=0; i<num.length(); i++){\\n            char ch = num.charAt(i); temp2 = ch-\\'0\\';\\n            if(temp[i]!=temp2) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3437755,
                "title": "easy-java-beats-99",
                "content": "# Intuition\\nconsidering {1210}\\n\\n    HASHMAP :\\n\\n    {\\n        0:1\\n        1:2\\n        2:3\\n    }\\n\\n    index : 0 1 2 3\\n    number: 1 2 1 0\\n\\n    according to the question,\\n\\n    num[i] should be equal to frequency of index i\\n\\n    let x = num.charAt(i)\\n    convert character to integer using -\\n    int a = x - \\'0\\';\\n\\n    thus, if(a != frequency of a) i.e if(a != map.get(i)) return false;\\n\\n\\n    but to avoid null pointer exception, we must check if the hashmap contains all indices or not, if it doesnt, then num[i] must be 0 as in this case,\\n\\nindex 3 is not in hashmap {\\n        0:1\\n        1:2\\n        2:3\\n    }\\n\\nso , if it doesnot contain in hashmap (! map.containsKey(i))\\n\\nthen check if num[i] must be 0, else return false;,\\nif it is 0, then continue\\n\\n# Time Complexity - O(n)\\n# Space Complexity - O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n\\n        //creating an integer - integer hashmap\\n\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n\\n        for(int i = 0; i < num.length(); i++)\\n        {\\n            char x = num.charAt(i);\\n\\n            int a = x - \\'0\\'; // to create character to integer\\n\\n            if(map.containsKey(a))\\n                map.put(a,map.get(a)+1);\\n\\n            else\\n                map.put(a,1);\\n\\n        }\\n\\n        for(int i = 0; i<num.length(); i++)\\n        {\\n\\n            // to avoid nullPointerException\\n\\n            if(!map.containsKey(i))\\n            {\\n                if(num.charAt(i)!=\\'0\\') //it must be 0, else false\\n                    return false;\\n                else //if it is 0, then continue\\n                    continue;\\n            }\\n            char x = num.charAt(i); //let num[i] = x\\n            int a = x - \\'0\\'; //convert x to int\\n            if(a!=map.get(i)) //check if its equal to frequency\\n                return false;\\n\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n\\n        //creating an integer - integer hashmap\\n\\n        HashMap<Integer, Integer> map = new HashMap<>();\\n\\n        for(int i = 0; i < num.length(); i++)\\n        {\\n            char x = num.charAt(i);\\n\\n            int a = x - \\'0\\'; // to create character to integer\\n\\n            if(map.containsKey(a))\\n                map.put(a,map.get(a)+1);\\n\\n            else\\n                map.put(a,1);\\n\\n        }\\n\\n        for(int i = 0; i<num.length(); i++)\\n        {\\n\\n            // to avoid nullPointerException\\n\\n            if(!map.containsKey(i))\\n            {\\n                if(num.charAt(i)!=\\'0\\') //it must be 0, else false\\n                    return false;\\n                else //if it is 0, then continue\\n                    continue;\\n            }\\n            char x = num.charAt(i); //let num[i] = x\\n            int a = x - \\'0\\'; //convert x to int\\n            if(a!=map.get(i)) //check if its equal to frequency\\n                return false;\\n\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359639,
                "title": "easy-beginner-friendly-solution-using-frequency-hashmap",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        dic=Counter(num)\\n        c=0\\n        for i in range(len(num)):\\n            if dic[str(i)]==int(num[i]):\\n                c+=1\\n                \\n        if c==len(num):\\n            return 1\\n        return 0\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        dic=Counter(num)\\n        c=0\\n        for i in range(len(num)):\\n            if dic[str(i)]==int(num[i]):\\n                c+=1\\n                \\n        if c==len(num):\\n            return 1\\n        return 0\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312486,
                "title": "c-solution-brute-force-hash-table",
                "content": "# Approach : Brute Force\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n    vector<int> v(10,0);\\n    for (int i = 0; i < num.size(); i++)\\n        v[num[i] - \\'0\\']++;\\n\\n    for (int i = 0; i < num.size(); i++)\\n        if (num[i] - \\'0\\' != v[i])\\n           return false;\\n\\n    return true;\\n\\n    }\\n};\\n```\\n# Approach : Hash Table\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n    unordered_map<int, int> m;\\n    for (auto e : num)\\n        m[e - \\'0\\']++;\\n\\n    for (int i = 0; i < num.size(); i++)\\n        if (m[i] != num[i] - \\'0\\')\\n            return false;\\n    return true;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n    vector<int> v(10,0);\\n    for (int i = 0; i < num.size(); i++)\\n        v[num[i] - \\'0\\']++;\\n\\n    for (int i = 0; i < num.size(); i++)\\n        if (num[i] - \\'0\\' != v[i])\\n           return false;\\n\\n    return true;\\n\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n    unordered_map<int, int> m;\\n    for (auto e : num)\\n        m[e - \\'0\\']++;\\n\\n    for (int i = 0; i < num.size(); i++)\\n        if (m[i] != num[i] - \\'0\\')\\n            return false;\\n    return true;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3278845,
                "title": "c-easy-simple",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\no(k)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<int,int>mp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[nums[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[i]!=nums[i]-\\'0\\')\\n                return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<int,int>mp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[nums[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[i]!=nums[i]-\\'0\\')\\n                return 0;\\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3237543,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<int,int>mp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[nums[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[i]!=nums[i]-\\'0\\')\\n                return 0;\\n        }\\n        return 1;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<int,int>mp;\\n        int n=nums.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[nums[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[i]!=nums[i]-\\'0\\')\\n                return 0;\\n        }\\n        return 1;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2852794,
                "title": "beats-99-easy-python-solution",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        checked = set()\\n        i = 0\\n        while i < len(num):\\n            if num[i] not in checked:\\n                count = num.count(str(i))\\n                if int(num[i]) != count:\\n                    return False\\n                else:\\n                    checked.add(num[i])\\n                    i += 1\\n            else:\\n                i += 1\\n        \\n        return True\\n``",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        checked = set()\\n        i = 0\\n        while i < len(num):\\n            if num[i] not in checked:\\n                count = num.count(str(i))\\n                if int(num[i]) != count:\\n                    return False\\n                else:\\n                    checked.add(num[i])\\n                    i += 1\\n            else:\\n                i += 1\\n        \\n        return True\\n``",
                "codeTag": "Java"
            },
            {
                "id": 2561099,
                "title": "java-c-one-liner-100-00-0-ms-o-1",
                "content": "**UPVOTE PLEASE**\\n```\\ncpp:\\n\\n\\n    return unordered_set<string>{\"1210\", \"2020\" , \"21200\", \"3211000\", \"42101000\", \"521001000\", \"6210001000\"}.count(num);\\n\\t\\n\\tjava:\\n\\t\\n\\treturn new HashSet<String>(List.of(\"1210\", \"2020\" , \"21200\", \"3211000\", \"42101000\", \"521001000\", \"6210001000\")).contains(num); \\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "```\\ncpp:\\n\\n\\n    return unordered_set<string>{\"1210\", \"2020\" , \"21200\", \"3211000\", \"42101000\", \"521001000\", \"6210001000\"}.count(num);\\n\\t\\n\\tjava:\\n\\t\\n\\treturn new HashSet<String>(List.of(\"1210\", \"2020\" , \"21200\", \"3211000\", \"42101000\", \"521001000\", \"6210001000\")).contains(num); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2530024,
                "title": "here-is-my-solution",
                "content": "*****plz upvote if you find my solution helpful*****\\n```\\nclass Solution:\\n    def digitCount(self, n: str) -> bool:\\n        l=len(n)\\n        for i in range(l):\\n            if n.count(str(i))!=int(n[i]):\\n                \\n                return False\\n        return True\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, n: str) -> bool:\\n        l=len(n)\\n        for i in range(l):\\n            if n.count(str(i))!=int(n[i]):\\n                \\n                return False\\n        return True\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2210762,
                "title": "java-easy-to-understand-2-hashmaps",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        // Create a map for given frequencies\\n        HashMap<Character, Integer> givenFreqMap = new HashMap<>();\\n        \\n        // Create a map to count frequencies manually\\n        HashMap<Character, Integer> countFreqMap = new HashMap<>();\\n        \\n        // Loop through num\\n        for(int i = 0; i < num.length(); i++){\\n            \\n            // We only want to put in map if value at index is not equals to 0\\n            // because 0 means it\\'s not in the string so we do not need that\\n            if(num.charAt(i) != \\'0\\'){\\n                // Add to givenFreqMap convert the index to char and it\\'s value from char to int\\n                givenFreqMap.put((char)(i+\\'0\\'), num.charAt(i) - \\'0\\');\\n            }\\n        }\\n        \\n        // Loop through num     \\n        for(char c : num.toCharArray()){\\n            \\n            // Add to countFreqMap and count thier frequencies\\n            countFreqMap.put(c, countFreqMap.getOrDefault(c, 0) + 1);\\n        }\\n                 \\n        // If the characters and its frequencies are same in both map then return true, else false\\n        return givenFreqMap.equals(countFreqMap);\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        // Create a map for given frequencies\\n        HashMap<Character, Integer> givenFreqMap = new HashMap<>();\\n        \\n        // Create a map to count frequencies manually\\n        HashMap<Character, Integer> countFreqMap = new HashMap<>();\\n        \\n        // Loop through num\\n        for(int i = 0; i < num.length(); i++){\\n            \\n            // We only want to put in map if value at index is not equals to 0\\n            // because 0 means it\\'s not in the string so we do not need that\\n            if(num.charAt(i) != \\'0\\'){\\n                // Add to givenFreqMap convert the index to char and it\\'s value from char to int\\n                givenFreqMap.put((char)(i+\\'0\\'), num.charAt(i) - \\'0\\');\\n            }\\n        }\\n        \\n        // Loop through num     \\n        for(char c : num.toCharArray()){\\n            \\n            // Add to countFreqMap and count thier frequencies\\n            countFreqMap.put(c, countFreqMap.getOrDefault(c, 0) + 1);\\n        }\\n                 \\n        // If the characters and its frequencies are same in both map then return true, else false\\n        return givenFreqMap.equals(countFreqMap);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2194225,
                "title": "python-easy-2-liner-faster-than-93",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:            \\n        for i in range(len(num)):\\n            if(num.count(str(i))!=int(num[i])): return False\\n        return True\\n```\\n***Pls upvote if you find it helpful***",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:            \\n        for i in range(len(num)):\\n            if(num.count(str(i))!=int(num[i])): return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2122515,
                "title": "easy-java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) \\n    {\\n        HashMap<Integer,Integer> hmap = new HashMap<>();\\n        for(char ch:num.toCharArray())\\n            hmap.put(Character.getNumericValue(ch),hmap.getOrDefault(Character.getNumericValue(ch),0)+1);\\n        \\n        for(int i=0;i<num.length();i++)\\n        {\\n            if(hmap.get(i)!=null && hmap.get(i)!=Character.getNumericValue(num.charAt(i)))\\n                return false;\\n            else if(hmap.get(i)==null && Character.getNumericValue(num.charAt(i))!=0)\\n                return false;\\n        }\\n        return true;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean digitCount(String num) \\n    {\\n        HashMap<Integer,Integer> hmap = new HashMap<>();\\n        for(char ch:num.toCharArray())\\n            hmap.put(Character.getNumericValue(ch),hmap.getOrDefault(Character.getNumericValue(ch),0)+1);\\n        \\n        for(int i=0;i<num.length();i++)\\n        {\\n            if(hmap.get(i)!=null && hmap.get(i)!=Character.getNumericValue(num.charAt(i)))\\n                return false;\\n            else if(hmap.get(i)==null && Character.getNumericValue(num.charAt(i))!=0)\\n                return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2087105,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn digit_count(num: String) -> bool {\\n        let mut counter = [0; 10];\\n        let num_it = num.bytes().map(|b| (b - b\\'0\\') as usize);\\n        num_it.clone().for_each(|idx| counter[idx] += 1);\\n        num_it.enumerate().all(|(i, idx)| counter[i] == idx)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn digit_count(num: String) -> bool {\\n        let mut counter = [0; 10];\\n        let num_it = num.bytes().map(|b| (b - b\\'0\\') as usize);\\n        num_it.clone().for_each(|idx| counter[idx] += 1);\\n        num_it.enumerate().all(|(i, idx)| counter[i] == idx)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2085306,
                "title": "very-easy-c-solution-using-1-for-loop",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        for(int i=0;i<num.length();i++){\\n\\t\\t\\t// int to char\\n            char ch =  i + \\'0\\';\\n\\t\\t\\t\\n\\t\\t\\t// count no. of occurance\\n            int req = count(num.begin(),num.end(),ch);\\n\\t\\t\\t\\n\\t\\t\\t// check the given condtion\\n            if(req!=(num[i]-\\'0\\'))     return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        for(int i=0;i<num.length();i++){\\n\\t\\t\\t// int to char\\n            char ch =  i + \\'0\\';\\n\\t\\t\\t\\n\\t\\t\\t// count no. of occurance\\n            int req = count(num.begin(),num.end(),ch);\\n\\t\\t\\t\\n\\t\\t\\t// check the given condtion\\n            if(req!=(num[i]-\\'0\\'))     return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084641,
                "title": "python-easy-understanding-solution",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        n=len(num)\\n        \\n        for i in range(n):\\n            if(num.count(str(i))!=int(num[i])):\\n                return False\\n            \\n        return True",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        n=len(num)\\n        \\n        for i in range(n):\\n            if(num.count(str(i))!=int(num[i])):\\n                return False\\n            \\n        return True",
                "codeTag": "Java"
            },
            {
                "id": 2084158,
                "title": "o-n-solution-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<int,int> m;\\n        int n=num.size();\\n        for(int i=0;i<n;i++){\\n            m[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++ ){\\n            if(num[i]==\\'0\\'&&m.find(i)==m.end())continue;\\n            if(m.find(i)!=m.end()&&m[i]==(num[i]-\\'0\\'))continue;\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<int,int> m;\\n        int n=num.size();\\n        for(int i=0;i<n;i++){\\n            m[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++ ){\\n            if(num[i]==\\'0\\'&&m.find(i)==m.end())continue;\\n            if(m.find(i)!=m.end()&&m[i]==(num[i]-\\'0\\'))continue;\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084130,
                "title": "javascript-counter-105ms",
                "content": "```\\nconst counter = (a_or_s) => { let m = new Map(); for (const x of a_or_s) m.set(x, m.get(x) + 1 || 1); return m; };\\n\\nconst digitCount = (a) => {\\n    let m = counter(a), n = a.length;\\n    for (let i = 0; i < n; i++) {\\n        let cnt = m.get(i + \\'\\') || 0\\n        if (a[i] != cnt) return false;\\n    }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst counter = (a_or_s) => { let m = new Map(); for (const x of a_or_s) m.set(x, m.get(x) + 1 || 1); return m; };\\n\\nconst digitCount = (a) => {\\n    let m = counter(a), n = a.length;\\n    for (let i = 0; i < n; i++) {\\n        let cnt = m.get(i + \\'\\') || 0\\n        if (a[i] != cnt) return false;\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2084121,
                "title": "python3-very-elegant-and-straightforward",
                "content": "\\n```\\n        c = Counter(num)\\n        for idx, x in enumerate(num):\\n            if c[str(idx)] != int(x):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n        c = Counter(num)\\n        for idx, x in enumerate(num):\\n            if c[str(idx)] != int(x):\\n                return False\\n        return True\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2084061,
                "title": "brute-force-c-100",
                "content": "class Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int count=0;\\n        bool ans=true;\\n        for(int i=0;i<num.size();i++){\\n            for(int j=0;j<num.size();j++){\\n                if((num[j]-\\'0\\')==i){\\n                    count=count+1;\\n                }\\n            }\\n            if((num[i]-\\'0\\')!=count){\\n                ans=false; \\n            }\\n            count=0;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int count=0;\\n        bool ans=true;\\n        for(int i=0;i<num.size();i++){\\n            for(int j=0;j<num.size();j++){\\n                if((num[j]-\\'0\\')==i){\\n                    count=count+1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2083804,
                "title": "2-liner-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        for(int i=0;i<num.size();i++) if(count(num.begin(),num.end(),(i+\\'0\\')) != num[i]-\\'0\\') return false;\\n        return true;\\n    }\\n};\\n```\\n\\n\\n\\n**With Using Extra space :** \\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int> mpp;\\n        for(auto c : num) mpp[c]++;\\n        for(int i=0;i<num.size();i++){\\n            char c = (char)i+\\'0\\';\\n            if(num[i]-\\'0\\' != mpp[c]) return false;\\n        }\\n         return true;\\n     \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        for(int i=0;i<num.size();i++) if(count(num.begin(),num.end(),(i+\\'0\\')) != num[i]-\\'0\\') return false;\\n        return true;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int> mpp;\\n        for(auto c : num) mpp[c]++;\\n        for(int i=0;i<num.size();i++){\\n            char c = (char)i+\\'0\\';\\n            if(num[i]-\\'0\\' != mpp[c]) return false;\\n        }\\n         return true;\\n     \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936222,
                "title": "python-beginner-friendly-explanation-beats-91",
                "content": "# Approach\\nSimple Compare the count of current index with value at corrent index\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i)) != int(num[i]):\\n                return False\\n        return True        \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i)) != int(num[i]):\\n                return False\\n        return True        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904905,
                "title": "easy-approach-for-beginners-time-complexity-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3577641,
                "title": "java-simple-solution-hashmap-counting-100-faster",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public boolean digitCount(String num) {\\n        Map<Integer, Integer> occurrence = new HashMap<>(num.length());\\n        for (int i = 0; i < num.length(); i++) {\\n            int currentDigit = num.charAt(i) - \\'0\\';\\n            occurrence.put(currentDigit, occurrence.getOrDefault(currentDigit, 0) + 1);\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            int currentDigit = num.charAt(i) - \\'0\\';\\n            int count = 0;\\n            if (occurrence.containsKey(i)) {\\n                count = occurrence.get(i);\\n            }\\n            if (count != currentDigit) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n\\n    public boolean digitCount(String num) {\\n        Map<Integer, Integer> occurrence = new HashMap<>(num.length());\\n        for (int i = 0; i < num.length(); i++) {\\n            int currentDigit = num.charAt(i) - \\'0\\';\\n            occurrence.put(currentDigit, occurrence.getOrDefault(currentDigit, 0) + 1);\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            int currentDigit = num.charAt(i) - \\'0\\';\\n            int count = 0;\\n            if (occurrence.containsKey(i)) {\\n                count = occurrence.get(i);\\n            }\\n            if (count != currentDigit) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3573736,
                "title": "check-if-number-has-equal-digit-count-and-digit-value-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int i, j, count=0;\\n        for(i=0 ; i<num.length() ; i++)\\n        {\\n            count=0;\\n            for(j=0 ; j<num.length() ; j++)\\n            {\\n                if(i==(int)num[j]-48)\\n                {\\n                    count++;\\n                }\\n            }\\n            if((int)num[i]-48!=count)\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/98f8d2dd-d2eb-4f98-991a-e52107e37b08_1685332542.106816.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int i, j, count=0;\\n        for(i=0 ; i<num.length() ; i++)\\n        {\\n            count=0;\\n            for(j=0 ; j<num.length() ; j++)\\n            {\\n                if(i==(int)num[j]-48)\\n                {\\n                    count++;\\n                }\\n            }\\n            if((int)num[i]-48!=count)\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548379,
                "title": "simplest-efficient-c-code-time-o-n-2-space-o-1",
                "content": "# Intuition\\nThe code aims to compare the count of each digit in the string with the actual digit itself.\\n\\n# Approach\\nThe code iterates through each digit in the given string and compares its count with the actual digit itself. If any count doesn\\'t match, it returns false; otherwise, it returns true. \\n\\n# Complexity\\n- Time complexity: Let\\'s consider the length of the string num as n. The code uses two nested loops, with each loop iterating over the entire string. Therefore, the time complexity of the code is $O(n^2)$.\\n\\n- Space complexity: The code uses a constant amount of additional space to store variables l, i, j, and count. Hence, the space complexity is $O(1)$.\\n\\n# Code\\n```\\nbool digitCount(char * num)\\n{\\n    int l = strlen(num);\\n    for(int i=0;i<l;i++)\\n    {\\n        int count = 0;\\n        for(int j = 0;j<l;j++)\\n        {\\n            if(i==num[j]-\\'0\\')\\n            count++;\\n        }\\n        if(count != num[i]-\\'0\\')\\n        return false;\\n    }\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool digitCount(char * num)\\n{\\n    int l = strlen(num);\\n    for(int i=0;i<l;i++)\\n    {\\n        int count = 0;\\n        for(int j = 0;j<l;j++)\\n        {\\n            if(i==num[j]-\\'0\\')\\n            count++;\\n        }\\n        if(count != num[i]-\\'0\\')\\n        return false;\\n    }\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3464006,
                "title": "easy-understanding-hash-java-99-85-beats-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        HashMap<Integer,Integer> map=new HashMap<>();\\n\\n        for(int i=0;i<num.length();i++){\\n            int ch=num.charAt(i)-\\'0\\';\\n            map.put(ch,map.getOrDefault(ch,0)+1);\\n        }\\n        // StringBuilder sb=new StringBuilder();\\n        int count=0;\\n        for(int i=0;i<num.length();i++){\\n\\n            if(map.containsKey(i)){\\n                count=map.get(i);\\n            }\\n            else{\\n                count=0;\\n            }\\n          int x=num.charAt(i)-\\'0\\';\\n            if(x!=count){\\n                return false;\\n            }\\n        }\\n      return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        HashMap<Integer,Integer> map=new HashMap<>();\\n\\n        for(int i=0;i<num.length();i++){\\n            int ch=num.charAt(i)-\\'0\\';\\n            map.put(ch,map.getOrDefault(ch,0)+1);\\n        }\\n        // StringBuilder sb=new StringBuilder();\\n        int count=0;\\n        for(int i=0;i<num.length();i++){\\n\\n            if(map.containsKey(i)){\\n                count=map.get(i);\\n            }\\n            else{\\n                count=0;\\n            }\\n          int x=num.charAt(i)-\\'0\\';\\n            if(x!=count){\\n                return false;\\n            }\\n        }\\n      return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404476,
                "title": "easy-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i)) != int(num[i]):\\n                return False\\n        return True \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i)) != int(num[i]):\\n                return False\\n        return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3395513,
                "title": "easy-go-solution",
                "content": "```\\nfunc digitCount(num string) bool {\\n        var counters [10]int\\n\\n        for i := 0; i < len(num); i++ {\\n                val := num[i]\\n                counters[int(val-\\'0\\')]++\\n        }\\n\\n        isMatch := true\\n        for i := 0; i < len(num); i++ {\\n                val := num[i]\\n                if counters[i] != int(val-\\'0\\') {\\n                        isMatch = false\\n                        break\\n                }\\n        }\\n\\n        return isMatch\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc digitCount(num string) bool {\\n        var counters [10]int\\n\\n        for i := 0; i < len(num); i++ {\\n                val := num[i]\\n                counters[int(val-\\'0\\')]++\\n        }\\n\\n        isMatch := true\\n        for i := 0; i < len(num); i++ {\\n                val := num[i]\\n                if counters[i] != int(val-\\'0\\') {\\n                        isMatch = false\\n                        break\\n                }\\n        }\\n\\n        return isMatch\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3309058,
                "title": "java-hashmap-frequency-array-easy",
                "content": "## Solution 1: Using HashMap:\\n``` \\nclass Solution {\\n    public boolean digitCount(String num) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for (char c : num.toCharArray()) {\\n            int n = c - \\'0\\';\\n            map.put(n, 1 + map.getOrDefault(n, 0));\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            int n = num.charAt(i) - \\'0\\';\\n            if (n != map.getOrDefault(i, 0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```\\nSize will be at max $$10$$ so its very small.\\n\\n**Time complexity:** $$O(1)$$\\n**Space complexity:** $$O(1)$$\\n\\n---\\n## Solution 2: Using Frequency array:\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freq = new int[10];\\n        for (char c : num.toCharArray()) {\\n            freq[c - \\'0\\']++;\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            int n = num.charAt(i) - \\'0\\';\\n            if (n != freq[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```\\n\\nSize will be at max $$10$$ so its very small.\\n\\n**Time complexity:** $$O(1)$$\\n**Space complexity:** $$O(1)$$\\n",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "``` \\nclass Solution {\\n    public boolean digitCount(String num) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for (char c : num.toCharArray()) {\\n            int n = c - \\'0\\';\\n            map.put(n, 1 + map.getOrDefault(n, 0));\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            int n = num.charAt(i) - \\'0\\';\\n            if (n != map.getOrDefault(i, 0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freq = new int[10];\\n        for (char c : num.toCharArray()) {\\n            freq[c - \\'0\\']++;\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            int n = num.charAt(i) - \\'0\\';\\n            if (n != freq[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3096491,
                "title": "python-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->First we have allocated a an empty string for storing the value. Now a loop upto length of the given string is generated and stored the value of that place (count of that place in num string) if the new formed string is equal to the given sting nums, return True else False.\\n# Code\\n```\\nclass Solution(object):\\n    def digitCount(self, num):\\n        \"\"\"\\n        :type num: str\\n        :rtype: bool\\n        \"\"\"\\n        s=\\'\\'\\n        for i in range(len(num)):\\n            s+=str(num.count(str(i)))\\n        if num==s:\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def digitCount(self, num):\\n        \"\"\"\\n        :type num: str\\n        :rtype: bool\\n        \"\"\"\\n        s=\\'\\'\\n        for i in range(len(num)):\\n            s+=str(num.count(str(i)))\\n        if num==s:\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2918316,
                "title": "c-hashing",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int>v(10,0);   //to keep track of frequency of each digit\\n        int n=num.size();\\n\\n        for(int i=0;i<n;i++){\\n            int k=num[i]-\\'0\\';  //convert char to int\\n            v[k]++;   //hashing\\n        }\\n\\n        for(int i=0;i<n;i++){\\n            int k=num[i]-\\'0\\';\\n            if(v[i]!=k)return false;  //check if frequency of digit is equal to integer at that index\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int>v(10,0);   //to keep track of frequency of each digit\\n        int n=num.size();\\n\\n        for(int i=0;i<n;i++){\\n            int k=num[i]-\\'0\\';  //convert char to int\\n            v[k]++;   //hashing\\n        }\\n\\n        for(int i=0;i<n;i++){\\n            int k=num[i]-\\'0\\';\\n            if(v[i]!=k)return false;  //check if frequency of digit is equal to integer at that index\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2833980,
                "title": "easy-js-solution-o-n",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nlet digitCount = function(num) {\\n    let map = new Map();\\n\\n    // Set Key:Value To Map\\n    for(let val of num) {\\n        // Covert string to number\\n        let n = Number(val)\\n        map.set(n, map.get(n) + 1 || 1);\\n    }\\n\\n    // Compare\\n    for(let i = 0; i < num.length; i++) {\\n        if(map.get(i) === Number(num[i])) {\\n            continue;\\n        } else if(!map.get(i) && Number(num[i]) === 0) {\\n            continue;\\n        }\\n        return false;\\n    }\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nlet digitCount = function(num) {\\n    let map = new Map();\\n\\n    // Set Key:Value To Map\\n    for(let val of num) {\\n        // Covert string to number\\n        let n = Number(val)\\n        map.set(n, map.get(n) + 1 || 1);\\n    }\\n\\n    // Compare\\n    for(let i = 0; i < num.length; i++) {\\n        if(map.get(i) === Number(num[i])) {\\n            continue;\\n        } else if(!map.get(i) && Number(num[i]) === 0) {\\n            continue;\\n        }\\n        return false;\\n    }\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2778905,
                "title": "simple-solution",
                "content": "simple solution in java using hash table\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freq=new int[10];\\n        for(int i=0;i<num.length();i++)\\n        {\\n            int c=num.charAt(i)-\\'0\\';\\n            freq[c]++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            int a=num.charAt(i)-\\'0\\';\\n            if(a!=freq[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freq=new int[10];\\n        for(int i=0;i<num.length();i++)\\n        {\\n            int c=num.charAt(i)-\\'0\\';\\n            freq[c]++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            int a=num.charAt(i)-\\'0\\';\\n            if(a!=freq[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2778836,
                "title": "java-using-hash-maps",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n         Map<Integer,Integer> map=new HashMap<>();\\n        for(int i=0;i<num.length();i++){\\n            char a=num.charAt(i);\\n            if(map.containsKey(Integer.parseInt(String.valueOf(a))))\\n            {\\n                map.put(Integer.parseInt(String.valueOf(a)),map.get(Integer.parseInt(String.valueOf(a)))+1);\\n            }\\n            else{\\n                map.put(Integer.parseInt(String.valueOf(a)),1);\\n            }\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            if(map.containsKey(i)) {\\n                if (Integer.parseInt(String.valueOf(num.charAt(i))) != map.get(i)) {\\n                    return false;\\n                }\\n            }\\n            else{\\n                if(Integer.parseInt(String.valueOf(num.charAt(i)))!=0)\\n                    return false;\\n            }\\n        }\\n        return true; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n         Map<Integer,Integer> map=new HashMap<>();\\n        for(int i=0;i<num.length();i++){\\n            char a=num.charAt(i);\\n            if(map.containsKey(Integer.parseInt(String.valueOf(a))))\\n            {\\n                map.put(Integer.parseInt(String.valueOf(a)),map.get(Integer.parseInt(String.valueOf(a)))+1);\\n            }\\n            else{\\n                map.put(Integer.parseInt(String.valueOf(a)),1);\\n            }\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            if(map.containsKey(i)) {\\n                if (Integer.parseInt(String.valueOf(num.charAt(i))) != map.get(i)) {\\n                    return false;\\n                }\\n            }\\n            else{\\n                if(Integer.parseInt(String.valueOf(num.charAt(i)))!=0)\\n                    return false;\\n            }\\n        }\\n        return true; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2760627,
                "title": "beats-98-60-in-time",
                "content": "#### Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- convert to char array using `toCharArray()`;\\n- to convert char to int -> `num[i]-\\'0\\'`\\n- can use the opp. approach,  *i.e* int to char -> `num[i]+\\'0\\'`\\n#### Approach\\n<!-- Describe your approach to solving the problem. -->\\nloop through the char array\\nanother loop to count the frequency of each char `num[j] == i`\\nif `num[i] == freq` return true\\nreturn false when loop finishes.\\n##### Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        char[] numx = num.toCharArray();\\n        int freq = 0;\\n        for(int i=0; i<numx.length; i++){\\n            freq = 0;\\n            for(int j=0; j<numx.length; j++){\\n                if(i == (numx[j]-\\'0\\')){\\n                    freq++;\\n                }\\n            }\\n            if((numx[i]-\\'0\\') != freq) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        char[] numx = num.toCharArray();\\n        int freq = 0;\\n        for(int i=0; i<numx.length; i++){\\n            freq = 0;\\n            for(int j=0; j<numx.length; j++){\\n                if(i == (numx[j]-\\'0\\')){\\n                    freq++;\\n                }\\n            }\\n            if((numx[i]-\\'0\\') != freq) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2710543,
                "title": "easty-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- wrost O(N^2)\\n- best O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, s: str) -> bool:\\n        for i in range(len(s)):\\n            c=s.count(str(i))\\n            if c==int(s[i]):\\n                continue\\n            else:\\n                return False\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, s: str) -> bool:\\n        for i in range(len(s)):\\n            c=s.count(str(i))\\n            if c==int(s[i]):\\n                continue\\n            else:\\n                return False\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2619170,
                "title": "super-easy-c-soln-hash-table",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> v(10,0);\\n        for(auto it: num){\\n          v[it-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            if(v[i] != num[i]-\\'0\\') return false;\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> v(10,0);\\n        for(auto it: num){\\n          v[it-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            if(v[i] != num[i]-\\'0\\') return false;\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2571171,
                "title": "java-solution-for-beginners-without-hashmap",
                "content": "class Solution {\\n    public boolean digitCount(String num) {\\n        int[] count = new int[num.length()];\\n        for(int i = 0;i<num.length();i++){\\n            for(int j = 0;j<num.length();j++){\\n                if(i == num.charAt(j)-\\'0\\'){\\n                    count[i]++;\\n                }\\n            }\\n        }\\n        boolean bo = true;\\n        for(int i = 0;i<num.length();i++){\\n            if(count[i] == num.charAt(i)-\\'0\\'){\\n                bo = true;\\n            }\\n            else{\\n                bo = false;\\n                break;\\n            }\\n        }\\n        \\n        return bo;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean digitCount(String num) {\\n        int[] count = new int[num.length()];\\n        for(int i = 0;i<num.length();i++){\\n            for(int j = 0;j<num.length();j++){\\n                if(i == num.charAt(j)-\\'0\\'){\\n                    count[i]++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2501744,
                "title": "62-ms-faster-than-99-15-easy-intuitive-js-solution",
                "content": "```\\nvar digitCount = function(num) {\\n    let map = new Map();\\n        \\n    for(let i = 0; i < num.length; i++) {\\n        map.has(num.charAt(i)) ? map.set(num.charAt(i), map.get(num.charAt(i))+1) : map.set(num.charAt(i), 1)\\n    }\\n\\n    let value;\\n    for(let i = 0; i < num.length; i++) {\\n        value = map.has(i.toString()) ? map.get(i.toString()) : 0;\\n        if(value != num.charAt(i)){\\n            return false\\n        }\\n    }\\n    \\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar digitCount = function(num) {\\n    let map = new Map();\\n        \\n    for(let i = 0; i < num.length; i++) {\\n        map.has(num.charAt(i)) ? map.set(num.charAt(i), map.get(num.charAt(i))+1) : map.set(num.charAt(i), 1)\\n    }\\n\\n    let value;\\n    for(let i = 0; i < num.length; i++) {\\n        value = map.has(i.toString()) ? map.get(i.toString()) : 0;\\n        if(value != num.charAt(i)){\\n            return false\\n        }\\n    }\\n    \\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2484276,
                "title": "c-0ms-unordered-map-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) \\n    {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<num.length();i++)\\n        {\\n            mp[num[i]]++;\\t\\n        }        \\n        for(int i=0;i<num.length();i++)\\n        {\\n            char currnum=i+\\'0\\';\\n            int freq=num[i]-\\'0\\';\\n\\n            if(mp[currnum]!=freq)\\n            {\\n               return false;    \\n            }\\n            \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) \\n    {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<num.length();i++)\\n        {\\n            mp[num[i]]++;\\t\\n        }        \\n        for(int i=0;i<num.length();i++)\\n        {\\n            char currnum=i+\\'0\\';\\n            int freq=num[i]-\\'0\\';\\n\\n            if(mp[currnum]!=freq)\\n            {\\n               return false;    \\n            }\\n            \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2332877,
                "title": "python3-o-n-o-n-runtime-47ms-62-83-memory-13-8mb-56-99",
                "content": "```\\nfrom collections import Counter as c\\nclass Solution:\\n#     O(n) || O(n)\\n# Runtime: 47ms 62.83% || Memory: 13.8mb 56.99%\\n    def digitCount(self, num: str) -> bool:\\n        if not num:\\n            return num\\n\\n        numFreq = c(num)\\n\\n        for idx, val in enumerate(num):\\n            if numFreq[f\\'{idx}\\'] != int(val):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter as c\\nclass Solution:\\n#     O(n) || O(n)\\n# Runtime: 47ms 62.83% || Memory: 13.8mb 56.99%\\n    def digitCount(self, num: str) -> bool:\\n        if not num:\\n            return num\\n\\n        numFreq = c(num)\\n\\n        for idx, val in enumerate(num):\\n            if numFreq[f\\'{idx}\\'] != int(val):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2320976,
                "title": "java-runtime-1ms-time-o-n-space-n",
                "content": "```\\n/*\\nTo understand the code properly, dry run the code\\nin your notebook for the input:\\nnum = \"1210\"\\n*/\\n\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        HashMap<Character, Integer> map = new HashMap<>() ;\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            map.put(num.charAt(i), map.getOrDefault(num.charAt(i), 0)+1) ;\\n        }\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            char ch = (char)(48+i) ;\\n            \\n            if (map.containsKey(ch)) {\\n                if ((int)(num.charAt(i))-48 != map.get(ch)) {\\n                    return false ;\\n                }\\n            }\\n            else if (num.charAt(i) != \\'0\\'){\\n                return false ;\\n            }\\n        }\\n        \\n        return true ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n/*\\nTo understand the code properly, dry run the code\\nin your notebook for the input:\\nnum = \"1210\"\\n*/\\n\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        HashMap<Character, Integer> map = new HashMap<>() ;\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            map.put(num.charAt(i), map.getOrDefault(num.charAt(i), 0)+1) ;\\n        }\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            char ch = (char)(48+i) ;\\n            \\n            if (map.containsKey(ch)) {\\n                if ((int)(num.charAt(i))-48 != map.get(ch)) {\\n                    return false ;\\n                }\\n            }\\n            else if (num.charAt(i) != \\'0\\'){\\n                return false ;\\n            }\\n        }\\n        \\n        return true ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2269284,
                "title": "simple-c-solution",
                "content": "```\\n        int n = num.length();\\n        vector<int> v(10,0);\\n        for(int i=0;i<n;i++)\\n        {\\n            v[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if((num[i]-\\'0\\') != v[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n        int n = num.length();\\n        vector<int> v(10,0);\\n        for(int i=0;i<n;i++)\\n        {\\n            v[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if((num[i]-\\'0\\') != v[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2246289,
                "title": "python-simple-solution-easy-2-liner-faster-than-93-easy-to-understand",
                "content": "```\\nst = \\'\\'\\nfor i in range(len(num)):\\n\\tst = st+str(num.count(str(i)))\\nreturn(st == num)\\n```\\n***Please Do Upvote, if you found my code helpful***",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nst = \\'\\'\\nfor i in range(len(num)):\\n\\tst = st+str(num.count(str(i)))\\nreturn(st == num)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2243800,
                "title": "java",
                "content": "```\\nimport java.util.*;\\n\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        Hashtable<Integer, Integer> ht = new Hashtable<Integer, Integer>();\\n        for(int i = 0; i<num.length(); i++){\\n            ht.put(i, num.charAt(i)-\\'0\\'); \\n        }\\n        \\n        for(int i = 0; i<num.length(); i++){\\n            if(ht.get(num.charAt(i)-\\'0\\')== null){\\n                return false;\\n            }\\n            ht.replace(num.charAt(i)-\\'0\\', ht.get(num.charAt(i)-\\'0\\')-1);\\n        }\\n        for(int i = 0; i<num.length(); i++){\\n            if(ht.get(i)!=0){\\n                return false;\\n            }\\t\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.*;\\n\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        Hashtable<Integer, Integer> ht = new Hashtable<Integer, Integer>();\\n        for(int i = 0; i<num.length(); i++){\\n            ht.put(i, num.charAt(i)-\\'0\\'); \\n        }\\n        \\n        for(int i = 0; i<num.length(); i++){\\n            if(ht.get(num.charAt(i)-\\'0\\')== null){\\n                return false;\\n            }\\n            ht.replace(num.charAt(i)-\\'0\\', ht.get(num.charAt(i)-\\'0\\')-1);\\n        }\\n        for(int i = 0; i<num.length(); i++){\\n            if(ht.get(i)!=0){\\n                return false;\\n            }\\t\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2218421,
                "title": "kotlin-1-line",
                "content": "```\\nfun digitCount(s: String) = s.withIndex().all { it.value - \\'0\\' == s.count { c -> c == \\'0\\' + it.index } }\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nfun digitCount(s: String) = s.withIndex().all { it.value - \\'0\\' == s.count { c -> c == \\'0\\' + it.index } }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2195712,
                "title": "java-easiest-solution-with-steps-explained",
                "content": "**STEPS**\\n\\n**Here we are using Frequency Array**\\n\\n**Step 1:** Initialising the Frequency Array with size 10 (**because 1 <= n <= 10 was given in the constraints**)\\n**Step 2:** Take each characters from the string and make it into character array\\n**Step 3:**  Store the frequency of characters in frequency Array.\\n**Step 4:** Now find frequency of each index value and update the frequency array.\\n**Step 5:** Now within a loop check upto constraint value check if frequency is zero or not .If zero then return false otherwise the function will return true.\\n\\n**Code**\\n\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freqArray = new int[10];\\n        \\n        \\n        for(char ch : num.toCharArray()){\\n            freqArray[ch-\\'0\\']++;\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            int freq = num.charAt(i)-\\'0\\';\\n            freqArray[i] = freqArray[i] - freq; \\n        }\\n        for(int i=0;i<10;i++){\\n            if(freqArray[i]!=0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freqArray = new int[10];\\n        \\n        \\n        for(char ch : num.toCharArray()){\\n            freqArray[ch-\\'0\\']++;\\n        }\\n        \\n        for(int i=0;i<num.length();i++){\\n            int freq = num.charAt(i)-\\'0\\';\\n            freqArray[i] = freqArray[i] - freq; \\n        }\\n        for(int i=0;i<10;i++){\\n            if(freqArray[i]!=0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2189195,
                "title": "javascript-using-regex",
                "content": "```\\nvar digitCount = function(num) {    \\n    const res = [...num].filter((element, index) => {\\n        const reg = new RegExp(index, \"g\");\\n        const count = (num.match(reg) || []).length;\\n        \\n        return Number(element) === count\\n    })\\n    \\n    return res.length === num.length    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar digitCount = function(num) {    \\n    const res = [...num].filter((element, index) => {\\n        const reg = new RegExp(index, \"g\");\\n        const count = (num.match(reg) || []).length;\\n        \\n        return Number(element) === count\\n    })\\n    \\n    return res.length === num.length    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2178551,
                "title": "easy-javascript-solution",
                "content": "```\\nvar digitCount = function(num) {\\n    let arr= Array(num.length).fill(0);\\n    for(const char of num){\\n        arr[Number(char)]++;\\n    }\\n    return arr.join(\\'\\') === num;\\n};\\n```\\n\\nRuntime: 113 ms, faster than 31.20% of JavaScript online submissions for Check if Number Has Equal Digit Count and Digit Value.\\nMemory Usage: 43.8 MB, less than 16.45% of JavaScript online submissions for Check if Number Has Equal Digit Count and Digit Value.",
                "solutionTags": [],
                "code": "```\\nvar digitCount = function(num) {\\n    let arr= Array(num.length).fill(0);\\n    for(const char of num){\\n        arr[Number(char)]++;\\n    }\\n    return arr.join(\\'\\') === num;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2171618,
                "title": "easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<char,int>mp;\\n        for(int i=0;i<num.size();i++)\\n            mp[num[i]]++;\\n        int n=num.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            int temp=num[i]-\\'0\\';\\n           /// cout<<mp[(i+\\'0\\')]<<\" \"<<temp<<endl;\\n            if(mp[(i+\\'0\\')]!=temp)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<char,int>mp;\\n        for(int i=0;i<num.size();i++)\\n            mp[num[i]]++;\\n        int n=num.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            int temp=num[i]-\\'0\\';\\n           /// cout<<mp[(i+\\'0\\')]<<\" \"<<temp<<endl;\\n            if(mp[(i+\\'0\\')]!=temp)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2124375,
                "title": "java-sol-using-counter-array",
                "content": "Java solution to use counter array because we will only have 10 digits\\n\\n```\\npublic boolean digitCount(String num) {\\n        int[] digit_counter = new int[10];\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            digit_counter[Character.getNumericValue(num.charAt(i))]++;\\n        }\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            if (digit_counter[i] != Character.getNumericValue(num.charAt(i)))\\n                return false;\\n        }\\n        \\n        return true;\\n        \\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Java solution to use counter array because we will only have 10 digits\\n\\n```\\npublic boolean digitCount(String num) {\\n        int[] digit_counter = new int[10];\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            digit_counter[Character.getNumericValue(num.charAt(i))]++;\\n        }\\n        \\n        for (int i = 0; i < num.length(); i++) {\\n            if (digit_counter[i] != Character.getNumericValue(num.charAt(i)))\\n                return false;\\n        }\\n        \\n        return true;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2112937,
                "title": "c-solution-without-using-vector-array-map-for-beginners",
                "content": "class Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        int count=0;\\n        int i=0;\\n        int a=0;\\n        for(int c=0;c<num.size();c++)\\n        {\\n            count=0;\\n            for(i=0;i<num.size();i++)\\n            {\\n                if(num[i]==char(c+48))\\n                {\\n                    count++;\\n                }\\n            }\\n            // cout<<count<<endl;\\n            if(count!=(int)num[a]-48)\\n            {\\n                return false;\\n            }\\n            a++;\\n        }\\n       \\n        \\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        int count=0;\\n        int i=0;\\n        int a=0;\\n        for(int c=0;c<num.size();c++)\\n        {\\n            count=0;\\n            for(i=0;i<num.size();i++)\\n            {\\n                if(num[i]==char(c+48))\\n                {\\n                    count++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2100275,
                "title": "kotlin-short-easy-solution-264ms-faster-than-50-00",
                "content": "just do what the problem says, along with 1 edge case\\n```\\nclass Solution {\\n    fun digitCount(num: String): Boolean {\\n        val map = num.groupingBy { it }.eachCount()\\n        return num.indices.all {\\n            val count = map[(\\'0\\'..\\'9\\').toList()[it]] ?: 0\\n            count == num[it].toString().toInt()\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun digitCount(num: String): Boolean {\\n        val map = num.groupingBy { it }.eachCount()\\n        return num.indices.all {\\n            val count = map[(\\'0\\'..\\'9\\').toList()[it]] ?: 0\\n            count == num[it].toString().toInt()\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2093748,
                "title": "python-count-and-check-with-explanation-45ms",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        \\n        #Find the length\\n        LENGTH = len( num )\\n            \\n        #Count the occurences\\n        counter = Counter( num )\\n\\n        #Go through each number index\\n        for i in range( LENGTH ):\\n            #The index is the current digit\\n            current_digit = i\\n            \\n            #Cast it as a string for comparison\\n            str_current = str( i ) \\n            \\n            #Use the index to find the expected number in num\\n            expected_number = int ( num[ i ] )\\n            \\n            #Use the stringified number to find its occurences in counter\\n            if str_current in counter:\\n                digit_count = int( counter[ str_current ] )\\n                \\n            #If it is not found, the count is zero\\n            else:\\n                digit_count = 0\\n            \\n            #If we don\\'t find the expected number as the count, we return False\\n            if expected_number != digit_count:\\n                return False\\n            \\n        #Otherwise, all that are checked are valid\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        \\n        #Find the length\\n        LENGTH = len( num )\\n            \\n        #Count the occurences\\n        counter = Counter( num )\\n\\n        #Go through each number index\\n        for i in range( LENGTH ):\\n            #The index is the current digit\\n            current_digit = i\\n            \\n            #Cast it as a string for comparison\\n            str_current = str( i ) \\n            \\n            #Use the index to find the expected number in num\\n            expected_number = int ( num[ i ] )\\n            \\n            #Use the stringified number to find its occurences in counter\\n            if str_current in counter:\\n                digit_count = int( counter[ str_current ] )\\n                \\n            #If it is not found, the count is zero\\n            else:\\n                digit_count = 0\\n            \\n            #If we don\\'t find the expected number as the count, we return False\\n            if expected_number != digit_count:\\n                return False\\n            \\n        #Otherwise, all that are checked are valid\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2092793,
                "title": "rust-hashmap-counter-o-n",
                "content": "```\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn digit_count(num: String) -> bool {\\n        let mut dc = HashMap::new();\\n        for c in num.chars() {\\n            let d: usize = c.to_digit(10).unwrap_or(88) as usize;\\n            *dc.entry(d).or_insert(0) += 1;\\n        }\\n        \\n        for (i, c) in num.chars().enumerate() {\\n            let cnt: usize = c.to_digit(10).unwrap_or(99) as usize;\\n            if !dc.contains_key(&i) {\\n                if cnt == 0 {\\n                    continue\\n                } else {\\n                    return false;\\n                }\\n            } else if dc[&i] != cnt {\\n                return false;\\n            }\\n        }\\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashMap;\\n\\nimpl Solution {\\n    pub fn digit_count(num: String) -> bool {\\n        let mut dc = HashMap::new();\\n        for c in num.chars() {\\n            let d: usize = c.to_digit(10).unwrap_or(88) as usize;\\n            *dc.entry(d).or_insert(0) += 1;\\n        }\\n        \\n        for (i, c) in num.chars().enumerate() {\\n            let cnt: usize = c.to_digit(10).unwrap_or(99) as usize;\\n            if !dc.contains_key(&i) {\\n                if cnt == 0 {\\n                    continue\\n                } else {\\n                    return false;\\n                }\\n            } else if dc[&i] != cnt {\\n                return false;\\n            }\\n        }\\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2087358,
                "title": "c-easy-0ms-100-beats-beginner-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int>ans;\\n        for(int i=0; i<num.size(); i++)\\n            ans[num[i]]++;\\n        for(int i=0; i<num.size(); i++){\\n            char c =\\'0\\' + i;\\n            if(num[i] != \\'0\\' + ans[c]){\\n                return false;\\n                \\n\\n            }\\n        }  \\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int>ans;\\n        for(int i=0; i<num.size(); i++)\\n            ans[num[i]]++;\\n        for(int i=0; i<num.size(); i++){\\n            char c =\\'0\\' + i;\\n            if(num[i] != \\'0\\' + ans[c]){\\n                return false;\\n                \\n\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2086477,
                "title": "javascript-soln",
                "content": "```\\nvar digitCount = function(num) {\\n\\n    const numArray = num.split(\"\");\\n    for(let i=0;i<num.length;i++){\\n      if (!(num[i] == countFreq(numArray,`${i}`))) {\\n          return false;\\n      }\\n    }\\n    return true;\\n};\\n\\nconst countFreq = (arr,index) => {\\n   return( (arr.filter( (n) => {return n===index && n})).length );\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nvar digitCount = function(num) {\\n\\n    const numArray = num.split(\"\");\\n    for(let i=0;i<num.length;i++){\\n      if (!(num[i] == countFreq(numArray,`${i}`))) {\\n          return false;\\n      }\\n    }\\n    return true;\\n};\\n\\nconst countFreq = (arr,index) => {\\n   return( (arr.filter( (n) => {return n===index && n})).length );\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2086252,
                "title": "javascript-solution-using-replace",
                "content": "```\\n    for(let i = 0; i < num.length; i++) {\\n        const temp = num.replace(new RegExp(`${i}`, \"g\"), \"\");\\n        if (num.length - temp.length !== num.charAt(i) - \\'0\\') {\\n            return false;\\n        }\\n    }\\n    \\n    return true;\\n```",
                "solutionTags": [],
                "code": "```\\n    for(let i = 0; i < num.length; i++) {\\n        const temp = num.replace(new RegExp(`${i}`, \"g\"), \"\");\\n        if (num.length - temp.length !== num.charAt(i) - \\'0\\') {\\n            return false;\\n        }\\n    }\\n    \\n    return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2085920,
                "title": "cpp-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<char,int>m;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            m[nums[i]]++;\\n        }\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            char t=nums[i];\\n            auto it=m.find(i+\\'0\\');\\n            if(it!=m.end())\\n            {\\n                if(it->second!=t-\\'0\\')\\n                {\\n                    return false;\\n                }\\n            }\\n            else if(it==m.end()&&(t)!=\\'0\\')\\n            {\\n                return false;\\n            }\\n            else\\n                continue;\\n            \\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        unordered_map<char,int>m;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            m[nums[i]]++;\\n        }\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            char t=nums[i];\\n            auto it=m.find(i+\\'0\\');\\n            if(it!=m.end())\\n            {\\n                if(it->second!=t-\\'0\\')\\n                {\\n                    return false;\\n                }\\n            }\\n            else if(it==m.end()&&(t)!=\\'0\\')\\n            {\\n                return false;\\n            }\\n            else\\n                continue;\\n            \\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2085579,
                "title": "cpp-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        for(int i = 0  ; i < num.size() ; i++){\\n                int a = count(num.begin() , num.end() , i+\\'0\\'); // Make sure you actually convert those integers to characters by manipulating those ASCII values , here we count the occurances of the i th indice.\\n                if(a!=(num[i]-\\'0\\')) \\n                        return false;\\n        }\\n            return true;\\n    }\\n};\\n```\\n**Please upvote if you find this helpful**",
                "solutionTags": [
                    "Counting Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        for(int i = 0  ; i < num.size() ; i++){\\n                int a = count(num.begin() , num.end() , i+\\'0\\'); // Make sure you actually convert those integers to characters by manipulating those ASCII values , here we count the occurances of the i th indice.\\n                if(a!=(num[i]-\\'0\\')) \\n                        return false;\\n        }\\n            return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2085435,
                "title": "0-ms-faster-hashmap-c",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        \\n        map<int,int>mp;\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]!=\\'0\\') //if any number is occuring zero times then do not add that number into map\\n                mp[i] = nums[i] - \\'0\\';\\n        }\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(mp.find(nums[i]-\\'0\\') == mp.end())\\n                return false;\\n            \\n            mp[nums[i]-\\'0\\']--;\\n            if(mp[nums[i]-\\'0\\']==0) //if value become zero then remove it from the map.\\n                mp.erase(nums[i]-\\'0\\');\\n        }\\n        if(mp.size()==0) // if map is empty then return true.\\n            return true;\\n        else\\n            return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string nums) {\\n        \\n        map<int,int>mp;\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]!=\\'0\\') //if any number is occuring zero times then do not add that number into map\\n                mp[i] = nums[i] - \\'0\\';\\n        }\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(mp.find(nums[i]-\\'0\\') == mp.end())\\n                return false;\\n            \\n            mp[nums[i]-\\'0\\']--;\\n            if(mp[nums[i]-\\'0\\']==0) //if value become zero then remove it from the map.\\n                mp.erase(nums[i]-\\'0\\');\\n        }\\n        if(mp.size()==0) // if map is empty then return true.\\n            return true;\\n        else\\n            return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2085302,
                "title": "go-golang-solution",
                "content": "```go\\nfunc digitCount(num string) bool {\\n    n := len(num)\\n    var a [10]int\\n    var b [10]int\\n    for i := 0; i < n; i++ {\\n        a[num[i] - \\'0\\']++\\n        b[i] = int(num[i] - \\'0\\')\\n    }\\n    return a == b\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc digitCount(num string) bool {\\n    n := len(num)\\n    var a [10]int\\n    var b [10]int\\n    for i := 0; i < n; i++ {\\n        a[num[i] - \\'0\\']++\\n        b[i] = int(num[i] - \\'0\\')\\n    }\\n    return a == b\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2085072,
                "title": "hasmap-counting-c-sort-and-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n      map<int,int>mp;\\n        for(auto it:num){\\n            mp[it-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++){\\n            if(mp[i]!=num[i]-\\'0\\'){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n      map<int,int>mp;\\n        for(auto it:num){\\n            mp[it-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++){\\n            if(mp[i]!=num[i]-\\'0\\'){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084831,
                "title": "c-array",
                "content": "```\\n    public bool DigitCount(string num)\\n    {\\n        int[] freq = new int[10];\\n        foreach (char n in num)\\n            freq[n - \\'0\\']++;\\n\\n        for (int i = 0; i < num.Length; i++)\\n            if (num[i] - \\'0\\' != freq[i])\\n                return false;\\n        return true;\\n    }\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\n    public bool DigitCount(string num)\\n    {\\n        int[] freq = new int[10];\\n        foreach (char n in num)\\n            freq[n - \\'0\\']++;\\n\\n        for (int i = 0; i < num.Length; i++)\\n            if (num[i] - \\'0\\' != freq[i])\\n                return false;\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2084695,
                "title": "c-solution",
                "content": "**Complexity**\\n- Time: O(n)\\n- Space: O(1)\\n\\n**Implementation**\\n```\\npublic class Solution {\\n    public bool DigitCount(string num) {\\n        \\n        if(string.IsNullOrEmpty(num))\\n            throw new ArgumentException(\"Invalid Input.\");\\n        \\n        int[] freq = new int[10];\\n        foreach(var c in num)\\n            freq[c - \\'0\\']++;\\n        \\n        for(int i = 0; i < num.Length; i++)\\n        {\\n            if(freq[i] != num[i] - \\'0\\')\\n                return false;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public bool DigitCount(string num) {\\n        \\n        if(string.IsNullOrEmpty(num))\\n            throw new ArgumentException(\"Invalid Input.\");\\n        \\n        int[] freq = new int[10];\\n        foreach(var c in num)\\n            freq[c - \\'0\\']++;\\n        \\n        for(int i = 0; i < num.Length; i++)\\n        {\\n            if(freq[i] != num[i] - \\'0\\')\\n                return false;\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084574,
                "title": "python-counter-solution",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        counts = Counter(num)\\n        for i in range(len(num)):\\n            if counts[str(i)] != int(num[i]):\\n                return False\\n        return True \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        counts = Counter(num)\\n        for i in range(len(num)):\\n            if counts[str(i)] != int(num[i]):\\n                return False\\n        return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084512,
                "title": "faster-easy-to-understand-c-code",
                "content": "* ***Time Complexity : O(N * N)***\\n\\n* ***Space Complexity : O(N)***\\n\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        int n = num.size();\\n        \\n        unordered_map<int, int> mp;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int count = 0;\\n            \\n            for(int j = 0; j < n; j++)\\n            {\\n                if(num[j] - \\'0\\' == i)\\n                {\\n                    count++;\\n                }\\n            }\\n            \\n            mp[i] = count;\\n        }\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(mp[i] != num[i] - \\'0\\')\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        int n = num.size();\\n        \\n        unordered_map<int, int> mp;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int count = 0;\\n            \\n            for(int j = 0; j < n; j++)\\n            {\\n                if(num[j] - \\'0\\' == i)\\n                {\\n                    count++;\\n                }\\n            }\\n            \\n            mp[i] = count;\\n        }\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(mp[i] != num[i] - \\'0\\')\\n            {\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084315,
                "title": "clean-python-code-using-counter",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = Counter(num)\\n        for idx, val in enumerate(num):\\n            if int(val) != d[str(idx)]:\\n                return False\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = Counter(num)\\n        for idx, val in enumerate(num):\\n            if int(val) != d[str(idx)]:\\n                return False\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2084106,
                "title": "c-simple",
                "content": "\\n\\n    class Solution {\\n\\n    public:\\n    bool digitCount(string num) {\\n       vector<int>v(11,0);\\n        for(int i=0;i<num.size();i++){\\n          v[num[i]-\\'0\\']++;\\n            //cout<<v[num[i]-\\'0\\']<<\" \";\\n        }\\n        for(int i=0;i<num.size();i++){\\n            int x=num[i]-\\'0\\';\\n            if(v[i]!=x){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public:\\n    bool digitCount(string num) {\\n       vector<int>v(11,0);\\n        for(int i=0;i<num.size();i++){\\n          v[num[i]-\\'0\\']++;\\n            //cout<<v[num[i]-\\'0\\']<<\" \";\\n        }",
                "codeTag": "C++"
            },
            {
                "id": 2083968,
                "title": "simple-c-using-map-o-n-time",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<int,int> mp;\\n        for(auto x:num) mp[x-\\'0\\']++;\\n        for(int i=0;i<num.size();i++){\\n            if(num[i]-\\'0\\'!=mp[i]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```\\n\\n**If you like this, Do Upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<int,int> mp;\\n        for(auto x:num) mp[x-\\'0\\']++;\\n        for(int i=0;i<num.size();i++){\\n            if(num[i]-\\'0\\'!=mp[i]) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083919,
                "title": "easy-short-efficient-solution",
                "content": "```\\nclass Solution {\\n#define ln ListNode\\n#define tn TreeNode\\n    typedef long long ll;\\n    typedef vector<ll> vi;\\n#define endl \\'\\\\n\\'\\n    const ll mod = 1e9;\\npublic:\\n    bool digitCount(string& s) {\\n        vi hash(10);\\n        for (char& ch : s)\\n            ++hash[ch - \\'0\\'];\\n        for (ll i = 0;i < s.length();++i)\\n            if (hash[i] != (s[i] - \\'0\\'))return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n#define ln ListNode\\n#define tn TreeNode\\n    typedef long long ll;\\n    typedef vector<ll> vi;\\n#define endl \\'\\\\n\\'\\n    const ll mod = 1e9;\\npublic:\\n    bool digitCount(string& s) {\\n        vi hash(10);\\n        for (char& ch : s)\\n            ++hash[ch - \\'0\\'];\\n        for (ll i = 0;i < s.length();++i)\\n            if (hash[i] != (s[i] - \\'0\\'))return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083886,
                "title": "solution-using-hash-map-in-python",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        leng = len(num)\\n        freq = {}\\n        \\n        for i in range(leng):\\n            freq[str(i)] = 0\\n            \\n        for i in range(leng):\\n            if num[i] in freq:\\n                freq[num[i]] += 1\\n        \\n        for i in range(leng):\\n            if num[i] == str(freq[str(i)]):\\n                continue\\n            else:\\n                return False\\n            \\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        leng = len(num)\\n        freq = {}\\n        \\n        for i in range(leng):\\n            freq[str(i)] = 0\\n            \\n        for i in range(leng):\\n            if num[i] in freq:\\n                freq[num[i]] += 1\\n        \\n        for i in range(leng):\\n            if num[i] == str(freq[str(i)]):\\n                continue\\n            else:\\n                return False\\n            \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083855,
                "title": "c-easy-to-understand-simple-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<int,int> mp1,mp2;\\n        int i=0;\\n        for(char ch:num)\\n        {\\n            if(ch!=\\'0\\')\\n            mp1[i]=ch-\\'0\\';\\n                i++;\\n        }\\n        for(char ch:num)\\n        {\\n            mp2[ch-\\'0\\']++;\\n        }\\n        return mp1==mp2;\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<int,int> mp1,mp2;\\n        int i=0;\\n        for(char ch:num)\\n        {\\n            if(ch!=\\'0\\')\\n            mp1[i]=ch-\\'0\\';\\n                i++;\\n        }\\n        for(char ch:num)\\n        {\\n            mp2[ch-\\'0\\']++;\\n        }\\n        return mp1==mp2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083835,
                "title": "c-easy-with-explanation",
                "content": "```\\n// Easy solution. We\\'ll first populate the array by string elements and then check if they \\n//are equal or not.\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int n = num.size();\\n        vector<int> arr(10,0);\\n        for(auto &it : num){\\n            arr[it-\\'0\\']++;\\n        }\\n        bool ans = 1;\\n        for(int i = 0;i<n;i++){\\n            if(arr[i] != num[i]-\\'0\\'){\\n                ans = 0;\\n                break;\\n            }\\n        }\\n        if(ans)\\n            return true;\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n// Easy solution. We\\'ll first populate the array by string elements and then check if they \\n//are equal or not.\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int n = num.size();\\n        vector<int> arr(10,0);\\n        for(auto &it : num){\\n            arr[it-\\'0\\']++;\\n        }\\n        bool ans = 1;\\n        for(int i = 0;i<n;i++){\\n            if(arr[i] != num[i]-\\'0\\'){\\n                ans = 0;\\n                break;\\n            }\\n        }\\n        if(ans)\\n            return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083824,
                "title": "java-do-as-they-ask",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] bucket = new int[10];\\n        for (char c : num.toCharArray()) {\\n            bucket[c - \\'0\\']++;\\n        }\\n        int i = 0;\\n        for (; i < num.length(); i++) {\\n            if (bucket[i] != num.charAt(i) - \\'0\\') return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] bucket = new int[10];\\n        for (char c : num.toCharArray()) {\\n            bucket[c - \\'0\\']++;\\n        }\\n        int i = 0;\\n        for (; i < num.length(); i++) {\\n            if (bucket[i] != num.charAt(i) - \\'0\\') return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083772,
                "title": "c-using-10-size-vector",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int arr[10] = {0};\\n        for(auto it : num){\\n            arr[it-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++){\\n            if(arr[i]!=(num[i])-\\'0\\') return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        int arr[10] = {0};\\n        for(auto it : num){\\n            arr[it-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++){\\n            if(arr[i]!=(num[i])-\\'0\\') return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2083762,
                "title": "python-java-easy-to-understand",
                "content": "\\tclass Solution:\\n\\t\\tdef digitCount(self, num: str) -> bool:\\n\\t\\t\\tcnt = collections.Counter(num)\\n\\t\\t\\tfor i, digit in enumerate(num):\\n\\t\\t\\t\\tif cnt[str(i)] != int(digit):\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn True\\n\\n\\n\\tclass Solution {\\n\\t\\tpublic boolean digitCount(String num) {\\n\\t\\t\\tint[] cnt = new int[10];\\n\\t\\t\\tfor (char c: num.toCharArray()) {\\n\\t\\t\\t\\tcnt[c - \\'0\\'] += 1;\\n\\t\\t\\t}\\n\\t\\t\\tfor (int i = 0; i < num.length(); i ++) {\\n\\t\\t\\t\\tif (cnt[i] != num.charAt(i) - \\'0\\') {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution:\\n\\t\\tdef digitCount(self, num: str) -> bool:\\n\\t\\t\\tcnt = collections.Counter(num)\\n\\t\\t\\tfor i, digit in enumerate(num):\\n\\t\\t\\t\\tif cnt[str(i)] != int(digit):\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn True\\n\\n\\n\\tclass Solution {\\n\\t\\tpublic boolean digitCount(String num) {\\n\\t\\t\\tint[] cnt = new int[10];\\n\\t\\t\\tfor (char c: num.toCharArray()) {\\n\\t\\t\\t\\tcnt[c - \\'0\\'] += 1;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4084293,
                "title": "check-if-number-has-equal-digit-count",
                "content": "# Approach\\n1. Split number into an array by converting it into a string and the split methods.\\n2. By default, set all numbers to be true. \\n3. Use a for loop to iterate through the array. \\n4. For each loop, get the length of the filtered array - count. \\n5. Filter the array to find if the string \\'x\\' is equal to stringified index \\'i\\'. \\n6. If count does not equal the value at arr[i], switch isValid to false and break the loop. \\n7. return isValid\\n\\n\\n```\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function(num) {\\n    const arr = num.toString().split(\\'\\');\\n    let isValid = true;\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        const count = arr.filter((x) => x === i.toString()).length;\\n        if (count !== parseInt(arr[i])) {\\n            isValid = false;\\n            break;\\n        }\\n    }\\n\\n    return isValid;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function(num) {\\n    const arr = num.toString().split(\\'\\');\\n    let isValid = true;\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        const count = arr.filter((x) => x === i.toString()).length;\\n        if (count !== parseInt(arr[i])) {\\n            isValid = false;\\n            break;\\n        }\\n    }\\n\\n    return isValid;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079858,
                "title": "python-dictionary-solution-beats-99-in-memory-70-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = {}\\n        n = list(map(int, num))\\n        for i in n:\\n            if i in d:\\n                d[i] += 1\\n            else:\\n                d[i] = 1\\n        res = True\\n        for i in range(len(n)):\\n            if i in d:\\n                if d[i] != n[i]:\\n                    res = False\\n                    break\\n            elif i not in d:\\n                if n[i] > 0:\\n                    res = False\\n                    break\\n\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = {}\\n        n = list(map(int, num))\\n        for i in n:\\n            if i in d:\\n                d[i] += 1\\n            else:\\n                d[i] = 1\\n        res = True\\n        for i in range(len(n)):\\n            if i in d:\\n                if d[i] != n[i]:\\n                    res = False\\n                    break\\n            elif i not in d:\\n                if n[i] > 0:\\n                    res = False\\n                    break\\n\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079441,
                "title": "discuss",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] count = new int[10];\\n\\n        for (final char c : num.toCharArray())\\n        ++count[c - \\'0\\'];\\n\\n        for (int i = 0; i < num.length(); ++i)\\n        if (count[i] != num.charAt(i) - \\'0\\')\\n            return false;\\n\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] count = new int[10];\\n\\n        for (final char c : num.toCharArray())\\n        ++count[c - \\'0\\'];\\n\\n        for (int i = 0; i < num.length(); ++i)\\n        if (count[i] != num.charAt(i) - \\'0\\')\\n            return false;\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078817,
                "title": "c-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nObviously try to avoid n2\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nPutting the digits and their associated occurence in the map. You need to go through the num string again and decrease every time you see a digit. If the map holds digits for which the number of occurence left is not 0, than we have a problem.\\nCould be optmized.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) Map has a maximum of 10 entries.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<int,int> myMap;\\n\\n        for (int i=0; i<num.size(); i++) {\\n            myMap[i] = (int) num[i] -48; \\n        }\\n\\n        for (int i=0; i<num.size(); i++) { \\n            myMap[(int) num[i] -48]--;\\n        }\\n\\n        for (const auto & [key, value] : myMap)\\n            if (value != 0) return false;\\n\\n        return true;\\n    }\\n};\\n\\n// 0 apparait 1\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<int,int> myMap;\\n\\n        for (int i=0; i<num.size(); i++) {\\n            myMap[i] = (int) num[i] -48; \\n        }\\n\\n        for (int i=0; i<num.size(); i++) { \\n            myMap[(int) num[i] -48]--;\\n        }\\n\\n        for (const auto & [key, value] : myMap)\\n            if (value != 0) return false;\\n\\n        return true;\\n    }\\n};\\n\\n// 0 apparait 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078556,
                "title": "two-lines-solution",
                "content": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        cnt = Counter(map(int, num))\\n        return all(cnt[i] == int(n) for i, n in enumerate(num))      \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        cnt = Counter(map(int, num))\\n        return all(cnt[i] == int(n) for i, n in enumerate(num))      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071840,
                "title": "solution-in-java",
                "content": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freq = new int[10];\\n        for(int i=0;i<num.length();i++){\\n            freq[num.charAt(i)-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            if(num.charAt(i)-\\'0\\' != freq[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] freq = new int[10];\\n        for(int i=0;i<num.length();i++){\\n            freq[num.charAt(i)-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            if(num.charAt(i)-\\'0\\' != freq[i]) return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071042,
                "title": "easy-c-solution",
                "content": "# Approach\\n- Build dictionary - cahr and number of occurencies of tthe char\\n- Check if ther condiction holds for each index\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public bool DigitCount(string num)\\n    {\\n        var dictionary = new Dictionary<char, int>();\\n        foreach (var c in num)\\n        {\\n            dictionary[c] = dictionary.GetValueOrDefault(c) + 1;\\n        }\\n\\n        return !num.Where((t, i) => dictionary.GetValueOrDefault((char) (\\'0\\' + i)) != t - \\'0\\').Any();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public bool DigitCount(string num)\\n    {\\n        var dictionary = new Dictionary<char, int>();\\n        foreach (var c in num)\\n        {\\n            dictionary[c] = dictionary.GetValueOrDefault(c) + 1;\\n        }\\n\\n        return !num.Where((t, i) => dictionary.GetValueOrDefault((char) (\\'0\\' + i)) != t - \\'0\\').Any();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058408,
                "title": "c-100-faster-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(|hashTable|)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\tbool digitCount(string num) {\\n\\n\\t\\tint count[10] = {0};\\n\\n\\t\\tint inputSize = num.size();\\n\\n\\t\\tfor (int i = 0; i < inputSize; ++i)\\n\\t\\t{\\n\\t\\t\\tcount[num[i]-48]++;\\n\\t\\t}\\n\\n\\n\\t\\tfor (int i = 0; i < inputSize; ++i)\\n\\t\\t{\\n\\t\\t\\tif( (num[i]-48) !=  count[i]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn true;\\n\\n\\t}\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\tbool digitCount(string num) {\\n\\n\\t\\tint count[10] = {0};\\n\\n\\t\\tint inputSize = num.size();\\n\\n\\t\\tfor (int i = 0; i < inputSize; ++i)\\n\\t\\t{\\n\\t\\t\\tcount[num[i]-48]++;\\n\\t\\t}\\n\\n\\n\\t\\tfor (int i = 0; i < inputSize; ++i)\\n\\t\\t{\\n\\t\\t\\tif( (num[i]-48) !=  count[i]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn true;\\n\\n\\t}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047491,
                "title": "python-o-1-space-complexity-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n\\n        for i in range(len(num)):\\n            if num.count(str(i)) != int(num[i]):\\n                return False\\n        \\n        return True\\n           \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n\\n        for i in range(len(num)):\\n            if num.count(str(i)) != int(num[i]):\\n                return False\\n        \\n        return True\\n           \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046356,
                "title": "easy-and-understandable-code-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n       \\n       vector<int>v;\\n       unordered_map<int,int>mp;\\n\\n       for(auto it:num)\\n       v.push_back(it-48);\\n\\n       for(auto it:v)\\n       mp[it]++;\\n\\n       for(int i=0;i<v.size();i++){\\n           if(mp[i]!=v[i])\\n            return false;\\n       }\\n       return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n       \\n       vector<int>v;\\n       unordered_map<int,int>mp;\\n\\n       for(auto it:num)\\n       v.push_back(it-48);\\n\\n       for(auto it:v)\\n       mp[it]++;\\n\\n       for(int i=0;i<v.size();i++){\\n           if(mp[i]!=v[i])\\n            return false;\\n       }\\n       return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045126,
                "title": "2283-check-if-number-has-equal-digit-count-and-digit-value",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n\\n           HashMap<Integer,Integer> map = new HashMap<>();\\n        for(int number = 0; number < num.length(); number++){\\n            int frequency = Character.getNumericValue(num.charAt(number));\\n            map.put(number,frequency);\\n        }\\n\\n        for(int index = 0; index< num.length(); index++) {\\n\\n            if (Character.getNumericValue(num.charAt(index)) < num.length()) {\\n\\n                int frequency = map.get(Character.getNumericValue(num.charAt(index))) - 1;\\n                map.put(Character.getNumericValue(num.charAt(index)), frequency);\\n            }\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            if(map.get(i) !=0){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n\\n           HashMap<Integer,Integer> map = new HashMap<>();\\n        for(int number = 0; number < num.length(); number++){\\n            int frequency = Character.getNumericValue(num.charAt(number));\\n            map.put(number,frequency);\\n        }\\n\\n        for(int index = 0; index< num.length(); index++) {\\n\\n            if (Character.getNumericValue(num.charAt(index)) < num.length()) {\\n\\n                int frequency = map.get(Character.getNumericValue(num.charAt(index))) - 1;\\n                map.put(Character.getNumericValue(num.charAt(index)), frequency);\\n            }\\n        }\\n\\n        for (int i = 0; i < num.length(); i++) {\\n            if(map.get(i) !=0){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042268,
                "title": "easiest-approach-beats-100-c-best-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int> san;\\n        for(auto &x:num)\\n            san[x]++;\\n        int k=0;\\n        int desh=num.size();\\n        while(desh--){\\n            if(san[(char)(k+48)]!=(num[k]-\\'0\\'))\\n                return false;\\n            k++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        unordered_map<char,int> san;\\n        for(auto &x:num)\\n            san[x]++;\\n        int k=0;\\n        int desh=num.size();\\n        while(desh--){\\n            if(san[(char)(k+48)]!=(num[k]-\\'0\\'))\\n                return false;\\n            k++;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032741,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe code aims to check if a given string num satisfies a specific condition where each digit i must occur exactly i times in the string. If this condition is met for every digit, the function returns true; otherwise, it returns false. The code uses a HashMap to count the occurrences of each digit in the string and compares the counts with the expected values.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Check if the first character of the string is \\'0\\'. If it is, return false because \\'0\\' cannot be the first character if every digit should occur at least once.\\n\\n2. Initialize a HashMap<Integer, Integer> called map to store the counts of each digit.\\n\\n3. Iterate through each character ch in the string num:\\n\\n4. Calculate the numeric value k of the current character by subtracting \\'0\\' from it.\\nUpdate the count of digit k in the map by using map.put(k, map.getOrDefault(k, 0) + 1).\\nIterate through the indices i from 0 to n-1, where n is the length of the string num:\\n\\n5. Calculate the numeric value m of the digit at index i in num.\\nCheck if m is equal to the count of digit i in the map using map.getOrDefault(i, 0).\\nIf m is not equal to the expected count, return false.\\nIf the code reaches this point without returning false, it means that the condition is satisfied for every digit, so return true.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe code iterates through the string num twice, once to count the occurrences of each digit and once to check if the counts match the expected values. Therefore, the time complexity is O(2n), which simplifies to O(n), where n is the length of the input string num.\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe code uses a HashMap to store the counts of digits, which can have a maximum of 10 entries (0 to 9). Therefore, the space complexity is O(10), which simplifies to O(1) as it\\'s a constant space requirement.\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        if (num.charAt(0) == \\'0\\') return false;\\n\\n        Map<Integer, Integer> map = new HashMap<>();\\n        int n = num.length();\\n\\n        for (char ch : num.toCharArray()){\\n            int k = ch - \\'0\\';\\n            map.put(k, map.getOrDefault(k, 0) + 1);\\n        }\\n\\n        for (int i = 0; i < n; i++){\\n            int m = num.charAt(i) - \\'0\\';\\n            if (m != map.getOrDefault(i, 0)){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```\\n![Frame 76.png](https://assets.leetcode.com/users/images/31fa458e-ca66-4725-8967-2f81fdd2ed8f_1694460428.0372012.png)\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        if (num.charAt(0) == \\'0\\') return false;\\n\\n        Map<Integer, Integer> map = new HashMap<>();\\n        int n = num.length();\\n\\n        for (char ch : num.toCharArray()){\\n            int k = ch - \\'0\\';\\n            map.put(k, map.getOrDefault(k, 0) + 1);\\n        }\\n\\n        for (int i = 0; i < n; i++){\\n            int m = num.charAt(i) - \\'0\\';\\n            if (m != map.getOrDefault(i, 0)){\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031271,
                "title": "python3-easy-2-liner-upvote-if-you-like",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        counter = Counter(num)\\n        return all(str(counter.get(str(index), 0)) == digit for index, digit in enumerate(num))\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        counter = Counter(num)\\n        return all(str(counter.get(str(index), 0)) == digit for index, digit in enumerate(num))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023967,
                "title": "100-beats-java-solution",
                "content": "# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String nums) {\\n\\n\\n        int[] flag = new int[10];\\n\\n\\n        for(int i = 0; i<nums.length(); i++){\\n            flag[nums.charAt(i)-\\'0\\']++;\\n        }\\n\\n\\n        for(int i = 0; i<nums.length(); i++){\\n            if(nums.charAt(i)-\\'0\\'!=flag[i]) return false;\\n        }\\n\\n        return true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String nums) {\\n\\n\\n        int[] flag = new int[10];\\n\\n\\n        for(int i = 0; i<nums.length(); i++){\\n            flag[nums.charAt(i)-\\'0\\']++;\\n        }\\n\\n\\n        for(int i = 0; i<nums.length(); i++){\\n            if(nums.charAt(i)-\\'0\\'!=flag[i]) return false;\\n        }\\n\\n        return true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4021280,
                "title": "check-if-number-has-equal-digit-count-and-digit-value-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for(int i=0;i<num.length();i++)\\n        {\\n            if(num.charAt(i)-\\'0\\' != Freq(num,(char)(i + \\'0\\')))\\n            return false;\\n        }\\n        return true;\\n    }\\n    public int Freq(String s , char ch)\\n    {\\n        int f=0;\\n        for(int i=0;i<s.length();i++)\\n        if(s.charAt(i)==ch)\\n        f++;\\n        return f;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for(int i=0;i<num.length();i++)\\n        {\\n            if(num.charAt(i)-\\'0\\' != Freq(num,(char)(i + \\'0\\')))\\n            return false;\\n        }\\n        return true;\\n    }\\n    public int Freq(String s , char ch)\\n    {\\n        int f=0;\\n        for(int i=0;i<s.length();i++)\\n        if(s.charAt(i)==ch)\\n        f++;\\n        return f;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014663,
                "title": "1ms-java-code",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for (int i = 0; i < num.length(); i++) {\\n            int digit = num.charAt(i) - \\'0\\'; // Convert the character to an integer digit\\n            int count = 0;\\n\\n            for (int j = 0; j < num.length(); j++) {\\n                int currentDigit = num.charAt(j) - \\'0\\';\\n                if (currentDigit == i) {\\n                    count++;\\n                }\\n            }\\n            if (count != digit) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for (int i = 0; i < num.length(); i++) {\\n            int digit = num.charAt(i) - \\'0\\'; // Convert the character to an integer digit\\n            int count = 0;\\n\\n            for (int j = 0; j < num.length(); j++) {\\n                int currentDigit = num.charAt(j) - \\'0\\';\\n                if (currentDigit == i) {\\n                    count++;\\n                }\\n            }\\n            if (count != digit) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014504,
                "title": "1ms-easy-code-java-string",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for (int i = 0; i < num.length(); i++) {\\n            int digit = num.charAt(i) - \\'0\\'; // Convert the character to an integer digit\\n            int count = 0;\\n\\n            for (int j = 0; j < num.length(); j++) {\\n                int currentDigit = num.charAt(j) - \\'0\\';\\n                if (currentDigit == i) {\\n                    count++;\\n                }\\n            }\\n\\n            if (count != digit) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for (int i = 0; i < num.length(); i++) {\\n            int digit = num.charAt(i) - \\'0\\'; // Convert the character to an integer digit\\n            int count = 0;\\n\\n            for (int j = 0; j < num.length(); j++) {\\n                int currentDigit = num.charAt(j) - \\'0\\';\\n                if (currentDigit == i) {\\n                    count++;\\n                }\\n            }\\n\\n            if (count != digit) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012973,
                "title": "one-line-solution-using-list-comprehensions",
                "content": "# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        return len([x for i, x in enumerate(num) if int(x) == num.count(str(i))]) == len(num)\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        return len([x for i, x in enumerate(num) if int(x) == num.count(str(i))]) == len(num)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009684,
                "title": "easy-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n       int n = num.length();\\n        int count[10] = {0};\\n        for (int i = 0; i < n; i++) {\\n            count[num[i] - \\'0\\']++;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            if (count[i] != num[i] - \\'0\\') {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n       int n = num.length();\\n        int count[10] = {0};\\n        for (int i = 0; i < n; i++) {\\n            count[num[i] - \\'0\\']++;\\n        }\\n        for (int i = 0; i < n; i++) {\\n            if (count[i] != num[i] - \\'0\\') {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4009618,
                "title": "simple-java-solution-0-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int arr[]=new int[num.length()];\\n        int c=0;\\n        for(int i=0;i<num.length();i++)\\n            arr[i]=num.charAt(i)-\\'0\\';\\n        for(int i=0;i<arr.length;i++){\\n            int n=arr[i];\\n            for(int j=0;j<arr.length;j++){\\n                if(arr[j]==i)\\n                    c++;\\n            }\\n            if(c!=n)\\n                return false;\\n            c=0;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int arr[]=new int[num.length()];\\n        int c=0;\\n        for(int i=0;i<num.length();i++)\\n            arr[i]=num.charAt(i)-\\'0\\';\\n        for(int i=0;i<arr.length;i++){\\n            int n=arr[i];\\n            for(int j=0;j<arr.length;j++){\\n                if(arr[j]==i)\\n                    c++;\\n            }\\n            if(c!=n)\\n                return false;\\n            c=0;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007228,
                "title": "beats-82-runtime-and-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function(num) {\\n     let n = new Map();\\n    let numArray = num.split(\\'\\');\\n    for (i = 0; i < numArray.length; i++) {\\n        let val = 0;\\n        let index = Number(numArray[i]);\\n        n.get(index) ? val = n.get(index) + 1 : val = 1\\n        n.set(index, val);\\n    }\\n    for (i = 0; i < num.length; i++) {\\n        const a = Number(n.get(i)) || 0\\n        const b = Number(numArray[i])\\n        if (a !== b) {\\n            return false\\n        }\\n    }\\n    return true\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function(num) {\\n     let n = new Map();\\n    let numArray = num.split(\\'\\');\\n    for (i = 0; i < numArray.length; i++) {\\n        let val = 0;\\n        let index = Number(numArray[i]);\\n        n.get(index) ? val = n.get(index) + 1 : val = 1\\n        n.set(index, val);\\n    }\\n    for (i = 0; i < num.length; i++) {\\n        const a = Number(n.get(i)) || 0\\n        const b = Number(numArray[i])\\n        if (a !== b) {\\n            return false\\n        }\\n    }\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004424,
                "title": "java-easy-solution-hashing-100-beats",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public static boolean digitCount(String num) {\\n        int[] hash = new int[10];\\n        for(int n : num.toCharArray())\\n            hash[n-\\'0\\'-0]++;\\n        for(int i=0; i<num.length(); i++) \\n        \\tif(num.charAt(i)-\\'0\\'-0 != hash[i]) return false;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public static boolean digitCount(String num) {\\n        int[] hash = new int[10];\\n        for(int n : num.toCharArray())\\n            hash[n-\\'0\\'-0]++;\\n        for(int i=0; i<num.length(); i++) \\n        \\tif(num.charAt(i)-\\'0\\'-0 != hash[i]) return false;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001639,
                "title": "runtime-0ms-beats-100-00-of-users-with-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> v(10,0);\\n        for (int i=0;i<num.size();i++){\\n            v[num[i]-\\'0\\']++;\\n        }\\n        for (int j=0;j<num.size();j++){\\n            if (v[j]!=(int)num[j]-\\'0\\'){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> v(10,0);\\n        for (int i=0;i<num.size();i++){\\n            v[num[i]-\\'0\\']++;\\n        }\\n        for (int j=0;j<num.size();j++){\\n            if (v[j]!=(int)num[j]-\\'0\\'){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999682,
                "title": "python3-just-count-and-compare",
                "content": "# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        N = len(num)\\n        cnts = [0]*10\\n        for n in num:\\n            cnts[int(n)]+=1\\n\\n        for i in range(N):\\n            if cnts[i] != int(num[i]):\\n                return False\\n\\n        return True            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        N = len(num)\\n        cnts = [0]*10\\n        for n in num:\\n            cnts[int(n)]+=1\\n\\n        for i in range(N):\\n            if cnts[i] != int(num[i]):\\n                return False\\n\\n        return True            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994411,
                "title": "typescript-simple-solution-100-speed",
                "content": "![image.png](https://assets.leetcode.com/users/images/63c37f02-c7f7-477b-9b62-9d963e8f500a_1693692919.8918602.png)\\n\\n# Code (100% speed)\\n```ts\\nfunction digitCount(num: string): boolean {\\n    const map = new Map<number, number>() // number, count\\n    const numStr = num + \"\"\\n\\n    for (const each of numStr) {\\n        const eachNum = parseInt(each)\\n        const got = map.get(eachNum) || 0\\n        map.set(eachNum, got + 1)\\n    }\\n\\n    for (let i = 0; i < numStr.length; i++) {\\n        const count = parseInt(numStr[i])\\n        if ((map.get(i) || 0) !== count) return false\\n    }\\n    return true\\n};\\n```\\n\\n# Thank you\\nUpvote if you like \\u2B06\\uFE0F\\nIf you have any questions, please let me know in the comment section.",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\nfunction digitCount(num: string): boolean {\\n    const map = new Map<number, number>() // number, count\\n    const numStr = num + \"\"\\n\\n    for (const each of numStr) {\\n        const eachNum = parseInt(each)\\n        const got = map.get(eachNum) || 0\\n        map.set(eachNum, got + 1)\\n    }\\n\\n    for (let i = 0; i < numStr.length; i++) {\\n        const count = parseInt(numStr[i])\\n        if ((map.get(i) || 0) !== count) return false\\n    }\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994410,
                "title": "typescript-simple-solution-100-speed",
                "content": "![image.png](https://assets.leetcode.com/users/images/63c37f02-c7f7-477b-9b62-9d963e8f500a_1693692919.8918602.png)\\n\\n# Code (100% speed)\\n```ts\\nfunction digitCount(num: string): boolean {\\n    const map = new Map<number, number>() // number, count\\n    const numStr = num + \"\"\\n\\n    for (const each of numStr) {\\n        const eachNum = parseInt(each)\\n        const got = map.get(eachNum) || 0\\n        map.set(eachNum, got + 1)\\n    }\\n\\n    for (let i = 0; i < numStr.length; i++) {\\n        const count = parseInt(numStr[i])\\n        if ((map.get(i) || 0) !== count) return false\\n    }\\n    return true\\n};\\n```\\n\\n# Thank you\\nUpvote if you like \\u2B06\\uFE0F\\nIf you have any questions, please let me know in the comment section.",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\nfunction digitCount(num: string): boolean {\\n    const map = new Map<number, number>() // number, count\\n    const numStr = num + \"\"\\n\\n    for (const each of numStr) {\\n        const eachNum = parseInt(each)\\n        const got = map.get(eachNum) || 0\\n        map.set(eachNum, got + 1)\\n    }\\n\\n    for (let i = 0; i < numStr.length; i++) {\\n        const count = parseInt(numStr[i])\\n        if ((map.get(i) || 0) !== count) return false\\n    }\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3991812,
                "title": "0-ms-beats-100-00-of-users-with-c",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> ans; \\n        for(int i=0;i<num.size();i++)\\n        {\\n            int temp=num[i]-48;\\n            ans.push_back(temp);\\n        }\\n        int f=0;\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            cout<<ans[i]<<\" \";\\n        }\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            int c=count(ans.begin(),ans.end(),i);\\n            if(c==ans[i])\\n            {\\n                f=1;\\n            }\\n            else\\n            {\\n                f=0;\\n                break;\\n            }\\n        }\\n        if(f==1)\\n        {\\n            return true;\\n        }\\n        return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> ans; \\n        for(int i=0;i<num.size();i++)\\n        {\\n            int temp=num[i]-48;\\n            ans.push_back(temp);\\n        }\\n        int f=0;\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            cout<<ans[i]<<\" \";\\n        }\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            int c=count(ans.begin(),ans.end(),i);\\n            if(c==ans[i])\\n            {\\n                f=1;\\n            }\\n            else\\n            {\\n                f=0;\\n                break;\\n            }\\n        }\\n        if(f==1)\\n        {\\n            return true;\\n        }\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3981858,
                "title": "java-easy-solution-using-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for(int i=0;i<num.length();i++){\\n            int m=Integer.parseInt(String.valueOf(num.charAt(i)));\\n            int c=0;\\n            for(int j=0;j<num.length();j++){\\n                int n=Integer.parseInt(String.valueOf(num.charAt(j)));\\n                if(n==i){\\n                    c++;\\n                }\\n            }\\n            if(c!=m){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        for(int i=0;i<num.length();i++){\\n            int m=Integer.parseInt(String.valueOf(num.charAt(i)));\\n            int c=0;\\n            for(int j=0;j<num.length();j++){\\n                int n=Integer.parseInt(String.valueOf(num.charAt(j)));\\n                if(n==i){\\n                    c++;\\n                }\\n            }\\n            if(c!=m){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3970056,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> vec(10,0);\\n        char c;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            c=num[i];\\n            vec[c-\\'0\\']++;\\n        }\\n\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(num[i]-\\'0\\'!=vec[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        vector<int> vec(10,0);\\n        char c;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            c=num[i];\\n            vec[c-\\'0\\']++;\\n        }\\n\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(num[i]-\\'0\\'!=vec[i])\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3969137,
                "title": "c-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        map<int,int> vec;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            vec[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(vec[i]!=num[i]-\\'0\\')\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        map<int,int> vec;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            vec[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(vec[i]!=num[i]-\\'0\\')\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3969134,
                "title": "c-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        map<int,int> vec;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            vec[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(vec[i]!=num[i]-\\'0\\')\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        map<int,int> vec;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            vec[num[i]-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.size();i++)\\n        {\\n            if(vec[i]!=num[i]-\\'0\\')\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3965992,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] c= new int[10];\\n        for(int i=0;i<num.length();i++){\\n            int n=num.charAt(i)-\\'0\\';\\n            c[n]++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            int n=num.charAt(i)-\\'0\\';\\n            c[i]-=n;\\n        }\\n        for(int i=0;i<10;i++){\\n            if(c[i]!=0) return false;\\n        }\\n        return true;\\n    }\\n\\n\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] c= new int[10];\\n        for(int i=0;i<num.length();i++){\\n            int n=num.charAt(i)-\\'0\\';\\n            c[n]++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            int n=num.charAt(i)-\\'0\\';\\n            c[i]-=n;\\n        }\\n        for(int i=0;i<10;i++){\\n            if(c[i]!=0) return false;\\n        }\\n        return true;\\n    }\\n\\n\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960239,
                "title": "easy-to-read-python-solution-with-explanation-in-comments",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n\\n        #convert the num into a string\\n\\n        strNum = str(num)\\n\\n        #build a freq map of the digits in the num\\n\\n        digitCounter = Counter()\\n\\n        for digit in strNum:\\n            digitCounter[digit] += 1\\n        \\n        #now start parsing thru the number again\\n        # for each index, check if the frequency of the index\\n        # equal the digit at the index\\n\\n        for i in range(0, len(strNum)):\\n            indexStr = str(i) #converting the index into a str so we can look it up in the dict\\n            digitInt = int(strNum[i]) #converting the digit to an Int so we can compare it to indexStr\\'s frequency\\n            if digitCounter[indexStr] != digitInt:\\n                return False\\n        \\n        #if we come out of the loop, this means that all digits met the condition\\n        # so return true\\n\\n        return True\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n\\n        #convert the num into a string\\n\\n        strNum = str(num)\\n\\n        #build a freq map of the digits in the num\\n\\n        digitCounter = Counter()\\n\\n        for digit in strNum:\\n            digitCounter[digit] += 1\\n        \\n        #now start parsing thru the number again\\n        # for each index, check if the frequency of the index\\n        # equal the digit at the index\\n\\n        for i in range(0, len(strNum)):\\n            indexStr = str(i) #converting the index into a str so we can look it up in the dict\\n            digitInt = int(strNum[i]) #converting the digit to an Int so we can compare it to indexStr\\'s frequency\\n            if digitCounter[indexStr] != digitInt:\\n                return False\\n        \\n        #if we come out of the loop, this means that all digits met the condition\\n        # so return true\\n\\n        return True\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960089,
                "title": "easy-approach",
                "content": "\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nbool digitCount(String num) {\\n for (int i = 0; i < num.length; i++) {\\n    int count = 0;\\n\\n    for (int j = 0; j < num.length; j++) {\\n      if (int.parse(num[j]) == i) {\\n        count++;\\n      }\\n    }\\n\\n    if (count != int.parse(num[i])) {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\nbool digitCount(String num) {\\n for (int i = 0; i < num.length; i++) {\\n    int count = 0;\\n\\n    for (int j = 0; j < num.length; j++) {\\n      if (int.parse(num[j]) == i) {\\n        count++;\\n      }\\n    }\\n\\n    if (count != int.parse(num[i])) {\\n      return false;\\n    }\\n  }\\n\\n  return true;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3947496,
                "title": "simple-solution-for-beginners-using-arraylist-java",
                "content": "# Intuition\\nBy understanding the problem one thing is clear that the first index is 0 and therefore for a single digit number input output will always be false as a single digit number has a frequency of one and index is 0. I found a way to separate the digit after checking for the above condition and after separating the digits i just checked remaining conditions.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAfter checking the single digit condition, I used logic of reversal of digit to separate the digits and stored the output in an ArrayList. After that I reversed the ArrayList as our digit was reversed it would have given wrong output if not reversed. Now we have the original number ... we will just use two for loops one for index digit and  another for traversing through the arraylist for the occurences. Then after counting the occurences I just compared it with the actual frequency we must have and after repeating this process if at some point occurrences and the given frequency is not equal we return false and breakout of the loop or return true as default value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nit has a 2ms runtime and code is bit heavy but as a beginner it was easy for me ....I do admit the hashmap makes this stuff easies and char to int conversion methods can also be used but as I was solving i came up with this solution as a beginner.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        Long k = Long.valueOf(num);\\n        return digitCount(k);\\n    }\\n    private boolean digitCount(long numb){\\n        ArrayList<Long> list1 = new ArrayList<Long>();\\n        boolean res = true;\\n        if(numb>=10){\\n        long temp = numb;\\n        while(temp>0){\\n            list1.add(temp%10);\\n            temp=temp/10;\\n        }\\n        Collections.reverse(list1);\\n        for(int i=0;i<list1.size();i++){\\n            int count = 0;\\n            for(int k=0;k<list1.size();k++)\\n            {\\n                if(i==list1.get(k))\\n                {\\n                    count++;\\n                }\\n            }\\n            if(count==list1.get(i))\\n            {\\n                res = true;\\n            }\\n            else\\n            {\\n                res = false;\\n                break;\\n            }\\n        }\\n        }\\n        else\\n        {\\n         res = false;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        Long k = Long.valueOf(num);\\n        return digitCount(k);\\n    }\\n    private boolean digitCount(long numb){\\n        ArrayList<Long> list1 = new ArrayList<Long>();\\n        boolean res = true;\\n        if(numb>=10){\\n        long temp = numb;\\n        while(temp>0){\\n            list1.add(temp%10);\\n            temp=temp/10;\\n        }\\n        Collections.reverse(list1);\\n        for(int i=0;i<list1.size();i++){\\n            int count = 0;\\n            for(int k=0;k<list1.size();k++)\\n            {\\n                if(i==list1.get(k))\\n                {\\n                    count++;\\n                }\\n            }\\n            if(count==list1.get(i))\\n            {\\n                res = true;\\n            }\\n            else\\n            {\\n                res = false;\\n                break;\\n            }\\n        }\\n        }\\n        else\\n        {\\n         res = false;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942507,
                "title": "python-2-lines",
                "content": "# Approach\\nNot the best option as we need to iterate over all **num** in all cases. Without 2 lines we can return False as soon as one condition is False.\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = Counter(num)\\n        return all(1 if str(d[str(i)]) == num[i] else 0 for i in range(len(num)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = Counter(num)\\n        return all(1 if str(d[str(i)]) == num[i] else 0 for i in range(len(num)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942332,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] digit = new int[10];\\n        for(char c :num.toCharArray()){\\n            digit[c-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            int n = num.charAt(i) - \\'0\\';\\n            if(n!=digit[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] digit = new int[10];\\n        for(char c :num.toCharArray()){\\n            digit[c-\\'0\\']++;\\n        }\\n        for(int i=0;i<num.length();i++){\\n            int n = num.charAt(i) - \\'0\\';\\n            if(n!=digit[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933004,
                "title": "beats-93-85-of-users-with-javascript-easy-javascript-solution-with-line-by-line-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function (num) {\\n\\n    // initialize function checkCount with parameter index\\n    function checkCount(index) {\\n\\n        // initialize count to zero\\n        let count = 0;\\n\\n        // loop through every character of string num\\n        for (let j = 0; j < num.length; j++) {\\n\\n            // if index is equal to every character of string num then increment count\\n            if (index == num[j]) {\\n\\n                count++;\\n            }\\n        }\\n\\n        // return count\\n        return count;\\n    }\\n\\n    // loop through every character of string num\\n    for (let i = 0; i < num.length; i++) {\\n\\n        // invoke the function checkCount with argument index i\\n        let digitCount = checkCount(i);\\n\\n        // if every character of num is not equal to digitCount then return false\\n        if (num[i] != digitCount) {\\n\\n            return false;\\n        }\\n    }\\n\\n    // return true\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} num\\n * @return {boolean}\\n */\\nvar digitCount = function (num) {\\n\\n    // initialize function checkCount with parameter index\\n    function checkCount(index) {\\n\\n        // initialize count to zero\\n        let count = 0;\\n\\n        // loop through every character of string num\\n        for (let j = 0; j < num.length; j++) {\\n\\n            // if index is equal to every character of string num then increment count\\n            if (index == num[j]) {\\n\\n                count++;\\n            }\\n        }\\n\\n        // return count\\n        return count;\\n    }\\n\\n    // loop through every character of string num\\n    for (let i = 0; i < num.length; i++) {\\n\\n        // invoke the function checkCount with argument index i\\n        let digitCount = checkCount(i);\\n\\n        // if every character of num is not equal to digitCount then return false\\n        if (num[i] != digitCount) {\\n\\n            return false;\\n        }\\n    }\\n\\n    // return true\\n    return true;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3932535,
                "title": "c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<char,int>m;\\n       for(int i=0;i<num.length();i++){\\n         m[num[i]]+=1;\\n       } \\n       for(auto i:m){\\n           \\n           if(num[i.first-\\'0\\']-\\'0\\' != i.second){\\n               return false;\\n           }\\n       }\\n       return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        map<char,int>m;\\n       for(int i=0;i<num.length();i++){\\n         m[num[i]]+=1;\\n       } \\n       for(auto i:m){\\n           \\n           if(num[i.first-\\'0\\']-\\'0\\' != i.second){\\n               return false;\\n           }\\n       }\\n       return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3929865,
                "title": "python-easy-for-loop-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def strCount(self, num, i):\\n        return num.count(i)\\n\\n    def digitCount(self, num):\\n        output = \\'\\'\\n        for i in range(len(num)):\\n            total = self.strCount(num, str(i))\\n            output += str(total)\\n        return output == num\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def strCount(self, num, i):\\n        return num.count(i)\\n\\n    def digitCount(self, num):\\n        output = \\'\\'\\n        for i in range(len(num)):\\n            total = self.strCount(num, str(i))\\n            output += str(total)\\n        return output == num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3924050,
                "title": "python3-solution-with-using-hashmap",
                "content": "# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = collections.defaultdict(int)\\n\\n        for char in num:\\n            d[int(char)] += 1\\n\\n        for i in range(len(num)):\\n            if d[i] != int(num[i]): return False\\n        \\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        d = collections.defaultdict(int)\\n\\n        for char in num:\\n            d[int(char)] += 1\\n\\n        for i in range(len(num)):\\n            if d[i] != int(num[i]): return False\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923038,
                "title": "digit-count-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range(len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914807,
                "title": "easy-solution-using-java",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] arr = new int[10];\\n        for(char c:num.toCharArray()){\\n            arr[c - \\'0\\']++;\\n        }\\n        for(int i = 0; i < num.length(); i++){\\n            if(num.charAt(i) - \\'0\\' != arr[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean digitCount(String num) {\\n        int[] arr = new int[10];\\n        for(char c:num.toCharArray()){\\n            arr[c - \\'0\\']++;\\n        }\\n        for(int i = 0; i < num.length(); i++){\\n            if(num.charAt(i) - \\'0\\' != arr[i]){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3911698,
                "title": "c-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n) ~ O(1) since n can be max 10\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        int i,j,l=num.length();\\n        int a[10];\\n        memset(a,0,sizeof(a));\\n        bool b = true;\\n        for(i=0;i<l;++i)\\n        {\\n            int c=int(num[i])-48;\\n            a[c]+=1;\\n        }\\n        for(i=0;i<l;++i)\\n        {\\n            if(int(num[i]-48)!=(a[i]))\\n            b=0;\\n        }\\n        return b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool digitCount(string num) {\\n        \\n        int i,j,l=num.length();\\n        int a[10];\\n        memset(a,0,sizeof(a));\\n        bool b = true;\\n        for(i=0;i<l;++i)\\n        {\\n            int c=int(num[i])-48;\\n            a[c]+=1;\\n        }\\n        for(i=0;i<l;++i)\\n        {\\n            if(int(num[i]-48)!=(a[i]))\\n            b=0;\\n        }\\n        return b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3911306,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nlinear 2n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nbool digitCount(char * num){\\n\\n    int *fre = (int*)calloc(4, 10);\\n\\n    for(int i = 0; i < strlen(num); i++){\\n        fre[num[i] -\\'0\\']++;\\n    }\\n    for(int i = 0; i < strlen(num); i++){\\n        if(fre[i] !=num[i] - \\'0\\'){\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool digitCount(char * num){\\n\\n    int *fre = (int*)calloc(4, 10);\\n\\n    for(int i = 0; i < strlen(num); i++){\\n        fre[num[i] -\\'0\\']++;\\n    }\\n    for(int i = 0; i < strlen(num); i++){\\n        if(fre[i] !=num[i] - \\'0\\'){\\n            return false;\\n        }\\n    }\\n\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3906374,
                "title": "easy-solution-5-lines",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        c = Counter(num)\\n        for i in range(len(num)):\\n            if int(num[i]) != c[str(i)]:\\n                return False\\n        return True\\n```\\n\\nPlease let me know if any improvements can be made.\\n\\nThanks",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        c = Counter(num)\\n        for i in range(len(num)):\\n            if int(num[i]) != c[str(i)]:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905020,
                "title": "easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range (len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def digitCount(self, num: str) -> bool:\\n        for i in range (len(num)):\\n            if num.count(str(i))!=int(num[i]):\\n                return False\\n        return True        \\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1792237,
                "content": [
                    {
                        "username": "narasimhakamath",
                        "content": "Umm...what?"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The framing of the problem statement makes it a little tricky which is otherwise an easy problem. "
                    },
                    {
                        "username": "eeveeouo",
                        "content": "For sure"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "Make separate function to count char in the string and return it in int type. It will give you O(1) time complexity \\nint count(string num,int c){\\n        char ch;\\n        if(c == 0){\\n            ch = \\'0\\';\\n        }\\n        if(c == 1){\\n            ch = \\'1\\';\\n        }\\n        if(c == 2){\\n            ch = \\'2\\';\\n        }\\n        if(c == 3){\\n            ch = \\'3\\';\\n        }\\n        if(c == 4){\\n            ch = \\'4\\';\\n        }\\n        if(c == 5){\\n            ch = \\'5\\';\\n        }\\n        if(c == 6){\\n            ch = \\'6\\';\\n        }\\n        if(c == 7){\\n            ch = \\'7\\';\\n        }\\n        if(c == 8){\\n            ch = \\'8\\';\\n        }\\n        if(c == 9){\\n            ch = \\'9\\';\\n        }\\n        int ans = 0;\\n        for(int i = 0; num[i] != \\'\\\\0\\'; i++){\\n            if(num[i] == ch){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }."
                    },
                    {
                        "username": "Amit17491",
                        "content": " I am facing issue while solve this question.\n\nnum = '0'\ni am printing my ans = 'false'\noutput = true\nexpected = false"
                    }
                ]
            },
            {
                "id": 1845321,
                "content": [
                    {
                        "username": "narasimhakamath",
                        "content": "Umm...what?"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The framing of the problem statement makes it a little tricky which is otherwise an easy problem. "
                    },
                    {
                        "username": "eeveeouo",
                        "content": "For sure"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "Make separate function to count char in the string and return it in int type. It will give you O(1) time complexity \\nint count(string num,int c){\\n        char ch;\\n        if(c == 0){\\n            ch = \\'0\\';\\n        }\\n        if(c == 1){\\n            ch = \\'1\\';\\n        }\\n        if(c == 2){\\n            ch = \\'2\\';\\n        }\\n        if(c == 3){\\n            ch = \\'3\\';\\n        }\\n        if(c == 4){\\n            ch = \\'4\\';\\n        }\\n        if(c == 5){\\n            ch = \\'5\\';\\n        }\\n        if(c == 6){\\n            ch = \\'6\\';\\n        }\\n        if(c == 7){\\n            ch = \\'7\\';\\n        }\\n        if(c == 8){\\n            ch = \\'8\\';\\n        }\\n        if(c == 9){\\n            ch = \\'9\\';\\n        }\\n        int ans = 0;\\n        for(int i = 0; num[i] != \\'\\\\0\\'; i++){\\n            if(num[i] == ch){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }."
                    },
                    {
                        "username": "Amit17491",
                        "content": " I am facing issue while solve this question.\n\nnum = '0'\ni am printing my ans = 'false'\noutput = true\nexpected = false"
                    }
                ]
            },
            {
                "id": 2046477,
                "content": [
                    {
                        "username": "narasimhakamath",
                        "content": "Umm...what?"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The framing of the problem statement makes it a little tricky which is otherwise an easy problem. "
                    },
                    {
                        "username": "eeveeouo",
                        "content": "For sure"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "Make separate function to count char in the string and return it in int type. It will give you O(1) time complexity \\nint count(string num,int c){\\n        char ch;\\n        if(c == 0){\\n            ch = \\'0\\';\\n        }\\n        if(c == 1){\\n            ch = \\'1\\';\\n        }\\n        if(c == 2){\\n            ch = \\'2\\';\\n        }\\n        if(c == 3){\\n            ch = \\'3\\';\\n        }\\n        if(c == 4){\\n            ch = \\'4\\';\\n        }\\n        if(c == 5){\\n            ch = \\'5\\';\\n        }\\n        if(c == 6){\\n            ch = \\'6\\';\\n        }\\n        if(c == 7){\\n            ch = \\'7\\';\\n        }\\n        if(c == 8){\\n            ch = \\'8\\';\\n        }\\n        if(c == 9){\\n            ch = \\'9\\';\\n        }\\n        int ans = 0;\\n        for(int i = 0; num[i] != \\'\\\\0\\'; i++){\\n            if(num[i] == ch){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }."
                    },
                    {
                        "username": "Amit17491",
                        "content": " I am facing issue while solve this question.\n\nnum = '0'\ni am printing my ans = 'false'\noutput = true\nexpected = false"
                    }
                ]
            },
            {
                "id": 2009175,
                "content": [
                    {
                        "username": "narasimhakamath",
                        "content": "Umm...what?"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The framing of the problem statement makes it a little tricky which is otherwise an easy problem. "
                    },
                    {
                        "username": "eeveeouo",
                        "content": "For sure"
                    },
                    {
                        "username": "arindamsharma0123",
                        "content": "Make separate function to count char in the string and return it in int type. It will give you O(1) time complexity \\nint count(string num,int c){\\n        char ch;\\n        if(c == 0){\\n            ch = \\'0\\';\\n        }\\n        if(c == 1){\\n            ch = \\'1\\';\\n        }\\n        if(c == 2){\\n            ch = \\'2\\';\\n        }\\n        if(c == 3){\\n            ch = \\'3\\';\\n        }\\n        if(c == 4){\\n            ch = \\'4\\';\\n        }\\n        if(c == 5){\\n            ch = \\'5\\';\\n        }\\n        if(c == 6){\\n            ch = \\'6\\';\\n        }\\n        if(c == 7){\\n            ch = \\'7\\';\\n        }\\n        if(c == 8){\\n            ch = \\'8\\';\\n        }\\n        if(c == 9){\\n            ch = \\'9\\';\\n        }\\n        int ans = 0;\\n        for(int i = 0; num[i] != \\'\\\\0\\'; i++){\\n            if(num[i] == ch){\\n                ans++;\\n            }\\n        }\\n        return ans;\\n    }."
                    },
                    {
                        "username": "Amit17491",
                        "content": " I am facing issue while solve this question.\n\nnum = '0'\ni am printing my ans = 'false'\noutput = true\nexpected = false"
                    }
                ]
            }
        ]
    }
]