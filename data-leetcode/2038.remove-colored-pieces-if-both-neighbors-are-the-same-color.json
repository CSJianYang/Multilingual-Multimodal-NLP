[
    {
        "title": "Remove Colored Pieces if Both Neighbors are the Same Color",
        "question_content": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\n\n\tAlice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.\n\tBob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.\n\tAlice and Bob cannot remove pieces from the edge of the line.\n\tIf a player cannot make a move on their turn, that player loses and the other player wins.\n\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.\n&nbsp;\nExample 1:\n\nInput: colors = \"AAABABB\"\nOutput: true\nExplanation:\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.\n\nExample 2:\n\nInput: colors = \"AA\"\nOutput: false\nExplanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.\n\nExample 3:\n\nInput: colors = \"ABBBBBBBAAA\"\nOutput: false\nExplanation:\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false.\n\n&nbsp;\nConstraints:\n\n\t1 <=&nbsp;colors.length <= 105\n\tcolors&nbsp;consists of only the letters&nbsp;'A'&nbsp;and&nbsp;'B'",
        "solutions": [
            {
                "id": 1524153,
                "title": "c-python-java-count-aaa-and-bbb",
                "content": "Count \"AAA\" and \"BBB\" and compare them\\n\\nYou can only remove an A that is surrounded by two other A\\'s.\\nSo if you keep on removing valid A\\'s, then the valid B\\'s are not affected. Same goes for all valid B\\'s.\\nYou just count all the valid A\\'s and valid B\\'s. At each turn, Alice removes a valid A and the count of all valid A\\'s (countA) decreases by one. Similarly after Bob\\'s turn, countB decreases by one.\\nSo if countA > countB, then a turn comes when Bob has no valid B\\'s to remove. So he loses and Alice wins. You return TRUE.\\nElse if countA == countB, then at some point Alice has no valid A\\'s to remove, So Bob wins and you return FALSE.\\nElse (countA < countB), then at some point Alice has no valid A\\'s to remove. So Bob wins and you return FALSE.\\n\\nIn either case, if countA <= countB, then you return FALSE.\\nSo just return countA > countB.\\n\\nPS: There\\'s no optimal play here. No matter what valid color a player removes at each turn, it has no effect on the outcome.\\nExplanation credits : @Zombiesalad \\n\\n**Python:**\\n```\\nclass Solution:\\n    def winnerOfGame(self, s: str) -> bool:\\n        \\n        a = b = 0\\n        \\n        for i in range(1,len(s)-1):\\n            if s[i-1] == s[i] == s[i+1]:\\n                if s[i] == \\'A\\':\\n                    a += 1\\n                else:\\n                    b += 1\\n                    \\n        return a>b\\n```\\n\\n\\n**C++:**\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        \\n        int a = 0, b = 0;\\n        \\n        for(int i=1; i<s.size()-1; i++){\\n            if(s[i-1] == s[i] && s[i] == s[i+1]){\\n                if(s[i] == \\'A\\')\\n                    a++;\\n                else\\n                    b++;\\n\\t\\t\\t}\\n        }   \\n                    \\n        return a>b;\\n    }\\n};\\n```\\n\\n\\n**Java:**\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        \\n        int a = 0, b = 0;\\n        \\n        for(int i=1; i<s.length()-1; i++){\\n            if(s.charAt(i) == s.charAt(i-1) && s.charAt(i) == s.charAt(i+1)){\\n                if(s.charAt(i) == \\'A\\')\\n                    a++;\\n                else\\n                    b++;\\n\\t\\t\\t}\\n        }\\n                    \\n        return a>b;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, s: str) -> bool:\\n        \\n        a = b = 0\\n        \\n        for i in range(1,len(s)-1):\\n            if s[i-1] == s[i] == s[i+1]:\\n                if s[i] == \\'A\\':\\n                    a += 1\\n                else:\\n                    b += 1\\n                    \\n        return a>b\\n```\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        \\n        int a = 0, b = 0;\\n        \\n        for(int i=1; i<s.size()-1; i++){\\n            if(s[i-1] == s[i] && s[i] == s[i+1]){\\n                if(s[i] == \\'A\\')\\n                    a++;\\n                else\\n                    b++;\\n\\t\\t\\t}\\n        }   \\n                    \\n        return a>b;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        \\n        int a = 0, b = 0;\\n        \\n        for(int i=1; i<s.length()-1; i++){\\n            if(s.charAt(i) == s.charAt(i-1) && s.charAt(i) == s.charAt(i+1)){\\n                if(s.charAt(i) == \\'A\\')\\n                    a++;\\n                else\\n                    b++;\\n\\t\\t\\t}\\n        }\\n                    \\n        return a>b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1527778,
                "title": "count-2",
                "content": "**C++**\\n```cpp\\nbool winnerOfGame(string colors) {\\n    int a = 0, b = 0, cnt_a = 0, cnt_b = 0;\\n    for (auto ch : colors) {\\n        if (ch == \\'A\\') {\\n            if (++cnt_a > 2)\\n                ++a;\\n            cnt_b = 0;\\n        } else {\\n            if (++cnt_b > 2)\\n                ++b;\\n            cnt_a = 0;\\n        }\\n    }\\n    return a > b;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nbool winnerOfGame(string colors) {\\n    int a = 0, b = 0, cnt_a = 0, cnt_b = 0;\\n    for (auto ch : colors) {\\n        if (ch == \\'A\\') {\\n            if (++cnt_a > 2)\\n                ++a;\\n            cnt_b = 0;\\n        } else {\\n            if (++cnt_b > 2)\\n                ++b;\\n            cnt_a = 0;\\n        }\\n    }\\n    return a > b;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2291046,
                "title": "very-easy-java-solution-with-detailed-explation-beats-70",
                "content": "Idea behind it is that you need to count the number of triplets of both A and B \\nint a -> number of triplets of \\'A\\'\\nint b -> number of triplets of \\'B\\'\\nif(b>=a) BOB wins else Alice wins\\n\\nAs Alice has to make a move first so if she wants to win there should be atleast  1 more  triplets of A than B\\n\\nEg There are 4 triplets of both A and B  (a=4, b=4) \\n1. Alice removes 1 A (a=3, b=4)\\n2. Bob removes 1 B (a=3, b=3)\\n3. (a=2, b=3)\\n4. (a=2, b=2)\\n5. (a=1, b=2)\\n6. (a=1, b=1)\\n7. (a=0, b=1)\\n\\nClearly Alice will lose if both have same number of triplets\\nCode \\n\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        //count the triplets\\nint n = s.length();\\n    \\n        int a=0;\\n        int b=0;\\n        \\n        for(int i=1; i<n-1; i++)\\n        {\\n            if(s.charAt(i)==\\'A\\' && s.charAt(i-1)==\\'A\\' && s.charAt(i+1)==\\'A\\' )\\n        a++;\\n            else if(s.charAt(i)==\\'B\\' && s.charAt(i-1)==\\'B\\' && s.charAt(i+1)==\\'B\\' )\\n        b++;\\n            \\n            }\\n        if(a<=b)\\n            return false;\\n        else\\n            return true;\\n        \\n    \\n    }\\n}\\n```\\nIf this helped you then please UpVote\\nThanks\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        //count the triplets\\nint n = s.length();\\n    \\n        int a=0;\\n        int b=0;\\n        \\n        for(int i=1; i<n-1; i++)\\n        {\\n            if(s.charAt(i)==\\'A\\' && s.charAt(i-1)==\\'A\\' && s.charAt(i+1)==\\'A\\' )\\n        a++;\\n            else if(s.charAt(i)==\\'B\\' && s.charAt(i-1)==\\'B\\' && s.charAt(i+1)==\\'B\\' )\\n        b++;\\n            \\n            }\\n        if(a<=b)\\n            return false;\\n        else\\n            return true;\\n        \\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524229,
                "title": "java-python-3-count-moves-and-compare",
                "content": "**Method 1:**\\n\\n1. For each consecutive `A` or `B`s, if its size is at least `3`, then starting from the size of `3` count into moves of `Alice` or `Bob`, respectively.\\n2. Compare to determine the winner.\\n```java\\n    public boolean winnerOfGame(String colors) {\\n        char prev = \\'C\\';\\n        int a = 0, b = 0;\\n        for (int i = 0, cnt = 0; i < colors.length(); ++i) {\\n            char cur = colors.charAt(i);\\n            if (cur == prev) {\\n                if (++cnt > 2) {\\n                    if (cur == \\'A\\') {\\n                        ++a;\\n                    }else {\\n                        ++b;\\n                    }\\n                }\\n            }else {\\n                cnt = 1;\\n            }\\n            prev = cur;\\n        }\\n        return a > b;\\n    }\\n```\\n```python\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a = b = cnt = 0\\n        prev = \\'C\\' # dummy value.\\n        for cur in colors:\\n            if cur == prev:\\n                cnt += 1\\n                if cnt > 2:\\n                    if cur == \\'A\\':\\n                        a += 1\\n                    else:\\n                        b += 1\\n            else:\\n                cnt = 1\\n            prev = cur\\n        return a > b \\n```\\n\\n----\\n\\n**Method 2: Count \"AAA\" or \"BBB\"** - credit to **@lokeshsenthilkumar**\\n\\n```java\\n    public boolean winnerOfGame(String colors) {\\n        int a = 0, b = 0;\\n        for (int i = 2; i < colors.length(); ++i) {\\n            if (colors.charAt(i - 2) == colors.charAt(i - 1) && colors.charAt(i - 1) == colors.charAt(i)) {\\n                if (colors.charAt(i) == \\'A\\') {\\n                    ++a;\\n                }else {\\n                    ++b;\\n                }\\n            }\\n        }\\n        return a > b;\\n    }\\n```\\n\\n```python\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a = b = 0\\n        for i in range(2, len(colors)):\\n            if colors[i - 2] == colors[i - 1] == colors[i]:\\n                if colors[i] == \\'A\\':\\n                    a += 1\\n                else:\\n                    b += 1\\n        return a > b\\n```\\n**Analysis:**\\n\\nTime: `O(n)`, space: `O(1)`, where `n = colors.length()`.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public boolean winnerOfGame(String colors) {\\n        char prev = \\'C\\';\\n        int a = 0, b = 0;\\n        for (int i = 0, cnt = 0; i < colors.length(); ++i) {\\n            char cur = colors.charAt(i);\\n            if (cur == prev) {\\n                if (++cnt > 2) {\\n                    if (cur == \\'A\\') {\\n                        ++a;\\n                    }else {\\n                        ++b;\\n                    }\\n                }\\n            }else {\\n                cnt = 1;\\n            }\\n            prev = cur;\\n        }\\n        return a > b;\\n    }\\n```\n```python\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a = b = cnt = 0\\n        prev = \\'C\\' # dummy value.\\n        for cur in colors:\\n            if cur == prev:\\n                cnt += 1\\n                if cnt > 2:\\n                    if cur == \\'A\\':\\n                        a += 1\\n                    else:\\n                        b += 1\\n            else:\\n                cnt = 1\\n            prev = cur\\n        return a > b \\n```\n```java\\n    public boolean winnerOfGame(String colors) {\\n        int a = 0, b = 0;\\n        for (int i = 2; i < colors.length(); ++i) {\\n            if (colors.charAt(i - 2) == colors.charAt(i - 1) && colors.charAt(i - 1) == colors.charAt(i)) {\\n                if (colors.charAt(i) == \\'A\\') {\\n                    ++a;\\n                }else {\\n                    ++b;\\n                }\\n            }\\n        }\\n        return a > b;\\n    }\\n```\n```python\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a = b = 0\\n        for i in range(2, len(colors)):\\n            if colors[i - 2] == colors[i - 1] == colors[i]:\\n                if colors[i] == \\'A\\':\\n                    a += 1\\n                else:\\n                    b += 1\\n        return a > b\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1524313,
                "title": "c-counting",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1. Counting\\n\\nEach continuous segment of `A` or `B` of length `cnt` has `cnt - 2` pieces avaiable for the players to pick. We sum these `cnt - 2`s up and Alice wins if her sum is greater.\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int sum[2] = {};\\n        for (int i = 0, N = s.size(); i < N;) {\\n            int c = s[i], cnt = 0;\\n            while (i < N && c == s[i]) ++i, ++cnt;\\n            sum[c - \\'A\\'] += max(0, cnt - 2);\\n        }\\n        return sum[0] > sum[1];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int sum[2] = {};\\n        for (int i = 0, N = s.size(); i < N;) {\\n            int c = s[i], cnt = 0;\\n            while (i < N && c == s[i]) ++i, ++cnt;\\n            sum[c - \\'A\\'] += max(0, cnt - 2);\\n        }\\n        return sum[0] > sum[1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2112058,
                "title": "python-explanation-for-all",
                "content": "**UPVOTE IF HELPFUL**\\n\\nWe count the continous occurances of characters.\\nIf occurance is more than 2. -> Number of turns possible is **( Occurances - 2 )**\\nCompute this and give answer on basis which player get more turns.\\n\\n![image](https://assets.leetcode.com/users/images/171e1e07-e8af-4fee-80d6-8fe5f405477f_1654401801.2858663.jpeg)\\n\\n\\n\\n```\\nclass Solution:\\n    def winnerOfGame(self, s: str) -> bool:\\n        a=[]\\n        p=\"C\"\\n        for i in s:\\n            if i==p:\\n                a[-1]+=1\\n            else:\\n                p=i\\n                a.append(1)\\n        odd,even=0,0\\n        for i in range(len(a)):\\n            if i%2:\\n                odd += max(0,a[i]-2)\\n            else:\\n                even += max (0,a[i]-2)\\n        if s[0]==\"A\" and even>odd:\\n            return True\\n        if s[0]==\"B\" and odd>even:\\n            return True\\n        return False\\n```\\n![image](https://assets.leetcode.com/users/images/03e414c8-0e97-4e3a-8ee5-3c0f5cfa08b5_1654401815.2794096.jpeg)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, s: str) -> bool:\\n        a=[]\\n        p=\"C\"\\n        for i in s:\\n            if i==p:\\n                a[-1]+=1\\n            else:\\n                p=i\\n                a.append(1)\\n        odd,even=0,0\\n        for i in range(len(a)):\\n            if i%2:\\n                odd += max(0,a[i]-2)\\n            else:\\n                even += max (0,a[i]-2)\\n        if s[0]==\"A\" and even>odd:\\n            return True\\n        if s[0]==\"B\" and odd>even:\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526193,
                "title": "c-two-simple-and-short-solutions-explained",
                "content": "**Solution I:**\\nWe count all the pieces that Alice and Bob can remove.\\nThey can only remove the middle of three `A`s or `B`s in a row.\\nSo all we need to do is count the `AAA`s and `BBB`s.\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        if (colors.size() < 3) return false;\\n        int a = 0, b = 0;\\n        for (int i = 0; i < colors.size()-2; i++) {\\n            if (colors.substr(i, 3) == \"AAA\") a++;\\n            else if (colors.substr(i, 3) == \"BBB\") b++;\\n        }\\n        return a > b;\\n    }\\n};\\n```\\n****\\n**Solution II:**\\nInstead of counting the sets of `AAA`s and `BBB`s, we can decrease the runtime by just checking if the previous and next letters are the same.\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        if (colors.size() < 3) return false;\\n        int a = 0, b = 0;\\n        for (int i = 1; i < colors.size()-1; i++) {\\n            if (colors[i-1] == colors[i] && colors[i] == colors[i+1]) {\\n                if (colors[i] == \\'A\\') a++;\\n                else b++;\\n            }\\n        }\\n        return a > b;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        if (colors.size() < 3) return false;\\n        int a = 0, b = 0;\\n        for (int i = 0; i < colors.size()-2; i++) {\\n            if (colors.substr(i, 3) == \"AAA\") a++;\\n            else if (colors.substr(i, 3) == \"BBB\") b++;\\n        }\\n        return a > b;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        if (colors.size() < 3) return false;\\n        int a = 0, b = 0;\\n        for (int i = 1; i < colors.size()-1; i++) {\\n            if (colors[i-1] == colors[i] && colors[i] == colors[i+1]) {\\n                if (colors[i] == \\'A\\') a++;\\n                else b++;\\n            }\\n        }\\n        return a > b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524401,
                "title": "java-solution-o-n",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        char[] mass = colors.toCharArray();\\n\\n        for (int i = 1; i < mass.length - 1; i++) {\\n            if (mass[i - 1] == \\'A\\' && mass[i] == \\'A\\' && mass[i + 1] == \\'A\\') {\\n                countA ++;\\n            }\\n            if (mass[i - 1] == \\'B\\' && mass[i] == \\'B\\' && mass[i + 1] == \\'B\\') {\\n                countB ++;\\n            }\\n        }\\n        return countA > countB;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        char[] mass = colors.toCharArray();\\n\\n        for (int i = 1; i < mass.length - 1; i++) {\\n            if (mass[i - 1] == \\'A\\' && mass[i] == \\'A\\' && mass[i + 1] == \\'A\\') {\\n                countA ++;\\n            }\\n            if (mass[i - 1] == \\'B\\' && mass[i] == \\'B\\' && mass[i + 1] == \\'B\\') {\\n                countB ++;\\n            }\\n        }\\n        return countA > countB;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1526568,
                "title": "python-count-aaa-and-bbb-and-return-aaa-bbb",
                "content": "The basic idea here is that we count how many three consecutive AAA and BBB since Alice is only allowed to remove \\'A\\' if its neigbors are \\'A\\', i.e., A**A**A. Thus, we count how many \\'AAA\\' and \\'BBB\\' and whoever has more will defintely win since the other one will run out of characters to remove earlier/faster. \\n\\n``` \\ndef winnerOfGame(self, colors: str) -> bool:\\n        \\n        count_AAA = count_BBB = 0\\n        \\n        for i in range(1, len(colors) - 1):\\n            if colors[i-1] == colors[i] == colors[i+1] == \\'A\\':\\n                count_AAA += 1\\n            \\n            if colors[i-1] == colors[i] == colors[i+1] == \\'B\\':\\n                count_BBB += 1\\n                \\n        \\n        return count_AAA > count_BBB\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "``` \\ndef winnerOfGame(self, colors: str) -> bool:\\n        \\n        count_AAA = count_BBB = 0\\n        \\n        for i in range(1, len(colors) - 1):\\n            if colors[i-1] == colors[i] == colors[i+1] == \\'A\\':\\n                count_AAA += 1\\n            \\n            if colors[i-1] == colors[i] == colors[i+1] == \\'B\\':\\n                count_BBB += 1\\n                \\n        \\n        return count_AAA > count_BBB\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1524247,
                "title": "using-kmp-in-c",
                "content": "```\\nclass Solution {\\n    \\n\\n    int findcount(vector<int>&points,string search,string pattern)\\n{\\n    int i=0;\\n    int j=0;\\n        int count=0;\\n    while(i<search.size())\\n    {\\n        if(search[i]==pattern[j])\\n        {\\n            i++;\\n            j++;\\n        }\\n        else\\n        {\\n           if(j!=0)\\n           {\\n               j=points[j-1];\\n           }\\n           else\\n           {\\n               i++;\\n           }\\n        }\\n        if(j==points.size())\\n        {\\n            // cout<<i-points.size()<<endl;\\n            // break;\\n            count++;\\n            j=points[j-1];\\n        }\\n\\n    }\\n    return count;\\n}\\npublic:\\n    bool winnerOfGame(string colors) {\\n        \\n        vector<int>temp1={0,1,2};\\n        string pattern=\"AAA\";\\n        string pattern2=\"BBB\";\\n        int countalice= findcount(temp1,colors,pattern);\\n        int countbob= findcount(temp1,colors,pattern2);\\n        \\n        if(countalice>countbob)\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n       \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n\\n    int findcount(vector<int>&points,string search,string pattern)\\n{\\n    int i=0;\\n    int j=0;\\n        int count=0;\\n    while(i<search.size())\\n    {\\n        if(search[i]==pattern[j])\\n        {\\n            i++;\\n            j++;\\n        }\\n        else\\n        {\\n           if(j!=0)\\n           {\\n               j=points[j-1];\\n           }\\n           else\\n           {\\n               i++;\\n           }\\n        }\\n        if(j==points.size())\\n        {\\n            // cout<<i-points.size()<<endl;\\n            // break;\\n            count++;\\n            j=points[j-1];\\n        }\\n\\n    }\\n    return count;\\n}\\npublic:\\n    bool winnerOfGame(string colors) {\\n        \\n        vector<int>temp1={0,1,2};\\n        string pattern=\"AAA\";\\n        string pattern2=\"BBB\";\\n        int countalice= findcount(temp1,colors,pattern);\\n        int countbob= findcount(temp1,colors,pattern2);\\n        \\n        if(countalice>countbob)\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n       \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1524228,
                "title": "easy-c-count-approach-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0;\\n        int b=0;\\n        for(int i=1;i<colors.size();i++){\\n            if(colors[i-1]==colors[i] && colors[i+1]==colors[i]){\\n                if(colors[i]==\\'A\\')\\n                    a++;\\n                else\\n                    b++;\\n            }\\n        }\\n            \\n        return a>b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0;\\n        int b=0;\\n        for(int i=1;i<colors.size();i++){\\n            if(colors[i-1]==colors[i] && colors[i+1]==colors[i]){\\n                if(colors[i]==\\'A\\')\\n                    a++;\\n                else\\n                    b++;\\n            }\\n        }\\n            \\n        return a>b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2582688,
                "title": "java-string-counting-simple-solution",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int as=0,bs=0;        \\n        for (int i=1;i<colors.length()-1;i++) {\\n            if(colors.charAt(i-1)==\\'A\\' && colors.charAt(i)==\\'A\\' && colors.charAt(i+1)==\\'A\\') \\n                as++;\\n            if(colors.charAt(i-1)==\\'B\\' && colors.charAt(i)==\\'B\\' && colors.charAt(i+1)==\\'B\\') \\n                bs++;\\n        }\\n        return as>bs;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int as=0,bs=0;        \\n        for (int i=1;i<colors.length()-1;i++) {\\n            if(colors.charAt(i-1)==\\'A\\' && colors.charAt(i)==\\'A\\' && colors.charAt(i+1)==\\'A\\') \\n                as++;\\n            if(colors.charAt(i-1)==\\'B\\' && colors.charAt(i)==\\'B\\' && colors.charAt(i+1)==\\'B\\') \\n                bs++;\\n        }\\n        return as>bs;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2367141,
                "title": "python-simple-solution",
                "content": "Just scan the array and count the number of consecutive A\\'s or B\\'s of length 3\\n\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        \\n        num_3consecutive_As = 0\\n        num_3consecutive_Bs = 0\\n        \\n        for i in range(0, len(colors)-2):\\n            \\n            if colors[i] == colors[i+1] == colors[i+2]:\\n                if colors[i] == \\'A\\':\\n                    num_3consecutive_As += 1\\n                else:\\n                    num_3consecutive_Bs += 1\\n        \\n        return num_3consecutive_As > num_3consecutive_Bs\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        \\n        num_3consecutive_As = 0\\n        num_3consecutive_Bs = 0\\n        \\n        for i in range(0, len(colors)-2):\\n            \\n            if colors[i] == colors[i+1] == colors[i+2]:\\n                if colors[i] == \\'A\\':\\n                    num_3consecutive_As += 1\\n                else:\\n                    num_3consecutive_Bs += 1\\n        \\n        return num_3consecutive_As > num_3consecutive_Bs\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524500,
                "title": "java-100-fast-with-explanation-in-detail",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        \\n        if(colors.length() <=2)\\n        {\\n            return false;  // BOB will win if \"AA\" or \"BB\" or \"A\" or \"B\"\\n        }\\n        \\n        int[] triple = triplets(colors); //Calculating all the triplets in the string AAA, BBB\\n\\n        if(triple[0] > triple[1])\\n        {\\n            return true;    //Alice wins, as it has more number of triplets\\n        }\\n        else\\n        {\\n            return false; //Bob wins, also this condition will be true when triple A == triple B \\n        }\\n    }\\n\\n    \\n    public int[] triplets(String colors)\\n    {\\n        int tripleA = 0, tripleB = 0;\\n        \\n        for(int i = 2; i<colors.length(); i++)    // i=2, so that it does not give array out of bounds exception\\n        {\\n            //If, we get 3 continous A\\'s\\n            if(colors.charAt(i-2) == \\'A\\' && colors.charAt(i-1) == \\'A\\' && colors.charAt(i) == \\'A\\')\\n            {\\n                tripleA++;    \\n            }\\n            //If, we get 3 continous B\\'s\\n            else if(colors.charAt(i-2) == \\'B\\' && colors.charAt(i-1) == \\'B\\' && colors.charAt(i) == \\'B\\')\\n            {\\n                tripleB++;\\n            }\\n        }\\n        return new int[] {tripleA, tripleB};  \\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean winnerOfGame(String colors) {\\n        \\n        if(colors.length() <=2)\\n        {\\n            return false;  // BOB will win if \"AA\" or \"BB\" or \"A\" or \"B\"\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2691892,
                "title": "javascript-solution",
                "content": "The trick here is to figure out how many total moves Alice and Bob will get in this game. If Alice has more moves than Bob then Alice wins. Otherwise Bob wins.\\n\\ne.g. \\'AAAABBBBAAA\\'\\n\\n* We have four A\\'s in a row in the beginning.\\n\\t* This means that Alice can do two moves here.\\n* Then we have four B\\'s in a row.\\n\\t* This means that Bob can do two moves here.\\n* FInally we have three A\\'s in a row.\\n\\t* This means that Alice can do one move here.\\n\\nThe total we get is 4 moves for Alice and 2 moves for Bob. So Alice wins.\\n\\nFor each consequitive group of same letter that are 3 or more in a row, the number of moves will be that count minus 2. So if 4 in a row, then that person can do 2 moves.\\n\\n``` \\nvar winnerOfGame = function(colors) {\\n\\t// COUNT HOW MANY MOVES ALICE GETS\\n    let aliceMoves = 0;\\n    let aCount = 0;\\n    \\n    for (let i = 0; i < colors.length; i ++) {\\n\\t\\t// IF WE HAVE THE CORRECT COLOR THEN WE INCREMENT THE COUNT\\n        if (colors[i] === \\'A\\') {\\n            aCount ++;\\n        }\\n        \\n\\t\\t// IF THE COLOR CHANGES TO THE WRONG COLOR OR IF WE REACHED THE END OF THE STRING THEN WE CHECK IF 3 OR MORE TO GET THE MOVE COUNT\\n        if (colors[i] === \\'B\\' || i === colors.length  - 1) {\\n            if (aCount >= 3) {\\n                aliceMoves += (aCount - 2);\\n            }\\n            aCount = 0;\\n        }\\n    }\\n    \\n\\t// COUNT HOW MANY MOVES BOB GETS\\n    let bobMoves = 0;\\n    let bCount = 0;\\n    \\n    for (let i = 0; i < colors.length; i ++) {\\n        if (colors[i] === \\'B\\') {\\n            bCount ++;\\n        }\\n        \\n        if (colors[i] === \\'A\\' || i === colors.length  - 1) {\\n            if (bCount >= 3) {\\n                bobMoves += (bCount - 2);\\n            }\\n            bCount = 0;\\n        }\\n    }\\n    \\n    return aliceMoves > bobMoves;\\n};\\n\\ntime O(n)\\nspace O(1)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "The trick here is to figure out how many total moves Alice and Bob will get in this game. If Alice has more moves than Bob then Alice wins. Otherwise Bob wins.\\n\\ne.g. \\'AAAABBBBAAA\\'\\n\\n* We have four A\\'s in a row in the beginning.\\n\\t* This means that Alice can do two moves here.\\n* Then we have four B\\'s in a row.\\n\\t* This means that Bob can do two moves here.\\n* FInally we have three A\\'s in a row.\\n\\t* This means that Alice can do one move here.\\n\\nThe total we get is 4 moves for Alice and 2 moves for Bob. So Alice wins.\\n\\nFor each consequitive group of same letter that are 3 or more in a row, the number of moves will be that count minus 2. So if 4 in a row, then that person can do 2 moves.\\n\\n``` \\nvar winnerOfGame = function(colors) {\\n\\t// COUNT HOW MANY MOVES ALICE GETS\\n    let aliceMoves = 0;\\n    let aCount = 0;\\n    \\n    for (let i = 0; i < colors.length; i ++) {\\n\\t\\t// IF WE HAVE THE CORRECT COLOR THEN WE INCREMENT THE COUNT\\n        if (colors[i] === \\'A\\') {\\n            aCount ++;\\n        }\\n        \\n\\t\\t// IF THE COLOR CHANGES TO THE WRONG COLOR OR IF WE REACHED THE END OF THE STRING THEN WE CHECK IF 3 OR MORE TO GET THE MOVE COUNT\\n        if (colors[i] === \\'B\\' || i === colors.length  - 1) {\\n            if (aCount >= 3) {\\n                aliceMoves += (aCount - 2);\\n            }\\n            aCount = 0;\\n        }\\n    }\\n    \\n\\t// COUNT HOW MANY MOVES BOB GETS\\n    let bobMoves = 0;\\n    let bCount = 0;\\n    \\n    for (let i = 0; i < colors.length; i ++) {\\n        if (colors[i] === \\'B\\') {\\n            bCount ++;\\n        }\\n        \\n        if (colors[i] === \\'A\\' || i === colors.length  - 1) {\\n            if (bCount >= 3) {\\n                bobMoves += (bCount - 2);\\n            }\\n            bCount = 0;\\n        }\\n    }\\n    \\n    return aliceMoves > bobMoves;\\n};\\n\\ntime O(n)\\nspace O(1)",
                "codeTag": "Unknown"
            },
            {
                "id": 1531584,
                "title": "c-easiest-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        \\n        int n=colors.size();\\n        if(n<=2) return false;\\n\\t\\t\\n        int a=0;\\n        int b=0;\\n        \\n        for(int i=1;i<n-1;++i)\\n        {\\n            if(colors[i]==\\'A\\' and colors[i-1]==\\'A\\' and colors[i+1]==\\'A\\') a++;\\n            if(colors[i]==\\'B\\' and colors[i-1]==\\'B\\' and colors[i+1]==\\'B\\') b++;\\n        }\\n        return a>b;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        \\n        int n=colors.size();\\n        if(n<=2) return false;\\n\\t\\t\\n        int a=0;\\n        int b=0;\\n        \\n        for(int i=1;i<n-1;++i)\\n        {\\n            if(colors[i]==\\'A\\' and colors[i-1]==\\'A\\' and colors[i+1]==\\'A\\') a++;\\n            if(colors[i]==\\'B\\' and colors[i-1]==\\'B\\' and colors[i+1]==\\'B\\') b++;\\n        }\\n        return a>b;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1528685,
                "title": "javascript-js",
                "content": "```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function (colors) {\\n  let a = 0;\\n  let b = 0;\\n\\n  for (let i = 1; i < colors.length - 1; i++) {\\n    if (colors[i - 1] === colors[i] && colors[i + 1] === colors[i]) {\\n      colors[i] === \"A\" ? a++ : b++;\\n    }\\n  }\\n\\n  return a > b;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function (colors) {\\n  let a = 0;\\n  let b = 0;\\n\\n  for (let i = 1; i < colors.length - 1; i++) {\\n    if (colors[i - 1] === colors[i] && colors[i + 1] === colors[i]) {\\n      colors[i] === \"A\" ? a++ : b++;\\n    }\\n  }\\n\\n  return a > b;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1524314,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string c) {\\n        int a = 0,b =0;\\n        for(int i = 1 ; i < c.length()-1 ; i++){\\n\\t\\t// Counting the number of \\'AAA\\' & \\'BBB\\'\\n            if( c[i] == \\'A\\' && c[i-1] == \\'A\\' && c[i+1] == \\'A\\'  ){\\n                a++;\\n            }else if(c[i] == \\'B\\' && c[i-1] == \\'B\\' && c[i+1] == \\'B\\' ){\\n                b++;\\n            }\\n        }\\n        if(a>b){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string c) {\\n        int a = 0,b =0;\\n        for(int i = 1 ; i < c.length()-1 ; i++){\\n\\t\\t// Counting the number of \\'AAA\\' & \\'BBB\\'\\n            if( c[i] == \\'A\\' && c[i-1] == \\'A\\' && c[i+1] == \\'A\\'  ){\\n                a++;\\n            }else if(c[i] == \\'B\\' && c[i-1] == \\'B\\' && c[i+1] == \\'B\\' ){\\n                b++;\\n            }\\n        }\\n        if(a>b){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524310,
                "title": "o-n-time-count-consecutive-aaas-bbbs",
                "content": "\\n***C++***\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cntA=0,cntB=0;\\n        for(int i=1;i<colors.size()-1;i++){\\n\\t\\t\\t// Count of Consecutive \\'AAA\\'s which Alice can remove\\n            if(colors[i]==\\'A\\'&&colors[i-1]==\\'A\\'&&colors[i+1]==\\'A\\')cntA++;\\n\\t\\t\\t\\n\\t\\t\\t// Count of Consecutive \\'BBB\\'s which Bob can remove\\n            if(colors[i]==\\'B\\'&&colors[i-1]==\\'B\\'&&colors[i+1]==\\'B\\')cntB++;\\n        }\\n\\t\\t\\n\\t\\t// Alice wins if she can remove more \\'AAA\\'s than Bob can remove \\'BBB\\'s\\n        return cntA>cntB;\\n    }\\n};\\n```\\n\\n***Java***\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int cntA=0,cntB=0;\\n        for(int i=1;i<colors.length()-1;i++){\\n             if(colors.charAt(i)==\\'A\\'&&colors.charAt(i-1)==\\'A\\'&&colors.charAt(i+1)==\\'A\\')cntA++;\\t\\t\\t\\n            if(colors.charAt(i)==\\'B\\'&&colors.charAt(i-1)==\\'B\\'&&colors.charAt(i+1)==\\'B\\')cntB++;\\n        }\\n        \\n        return cntA>cntB;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cntA=0,cntB=0;\\n        for(int i=1;i<colors.size()-1;i++){\\n\\t\\t\\t// Count of Consecutive \\'AAA\\'s which Alice can remove\\n            if(colors[i]==\\'A\\'&&colors[i-1]==\\'A\\'&&colors[i+1]==\\'A\\')cntA++;\\n\\t\\t\\t\\n\\t\\t\\t// Count of Consecutive \\'BBB\\'s which Bob can remove\\n            if(colors[i]==\\'B\\'&&colors[i-1]==\\'B\\'&&colors[i+1]==\\'B\\')cntB++;\\n        }\\n\\t\\t\\n\\t\\t// Alice wins if she can remove more \\'AAA\\'s than Bob can remove \\'BBB\\'s\\n        return cntA>cntB;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int cntA=0,cntB=0;\\n        for(int i=1;i<colors.length()-1;i++){\\n             if(colors.charAt(i)==\\'A\\'&&colors.charAt(i-1)==\\'A\\'&&colors.charAt(i+1)==\\'A\\')cntA++;\\t\\t\\t\\n            if(colors.charAt(i)==\\'B\\'&&colors.charAt(i-1)==\\'B\\'&&colors.charAt(i+1)==\\'B\\')cntB++;\\n        }\\n        \\n        return cntA>cntB;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3565172,
                "title": "3-a-3-b-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe thing is to obsever the three consecutive A\\'s && B\\'s hence the turn will take one by one right..! hence the count of consecutive A\\'s are greater than the consecutive B\\'s then definately Alice win which of consecutive A\\'s right..!\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*Count the 3 Consecutive A\\'s and 3 consecutive B\\'s\\n*if **(3Consecutive of A\\'s )> (3Consecutive B\\'s)** return true else return false;\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0,b=0;\\n        if(colors.size()>2){\\n        for(int i=0;i<colors.size()-2;i++){\\n            if(colors[i]==\\'A\\' && colors[i+1]==\\'A\\' && colors[i+2]==\\'A\\') a++;\\n            if(colors[i]==\\'B\\' && colors[i+1]==\\'B\\' && colors[i+2]==\\'B\\') b++; } \\n        }\\n        return (a<=b)  ? false  : true;\\n       \\n         \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0,b=0;\\n        if(colors.size()>2){\\n        for(int i=0;i<colors.size()-2;i++){\\n            if(colors[i]==\\'A\\' && colors[i+1]==\\'A\\' && colors[i+2]==\\'A\\') a++;\\n            if(colors[i]==\\'B\\' && colors[i+1]==\\'B\\' && colors[i+2]==\\'B\\') b++; } \\n        }\\n        return (a<=b)  ? false  : true;\\n       \\n         \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339420,
                "title": "2-solutions-counting-stack-c",
                "content": "# Counting\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        long long cntA = 0, cntB = 0, alice = 0, bob = 0;\\n        for(char c : colors) {\\n            if(c == \\'A\\') {\\n                cntA++;\\n                if(cntA >= 3) alice += cntA - 2;\\n                cntB = 0;\\n            }\\n            else {\\n                cntB++;\\n                if(cntB >= 3) bob += cntB - 2;\\n                cntA = 0;\\n            }\\n        }\\n        return alice > bob;\\n    }\\n};\\n```\\n\\n# Stack\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int bob = 0, alice = 0;\\n        stack<char> s;\\n        for(char c : colors) {\\n            if(s.size() >= 2) {\\n                char first = s.top(); s.pop();\\n                char second = s.top(); s.pop();\\n                s.push(second);\\n                s.push(first);\\n                if(c == first && c == second) {\\n                    c == \\'A\\' ? alice++ : bob++;\\n                }\\n                else s.push(c);\\n            }\\n            else s.push(c);\\n        }\\n        return alice > bob;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Stack",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        long long cntA = 0, cntB = 0, alice = 0, bob = 0;\\n        for(char c : colors) {\\n            if(c == \\'A\\') {\\n                cntA++;\\n                if(cntA >= 3) alice += cntA - 2;\\n                cntB = 0;\\n            }\\n            else {\\n                cntB++;\\n                if(cntB >= 3) bob += cntB - 2;\\n                cntA = 0;\\n            }\\n        }\\n        return alice > bob;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int bob = 0, alice = 0;\\n        stack<char> s;\\n        for(char c : colors) {\\n            if(s.size() >= 2) {\\n                char first = s.top(); s.pop();\\n                char second = s.top(); s.pop();\\n                s.push(second);\\n                s.push(first);\\n                if(c == first && c == second) {\\n                    c == \\'A\\' ? alice++ : bob++;\\n                }\\n                else s.push(c);\\n            }\\n            else s.push(c);\\n        }\\n        return alice > bob;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2792619,
                "title": "cpp-solution-o-n-simple-solution",
                "content": "# Intuition\\nCount the Number of \"AAA\" and \"BBB\"\\n\\n# Approach\\n-> Count number of \"AAA\" and \"BBB\" and store them in a variable\\n\\n-> If count of \"AAA\" is more than \"BBB\" than than Alice wins otherwise Bob wins Why?\\n\\n> If count of \"AAA\" is less than \"BBB\" than Bob have more pieces to remove, and if count of both \"AAA\",\"BBB\" are same(or both are zero) than on Alice will the first one to start and on her turn she couldn\\'t remove a piece therefore she will be the one to lose.\\n\\n# Complexity\\n- Time complexity: O(n), 84.69% better than Cpp online submissions\\n\\n- Space complexity:O(1), 79.53% better than Cpp online submissions\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string c) {\\n        if(c.size()==2)\\n         return false;\\n        int a=0,b=0;\\n        for(int i=1;i<c.size()-1;i++)\\n        {\\n            if(c[i]==\\'A\\' && c[i-1]==\\'A\\' && c[i+1]==\\'A\\')\\n            {\\n                a++;\\n            } \\n            else if(c[i]==\\'B\\' && c[i-1]==\\'B\\' && c[i+1]==\\'B\\')\\n             {\\n                b++;\\n             }\\n        }\\n        if(a==b || a<b)\\n        return false;\\n        else\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string c) {\\n        if(c.size()==2)\\n         return false;\\n        int a=0,b=0;\\n        for(int i=1;i<c.size()-1;i++)\\n        {\\n            if(c[i]==\\'A\\' && c[i-1]==\\'A\\' && c[i+1]==\\'A\\')\\n            {\\n                a++;\\n            } \\n            else if(c[i]==\\'B\\' && c[i-1]==\\'B\\' && c[i+1]==\\'B\\')\\n             {\\n                b++;\\n             }\\n        }\\n        if(a==b || a<b)\\n        return false;\\n        else\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2441499,
                "title": "solution-remove-colored-pieces-if-both-neighbors-are-the-same-color",
                "content": "```class Solution {\\n    public boolean winnerOfGame(String c) {\\n        int a = 0;\\n        int b = 0; \\n        for(int i = 1; i <= c.length() - 2; i++){\\n            if((c.charAt(i) == c.charAt(i-1)) && (c.charAt(i) == c.charAt(i+1))){\\n                if(c.charAt(i) == \\'A\\') {\\n                    a++;\\n                } else {\\n                    b++;\\n                }\\n            }\\n        }\\n        if(a>b) return true;\\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "class Solution {\\n    public boolean winnerOfGame(String c) {\\n        int a = 0;\\n        int b = 0; \\n        for(int i = 1; i <= c.length() - 2; i++){\\n            if((c.charAt(i) == c.charAt(i-1)) && (c.charAt(i) == c.charAt(i+1))){\\n                if(c.charAt(i) == \\'A\\') {\\n                    a++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2233178,
                "title": "c-python-o-n-easy-to-understand",
                "content": "**C++**\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int l = colors.length();\\n        int ca=0, cb=0;\\n        if(l<3) return false;\\n        for(int i=0; i<=l-3; ++i){\\n            if(colors[i]==colors[i+1] && colors[i+1]==colors[i+2]){\\n                if(colors[i] == \\'A\\') ca++;\\n                else cb++;\\n            }\\n        }\\n        return ca>cb;\\n    }\\n};\\n```\\n**Python3**\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        l = len(colors)\\n        ca, cb =0, 0\\n        if(l<3): return False\\n        for i in range(l-2):\\n            if(colors[i]==colors[i+1] and colors[i+1]==colors[i+2]):\\n                if(colors[i] == \\'A\\'): ca += 1\\n                else: cb += 1\\n        return ca>cb\\n```",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int l = colors.length();\\n        int ca=0, cb=0;\\n        if(l<3) return false;\\n        for(int i=0; i<=l-3; ++i){\\n            if(colors[i]==colors[i+1] && colors[i+1]==colors[i+2]){\\n                if(colors[i] == \\'A\\') ca++;\\n                else cb++;\\n            }\\n        }\\n        return ca>cb;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        l = len(colors)\\n        ca, cb =0, 0\\n        if(l<3): return False\\n        for i in range(l-2):\\n            if(colors[i]==colors[i+1] and colors[i+1]==colors[i+2]):\\n                if(colors[i] == \\'A\\'): ca += 1\\n                else: cb += 1\\n        return ca>cb\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2049395,
                "title": "c-single-pass",
                "content": "```\\n    bool winnerOfGame(string colors) {\\n        int a = 0, b = 0, s = colors.size();\\n        for (int i = 0; i < s-2; ++i) {\\n            if (colors[i] == \\'A\\' && colors[i+1] == \\'A\\' && colors[i+2] == \\'A\\')\\n                a++;\\n            else if (colors[i] == \\'B\\' && colors[i+1] == \\'B\\' && colors[i+2] == \\'B\\')\\n                b++;\\n        }\\n        return a > b;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    bool winnerOfGame(string colors) {\\n        int a = 0, b = 0, s = colors.size();\\n        for (int i = 0; i < s-2; ++i) {\\n            if (colors[i] == \\'A\\' && colors[i+1] == \\'A\\' && colors[i+2] == \\'A\\')\\n                a++;\\n            else if (colors[i] == \\'B\\' && colors[i+1] == \\'B\\' && colors[i+2] == \\'B\\')\\n                b++;\\n        }\\n        return a > b;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1937371,
                "title": "python-3-greedy",
                "content": "When either of them makes a move, it does not affect the other person being able to make a move in any way, so it is enough to check how many moves they can make. \\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a,b = 0, 0\\n        for i in range(1, len(colors) - 1):\\n            if colors[i] == \\'A\\' and colors[i - 1] == \\'A\\' and colors[i + 1] == \\'A\\':\\n                a += 1\\n            if colors[i] == \\'B\\' and colors[i - 1] == \\'B\\' and colors[i + 1] == \\'B\\':\\n                b += 1\\n        return True if a > b else False\\n```",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a,b = 0, 0\\n        for i in range(1, len(colors) - 1):\\n            if colors[i] == \\'A\\' and colors[i - 1] == \\'A\\' and colors[i + 1] == \\'A\\':\\n                a += 1\\n            if colors[i] == \\'B\\' and colors[i - 1] == \\'B\\' and colors[i + 1] == \\'B\\':\\n                b += 1\\n        return True if a > b else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1885739,
                "title": "java-solution-using-sliding-window",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n        \\n        for (int i = 0; i < colors.length() - 2; i++) {\\n            char c1 = colors.charAt(i);\\n            char c2 = colors.charAt(i + 1);\\n            char c3 = colors.charAt(i + 2);\\n            \\n            if (c1 == c2 && c2 == c3 && c1 == \\'A\\') {\\n                countA++;\\n            }\\n            \\n            if (c1 == c2 && c2 == c3 && c1 == \\'B\\') {\\n                countB++;\\n            }\\n        }\\n        \\n        return countA > countB;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n        \\n        for (int i = 0; i < colors.length() - 2; i++) {\\n            char c1 = colors.charAt(i);\\n            char c2 = colors.charAt(i + 1);\\n            char c3 = colors.charAt(i + 2);\\n            \\n            if (c1 == c2 && c2 == c3 && c1 == \\'A\\') {\\n                countA++;\\n            }\\n            \\n            if (c1 == c2 && c2 == c3 && c1 == \\'B\\') {\\n                countB++;\\n            }\\n        }\\n        \\n        return countA > countB;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1724359,
                "title": "simple-c-solution-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) \\n    {\\n        int a=0,b=0;\\n        if(colors.size()<3)\\n            return false;\\n        for(int i=0;i<colors.size()-2;i++)\\n        {\\n            if(colors[i]==\\'A\\' and colors[i+1]==\\'A\\' and colors[i+2]==\\'A\\')\\n                a++;\\n            if(colors[i]==\\'B\\' and colors[i+1]==\\'B\\' and colors[i+2]==\\'B\\')\\n                b++;\\n        }\\n        return a>b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) \\n    {\\n        int a=0,b=0;\\n        if(colors.size()<3)\\n            return false;\\n        for(int i=0;i<colors.size()-2;i++)\\n        {\\n            if(colors[i]==\\'A\\' and colors[i+1]==\\'A\\' and colors[i+2]==\\'A\\')\\n                a++;\\n            if(colors[i]==\\'B\\' and colors[i+1]==\\'B\\' and colors[i+2]==\\'B\\')\\n                b++;\\n        }\\n        return a>b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1529271,
                "title": "count-together-a-s-and-b-s-easy",
                "content": "```\\n  bool winnerOfGame(string colors) {\\n        \\n        int cntA = 1 , cntB = 1;\\n        int totA = 0 , totB = 0;\\n        string s = colors ;\\n        \\n        for(int i=1 ; i<colors.size() ; i++ )\\n        {\\n            if(s[i] == s[i-1])\\n            {\\n                if(s[i] == \\'A\\') cntA++;\\n                else cntB++;\\n            }\\n            \\n            // ABBBBBBBAAA\\n            \\n            else{\\n                totA+= max(0 , cntA-2 ) ;\\n                totB+= max(0 , cntB-2 ) ;\\n                cntA = 1 , cntB = 1;\\n\\n            }\\n        }\\n        \\n                totA+= max(0 , cntA-2 ) ;\\n                totB+= max(0 , cntB-2 ) ;\\n                cntA = 1 , cntB = 1;\\n        \\n        if(totA > totB) return 1;\\n        return 0;\\n}",
                "solutionTags": [],
                "code": "```\\n  bool winnerOfGame(string colors) {\\n        \\n        int cntA = 1 , cntB = 1;\\n        int totA = 0 , totB = 0;\\n        string s = colors ;\\n        \\n        for(int i=1 ; i<colors.size() ; i++ )\\n        {\\n            if(s[i] == s[i-1])\\n            {\\n                if(s[i] == \\'A\\') cntA++;\\n                else cntB++;\\n            }\\n            \\n            // ABBBBBBBAAA\\n            \\n            else{\\n                totA+= max(0 , cntA-2 ) ;\\n                totB+= max(0 , cntB-2 ) ;\\n                cntA = 1 , cntB = 1;\\n\\n            }\\n        }\\n        \\n                totA+= max(0 , cntA-2 ) ;\\n                totB+= max(0 , cntB-2 ) ;\\n                cntA = 1 , cntB = 1;\\n        \\n        if(totA > totB) return 1;\\n        return 0;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1527524,
                "title": "java-simple-easy-approach",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        \\n        int len=colors.length();\\n        \\n        int acount=0;\\n        int bcount=0;\\n        \\n        for(int i=1;i<len-1;i++){\\n            if(colors.charAt(i-1)==colors.charAt(i) && colors.charAt(i+1)==colors.charAt(i) )\\n            {\\n                if(colors.charAt(i)==\\'A\\')\\n                    acount++;\\n                else\\n                    bcount++;\\n            }\\n        }\\n        \\n        return acount>bcount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        \\n        int len=colors.length();\\n        \\n        int acount=0;\\n        int bcount=0;\\n        \\n        for(int i=1;i<len-1;i++){\\n            if(colors.charAt(i-1)==colors.charAt(i) && colors.charAt(i+1)==colors.charAt(i) )\\n            {\\n                if(colors.charAt(i)==\\'A\\')\\n                    acount++;\\n                else\\n                    bcount++;\\n            }\\n        }\\n        \\n        return acount>bcount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524157,
                "title": "o-n-python",
                "content": "```\\ndef winnerOfGame(self, colors: str) -> bool:\\n        alice=0\\n        bob =0\\n        for i in range(1,len(colors)-1):\\n            if colors[i]==\"A\":\\n                if colors[i-1]==\"A\" and colors[i+1]==\"A\":\\n                    alice+=1\\n            else:\\n                if colors[i-1]==\"B\" and colors[i+1]==\"B\":\\n                    bob+=1\\n        return alice>bob",
                "solutionTags": [],
                "code": "```\\ndef winnerOfGame(self, colors: str) -> bool:\\n        alice=0\\n        bob =0\\n        for i in range(1,len(colors)-1):\\n            if colors[i]==\"A\":\\n                if colors[i-1]==\"A\" and colors[i+1]==\"A\":\\n                    alice+=1\\n            else:\\n                if colors[i-1]==\"B\" and colors[i+1]==\"B\":\\n                    bob+=1\\n        return alice>bob",
                "codeTag": "Python3"
            },
            {
                "id": 3882455,
                "title": "c-easy-solution-optimal-space-well-explained",
                "content": "# Intuition\\nWe are using seperate counters for A and B and comparing their neighbouring index values if the matches the we increment the value of counter and then return true for counter of A is greater than counter of B.\\n\\n# Approach\\n(i) Initialize two counters for A and B.\\n(ii) Now, the condition according to the given problem is for neighbouring values,so we are taking the values accordingly i.e. for index i the neighbouring indexes will be (i-1) and (i+1).\\n(iii) Increment the counter for A and B on matching.\\n(iv) Return true for countA>countB and false for countA<countB.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        //initializing the counter variable\\n        int countA=0;\\n        int countB=0;\\n        for(int i=1;i<colors.size();i++){\\n            //matching condition for A and B\\n            if(colors[i-1] == colors[i] && colors[i+1] == colors[i]){\\n                if(colors[i] ==\\'A\\'){\\n                    countA++;\\n                }\\n                //for B\\n                else{\\n                    countB++;\\n                }\\n            }\\n        }\\n        // will return true if (countA>countB) else false\\n        return countA>countB;\\n    }\\n};\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        //initializing the counter variable\\n        int countA=0;\\n        int countB=0;\\n        for(int i=1;i<colors.size();i++){\\n            //matching condition for A and B\\n            if(colors[i-1] == colors[i] && colors[i+1] == colors[i]){\\n                if(colors[i] ==\\'A\\'){\\n                    countA++;\\n                }\\n                //for B\\n                else{\\n                    countB++;\\n                }\\n            }\\n        }\\n        // will return true if (countA>countB) else false\\n        return countA>countB;\\n    }\\n};\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759794,
                "title": "detailed-python-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, c: str) -> bool:\\n        # a for count the A until continuious\\n        a=0\\n        # b for count the B until continuous\\n        b=0\\n        #Total A count ac\\n        ac=0\\n        #Total B count bc\\n        bc=0\\n        for i in c:\\n            if i==\"A\":\\n                bc+=max(0,b-2)\\n                a=a+1\\n                b=0\\n# -2 is for count the removals for example : AAAAA len(A\\'s)-2=2 so we can count as 2.\\n            else:\\n                ac+=max(0,a-2)\\n                b=b+1\\n                a=0\\n        ac+=max(0,a-2)\\n        bc+=max(0,b-2)\\n        if ac>bc:\\n            #This means There is no B\\'s to remove so Alice is Winner\\n            return True\\n        return False\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, c: str) -> bool:\\n        # a for count the A until continuious\\n        a=0\\n        # b for count the B until continuous\\n        b=0\\n        #Total A count ac\\n        ac=0\\n        #Total B count bc\\n        bc=0\\n        for i in c:\\n            if i==\"A\":\\n                bc+=max(0,b-2)\\n                a=a+1\\n                b=0\\n# -2 is for count the removals for example : AAAAA len(A\\'s)-2=2 so we can count as 2.\\n            else:\\n                ac+=max(0,a-2)\\n                b=b+1\\n                a=0\\n        ac+=max(0,a-2)\\n        bc+=max(0,b-2)\\n        if ac>bc:\\n            #This means There is no B\\'s to remove so Alice is Winner\\n            return True\\n        return False\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3635119,
                "title": "simple-o-n-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        for(int i=1; i<colors.length() - 1; i++) {\\n            if(colors.charAt(i) == \\'A\\') {\\n                if(colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')\\n                    countA++;\\n            } else {\\n                if(colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\')\\n                    countB++;\\n            }\\n        }\\n\\n        if(countA > countB)\\n            return true;\\n        else\\n            return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        for(int i=1; i<colors.length() - 1; i++) {\\n            if(colors.charAt(i) == \\'A\\') {\\n                if(colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')\\n                    countA++;\\n            } else {\\n                if(colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\')\\n                    countB++;\\n            }\\n        }\\n\\n        if(countA > countB)\\n            return true;\\n        else\\n            return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3365015,
                "title": "javascript-94-one-pass-o-n",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can count the result of the game before the start because any turn of one player can\\'t add new possible turns to another player. We count amount of possible turns for A and B in one pass, then compare it.\\n\\nTime complexity: $$O(n)$$.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function(colors) {\\n    let countA = 0;\\n    let countB = 0;\\n\\n    for (let i = 1; i < colors.length - 1; i++) {\\n        countA += colors[i - 1] === \\'A\\' &&\\n                  colors[i] === \\'A\\' &&\\n                  colors[i + 1] === \\'A\\';\\n        \\n        countB += colors[i - 1] === \\'B\\' &&\\n                  colors[i] === \\'B\\' &&\\n                  colors[i + 1] === \\'B\\';\\n    }\\n\\n    return countA > countB;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function(colors) {\\n    let countA = 0;\\n    let countB = 0;\\n\\n    for (let i = 1; i < colors.length - 1; i++) {\\n        countA += colors[i - 1] === \\'A\\' &&\\n                  colors[i] === \\'A\\' &&\\n                  colors[i + 1] === \\'A\\';\\n        \\n        countB += colors[i - 1] === \\'B\\' &&\\n                  colors[i] === \\'B\\' &&\\n                  colors[i + 1] === \\'B\\';\\n    }\\n\\n    return countA > countB;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3159654,
                "title": "java-simple-count-of-frequent-matching-chars",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    private int alice = 0;\\n    private int bob = 0;\\n    private void calculateTurns(char prevChar, int prevIndex, int currIndex){\\n        if(currIndex - prevIndex < 3) return;\\n        if(prevChar == \\'A\\'){\\n            alice += currIndex - prevIndex - 2;\\n        }else{\\n            bob += currIndex - prevIndex - 2;\\n        }\\n    }\\n    public boolean winnerOfGame(String colors) {\\n        char prevChar = colors.charAt(0);\\n        int prevIndex = 0;\\n        for(int i = 1; i < colors.length(); i++){\\n            if(prevChar != colors.charAt(i)){\\n                calculateTurns(prevChar, prevIndex, i);\\n                prevChar = colors.charAt(i);\\n                prevIndex = i;\\n            }\\n        }\\n        calculateTurns(prevChar, prevIndex, colors.length());\\n        return alice > bob;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Greedy",
                    "Game Theory"
                ],
                "code": "```\\nclass Solution {\\n    private int alice = 0;\\n    private int bob = 0;\\n    private void calculateTurns(char prevChar, int prevIndex, int currIndex){\\n        if(currIndex - prevIndex < 3) return;\\n        if(prevChar == \\'A\\'){\\n            alice += currIndex - prevIndex - 2;\\n        }else{\\n            bob += currIndex - prevIndex - 2;\\n        }\\n    }\\n    public boolean winnerOfGame(String colors) {\\n        char prevChar = colors.charAt(0);\\n        int prevIndex = 0;\\n        for(int i = 1; i < colors.length(); i++){\\n            if(prevChar != colors.charAt(i)){\\n                calculateTurns(prevChar, prevIndex, i);\\n                prevChar = colors.charAt(i);\\n                prevIndex = i;\\n            }\\n        }\\n        calculateTurns(prevChar, prevIndex, colors.length());\\n        return alice > bob;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2754615,
                "title": "java-solution-o-n-time-o-1-space-faster-than-90",
                "content": "```java \\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        int Alice,Bob,a,b;\\n        Alice=Bob=a=b=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)==\\'A\\'){\\n                if(b-2>0)\\n                    Bob+=b-2;\\n                b=0;\\n                a++;\\n            }\\n            else if(s.charAt(i)==\\'B\\'){\\n                if(a-2>0)\\n                    Alice+=a-2;\\n                a=0;\\n                b++;\\n            }\\n        }\\n        if(a-2>0)\\n            Alice+=a-2;\\n        if(b-2>0)\\n            Bob+=b-2;\\n        if(Alice>Bob)\\n            return true;\\n        return false;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean winnerOfGame(String s) {\\n        int Alice,Bob,a,b;\\n        Alice=Bob=a=b=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)==\\'A\\'){\\n                if(b-2>0)\\n                    Bob+=b-2;\\n                b=0;\\n                a++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2642328,
                "title": "c-o-n-time-complexity-step-by-step",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        array<int, 2> cnts = {0};\\n        char cur = colors[0]; int count = 0;\\n        \\n        for (const auto & c: colors) {\\n            if (c == cur) { \\n                if (++count >= 3) cnts[c - \\'A\\'] ++;\\n            } else { cur = c; count = 1; }\\n        }\\n        \\n        return cnts[0] > cnts[1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        array<int, 2> cnts = {0};\\n        char cur = colors[0]; int count = 0;\\n        \\n        for (const auto & c: colors) {\\n            if (c == cur) { \\n                if (++count >= 3) cnts[c - \\'A\\'] ++;\\n            } else { cur = c; count = 1; }\\n        }\\n        \\n        return cnts[0] > cnts[1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2616008,
                "title": "c-solution",
                "content": "```\\nbool winnerOfGame(char * colors){\\n    int* ansCnt = (int*)calloc(2, sizeof(int));\\n    int cnt = 1, len = strlen(colors);\\n    char curr = colors[0];\\n    for(int i = 1; i < len; i++)\\n    {\\n        if(curr == colors[i]){\\n            cnt++;\\n        }\\n        else{\\n            if(cnt >= 3){ ansCnt[curr - \\'A\\'] += (cnt - 2); }\\n            curr = colors[i];\\n            cnt = 1;\\n        }\\n    }\\n    if(cnt >= 3){ ansCnt[curr - \\'A\\'] += (cnt - 2); }\\n    \\n    /* alice lose return false; */\\n    return (ansCnt[0] <= ansCnt[1])? false : true;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool winnerOfGame(char * colors){\\n    int* ansCnt = (int*)calloc(2, sizeof(int));\\n    int cnt = 1, len = strlen(colors);\\n    char curr = colors[0];\\n    for(int i = 1; i < len; i++)\\n    {\\n        if(curr == colors[i]){\\n            cnt++;\\n        }\\n        else{\\n            if(cnt >= 3){ ansCnt[curr - \\'A\\'] += (cnt - 2); }\\n            curr = colors[i];\\n            cnt = 1;\\n        }\\n    }\\n    if(cnt >= 3){ ansCnt[curr - \\'A\\'] += (cnt - 2); }\\n    \\n    /* alice lose return false; */\\n    return (ansCnt[0] <= ansCnt[1])? false : true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2580223,
                "title": "scala-2-lines",
                "content": "```\\nobject Solution {\\n     \\n    def winnerOfGame(colors: String): Boolean = {\\n       val aCount = colors.sliding(3).map(_.mkString).count(_ == \"AAA\")\\n       val bCount = colors.sliding(3).map(_.mkString).count(_ == \"BBB\")\\n       aCount > bCount\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nobject Solution {\\n     \\n    def winnerOfGame(colors: String): Boolean = {\\n       val aCount = colors.sliding(3).map(_.mkString).count(_ == \"AAA\")\\n       val bCount = colors.sliding(3).map(_.mkString).count(_ == \"BBB\")\\n       aCount > bCount\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2513927,
                "title": "java-solution-beats-99",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char[] arr = colors.toCharArray();\\n        int a = 0;\\n        int b = 0;\\n        int n = arr.length;\\n        if(n<3){\\n            return false;\\n        }\\n        int j = 0;\\n        for(int i=0;i<n;i++){\\n            if(arr[i]==\\'A\\'){\\n                int cnt = 0;\\n                for(j=i;j<n;j++){\\n                    if(arr[j]==\\'A\\'){\\n                        cnt++;\\n                    }else{\\n                        break;\\n                    }\\n                }\\n                a += Math.max(0,cnt-2);\\n                i = j-1;\\n            }\\n            if(arr[i]==\\'B\\'){\\n                int cnt = 0;\\n                for(j=i;j<n;j++){\\n                    if(arr[j]==\\'B\\'){\\n                        cnt++;\\n                    }else{\\n                        break;\\n                    }\\n                }\\n                b += Math.max(0,cnt-2);\\n                i = j-1;\\n            }\\n        }\\n        return a>b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char[] arr = colors.toCharArray();\\n        int a = 0;\\n        int b = 0;\\n        int n = arr.length;\\n        if(n<3){\\n            return false;\\n        }\\n        int j = 0;\\n        for(int i=0;i<n;i++){\\n            if(arr[i]==\\'A\\'){\\n                int cnt = 0;\\n                for(j=i;j<n;j++){\\n                    if(arr[j]==\\'A\\'){\\n                        cnt++;\\n                    }else{\\n                        break;\\n                    }\\n                }\\n                a += Math.max(0,cnt-2);\\n                i = j-1;\\n            }\\n            if(arr[i]==\\'B\\'){\\n                int cnt = 0;\\n                for(j=i;j<n;j++){\\n                    if(arr[j]==\\'B\\'){\\n                        cnt++;\\n                    }else{\\n                        break;\\n                    }\\n                }\\n                b += Math.max(0,cnt-2);\\n                i = j-1;\\n            }\\n        }\\n        return a>b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2505326,
                "title": "c-simple-and-concise",
                "content": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        int alice = 0;\\n        int bob = 0;\\n        \\n        for(int i = 1; i < colors.Length - 1; i++)\\n            if(colors[i] == colors[i - 1] && colors[i + 1] == colors[i]) {\\n                if(colors[i] == \\'A\\') alice++;\\n                else bob++;\\n            }\\n        \\n        return bob < alice;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        int alice = 0;\\n        int bob = 0;\\n        \\n        for(int i = 1; i < colors.Length - 1; i++)\\n            if(colors[i] == colors[i - 1] && colors[i + 1] == colors[i]) {\\n                if(colors[i] == \\'A\\') alice++;\\n                else bob++;\\n            }\\n        \\n        return bob < alice;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2308647,
                "title": "count-occurences-of-aaa-and-bbb-pytonic-way",
                "content": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        \"\"\"\\n        NO of substrings of size 3 \"AAA\" and \"BBB\"\\n        \\n        \"\"\"\\n        resa = [i for i in range(len(colors)) if colors.startswith(\"AAA\", i)]\\n        resb = [i for i in range(len(colors)) if colors.startswith(\"BBB\", i)]\\n        print(resa,resb)\\n        if len(resa)==0:\\n            return False\\n        if len(resa)<=len(resb):\\n            return False\\n        else:\\n            return True",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        \"\"\"\\n        NO of substrings of size 3 \"AAA\" and \"BBB\"\\n        \\n        \"\"\"\\n        resa = [i for i in range(len(colors)) if colors.startswith(\"AAA\", i)]\\n        resb = [i for i in range(len(colors)) if colors.startswith(\"BBB\", i)]\\n        print(resa,resb)\\n        if len(resa)==0:\\n            return False\\n        if len(resa)<=len(resb):\\n            return False\\n        else:\\n            return True",
                "codeTag": "Java"
            },
            {
                "id": 2301209,
                "title": "java-simple-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        int counta = 0; //Count of removable A (A \\'A\\' A)\\n        int countb = 0;  //Count of removable B (B \\'B\\' B)\\n        \\n        for(int i=1;i<s.length()-1;i++){\\n            int curr = s.charAt(i);\\n            int next = s.charAt(i+1);\\n            int prev = s.charAt(i-1);\\n            if(curr==\\'A\\' && prev==next && prev==curr){\\n                counta++;\\n            }\\n            if(curr==\\'B\\' && prev==next && prev==curr){\\n                countb++;\\n            }\\n        }\\n        \\n        return counta>countb?true:false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String s) {\\n        int counta = 0; //Count of removable A (A \\'A\\' A)\\n        int countb = 0;  //Count of removable B (B \\'B\\' B)\\n        \\n        for(int i=1;i<s.length()-1;i++){\\n            int curr = s.charAt(i);\\n            int next = s.charAt(i+1);\\n            int prev = s.charAt(i-1);\\n            if(curr==\\'A\\' && prev==next && prev==curr){\\n                counta++;\\n            }\\n            if(curr==\\'B\\' && prev==next && prev==curr){\\n                countb++;\\n            }\\n        }\\n        \\n        return counta>countb?true:false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2047110,
                "title": "easy-python",
                "content": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        def continuous_pieces(color):\\n            ans = cur = 0\\n            for c in colors:\\n                if c == color:\\n                    cur += 1\\n                else:\\n                    if cur > 2: \\n                        ans += cur - 2\\n                    cur = 0\\n            if colors[-1] == color and cur > 2: ans += cur - 2\\n            return ans\\n        \\n        alice = continuous_pieces(\\'A\\')\\n        bob = continuous_pieces(\\'B\\')\\n        return alice > 0 and alice > bob\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        def continuous_pieces(color):\\n            ans = cur = 0\\n            for c in colors:\\n                if c == color:\\n                    cur += 1\\n                else:\\n                    if cur > 2: \\n                        ans += cur - 2\\n                    cur = 0\\n            if colors[-1] == color and cur > 2: ans += cur - 2\\n            return ans\\n        \\n        alice = continuous_pieces(\\'A\\')\\n        bob = continuous_pieces(\\'B\\')\\n        return alice > 0 and alice > bob\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1940833,
                "title": "easy-to-understand-python3",
                "content": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice = colors.split(\\'B\\')\\n        bob = colors.split(\\'A\\')\\n        alice_move = 0\\n        bob_move = 0\\n        for a in alice:\\n            alice_move += max(0,len(a) - 2)\\n        for b in bob:\\n            bob_move += max(0,len(b) - 2)\\n        return alice_move > bob_move\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice = colors.split(\\'B\\')\\n        bob = colors.split(\\'A\\')\\n        alice_move = 0\\n        bob_move = 0\\n        for a in alice:\\n            alice_move += max(0,len(a) - 2)\\n        for b in bob:\\n            bob_move += max(0,len(b) - 2)\\n        return alice_move > bob_move\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1814809,
                "title": "simple-java-solution",
                "content": "Count the number of substring of \"AAA\" lets say alice and \"BBB\" lets say bob\\nif alice  > bob return true \\nif bob > alice return false\\nif alice == bob return false(alice starts the game so alice looses)\\n \\n```\\n public boolean winnerOfGame(String s) {\\n        int alice = 0, bob = 0;\\n        for(int i=0;i<s.length()-2;i++){\\n            String sub = s.substring(i,i+3);\\n            if(sub.equals(\"AAA\"))\\n                alice++;\\n            if(sub.equals(\"BBB\"))\\n                bob++;\\n        }\\n        if(alice>bob)\\n            return true;\\n        return false;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public boolean winnerOfGame(String s) {\\n        int alice = 0, bob = 0;\\n        for(int i=0;i<s.length()-2;i++){\\n            String sub = s.substring(i,i+3);\\n            if(sub.equals(\"AAA\"))\\n                alice++;\\n            if(sub.equals(\"BBB\"))\\n                bob++;\\n        }\\n        if(alice>bob)\\n            return true;\\n        return false;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1798969,
                "title": "count-triplets-easy-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char[] str=colors.toCharArray();\\n        int n=colors.length();\\n        int A=0,B=0,i=0;\\n        while(i<n)\\n        {\\n            int a=0,b=0;\\n            while(i<n&&str[i]==\\'A\\')\\n            {\\n                a++;\\n                i++;\\n            }\\n            while(i<n&&str[i]==\\'B\\')\\n            {\\n                b++;\\n                i++;\\n            }\\n            if(a>2)\\n                A+=a-2;\\n            if(b>2)\\n                B+=b-2;\\n        }\\n        if(A>B)\\n            return true;\\n        else if(B>A)\\n            return false;\\n        else\\n            return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char[] str=colors.toCharArray();\\n        int n=colors.length();\\n        int A=0,B=0,i=0;\\n        while(i<n)\\n        {\\n            int a=0,b=0;\\n            while(i<n&&str[i]==\\'A\\')\\n            {\\n                a++;\\n                i++;\\n            }\\n            while(i<n&&str[i]==\\'B\\')\\n            {\\n                b++;\\n                i++;\\n            }\\n            if(a>2)\\n                A+=a-2;\\n            if(b>2)\\n                B+=b-2;\\n        }\\n        if(A>B)\\n            return true;\\n        else if(B>A)\\n            return false;\\n        else\\n            return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1773248,
                "title": "c-single-pass-o-n-very-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int a = 0;\\n        int b = 0;\\n        int n = s.size();\\n        for(int i = 1 ; i < n-1 ; i++){\\n            if(s[i-1] == \\'A\\' and s[i] == \\'A\\' and s[i+1] == \\'A\\'){\\n                a++;\\n            }\\n            else if(s[i-1] == \\'B\\' and s[i] == \\'B\\' and s[i+1] == \\'B\\'){\\n                b++;\\n            }\\n        }\\n        if(a<=b){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int a = 0;\\n        int b = 0;\\n        int n = s.size();\\n        for(int i = 1 ; i < n-1 ; i++){\\n            if(s[i-1] == \\'A\\' and s[i] == \\'A\\' and s[i+1] == \\'A\\'){\\n                a++;\\n            }\\n            else if(s[i-1] == \\'B\\' and s[i] == \\'B\\' and s[i+1] == \\'B\\'){\\n                b++;\\n            }\\n        }\\n        if(a<=b){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1757101,
                "title": "c-single-pass-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        ios_base::sync_with_stdio(false); cin.tie(NULL);\\n        int n=colors.size();\\n        int A=0,B=0;\\n        int Alice=0,Bob=0;\\n        for (int i=0;i<n;i++){\\n            if (colors[i]==\\'A\\'){\\n                A++;\\n                if (A>=3) Alice++;\\n                B=0;\\n            }\\n            else{\\n                B++;\\n                if (B>=3) Bob++;\\n                A=0;\\n            }\\n            \\n        }\\n        return Alice>Bob;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        ios_base::sync_with_stdio(false); cin.tie(NULL);\\n        int n=colors.size();\\n        int A=0,B=0;\\n        int Alice=0,Bob=0;\\n        for (int i=0;i<n;i++){\\n            if (colors[i]==\\'A\\'){\\n                A++;\\n                if (A>=3) Alice++;\\n                B=0;\\n            }\\n            else{\\n                B++;\\n                if (B>=3) Bob++;\\n                A=0;\\n            }\\n            \\n        }\\n        return Alice>Bob;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1635703,
                "title": "simple-c-o-n-time-o-1-space-greedy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int countA = 0, countB = 0, alice = 0, bob = 0;\\n        char prev = \\'X\\';\\n        for (auto ch : colors) {\\n            if (prev != ch) {\\n                if (countA - 2 > 0) alice += countA - 2;\\n                else if (countB - 2 > 0)    bob += countB - 2;\\n                countA = countB = 0;\\n            } \\n            if (ch == \\'A\\')  countA++;\\n            else    countB++;\\n            prev = ch;\\n        }\\n        if (countA - 2 > 0) alice += countA - 2;\\n        else if (countB - 2 > 0)    bob += countB - 2;\\n        \\n        return true ? (alice > bob) : false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int countA = 0, countB = 0, alice = 0, bob = 0;\\n        char prev = \\'X\\';\\n        for (auto ch : colors) {\\n            if (prev != ch) {\\n                if (countA - 2 > 0) alice += countA - 2;\\n                else if (countB - 2 > 0)    bob += countB - 2;\\n                countA = countB = 0;\\n            } \\n            if (ch == \\'A\\')  countA++;\\n            else    countB++;\\n            prev = ch;\\n        }\\n        if (countA - 2 > 0) alice += countA - 2;\\n        else if (countB - 2 > 0)    bob += countB - 2;\\n        \\n        return true ? (alice > bob) : false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525449,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n           int a=0;\\n        int b=0;\\n           for(int i=1;i<colors.size()-1;i++){\\n              if(colors[i]==\\'A\\' && colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\')   a++;\\n               else if(colors[i]==\\'B\\' && colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\') b++;\\n           }\\n             if(a==0) return false;\\n           else if(a<=b) return false;\\n           return true;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n           int a=0;\\n        int b=0;\\n           for(int i=1;i<colors.size()-1;i++){\\n              if(colors[i]==\\'A\\' && colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\')   a++;\\n               else if(colors[i]==\\'B\\' && colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\') b++;\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 1525004,
                "title": "c-o-n-solution-easy-to-understand",
                "content": "\\tclass Solution {\\n\\tpublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0,b=0,i=0;\\n        while(i<colors.size()){\\n            if(colors[i]==\\'A\\'){\\n                int count=0;\\n                int m=colors[i];\\n                while(colors[i]==m){\\n                    count++;i++;\\n                    if(count>=3)a++;\\n                }\\n                    \\n            }else {\\n                int count=0;\\n                int m=colors[i];\\n                while(colors[i]==m){\\n                    count++;i++;\\n                    if(count>=3)b++;\\n                }\\n            }\\n        }\\n        int flag=0;\\n        while(a!=0 && b!=0){\\n            if(flag==0){\\n                a--;flag=1;\\n            }else {\\n                b--; flag=0;\\n            }  \\n        }\\n        if(b==0 && a!=0)\\n        return true;\\n        else if(a==0) return false;\\n        \\n        return false;    \\n        \\n    }\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0,b=0,i=0;\\n        while(i<colors.size()){\\n            if(colors[i]==\\'A\\'){\\n                int count=0;\\n                int m=colors[i];\\n                while(colors[i]==m){\\n                    count++;i++;\\n                    if(count>=3)a++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1524605,
                "title": "c-count-approach",
                "content": "```\\nbool winnerOfGame(string colors) {\\n        int n=colors.size();\\n        int countA=0;\\n        int countB=0;\\n        if(n==2 || n==1)\\n            return false;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(colors[i-1]==\\'A\\' && colors[i]==\\'A\\' && colors[i+1]==\\'A\\')\\n            countA++;\\n            \\n            if(colors[i-1]==\\'B\\' && colors[i]==\\'B\\' && colors[i+1]==\\'B\\')\\n            countB++;\\n        }\\n        if(countA>countB)\\n            return true;\\n        \\n        return false;\\n    }\\n\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool winnerOfGame(string colors) {\\n        int n=colors.size();\\n        int countA=0;\\n        int countB=0;\\n        if(n==2 || n==1)\\n            return false;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(colors[i-1]==\\'A\\' && colors[i]==\\'A\\' && colors[i+1]==\\'A\\')\\n            countA++;\\n            \\n            if(colors[i-1]==\\'B\\' && colors[i]==\\'B\\' && colors[i+1]==\\'B\\')\\n            countB++;\\n        }\\n        if(countA>countB)\\n            return true;\\n        \\n        return false;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1524513,
                "title": "python-o-n-count-aaa-and-bbb",
                "content": "```\\nclass Solution(object):\\n    def winnerOfGame(self, colors):\\n        \"\"\"\\n        :type colors: str\\n        :rtype: bool\\n        \"\"\"\\n        alice = 0\\n        bob = 0\\n        for i in range(1,len(colors)-1):\\n            if colors[i]==\\'A\\':\\n                if colors[i-1] == \\'A\\' and colors[i+1] == \\'A\\':\\n                    alice+=1;\\n            else:\\n                if colors[i-1] == \\'B\\' and colors[i+1]==\\'B\\':\\n                    bob+=1;\\n        if not alice:\\n            return False\\n        if alice<=bob:\\n            return False\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def winnerOfGame(self, colors):\\n        \"\"\"\\n        :type colors: str\\n        :rtype: bool\\n        \"\"\"\\n        alice = 0\\n        bob = 0\\n        for i in range(1,len(colors)-1):\\n            if colors[i]==\\'A\\':\\n                if colors[i-1] == \\'A\\' and colors[i+1] == \\'A\\':\\n                    alice+=1;\\n            else:\\n                if colors[i-1] == \\'B\\' and colors[i+1]==\\'B\\':\\n                    bob+=1;\\n        if not alice:\\n            return False\\n        if alice<=bob:\\n            return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524426,
                "title": "c-easy-and-fast-approach",
                "content": "```\\n bool winnerOfGame(string colors) {\\n        \\n     int a=0,b=0;\\n        for(int i=1;i<colors.size()-1;i++)\\n        {\\n            if(colors[i]==\\'A\\' && colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\')\\n           {\\n                ++a;\\n            }\\n            if(colors[i]==\\'B\\' && colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\')\\n           {\\n                ++b;\\n            }\\n            \\n        }\\n        if(a==min(a,b))\\n            return false;\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n bool winnerOfGame(string colors) {\\n        \\n     int a=0,b=0;\\n        for(int i=1;i<colors.size()-1;i++)\\n        {\\n            if(colors[i]==\\'A\\' && colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\')\\n           {\\n                ++a;\\n            }\\n            if(colors[i]==\\'B\\' && colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\')\\n           {\\n                ++b;\\n            }\\n            \\n        }\\n        if(a==min(a,b))\\n            return false;\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1524318,
                "title": "c-ez-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int l = s.size(), alice = 0, bob = 0;\\n        if(l < 3) return false;\\n        for(int i=1; i<l-1; ++i) {\\n            if(s[i] == \\'A\\' and s[i-1] == \\'A\\' and s[i+1] == \\'A\\') alice++;\\n            if(s[i] == \\'B\\' and s[i-1] == \\'B\\' and s[i+1] == \\'B\\') bob++;\\n        }\\n        if(alice > bob) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int l = s.size(), alice = 0, bob = 0;\\n        if(l < 3) return false;\\n        for(int i=1; i<l-1; ++i) {\\n            if(s[i] == \\'A\\' and s[i-1] == \\'A\\' and s[i+1] == \\'A\\') alice++;\\n            if(s[i] == \\'B\\' and s[i-1] == \\'B\\' and s[i+1] == \\'B\\') bob++;\\n        }\\n        if(alice > bob) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524303,
                "title": "python-3-liner",
                "content": "We can count `AAA...` for Alice and `BBB...` for Bob where both of them should have lengths larger than two. Alice will win if the total number of deletable `A`s among `AAA...`s is more than that of `BBB...`s.\\n\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a_num = sum([len(s) - 2 for s in colors.split(\\'B\\') if len(s) >= 3])\\n        b_num = sum([len(s) - 2 for s in colors.split(\\'A\\') if len(s) >= 3])\\n        return a_num > b_num\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a_num = sum([len(s) - 2 for s in colors.split(\\'B\\') if len(s) >= 3])\\n        b_num = sum([len(s) - 2 for s in colors.split(\\'A\\') if len(s) >= 3])\\n        return a_num > b_num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524285,
                "title": "c-o-n-soln-easy-to-guess-maths",
                "content": "Basically in this question you should count the occurrence of A and B and see how many times we can select A and B . so for eg. if A is 5 times so we can select it 5-2 =3 times.\\nAt last if count of A > count of B then alice wins else Bob.\\n```\\nclass Solution {\\npublic:\\n   \\n    bool winnerOfGame(string colors) {\\n        int n=colors.size();\\n        \\n        string s=colors;\\n        int ca=0;\\n        int cb=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'A\\')\\n            {\\n                int count=0;\\n                while(s[i]==\\'A\\')\\n                {\\n                    count++;\\n                    i++;\\n                }\\n                if(count>2)\\n                {\\n                    ca+=count-2;\\n                }\\n            }\\n            else\\n            {\\n              int count=0;\\n                while(s[i]==\\'B\\')\\n                {\\n                    count++;\\n                    i++;\\n                }\\n                if(count>2)\\n                {\\n                    cb+=count-2;\\n                }   \\n            }\\n            i--;\\n        }\\n      //  cout<<ca<<\" \"<<cb<<endl;\\n        if(ca==cb)\\n            return false;\\n        return ca>cb;\\n        \\n        \\n    }\\n};\\n```\\n**dont forget to upvote if u like it:))**",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   \\n    bool winnerOfGame(string colors) {\\n        int n=colors.size();\\n        \\n        string s=colors;\\n        int ca=0;\\n        int cb=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'A\\')\\n            {\\n                int count=0;\\n                while(s[i]==\\'A\\')\\n                {\\n                    count++;\\n                    i++;\\n                }\\n                if(count>2)\\n                {\\n                    ca+=count-2;\\n                }\\n            }\\n            else\\n            {\\n              int count=0;\\n                while(s[i]==\\'B\\')\\n                {\\n                    count++;\\n                    i++;\\n                }\\n                if(count>2)\\n                {\\n                    cb+=count-2;\\n                }   \\n            }\\n            i--;\\n        }\\n      //  cout<<ca<<\" \"<<cb<<endl;\\n        if(ca==cb)\\n            return false;\\n        return ca>cb;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1524272,
                "title": "c-o-n-solution-counting-aaa-and-bbb",
                "content": "Idea:\\n1. colors[i-2]==colors[i-1] && colors[i-1]==colors[i] means there are 3 consecutive characters\\n-> check if they are \\'A\\' or \\'B\\', and use counter a, b to record their numbers of occurrences\\n2. if a>b, Alice wins (because Alice starts first)\\n\\nNote. If Alice starts second, then we should return a>=b\\n```\\nbool winnerOfGame(string colors) \\n{\\n\\tint a=0,b=0,n=colors.size();\\n\\tfor(int i=2;i<n;i++)\\n\\t{\\n\\t\\tif(colors[i-2]==colors[i-1]&&colors[i-1]==colors[i])\\n\\t\\t{\\n\\t\\t\\tif(colors[i]==\\'A\\') a++;\\n\\t\\t\\telse b++;\\n\\t\\t}\\n\\t}\\n\\treturn a>b;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nbool winnerOfGame(string colors) \\n{\\n\\tint a=0,b=0,n=colors.size();\\n\\tfor(int i=2;i<n;i++)\\n\\t{\\n\\t\\tif(colors[i-2]==colors[i-1]&&colors[i-1]==colors[i])\\n\\t\\t{\\n\\t\\t\\tif(colors[i]==\\'A\\') a++;\\n\\t\\t\\telse b++;\\n\\t\\t}\\n\\t}\\n\\treturn a>b;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1524240,
                "title": "c-o-n-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int alice=0;\\n        int bob=0;\\n        int cnt=0;\\n        for(auto ch: colors)\\n        {\\n            if(ch==\\'A\\')\\n                cnt++;\\n            else\\n            {\\n                alice+=max(0,cnt-2);\\n                cnt=0;\\n            }\\n        }\\n        alice+=max(0,cnt-2);\\n        cnt=0;\\n        for(auto ch: colors)\\n        {\\n            if(ch==\\'B\\')\\n                cnt++;\\n            else\\n            {\\n                bob+=max(0,cnt-2);\\n                cnt=0;\\n            }\\n        }\\n        bob+=max(0,cnt-2);\\n        cnt=0;\\n        cout<<alice<<\" \"<<bob<<endl;\\n        return alice>bob;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int alice=0;\\n        int bob=0;\\n        int cnt=0;\\n        for(auto ch: colors)\\n        {\\n            if(ch==\\'A\\')\\n                cnt++;\\n            else\\n            {\\n                alice+=max(0,cnt-2);\\n                cnt=0;\\n            }\\n        }\\n        alice+=max(0,cnt-2);\\n        cnt=0;\\n        for(auto ch: colors)\\n        {\\n            if(ch==\\'B\\')\\n                cnt++;\\n            else\\n            {\\n                bob+=max(0,cnt-2);\\n                cnt=0;\\n            }\\n        }\\n        bob+=max(0,cnt-2);\\n        cnt=0;\\n        cout<<alice<<\" \"<<bob<<endl;\\n        return alice>bob;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1524216,
                "title": "easy-o-n-approach-with-comments-and-explanation-c",
                "content": "EASY  O(N) Approach with comments and explanation C++\\n\\nWe will count number of A pieces Alice can pick and Number of B pieces bob can pick\\n\\nSo how will we do this ?\\n\\nWe can notice the peices Alice can pick is sigma  (length of all  continuous A -2 )  (-2 for corner pieces ) ie\\n\\nFor eg A A A A A the ans will be 3  (5-2 ) as Alice can pick all A in between and he cannot pick A at corners\\nFor A A A B A A A  the ans will be 2 ( 3-2 +3-2) \\nFor A A B A  the ans will we 0 as no a can be pick all are corners once\\n\\nSo like this we will count for both ALICE AND BOB \\n And if ALICE count > BOB bob count ALICE is winner\\n For  ALICE count < BOB bob count BOB is winner\\nFor ALICE count= BOB count who will be winner \\n The ans is BOB as his turn is second after his turn ALICE will not be able to move and he will loose\\nFor eg AAABAABBB\\n Count of Alice =1\\nCount of Bob=1\\n After ALICE first move   AABAABBB\\n Ater BOB first move AABAABB\\n NOW ALICE turn he can\\u2019t move and he will loose\\n\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string c) {\\n        int cnta=0;                                   //ALICE COUNT\\n        int cntb=0;                                   //BOB COUNT\\n        \\n        for(int i=0;i<c.size();i++){\\n            int tempa=0;\\n            int tempb=0;\\n            if(c[i]==\\'A\\'){\\n            while(c[i]==\\'A\\'){\\n                tempa++;                             //Counting continous \\u2018A\\u2019\\n                i++;\\n            }\\n                i--; \\n                cnta+=max(0,tempa-2);         //removing corner A and handling it doesn\\u2019t become negative as for cnt =1 the ans will be 1 not -1\\n            }\\n            else{\\n                while(c[i]==\\'B\\'){\\n                tempb++;                             //Counting continous \\u2018B\\u2019\\n                i++;\\n            }\\n              i--;  \\n                cntb+=max(0,tempb-2);    ////removing corner B and handling it doesn\\u2019t become negative as for cnt =1 the ans will be 1 not -1\\n\\n            }\\n            \\n        }\\n        \\n        if(cnta>cntb)           \\n            return true;                  //ALICE WIN\\n   else\\n        return false;               //BOB WIN\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string c) {\\n        int cnta=0;                                   //ALICE COUNT\\n        int cntb=0;                                   //BOB COUNT\\n        \\n        for(int i=0;i<c.size();i++){\\n            int tempa=0;\\n            int tempb=0;\\n            if(c[i]==\\'A\\'){\\n            while(c[i]==\\'A\\'){\\n                tempa++;                             //Counting continous \\u2018A\\u2019\\n                i++;\\n            }\\n                i--; \\n                cnta+=max(0,tempa-2);         //removing corner A and handling it doesn\\u2019t become negative as for cnt =1 the ans will be 1 not -1\\n            }\\n            else{\\n                while(c[i]==\\'B\\'){\\n                tempb++;                             //Counting continous \\u2018B\\u2019\\n                i++;\\n            }\\n              i--;  \\n                cntb+=max(0,tempb-2);    ////removing corner B and handling it doesn\\u2019t become negative as for cnt =1 the ans will be 1 not -1\\n\\n            }\\n            \\n        }\\n        \\n        if(cnta>cntb)           \\n            return true;                  //ALICE WIN\\n   else\\n        return false;               //BOB WIN\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524187,
                "title": "c-map",
                "content": "```\\n    bool winnerOfGame(string c) {\\n        int n=c.size();        \\n        if(n<=2)\\n            return false;         \\n        map<char,int> mp;\\n        int total_step_of_A=0;\\n        int total_step_of_B=0;\\n        mp[c[0]]++;        \\n        for(int i=1; i<=c.size(); i++)\\n        {\\n            if(i!=n-1 && c[i]==c[i-1])\\n                mp[c[i]]++;\\n            else\\n            {\\n                if(c[i]==\\'B\\'||(i==n && c[n-1]==\\'A\\'))\\n                {\\n                    int A=mp[\\'A\\'];\\n                    if(A>2)\\n                        total_step_of_A+=(A-2);\\n                    mp[\\'A\\']=0;\\n                    mp[\\'B\\']++;\\n                }\\n                else if(c[i]==\\'A\\' || (i==n && c[n-1]==\\'B\\'))\\n                {\\n                    int B=mp[\\'B\\'];\\n                    if(B>2)\\n                        total_step_of_B+=(B-2);\\n                    mp[\\'B\\']=0;\\n                    mp[\\'A\\']++;\\n                }\\n            }\\n        }    \\n        return total_step_of_A > total_step_of_B;        \\n    }",
                "solutionTags": [],
                "code": "```\\n    bool winnerOfGame(string c) {\\n        int n=c.size();        \\n        if(n<=2)\\n            return false;         \\n        map<char,int> mp;\\n        int total_step_of_A=0;\\n        int total_step_of_B=0;\\n        mp[c[0]]++;        \\n        for(int i=1; i<=c.size(); i++)\\n        {\\n            if(i!=n-1 && c[i]==c[i-1])\\n                mp[c[i]]++;\\n            else\\n            {\\n                if(c[i]==\\'B\\'||(i==n && c[n-1]==\\'A\\'))\\n                {\\n                    int A=mp[\\'A\\'];\\n                    if(A>2)\\n                        total_step_of_A+=(A-2);\\n                    mp[\\'A\\']=0;\\n                    mp[\\'B\\']++;\\n                }\\n                else if(c[i]==\\'A\\' || (i==n && c[n-1]==\\'B\\'))\\n                {\\n                    int B=mp[\\'B\\'];\\n                    if(B>2)\\n                        total_step_of_B+=(B-2);\\n                    mp[\\'B\\']=0;\\n                    mp[\\'A\\']++;\\n                }\\n            }\\n        }    \\n        return total_step_of_A > total_step_of_B;        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1524171,
                "title": "python3-greedy-5-line",
                "content": "\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        diff = 0 \\n        for k, grp in groupby(colors): \\n            if k == \"A\": diff += max(0, len(list(grp)) - 2)\\n            else: diff -= max(0, len(list(grp)) - 2)\\n        return diff > 0 \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        diff = 0 \\n        for k, grp in groupby(colors): \\n            if k == \"A\": diff += max(0, len(list(grp)) - 2)\\n            else: diff -= max(0, len(list(grp)) - 2)\\n        return diff > 0 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524167,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) \\n    {\\n        // vector<int>alice;\\n        // vector<int>bob;\\n        int a=0;\\n        int b=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i-1>=0&&i+1<n&&s[i]==\\'A\\'&&s[i-1]==\\'A\\'&&s[i+1]==\\'A\\')\\n            {\\n                a++;\\n                \\n            }\\n            if(i-1>=0&&i+1<n&&s[i]==\\'B\\'&&s[i-1]==\\'B\\'&&s[i+1]==\\'B\\')\\n            {\\n                b++;\\n            }\\n        }\\n        if(a>b)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) \\n    {\\n        // vector<int>alice;\\n        // vector<int>bob;\\n        int a=0;\\n        int b=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(i-1>=0&&i+1<n&&s[i]==\\'A\\'&&s[i-1]==\\'A\\'&&s[i+1]==\\'A\\')\\n            {\\n                a++;\\n                \\n            }\\n            if(i-1>=0&&i+1<n&&s[i]==\\'B\\'&&s[i-1]==\\'B\\'&&s[i+1]==\\'B\\')\\n            {\\n                b++;\\n            }\\n        }\\n        if(a>b)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524166,
                "title": "java-o-n",
                "content": "```\\npublic boolean winnerOfGame(String colors) {\\n\\tint aliceOptions = 0, bobOptions = 0, current=1;\\n\\tfor(int i=1;i<=colors.length();i++)\\n\\t\\tif(i!=colors.length() && colors.charAt(i-1) == colors.charAt(i)) current++;\\n\\t\\telse {\\n\\t\\t\\tif(colors.charAt(i-1) == \\'A\\' && current >=3) aliceOptions += current - 2;\\n\\t\\t\\telse if(colors.charAt(i-1) == \\'B\\' && current >=3) bobOptions += current - 2;\\n\\t\\t\\tcurrent = 1;\\n\\t\\t}\\n\\treturn aliceOptions>bobOptions;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean winnerOfGame(String colors) {\\n\\tint aliceOptions = 0, bobOptions = 0, current=1;\\n\\tfor(int i=1;i<=colors.length();i++)\\n\\t\\tif(i!=colors.length() && colors.charAt(i-1) == colors.charAt(i)) current++;\\n\\t\\telse {\\n\\t\\t\\tif(colors.charAt(i-1) == \\'A\\' && current >=3) aliceOptions += current - 2;\\n\\t\\t\\telse if(colors.charAt(i-1) == \\'B\\' && current >=3) bobOptions += current - 2;\\n\\t\\t\\tcurrent = 1;\\n\\t\\t}\\n\\treturn aliceOptions>bobOptions;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1524165,
                "title": "java-easy-compare-count-aaa-bbb",
                "content": "**Idea**\\n-> Just count such pairs that have same neighbours!\\n\\n**Time Complexity**\\n-> O(n)\\n\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String str) {\\n        \\n    \\tint i,n=str.length(),a=0,b=0;\\n    \\tif(n<3)\\n    \\t\\treturn false;\\n    \\tfor(i=1;i<n-1;i++)\\n    \\t{\\n    \\t\\tif(str.charAt(i-1)==\\'A\\'&&str.charAt(i)==\\'A\\'&&str.charAt(i+1)==\\'A\\')\\n    \\t\\t\\ta++;\\n    \\t\\tif(str.charAt(i-1)==\\'B\\'&&str.charAt(i)==\\'B\\'&&str.charAt(i+1)==\\'B\\')\\n    \\t\\t\\tb++;\\n    \\t}\\n    \\treturn a>b;\\n    }\\n}\\n```\\n\\nIf you guys get it then I will be more **happy** if you **upvote** my solution!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String str) {\\n        \\n    \\tint i,n=str.length(),a=0,b=0;\\n    \\tif(n<3)\\n    \\t\\treturn false;\\n    \\tfor(i=1;i<n-1;i++)\\n    \\t{\\n    \\t\\tif(str.charAt(i-1)==\\'A\\'&&str.charAt(i)==\\'A\\'&&str.charAt(i+1)==\\'A\\')\\n    \\t\\t\\ta++;\\n    \\t\\tif(str.charAt(i-1)==\\'B\\'&&str.charAt(i)==\\'B\\'&&str.charAt(i+1)==\\'B\\')\\n    \\t\\t\\tb++;\\n    \\t}\\n    \\treturn a>b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1524156,
                "title": "a-few-solutions",
                "content": "Let `a` and `b` be the count of consecutive (3 or more) values `\\'A\\'` and `\\'B\\'` correspondingly.  Return `true` if and only if `a` exceeds `b`.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun winnerOfGame(A: String): Boolean {\\n        var (a, b, size) = listOf(0, 0, 0)\\n        var last = \\'x\\'\\n        for (x in A) {\\n            size = if (x == last) 1 + size else 1\\n            if (3 <= size) {\\n                if (x == \\'A\\') ++a\\n                if (x == \\'B\\') ++b\\n            }\\n            last = x\\n        }\\n        return b < a\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet winnerOfGame = A => {\\n    let [a, b, size, last] = [0, 0, 0, \\'x\\'];\\n    for (let x of A) {\\n        size = x == last ? 1 + size : 1;\\n        if (3 <= size) {\\n            if (x == \\'A\\') ++a;\\n            if (x == \\'B\\') ++b;\\n        }\\n        last = x;\\n    }\\n    return b < a;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def winnerOfGame(self, A: str) -> bool:\\n        a, b, size, last = 0, 0, 0, \\'x\\'\\n        for x in A:\\n            size = 1 + size if x == last else 1\\n            if 3 <= size:\\n                if x == \\'A\\': a += 1\\n                if x == \\'B\\': b += 1\\n            last = x\\n        return b < a\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string A) {\\n        auto [a, b, size, last] = make_tuple(0, 0, 0, \\'x\\');\\n        for (auto x: A) {\\n            size = x == last ? 1 + size : 1;\\n            if (3 <= size) {\\n                if (x == \\'A\\') ++a;\\n                if (x == \\'B\\') ++b;\\n            }\\n            last = x;\\n        }\\n        return b < a;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun winnerOfGame(A: String): Boolean {\\n        var (a, b, size) = listOf(0, 0, 0)\\n        var last = \\'x\\'\\n        for (x in A) {\\n            size = if (x == last) 1 + size else 1\\n            if (3 <= size) {\\n                if (x == \\'A\\') ++a\\n                if (x == \\'B\\') ++b\\n            }\\n            last = x\\n        }\\n        return b < a\\n    }\\n}\\n```\n```\\nlet winnerOfGame = A => {\\n    let [a, b, size, last] = [0, 0, 0, \\'x\\'];\\n    for (let x of A) {\\n        size = x == last ? 1 + size : 1;\\n        if (3 <= size) {\\n            if (x == \\'A\\') ++a;\\n            if (x == \\'B\\') ++b;\\n        }\\n        last = x;\\n    }\\n    return b < a;\\n};\\n```\n```\\nclass Solution:\\n    def winnerOfGame(self, A: str) -> bool:\\n        a, b, size, last = 0, 0, 0, \\'x\\'\\n        for x in A:\\n            size = 1 + size if x == last else 1\\n            if 3 <= size:\\n                if x == \\'A\\': a += 1\\n                if x == \\'B\\': b += 1\\n            last = x\\n        return b < a\\n```\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string A) {\\n        auto [a, b, size, last] = make_tuple(0, 0, 0, \\'x\\');\\n        for (auto x: A) {\\n            size = x == last ? 1 + size : 1;\\n            if (3 <= size) {\\n                if (x == \\'A\\') ++a;\\n                if (x == \\'B\\') ++b;\\n            }\\n            last = x;\\n        }\\n        return b < a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084053,
                "title": "simple-solution-time-o-n-space-o-1",
                "content": "# Code\\n```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function(colors) {\\n    let res = 0\\n    for (let i = 2; i < colors.length; i++){\\n        if (colors[i - 2] === colors[i] && colors[i - 1] === colors[i]){\\n            if (colors[i] === \"A\") res++\\n            else res--\\n        }\\n    }\\n    return res > 0\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function(colors) {\\n    let res = 0\\n    for (let i = 2; i < colors.length; i++){\\n        if (colors[i - 2] === colors[i] && colors[i - 1] === colors[i]){\\n            if (colors[i] === \"A\") res++\\n            else res--\\n        }\\n    }\\n    return res > 0\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072850,
                "title": "subarrays-r-90-m-72",
                "content": "# Intuition\\nNo matter the player Alice or Bob, player can only make turn if there\\'s subarray with x3 elements of it\\'s kind: \\'A\\' or \\'B\\'.\\nSo, all we care is to count continuous subarrays with len >= 3 for any of them.\\n And for every such subarray they can do (len(subarray) - 2) turns. Always leaving 2 elements of subarray, because we can\\'t remove from x2 subarray.\\n!\\n**Alice is only allowed to remove a piece colored \\'A\\' if both its neighbors are also colored \\'A\\'\\nBob is only allowed to remove a piece colored \\'B\\' if both its neighbors are also colored \\'B\\'**\\n! \\n# Complexity\\n- Time complexity: **O(n)**\\nn - len of input string.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(n)**\\nWorst case: input string is one repeated symbol \\'AA...A\\',\\nwe will copy input string into ``cur_sub``\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice_turns: int = 0\\n        bob_turns: int = 0\\n        cur_sub: str = \\'\\'\\n        for color in colors:\\n            # Expand subarray.\\n            if not cur_sub or color == cur_sub[-1]:\\n                cur_sub += color\\n            # Count turns.\\n            elif len(cur_sub) >= 3:\\n                if cur_sub[-1] == \\'A\\':\\n                    alice_turns += len(cur_sub) - 2\\n                elif cur_sub[-1] == \\'B\\':\\n                    bob_turns += len(cur_sub) - 2\\n                cur_sub = color\\n            # Reset.\\n            else:\\n                cur_sub = color\\n        # Extra check for last subarray.\\n        if len(cur_sub) >= 3:\\n            if cur_sub[-1] == \\'A\\':\\n                alice_turns += len(cur_sub) - 2\\n            elif cur_sub[-1] == \\'B\\':\\n                bob_turns += len(cur_sub) - 2\\n        # Alice can\\'t start.\\n        if not alice_turns:\\n            return False\\n        # Alice have more turns.\\n        elif alice_turns > bob_turns:\\n            return True\\n        # Alice have same turns, but bob will make last == win.\\n        elif alice_turns <= bob_turns:\\n            return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice_turns: int = 0\\n        bob_turns: int = 0\\n        cur_sub: str = \\'\\'\\n        for color in colors:\\n            # Expand subarray.\\n            if not cur_sub or color == cur_sub[-1]:\\n                cur_sub += color\\n            # Count turns.\\n            elif len(cur_sub) >= 3:\\n                if cur_sub[-1] == \\'A\\':\\n                    alice_turns += len(cur_sub) - 2\\n                elif cur_sub[-1] == \\'B\\':\\n                    bob_turns += len(cur_sub) - 2\\n                cur_sub = color\\n            # Reset.\\n            else:\\n                cur_sub = color\\n        # Extra check for last subarray.\\n        if len(cur_sub) >= 3:\\n            if cur_sub[-1] == \\'A\\':\\n                alice_turns += len(cur_sub) - 2\\n            elif cur_sub[-1] == \\'B\\':\\n                bob_turns += len(cur_sub) - 2\\n        # Alice can\\'t start.\\n        if not alice_turns:\\n            return False\\n        # Alice have more turns.\\n        elif alice_turns > bob_turns:\\n            return True\\n        # Alice have same turns, but bob will make last == win.\\n        elif alice_turns <= bob_turns:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065243,
                "title": "runtime-beats-100-memory-beats-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a_counter = 0\\n        b_counter = 0\\n        last_len = len(colors)\\n        for color in \\'AB\\':\\n            while color * 3 in colors:\\n                colors = colors.replace(color * 3, color * 2)\\n                if color == \\'A\\':\\n                    a_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n                else:\\n                    b_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n        \\n        return a_counter > b_counter\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a_counter = 0\\n        b_counter = 0\\n        last_len = len(colors)\\n        for color in \\'AB\\':\\n            while color * 3 in colors:\\n                colors = colors.replace(color * 3, color * 2)\\n                if color == \\'A\\':\\n                    a_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n                else:\\n                    b_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n        \\n        return a_counter > b_counter\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063511,
                "title": "ruby-simple-solution-with-detailed-explanation-beats-100",
                "content": "# Intuition\\n\\nAs only the middle piece is removed when 3 colors are matching, it will never be possible for more combinations to appear after pieces are removed.\\n\\n# Approach\\n\\nThus, you can add or subtract when encountering 3 adjacent colors. In my example, when the count is positive, Alice wins. When the count is zero or negative, Bob wins.\\n\\nBy setting an initial value for our index to 1 and subtracting 1 from the length, we can avoid processing the first and last elements as there are no adjacent pieces.\\n\\n# Complexity\\n- Time complexity: **O(n)**\\n- Space complexity: **O(1)**\\n\\n# Code\\n```\\n# @param {String} colors\\n# @return {Boolean}\\ndef winner_of_game(colors)\\n  count = 0\\n  i = 1\\n\\n  while i < (colors.length - 1)\\n    matching = colors[i - 1] == colors[i] && colors[i] == colors[i + 1]\\n\\n    count += colors[i] == \"A\" ? 1 : -1 if matching\\n\\n    i += 1\\n  end\\n\\n  count.positive? \\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} colors\\n# @return {Boolean}\\ndef winner_of_game(colors)\\n  count = 0\\n  i = 1\\n\\n  while i < (colors.length - 1)\\n    matching = colors[i - 1] == colors[i] && colors[i] == colors[i + 1]\\n\\n    count += colors[i] == \"A\" ? 1 : -1 if matching\\n\\n    i += 1\\n  end\\n\\n  count.positive? \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4057171,
                "title": "runtime-beats-99-9-memory-beats-74",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a_counter = 0\\n        b_counter = 0\\n        last_len = len(colors)\\n        all_colors = sorted(set(colors))\\n        for color in all_colors:\\n            while color * 3 in colors:\\n                colors = colors.replace(color * 3, color * 2)\\n                if color == \\'A\\':\\n                    a_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n                else:\\n                    b_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n        \\n        return a_counter > b_counter\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a_counter = 0\\n        b_counter = 0\\n        last_len = len(colors)\\n        all_colors = sorted(set(colors))\\n        for color in all_colors:\\n            while color * 3 in colors:\\n                colors = colors.replace(color * 3, color * 2)\\n                if color == \\'A\\':\\n                    a_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n                else:\\n                    b_counter += (last_len - len(colors))\\n                    last_len = len(colors)\\n        \\n        return a_counter > b_counter\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4041489,
                "title": "python-simple-counting-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --> Simple counting\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice = 0\\n        bob = 0\\n        n = len(colors)\\n        for i in range(1,n-1):\\n            if colors[i-1] == colors[i] and colors[i] == colors[i+1]:\\n                if colors[i] == \\'A\\':\\n                    alice+=1\\n                else:\\n                    bob+=1\\n        return alice>bob\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice = 0\\n        bob = 0\\n        n = len(colors)\\n        for i in range(1,n-1):\\n            if colors[i-1] == colors[i] and colors[i] == colors[i+1]:\\n                if colors[i] == \\'A\\':\\n                    alice+=1\\n                else:\\n                    bob+=1\\n        return alice>bob\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028866,
                "title": "2038-remove-colored-pieces-if-both-neighbors-are-the-same-color",
                "content": "# Intuition\\n1. If we get single/double consecutive A or B --> cannot move this\\n2. If we got >=3 consecutive A or B --> can delete one, and will not affect how the counterpart moves\\n3. count # of consecutive A\\'s and B\\'s\\nIf #>=3, sum(#-2) will be how many times to move\\n4. Alice wins only when her count is larger than Bob\\'s\\n\\n# Complexity\\nRuntime 216 ms Beats 57.54%\\nMemory 20.4 MB Beats 6.21%\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        colors_A = colors.split(\\'B\\')\\n        count_A = sum([max(0, len(i)-2) for i in colors_A])\\n\\n        colors_B = colors.split(\\'A\\')\\n        count_B = sum([max(0, len(i)-2) for i in colors_B])\\n        \\n        return count_A > count_B\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        colors_A = colors.split(\\'B\\')\\n        count_A = sum([max(0, len(i)-2) for i in colors_A])\\n\\n        colors_B = colors.split(\\'A\\')\\n        count_B = sum([max(0, len(i)-2) for i in colors_B])\\n        \\n        return count_A > count_B\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4024117,
                "title": "simple-java-solution-with-o-n-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhaving two pointers for aliceTurn and BobTurn, but I was not able to reach to condition where I could decide who will win.\\nSo came out with count approach for each\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIt\\'s Alice\\'s turn, and she checks whether the character is \\'A\\'. She then examines its neighboring characters and discovers a sequence of \\'AAA\\'. Consequently, she must remove this sequence, signifying the completion of her turn. Alice\\'s count is now 1, and the same goes for Bob.\\n\\nThe winner will be determined by comparing the total count of characters each player has removed.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char [] colorsArr = colors.toCharArray();\\n        int aliceCount = 0;\\n        int bobCount = 0;\\n        boolean aliceWins = true;\\n        for(int i=1; i< colorsArr.length -1; i++){\\n            if(colorsArr[i] == \\'A\\'){\\n                if(colorsArr[i-1] == \\'A\\' && colorsArr[i+1] == \\'A\\'){\\n                    aliceCount++;\\n                }\\n            }else if(colorsArr[i] == \\'B\\'){\\n                    if(colorsArr[i-1] == \\'B\\' && colorsArr[i+1] == \\'B\\'){\\n                        bobCount++;\\n                    }\\n            }\\n        \\n        }\\n\\n        if(aliceCount > bobCount){\\n            aliceWins = true;\\n        }else{\\n            aliceWins = false;\\n        }\\n\\n        return aliceWins;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char [] colorsArr = colors.toCharArray();\\n        int aliceCount = 0;\\n        int bobCount = 0;\\n        boolean aliceWins = true;\\n        for(int i=1; i< colorsArr.length -1; i++){\\n            if(colorsArr[i] == \\'A\\'){\\n                if(colorsArr[i-1] == \\'A\\' && colorsArr[i+1] == \\'A\\'){\\n                    aliceCount++;\\n                }\\n            }else if(colorsArr[i] == \\'B\\'){\\n                    if(colorsArr[i-1] == \\'B\\' && colorsArr[i+1] == \\'B\\'){\\n                        bobCount++;\\n                    }\\n            }\\n        \\n        }\\n\\n        if(aliceCount > bobCount){\\n            aliceWins = true;\\n        }else{\\n            aliceWins = false;\\n        }\\n\\n        return aliceWins;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017106,
                "title": "very-efficient-java-solution-o-n-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String str) {\\n        // TLE\\n\\n\\n        // int n=str.length();\\n        // StringBuilder sb=new StringBuilder(str);\\n        // String s1=\"AAA\";\\n        // String s2=\"BBB\";\\n        // int count=0;\\n        // while(sb.length()>0)\\n        // {\\n        //     if(count%2==0)\\n        //     {\\n        //         String s=sb.toString();\\n        //         int v=s.indexOf(s1);\\n        //         if(v==-1)\\n        //         {\\n        //             return false;\\n        //         }\\n        //         else\\n        //         {\\n        //             sb.deleteCharAt(v+1);\\n        //         } \\n        //     }\\n        //     else\\n        //     {\\n        //         String s=sb.toString();\\n        //         int v=s.indexOf(s2);\\n        //         if(v==-1)\\n        //         {\\n        //             return true;\\n        //         }\\n        //         else\\n        //         {\\n        //             sb.deleteCharAt(v+1);\\n        //         }  \\n        //     }\\n        //     count++;\\n        // }\\n        // return true;\\n        int n=str.length();\\n        int countA=0;\\n        int possibleA=0;\\n        int possibleB=0;\\n        int countB=0;\\n    \\n        for(int i=0;i<n;i++)\\n        {\\n            char curr=str.charAt(i);\\n            if(curr==\\'A\\')\\n            {\\n                countA++;\\n            }\\n            else\\n            {\\n                if(countA==1||countA==0)\\n                {\\n                    countA=0;\\n                    continue;\\n                }\\n                possibleA+=countA-2;\\n                countA=0;\\n\\n            }\\n        }\\n        if(countA>2)\\n        {\\n            possibleA+=countA-2;\\n            countA=0;\\n        }\\n       for(int i=0;i<n;i++)\\n        {\\n            char curr=str.charAt(i);\\n            if(curr==\\'B\\')\\n            {\\n                countB++;\\n            }\\n            else\\n            {\\n                if(countB==1||countB==0)\\n                {\\n                    countB=0;\\n                    continue;\\n                }\\n                possibleB+=countB-2;\\n                countB=0;\\n\\n            }\\n        }\\n        if(countB>2)\\n        {\\n            possibleB+=countB-2;\\n            countB=0;\\n        }\\n        \\n        if(possibleA>possibleB)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String str) {\\n        // TLE\\n\\n\\n        // int n=str.length();\\n        // StringBuilder sb=new StringBuilder(str);\\n        // String s1=\"AAA\";\\n        // String s2=\"BBB\";\\n        // int count=0;\\n        // while(sb.length()>0)\\n        // {\\n        //     if(count%2==0)\\n        //     {\\n        //         String s=sb.toString();\\n        //         int v=s.indexOf(s1);\\n        //         if(v==-1)\\n        //         {\\n        //             return false;\\n        //         }\\n        //         else\\n        //         {\\n        //             sb.deleteCharAt(v+1);\\n        //         } \\n        //     }\\n        //     else\\n        //     {\\n        //         String s=sb.toString();\\n        //         int v=s.indexOf(s2);\\n        //         if(v==-1)\\n        //         {\\n        //             return true;\\n        //         }\\n        //         else\\n        //         {\\n        //             sb.deleteCharAt(v+1);\\n        //         }  \\n        //     }\\n        //     count++;\\n        // }\\n        // return true;\\n        int n=str.length();\\n        int countA=0;\\n        int possibleA=0;\\n        int possibleB=0;\\n        int countB=0;\\n    \\n        for(int i=0;i<n;i++)\\n        {\\n            char curr=str.charAt(i);\\n            if(curr==\\'A\\')\\n            {\\n                countA++;\\n            }\\n            else\\n            {\\n                if(countA==1||countA==0)\\n                {\\n                    countA=0;\\n                    continue;\\n                }\\n                possibleA+=countA-2;\\n                countA=0;\\n\\n            }\\n        }\\n        if(countA>2)\\n        {\\n            possibleA+=countA-2;\\n            countA=0;\\n        }\\n       for(int i=0;i<n;i++)\\n        {\\n            char curr=str.charAt(i);\\n            if(curr==\\'B\\')\\n            {\\n                countB++;\\n            }\\n            else\\n            {\\n                if(countB==1||countB==0)\\n                {\\n                    countB=0;\\n                    continue;\\n                }\\n                possibleB+=countB-2;\\n                countB=0;\\n\\n            }\\n        }\\n        if(countB>2)\\n        {\\n            possibleB+=countB-2;\\n            countB=0;\\n        }\\n        \\n        if(possibleA>possibleB)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998538,
                "title": "very-simple-java-solution-beat-95-runtime",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char[] arr = colors.toCharArray();\\n        int numberA = 0;\\n        int numberB = 0;\\n        int versus = 0;\\n        for(int i = 0; i < arr.length; ++i) {\\n            if(arr[i] == \\'A\\') {\\n                numberB = 0;\\n                ++numberA;\\n            }\\n            else {\\n                numberA = 0;\\n                ++numberB;\\n            }\\n            if(numberA >= 3) {\\n                ++versus;\\n            }\\n            if(numberB >= 3) {\\n                --versus;\\n            }\\n        }\\n        if(versus > 0) return true;\\n        else return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        char[] arr = colors.toCharArray();\\n        int numberA = 0;\\n        int numberB = 0;\\n        int versus = 0;\\n        for(int i = 0; i < arr.length; ++i) {\\n            if(arr[i] == \\'A\\') {\\n                numberB = 0;\\n                ++numberA;\\n            }\\n            else {\\n                numberA = 0;\\n                ++numberB;\\n            }\\n            if(numberA >= 3) {\\n                ++versus;\\n            }\\n            if(numberB >= 3) {\\n                --versus;\\n            }\\n        }\\n        if(versus > 0) return true;\\n        else return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3986928,
                "title": "java-solution-with-explanation",
                "content": "# Approach\\nLeft and Right neighbours should be As to remove A and Bs to remove B.\\nThat means the substring should be either \\'AAA\\' or \\'BBB\\' to remove A or B from its subsequence.\\nHence count nos of AAAs and BBBs and max count will be the winner.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n\\n    int countA=0, countB=0;\\n\\n        for(int i= 1; i< colors.length()-1; i++){\\n\\n// check AAA or BBB sequence in string\\n            if((colors.charAt(i-1) == colors.charAt(i)) && \\n                (colors.charAt(i) == colors.charAt(i+1))){\\n\\n                    if(colors.charAt(i) == \\'A\\')\\n                        countA++;\\n                    else\\n                        countB++;\\n                }\\n        }\\n        \\n        return countA>countB;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n\\n    int countA=0, countB=0;\\n\\n        for(int i= 1; i< colors.length()-1; i++){\\n\\n// check AAA or BBB sequence in string\\n            if((colors.charAt(i-1) == colors.charAt(i)) && \\n                (colors.charAt(i) == colors.charAt(i+1))){\\n\\n                    if(colors.charAt(i) == \\'A\\')\\n                        countA++;\\n                    else\\n                        countB++;\\n                }\\n        }\\n        \\n        return countA>countB;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3971290,
                "title": "counting-very-simple",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will just count the number of times Alice can choose an element, and we will also count the number of times Bob can choose an element. If Alice has a greater count, we will return true, else we will return false. \\nHere we don\\'t actually need to remove an element while counting, as it won\\'t make a difference. \\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int n = colors.size();\\n        int countA = 0, countB = 0;\\n        for(int i=0; i<n; i++){\\n            if(i==0 || i==n-1) continue;\\n            if(colors[i]==\\'A\\' && colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\') countA++;\\n            if(colors[i]==\\'B\\' && colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\') countB++;\\n        }\\n        if(countA>countB) return true;\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int n = colors.size();\\n        int countA = 0, countB = 0;\\n        for(int i=0; i<n; i++){\\n            if(i==0 || i==n-1) continue;\\n            if(colors[i]==\\'A\\' && colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\') countA++;\\n            if(colors[i]==\\'B\\' && colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\') countB++;\\n        }\\n        if(countA>countB) return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954716,
                "title": "simple-o-n-code-c",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cnta = 0 , cntb = 0;\\n        // simple as fuck yrr //\\n        int n = colors.size();\\n        for(int i=2 ; i<n ; i++){\\n            if(colors[i] == \\'A\\' && colors[i-1] == \\'A\\' && colors[i-2] == \\'A\\'){\\n                cnta++;\\n            }else if(colors[i] == \\'B\\' && colors[i-1] == \\'B\\' && colors[i-2] == \\'B\\'){\\n                cntb++;\\n            }\\n        }\\n\\n        if(cnta > cntb) return true;\\n        return false;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cnta = 0 , cntb = 0;\\n        // simple as fuck yrr //\\n        int n = colors.size();\\n        for(int i=2 ; i<n ; i++){\\n            if(colors[i] == \\'A\\' && colors[i-1] == \\'A\\' && colors[i-2] == \\'A\\'){\\n                cnta++;\\n            }else if(colors[i] == \\'B\\' && colors[i-1] == \\'B\\' && colors[i-2] == \\'B\\'){\\n                cntb++;\\n            }\\n        }\\n\\n        if(cnta > cntb) return true;\\n        return false;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3953306,
                "title": "easy-and-concise-approach",
                "content": "# Intuition\\nsimple first count all the possible moves of Alice and Bob.\\n\\n# Approach\\n\\n# Complexity\\n- Time complexity:\\no(n)\\n- Space complexity:\\no(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n\\n        int totala=0;\\n        int totalb=0;\\n\\n        int curra=0;\\n        int currb=0;\\n\\n        for(auto it:colors)\\n        {   \\n            if(it==\\'A\\')\\n            {\\n                if(currb>=3)\\n                totalb+=currb-2;\\n                currb=0;\\n                curra++;\\n            }\\n            else\\n            {\\n                 if(curra>=3)\\n                totala+=curra-2;\\n                curra=0;\\n                currb++;\\n            }\\n            \\n        }\\n        \\n        <!-- if curra or currb are still there then we can handle that here .Like in this example AABBBBBBB or BBAAAAAAA -->\\n        if(curra>=3)\\n        totala+=curra-2;\\n        if(currb>=3)\\n        totalb+=currb-2;\\n        // cout<<totala<<\" \"<<totalb;\\n        if(totala>totalb)\\n        return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n\\n        int totala=0;\\n        int totalb=0;\\n\\n        int curra=0;\\n        int currb=0;\\n\\n        for(auto it:colors)\\n        {   \\n            if(it==\\'A\\')\\n            {\\n                if(currb>=3)\\n                totalb+=currb-2;\\n                currb=0;\\n                curra++;\\n            }\\n            else\\n            {\\n                 if(curra>=3)\\n                totala+=curra-2;\\n                curra=0;\\n                currb++;\\n            }\\n            \\n        }\\n        \\n        <!-- if curra or currb are still there then we can handle that here .Like in this example AABBBBBBB or BBAAAAAAA -->\\n        if(curra>=3)\\n        totala+=curra-2;\\n        if(currb>=3)\\n        totalb+=currb-2;\\n        // cout<<totala<<\" \"<<totalb;\\n        if(totala>totalb)\\n        return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3952915,
                "title": "python-time-complexity-o-n-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        at = 0\\n        bt = 0\\n        ac = 0\\n        bc = 0\\n\\n        for i in range(0,len(colors)):\\n            if colors[i] == \\'A\\':\\n                at = at + 1\\n                if bt >= 3:\\n                    bc = bc + ( bt - 2 )\\n                bt = 0\\n            elif colors[i] == \\'B\\':\\n                bt = bt + 1\\n                if at >= 3:\\n                    ac = ac + ( at - 2 )\\n                at = 0\\n        if at >= 3:\\n            ac = ac + ( at - 2 )\\n        at = 0\\n        if bt >= 3:\\n            bc = bc + ( bt - 2 )\\n        bt = 0\\n        \\n        if ac <= bc:\\n            return False\\n        elif ac > bc:\\n            return True\\n            \\n        # 20230824\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        at = 0\\n        bt = 0\\n        ac = 0\\n        bc = 0\\n\\n        for i in range(0,len(colors)):\\n            if colors[i] == \\'A\\':\\n                at = at + 1\\n                if bt >= 3:\\n                    bc = bc + ( bt - 2 )\\n                bt = 0\\n            elif colors[i] == \\'B\\':\\n                bt = bt + 1\\n                if at >= 3:\\n                    ac = ac + ( at - 2 )\\n                at = 0\\n        if at >= 3:\\n            ac = ac + ( at - 2 )\\n        at = 0\\n        if bt >= 3:\\n            bc = bc + ( bt - 2 )\\n        bt = 0\\n        \\n        if ac <= bc:\\n            return False\\n        elif ac > bc:\\n            return True\\n            \\n        # 20230824\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917723,
                "title": "short-and-simple-c-solution-intitutive",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimply count the triplets of \\'A\\' and \\'B\\' and at the end count which is maximum if A count is maximum answer is true else false , as we need to tell if Alice wins or not.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string col) {\\n        int n=col.length();\\n        int a=0,b=0;\\n        for(int i=1;i<n-1;i++){\\n            if(col[i-1]==col[i] && col[i+1]==col[i]){\\n                if(col[i]==\\'A\\')\\n                a++;\\n                else\\n                b++;\\n            }\\n        }\\n        return a>b;\\n    }\\n};\\n```\\n\\nPlease upvote if found helpful.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string col) {\\n        int n=col.length();\\n        int a=0,b=0;\\n        for(int i=1;i<n-1;i++){\\n            if(col[i-1]==col[i] && col[i+1]==col[i]){\\n                if(col[i]==\\'A\\')\\n                a++;\\n                else\\n                b++;\\n            }\\n        }\\n        return a>b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916878,
                "title": "going-through-as-the-problem-stated",
                "content": "# Intuition\\nWent as the problem stated.\\n\\n# Approach\\nGreedy\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\nSpace complexity:\\nO(1) ignore the arr[] as I used it for ease only you can remove it.gree\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        \\n        int i=colors.indexOf(\\'A\\'),j=colors.indexOf(\\'B\\'),n=colors.length();\\n        boolean result=false;\\n        char arr[] = colors.toCharArray();\\n        while(result==false && i<n-1 || result==true && j<n-1)\\n        {\\n           if(!result)\\n           {\\n               if(i>0 && arr[i-1]==\\'A\\' && \\n               arr[i]==\\'A\\' &&\\n               arr[i+1]==\\'A\\'){\\n                   result = true;\\n                   arr[i]=arr[i-1];\\n                   \\n               }\\n               i++;\\n           }\\n           else\\n           {\\n               if(j>0 && arr[j-1]==\\'B\\' && \\n               arr[j]==\\'B\\' &&\\n               arr[j+1]==\\'B\\'){\\n                   result = false;\\n                    arr[j] = arr[j-1];\\n                   \\n               }\\n               j++;\\n           }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        \\n        int i=colors.indexOf(\\'A\\'),j=colors.indexOf(\\'B\\'),n=colors.length();\\n        boolean result=false;\\n        char arr[] = colors.toCharArray();\\n        while(result==false && i<n-1 || result==true && j<n-1)\\n        {\\n           if(!result)\\n           {\\n               if(i>0 && arr[i-1]==\\'A\\' && \\n               arr[i]==\\'A\\' &&\\n               arr[i+1]==\\'A\\'){\\n                   result = true;\\n                   arr[i]=arr[i-1];\\n                   \\n               }\\n               i++;\\n           }\\n           else\\n           {\\n               if(j>0 && arr[j-1]==\\'B\\' && \\n               arr[j]==\\'B\\' &&\\n               arr[j+1]==\\'B\\'){\\n                   result = false;\\n                    arr[j] = arr[j-1];\\n                   \\n               }\\n               j++;\\n           }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3916479,
                "title": "easy-c-o-n",
                "content": "# Complexity\\n- Time complexity: $O(n)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int n = s.length();\\n        if(n<=2)\\n            return false;\\n        int count1 = 0,count2 = 0;\\n        int movesAlice = 0,movesBob = 0;\\n        for(int i=0;i<n;)\\n        {\\n            if(s[i]==\\'A\\')\\n            {\\n                while(i<n && s[i]==\\'A\\')\\n                {\\n                    count1++;\\n                    i++;\\n                }\\n                if(count1>=3)\\n                    movesAlice+=count1-2;\\n                count1=0;\\n            }\\n            else\\n            {\\n                while(i<n && s[i]==\\'B\\')\\n                {\\n                    count2++;\\n                    i++;\\n                }\\n                if(count2>=3)\\n                    movesBob+=count2-2;\\n                count2=0;\\n            }\\n        }\\n        return movesAlice>movesBob;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int n = s.length();\\n        if(n<=2)\\n            return false;\\n        int count1 = 0,count2 = 0;\\n        int movesAlice = 0,movesBob = 0;\\n        for(int i=0;i<n;)\\n        {\\n            if(s[i]==\\'A\\')\\n            {\\n                while(i<n && s[i]==\\'A\\')\\n                {\\n                    count1++;\\n                    i++;\\n                }\\n                if(count1>=3)\\n                    movesAlice+=count1-2;\\n                count1=0;\\n            }\\n            else\\n            {\\n                while(i<n && s[i]==\\'B\\')\\n                {\\n                    count2++;\\n                    i++;\\n                }\\n                if(count2>=3)\\n                    movesBob+=count2-2;\\n                count2=0;\\n            }\\n        }\\n        return movesAlice>movesBob;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914458,
                "title": "java-solution-using-stack-and-map-with-o-n-and-o-n-time-and-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* Using stack to store count of consecutive characters in a String like. A->3,B->3,A->3\\n* Storing in hashmap only those values from stack for which count>2\\n* Also subtracting with -2; Example A->2,B->1\\n* At last we get Value of A and B from Hashmap and whose value is greater that is the winner and if values are equal then Bob wins since Alice turn is always first.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)+(n)~O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Pair\\n{\\n    char c;\\n    int count;\\n    Pair(char c,int count)\\n    {\\n        this.c=c;\\n        this.count=count;\\n    }\\n}\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        Stack<Pair> st=new Stack<>();\\n        Map<Character,Integer> map=new HashMap<>();\\n        for(char ch:colors.toCharArray())\\n        {\\n            if(!st.isEmpty())\\n            {\\n                if(st.peek().c==ch)\\n                {\\n                    Pair p=st.pop();\\n                    p.count=p.count+1;\\n                    st.push(p);\\n                }\\n                else\\n                {\\n                    st.push(new Pair(ch,1));\\n                }\\n            }\\n            else\\n            {\\n                st.push(new Pair(ch,1));\\n            }\\n        }\\n        while(!st.isEmpty())\\n        {\\n            Pair p=st.pop();\\n            if(p.count>2)\\n            {\\n                if(!map.containsKey(p.c))\\n                {\\n                    map.put(p.c,p.count-2);\\n                }\\n                else\\n                {\\n                    map.put(p.c,map.get(p.c)+(p.count-2));\\n                }\\n            }\\n        }\\n\\n        int a=map.getOrDefault(\\'A\\',0);\\n        int b=map.getOrDefault(\\'B\\',0);\\n\\n        \\n        if(a>b)\\n        return true;\\n        else if(b>a)\\n        return false;\\n        else\\n        return false;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Pair\\n{\\n    char c;\\n    int count;\\n    Pair(char c,int count)\\n    {\\n        this.c=c;\\n        this.count=count;\\n    }\\n}\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        Stack<Pair> st=new Stack<>();\\n        Map<Character,Integer> map=new HashMap<>();\\n        for(char ch:colors.toCharArray())\\n        {\\n            if(!st.isEmpty())\\n            {\\n                if(st.peek().c==ch)\\n                {\\n                    Pair p=st.pop();\\n                    p.count=p.count+1;\\n                    st.push(p);\\n                }\\n                else\\n                {\\n                    st.push(new Pair(ch,1));\\n                }\\n            }\\n            else\\n            {\\n                st.push(new Pair(ch,1));\\n            }\\n        }\\n        while(!st.isEmpty())\\n        {\\n            Pair p=st.pop();\\n            if(p.count>2)\\n            {\\n                if(!map.containsKey(p.c))\\n                {\\n                    map.put(p.c,p.count-2);\\n                }\\n                else\\n                {\\n                    map.put(p.c,map.get(p.c)+(p.count-2));\\n                }\\n            }\\n        }\\n\\n        int a=map.getOrDefault(\\'A\\',0);\\n        int b=map.getOrDefault(\\'B\\',0);\\n\\n        \\n        if(a>b)\\n        return true;\\n        else if(b>a)\\n        return false;\\n        else\\n        return false;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914339,
                "title": "explained-in-comments",
                "content": "# Explanation\\nIf they both play optimally, it just boils down to whoever has more valid moves wins. As explained in the description, a valid move is removing the letter when it\\'s surrounded by the same letter on both sides.\\n\\n\\nAAA - Valid for Alice\\nBBB - Valid for Bob\\nAAB - Invalid for both\\nABA - invalid for both\\n\\nO(n) - Linear runtime \\n```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function(colors) {\\n    let aliceCount = 0\\n    let bobCount = 0\\n\\n    for(let i = 1; i < colors.length-1;++i){\\n        const aliceCanMove = colors[i-1] === \"A\" && colors[i] === \"A\" && colors[i+1] === \"A\"\\n        const bobCanMove = colors[i-1] === \"B\" && colors[i] === \"B\" && colors[i+1] === \"B\"\\n\\n        if (aliceCanMove) aliceCount++\\n        if (bobCanMove) bobCount++\\n    }\\n    /*\\n    note here we are using >, not >=, \\n    alice plays first meaning she would be the first one to have to play in an invalid state\\n    imagine if the starting game array is [A,A,B]\\n    neither of them can play, but it\\'s alices turn to play, SHE loses\\n    */\\n    const aliceWins = aliceCount > bobCount\\n    return aliceWins\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function(colors) {\\n    let aliceCount = 0\\n    let bobCount = 0\\n\\n    for(let i = 1; i < colors.length-1;++i){\\n        const aliceCanMove = colors[i-1] === \"A\" && colors[i] === \"A\" && colors[i+1] === \"A\"\\n        const bobCanMove = colors[i-1] === \"B\" && colors[i] === \"B\" && colors[i+1] === \"B\"\\n\\n        if (aliceCanMove) aliceCount++\\n        if (bobCanMove) bobCount++\\n    }\\n    /*\\n    note here we are using >, not >=, \\n    alice plays first meaning she would be the first one to have to play in an invalid state\\n    imagine if the starting game array is [A,A,B]\\n    neither of them can play, but it\\'s alices turn to play, SHE loses\\n    */\\n    const aliceWins = aliceCount > bobCount\\n    return aliceWins\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3912767,
                "title": "solution-for-bignnrs",
                "content": "Just count triplets for both alice and bob and return whose greater.\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        for(int i=1; i<colors.length() - 1; i++) {\\n            if(colors.charAt(i) == \\'A\\') {\\n                if(colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')\\n                    countA++;\\n            } else {\\n                if(colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\')\\n                    countB++;\\n            }\\n        }\\n\\n        if(countA > countB)\\n            return true;\\n        else\\n            return false;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "class Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        for(int i=1; i<colors.length() - 1; i++) {\\n            if(colors.charAt(i) == \\'A\\') {\\n                if(colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')\\n                    countA++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3904706,
                "title": "java-bruteforce-solution",
                "content": "\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g.  -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        for(int i=1; i<colors.length() - 1; i++) {\\n            if(colors.charAt(i) == \\'A\\') {\\n                if(colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')\\n                    countA++;\\n            } else {\\n                if(colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\')\\n                    countB++;\\n            }\\n        }\\n\\n        if(countA > countB)\\n            return true;\\n        else\\n            return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countA = 0;\\n        int countB = 0;\\n\\n        for(int i=1; i<colors.length() - 1; i++) {\\n            if(colors.charAt(i) == \\'A\\') {\\n                if(colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')\\n                    countA++;\\n            } else {\\n                if(colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\')\\n                    countB++;\\n            }\\n        }\\n\\n        if(countA > countB)\\n            return true;\\n        else\\n            return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3891125,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a = 0, b = 0;\\n        if(colors.size() <= 2) return false;\\n        for(int i=0;i<colors.size()-2;i++){\\n            if(colors[i] == \\'A\\'  and colors[i+1] == \\'A\\' and colors[i+2] == \\'A\\') a++;\\n            if(colors[i] == \\'B\\'  and colors[i+1] == \\'B\\' and colors[i+2] == \\'B\\') b++;\\n        }\\n        if(a == 0) return false;\\n        if(a > b) return true;\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a = 0, b = 0;\\n        if(colors.size() <= 2) return false;\\n        for(int i=0;i<colors.size()-2;i++){\\n            if(colors[i] == \\'A\\'  and colors[i+1] == \\'A\\' and colors[i+2] == \\'A\\') a++;\\n            if(colors[i] == \\'B\\'  and colors[i+1] == \\'B\\' and colors[i+2] == \\'B\\') b++;\\n        }\\n        if(a == 0) return false;\\n        if(a > b) return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851334,
                "title": "brute-force-only-loops-and-if-else",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        if(colors.size()<3)\\n        {\\n            return false;\\n        }\\n        int count=0,count1=0;\\n        for(int i=1;i<colors.size()-1;i++){\\n            if(colors[i]==\\'A\\')\\n            {\\n                if(colors[i-1]==\\'A\\'&&colors[i+1]==\\'A\\')\\n                {\\n                    count++;\\n                }\\n            }\\n            if(colors[i]==\\'B\\')\\n            {\\n                if(colors[i-1]==\\'B\\'&&colors[i+1]==\\'B\\')\\n                {\\n                    count1++;\\n                }\\n            }\\n        }\\n            if(count1>count)\\n            {\\n                return false;\\n            }\\n        if(count>count1)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        if(colors.size()<3)\\n        {\\n            return false;\\n        }\\n        int count=0,count1=0;\\n        for(int i=1;i<colors.size()-1;i++){\\n            if(colors[i]==\\'A\\')\\n            {\\n                if(colors[i-1]==\\'A\\'&&colors[i+1]==\\'A\\')\\n                {\\n                    count++;\\n                }\\n            }\\n            if(colors[i]==\\'B\\')\\n            {\\n                if(colors[i-1]==\\'B\\'&&colors[i+1]==\\'B\\')\\n                {\\n                    count1++;\\n                }\\n            }\\n        }\\n            if(count1>count)\\n            {\\n                return false;\\n            }\\n        if(count>count1)\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3846769,
                "title": "easy-c-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int alice=0;\\n        int bob=0;\\n        int t1=0;\\n        int t2=0;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'A\\'){\\n                t1++;\\n                if(t1>2) alice++;\\n                t2=0;\\n            }\\n            else{\\n                t2++;\\n                if(t2>2) bob++;\\n                t1=0;\\n            }\\n        }\\n        if(alice>bob) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int alice=0;\\n        int bob=0;\\n        int t1=0;\\n        int t2=0;\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]==\\'A\\'){\\n                t1++;\\n                if(t1>2) alice++;\\n                t2=0;\\n            }\\n            else{\\n                t2++;\\n                if(t2>2) bob++;\\n                t1=0;\\n            }\\n        }\\n        if(alice>bob) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820994,
                "title": "java-beats-100-7ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        // count number of possible moves for each, return winner\\n        char[] c = colors.toCharArray();\\n        int numA = 0; \\n        int numB = 0; \\n        // count number of possible A and B removals \\n        for (int i = 1; i < c.length - 1; i++) {\\n            if (c[i] == \\'A\\') numA = c[i-1] == \\'A\\' && c[i+1] == \\'A\\' ? numA + 1 : numA; \\n            else numB = c[i-1] == \\'B\\' && c[i+1] == \\'B\\' ? numB + 1 : numB; \\n        }\\n        return (numA > numB);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        // count number of possible moves for each, return winner\\n        char[] c = colors.toCharArray();\\n        int numA = 0; \\n        int numB = 0; \\n        // count number of possible A and B removals \\n        for (int i = 1; i < c.length - 1; i++) {\\n            if (c[i] == \\'A\\') numA = c[i-1] == \\'A\\' && c[i+1] == \\'A\\' ? numA + 1 : numA; \\n            else numB = c[i-1] == \\'B\\' && c[i+1] == \\'B\\' ? numB + 1 : numB; \\n        }\\n        return (numA > numB);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3803422,
                "title": "java-solution-beats-85-of-users-13-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        // CANNOT REMOVE EDGE!\\n        // need to calculate the number of moves of Alice and Bob\\n        int numOfA = 0;\\n        int numOfB = 0;\\n        int i = 0;\\n        char [] colorsarr = colors.toCharArray();\\n        for (char letter : colorsarr){\\n            if (i > 0 && i < colors.length() - 1) {\\n                if (letter == \\'A\\' && colorsarr[i-1] == \\'A\\' && colorsarr[i+1] == \\'A\\'){\\n                    numOfA+=1;\\n                } else if (letter == \\'B\\' && colorsarr[i-1] == \\'B\\' && colorsarr[i+1] == \\'B\\'){\\n                    numOfB+=1;\\n                }\\n            }\\n            i++;\\n        }\\n        if (numOfB < numOfA){\\n            return true;\\n        } else{\\n            return false;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        // CANNOT REMOVE EDGE!\\n        // need to calculate the number of moves of Alice and Bob\\n        int numOfA = 0;\\n        int numOfB = 0;\\n        int i = 0;\\n        char [] colorsarr = colors.toCharArray();\\n        for (char letter : colorsarr){\\n            if (i > 0 && i < colors.length() - 1) {\\n                if (letter == \\'A\\' && colorsarr[i-1] == \\'A\\' && colorsarr[i+1] == \\'A\\'){\\n                    numOfA+=1;\\n                } else if (letter == \\'B\\' && colorsarr[i-1] == \\'B\\' && colorsarr[i+1] == \\'B\\'){\\n                    numOfB+=1;\\n                }\\n            }\\n            i++;\\n        }\\n        if (numOfB < numOfA){\\n            return true;\\n        } else{\\n            return false;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3768666,
                "title": "regular-expression-approach-consuming-a-lot-of-memory-tho",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport re\\n\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n\\n        am = sum(len(i) - 2 for i in re.findall(r\\'A+\\', colors) if len(i) > 2)\\n        bm = sum(len(i) - 2 for i in re.findall(r\\'B+\\', colors) if len(i) > 2)\\n\\n        print(am, bm)\\n        if am > 0 and am > bm:\\n            return True\\n        else:\\n            return False\\n    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport re\\n\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n\\n        am = sum(len(i) - 2 for i in re.findall(r\\'A+\\', colors) if len(i) > 2)\\n        bm = sum(len(i) - 2 for i in re.findall(r\\'B+\\', colors) if len(i) > 2)\\n\\n        print(am, bm)\\n        if am > 0 and am > bm:\\n            return True\\n        else:\\n            return False\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3742613,
                "title": "simplest-javascript-solution",
                "content": "```js\\nconst winnerOfGame = (colors) => {\\n   let score = 0;\\n\\n   for (let i = 2; i < colors.length; i++) {\\n       if (colors[i] === colors[i - 1] && colors[i] === colors[i - 2]) {\\n           score += colors[i] === \\'A\\' ? 1 : -1;\\n       }\\n   }\\n\\n   return score > 0;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst winnerOfGame = (colors) => {\\n   let score = 0;\\n\\n   for (let i = 2; i < colors.length; i++) {\\n       if (colors[i] === colors[i - 1] && colors[i] === colors[i - 2]) {\\n           score += colors[i] === \\'A\\' ? 1 : -1;\\n       }\\n   }\\n\\n   return score > 0;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3729992,
                "title": "java-count-valid-steps-cnta-cntb",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        // cnt # of steps in A, cnt # of steps in B,\\n        // if A > B wins, else false\\n        char[] arr = colors.toCharArray();\\n\\n        char base = \\'.\\';\\n        int idx = 0;\\n        int cntA = 0, cntB = 0, currA = 0, currB = 0;\\n        while (idx < arr.length) {\\n            if (arr[idx] == base) {\\n                if (base == \\'A\\') currA ++;\\n                else currB ++;\\n            } else {\\n                if (base == \\'.\\') {\\n                    base = arr[idx];\\n                    if (base == \\'A\\') currA ++;\\n                    else currB ++;\\n\\n                } else if (base == \\'A\\') {\\n                    // curr is \\'B\\'\\n                    if (currA >= 2) cntA += (currA - 2);\\n                    currA = 0;\\n                    currB = 1; \\n                    base = \\'B\\';\\n  \\n                } else {\\n                    if (currB >= 2) cntB += (currB - 2);\\n                    currB = 0;\\n                    currA = 1;\\n                    base = \\'A\\';\\n\\n                }\\n            }\\n            idx ++;\\n        }\\n        \\n        if (currB >= 2) cntB += (currB - 2);\\n        if (currA >= 2) cntA += (currA - 2);\\n\\n        return cntA > cntB;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        // cnt # of steps in A, cnt # of steps in B,\\n        // if A > B wins, else false\\n        char[] arr = colors.toCharArray();\\n\\n        char base = \\'.\\';\\n        int idx = 0;\\n        int cntA = 0, cntB = 0, currA = 0, currB = 0;\\n        while (idx < arr.length) {\\n            if (arr[idx] == base) {\\n                if (base == \\'A\\') currA ++;\\n                else currB ++;\\n            } else {\\n                if (base == \\'.\\') {\\n                    base = arr[idx];\\n                    if (base == \\'A\\') currA ++;\\n                    else currB ++;\\n\\n                } else if (base == \\'A\\') {\\n                    // curr is \\'B\\'\\n                    if (currA >= 2) cntA += (currA - 2);\\n                    currA = 0;\\n                    currB = 1; \\n                    base = \\'B\\';\\n  \\n                } else {\\n                    if (currB >= 2) cntB += (currB - 2);\\n                    currB = 0;\\n                    currA = 1;\\n                    base = \\'A\\';\\n\\n                }\\n            }\\n            idx ++;\\n        }\\n        \\n        if (currB >= 2) cntB += (currB - 2);\\n        if (currA >= 2) cntA += (currA - 2);\\n\\n        return cntA > cntB;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3682028,
                "title": "triplewise-scan",
                "content": "# Intuition\\nWe count only the center characters of a window of size 3 that either Alice or Bob can take. \\n\\n# Approach\\nWe use a generator to loop over a window of size 3, counting Alice\\'s and Bob\\'s moves separately\\n\\n# Complexity\\nO(n) time complexity\\n\\nO(1) space complexity\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        def triplewise(iterable):\\n            \"Return overlapping triplets from an iterable\"\\n            # triplewise(\\'ABCDEFG\\') --> ABC BCD CDE DEF EFG\\n            for (a, _), (b, c) in pairwise(pairwise(iterable)):\\n                yield a, b, c\\n        counts=defaultdict(int)\\n        for a,b,c in triplewise(colors):\\n            if a==b==c:\\n                counts[b]+=1\\n\\n\\n        return counts[\\'A\\'] > counts[\\'B\\']\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        def triplewise(iterable):\\n            \"Return overlapping triplets from an iterable\"\\n            # triplewise(\\'ABCDEFG\\') --> ABC BCD CDE DEF EFG\\n            for (a, _), (b, c) in pairwise(pairwise(iterable)):\\n                yield a, b, c\\n        counts=defaultdict(int)\\n        for a,b,c in triplewise(colors):\\n            if a==b==c:\\n                counts[b]+=1\\n\\n\\n        return counts[\\'A\\'] > counts[\\'B\\']\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3676581,
                "title": "python3-solution-o-n-time-problem-approach",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize two variables `alice_moves` and `bob_moves` to keep track of the number of valid moves made by Alice and Bob, respectively.\\n2. Iterate through the `colors` string from index 1 to len(colors) - 2 (excluding the edge pieces).\\n    - If the current piece is \\'A\\' and both its neighboring pieces are also \\'A\\', increment `alice_moves` by 1.\\n    - If the current piece is \\'B\\' and both its neighboring pieces are also \\'B\\', increment `bob_moves` by 1.\\n3. Return `True` if `alice_moves` is greater than `bob_moves`, indicating that Alice made more valid moves and wins the game. Otherwise, return `False`, indicating that Bob wins the game.\\n\\n# Complexity\\n- **Time complexity:**\\nThe time complexity of this approach is O(n), where n is the length of the `colors` string, as we iterate through the string once\\n\\n- **Space complexity:**\\nThe space complexity is O(1) as we only use a constant amount of extra space to store the `alice_moves` and `bob_moves` variables.\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice_moves = 0\\n        bob_moves = 0\\n\\n        for i in range(1, len(colors) - 1):\\n            if colors[i] == \\'A\\' and colors[i - 1] == \\'A\\' and colors[i + 1] == \\'A\\':\\n                alice_moves += 1\\n            elif colors[i] == \\'B\\' and colors[i - 1] == \\'B\\' and colors[i + 1] == \\'B\\':\\n                bob_moves += 1\\n\\n        return alice_moves > bob_moves\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice_moves = 0\\n        bob_moves = 0\\n\\n        for i in range(1, len(colors) - 1):\\n            if colors[i] == \\'A\\' and colors[i - 1] == \\'A\\' and colors[i + 1] == \\'A\\':\\n                alice_moves += 1\\n            elif colors[i] == \\'B\\' and colors[i - 1] == \\'B\\' and colors[i + 1] == \\'B\\':\\n                bob_moves += 1\\n\\n        return alice_moves > bob_moves\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3676179,
                "title": "easy-o-n-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a, b = 0, 0\\n        for i in range(1, len(colors)-1):\\n            if colors[i] == \\'A\\' and colors[i-1] == \\'A\\' and colors[i+1] == \\'A\\':\\n                a += 1\\n            elif colors[i] == \\'B\\' and colors[i-1] == \\'B\\' and colors[i+1] == \\'B\\':\\n                b += 1\\n        return a > b\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a, b = 0, 0\\n        for i in range(1, len(colors)-1):\\n            if colors[i] == \\'A\\' and colors[i-1] == \\'A\\' and colors[i+1] == \\'A\\':\\n                a += 1\\n            elif colors[i] == \\'B\\' and colors[i-1] == \\'B\\' and colors[i+1] == \\'B\\':\\n                b += 1\\n        return a > b\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3668941,
                "title": "take-substring-as-aaa-and-bbb",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function (colors) {\\n    let flag = false;\\n    let hm = { \"AAA\": 0, \"BBB\": 0 };\\n    if (colors.length > 2) {\\n        for (let i = 0; i < colors.length - 2; i++) {\\n            if ([colors[i], colors[i + 1], colors[i + 2]].join(\\'\\') === \\'AAA\\') {\\n                hm[\\'AAA\\'] = hm[\\'AAA\\'] + 1 || 1;\\n            }\\n            else if ([colors[i], colors[i + 1], colors[i + 2]].join(\\'\\') === \\'BBB\\') {\\n                hm[\\'BBB\\'] = hm[\\'BBB\\'] + 1 || 1;\\n            }\\n        }\\n    }\\n    if(hm[\\'AAA\\'] > hm[\\'BBB\\']) {\\n        flag = true\\n    }\\n    return flag;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} colors\\n * @return {boolean}\\n */\\nvar winnerOfGame = function (colors) {\\n    let flag = false;\\n    let hm = { \"AAA\": 0, \"BBB\": 0 };\\n    if (colors.length > 2) {\\n        for (let i = 0; i < colors.length - 2; i++) {\\n            if ([colors[i], colors[i + 1], colors[i + 2]].join(\\'\\') === \\'AAA\\') {\\n                hm[\\'AAA\\'] = hm[\\'AAA\\'] + 1 || 1;\\n            }\\n            else if ([colors[i], colors[i + 1], colors[i + 2]].join(\\'\\') === \\'BBB\\') {\\n                hm[\\'BBB\\'] = hm[\\'BBB\\'] + 1 || 1;\\n            }\\n        }\\n    }\\n    if(hm[\\'AAA\\'] > hm[\\'BBB\\']) {\\n        flag = true\\n    }\\n    return flag;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3646993,
                "title": "java-6-lines-of-code",
                "content": "```\\npublic boolean winnerOfGame(String s) {\\n\\tvar a = s.toCharArray();\\n\\tint count=0;\\n\\tfor (int i=0;i<a.length-2;i++){\\n\\t\\tif (a[i]==a[i+1]&&a[i+1]==a[i+2]) count += a[i]==\\'A\\' ? 1 : -1 ;\\n\\t}\\n\\treturn cnt>0;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean winnerOfGame(String s) {\\n\\tvar a = s.toCharArray();\\n\\tint count=0;\\n\\tfor (int i=0;i<a.length-2;i++){\\n\\t\\tif (a[i]==a[i+1]&&a[i+1]==a[i+2]) count += a[i]==\\'A\\' ? 1 : -1 ;\\n\\t}\\n\\treturn cnt>0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3637844,
                "title": "java-greedy-o-n-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int currALen = 0, countAMoves = 0;\\n        int currBLen = 0, countBMoves = 0;\\n        for (int i = 0; i < colors.length(); i++) {\\n            if (colors.charAt(i) == \\'A\\') {\\n                currALen++;\\n            } else {\\n                countAMoves += Math.max(currALen - 2, 0);\\n                currALen = 0;\\n            }\\n            if (colors.charAt(i) == \\'B\\') {\\n                currBLen++;\\n            } else {\\n                countBMoves += Math.max(currBLen - 2, 0);\\n                currBLen = 0;\\n            }\\n        }\\n        if (currALen > 0) countAMoves += Math.max(currALen - 2, 0);\\n        if (currBLen > 0) countBMoves += Math.max(currBLen - 2, 0);\\n\\n        return countAMoves > countBMoves;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int currALen = 0, countAMoves = 0;\\n        int currBLen = 0, countBMoves = 0;\\n        for (int i = 0; i < colors.length(); i++) {\\n            if (colors.charAt(i) == \\'A\\') {\\n                currALen++;\\n            } else {\\n                countAMoves += Math.max(currALen - 2, 0);\\n                currALen = 0;\\n            }\\n            if (colors.charAt(i) == \\'B\\') {\\n                currBLen++;\\n            } else {\\n                countBMoves += Math.max(currBLen - 2, 0);\\n                currBLen = 0;\\n            }\\n        }\\n        if (currALen > 0) countAMoves += Math.max(currALen - 2, 0);\\n        if (currBLen > 0) countBMoves += Math.max(currBLen - 2, 0);\\n\\n        return countAMoves > countBMoves;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3618080,
                "title": "c-easy-just-do-it",
                "content": "```\\nclass Solution {\\npublic:\\n//Aditi Mahabole\\n    bool winnerOfGame(string colors) {\\n        if (colors.size() <= 2)\\n            return false;\\n        int n = colors.size();\\n        int alice = 0;\\n        int bob = 0;\\n        for(int i=1;i<n-1;i++)\\n        {\\n            if(colors[i] == \\'A\\' && colors[i]==colors[i-1] && colors[i]==colors[i+1])\\n                alice++;\\n            if(colors[i] == \\'B\\' && colors[i]==colors[i-1] && colors[i]==colors[i+1])\\n                bob++;\\n        }\\n        return alice>bob;  \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n//Aditi Mahabole\\n    bool winnerOfGame(string colors) {\\n        if (colors.size() <= 2)\\n            return false;\\n        int n = colors.size();\\n        int alice = 0;\\n        int bob = 0;\\n        for(int i=1;i<n-1;i++)\\n        {\\n            if(colors[i] == \\'A\\' && colors[i]==colors[i-1] && colors[i]==colors[i+1])\\n                alice++;\\n            if(colors[i] == \\'B\\' && colors[i]==colors[i-1] && colors[i]==colors[i+1])\\n                bob++;\\n        }\\n        return alice>bob;  \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3602825,
                "title": "array-parse-and-counting-options-time-o-n-space-o-1",
                "content": "class Solution(object):\\n    def winnerOfGame(self, colors):\\n        \"\"\"\\n        :type colors: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        a_count = 0\\n        b_count = 0\\n        \\n        cur = \\'C\\'\\n        cur_count = 1\\n        for c in colors:\\n            if c == cur:\\n                cur_count += 1\\n            else:\\n                if cur == \\'A\\':\\n                    a_count += max(0, cur_count - 2)\\n                if cur == \\'B\\':\\n                    b_count += max(0, cur_count - 2)\\n                cur = c\\n                cur_count = 1\\n        \\n        if cur == \\'A\\':\\n            a_count += max(0, cur_count - 2)\\n        if cur == \\'B\\':\\n            b_count += max(0, cur_count - 2)\\n            \\n        #print a_count, b_count\\n        return a_count > b_count",
                "solutionTags": [],
                "code": "class Solution(object):\\n    def winnerOfGame(self, colors):\\n        \"\"\"\\n        :type colors: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n        a_count = 0\\n        b_count = 0\\n        \\n        cur = \\'C\\'\\n        cur_count = 1\\n        for c in colors:\\n            if c == cur:\\n                cur_count += 1\\n            else:\\n                if cur == \\'A\\':\\n                    a_count += max(0, cur_count - 2)\\n                if cur == \\'B\\':\\n                    b_count += max(0, cur_count - 2)\\n                cur = c\\n                cur_count = 1\\n        \\n        if cur == \\'A\\':\\n            a_count += max(0, cur_count - 2)\\n        if cur == \\'B\\':\\n            b_count += max(0, cur_count - 2)\\n            \\n        #print a_count, b_count\\n        return a_count > b_count",
                "codeTag": "Java"
            },
            {
                "id": 3592188,
                "title": "very-simple-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        bool f=true;\\n        int a=0;\\n        int b=0;\\n        for(int i=1;i<colors.size();i++){\\n            \\n            if(colors[i]==\\'A\\'& colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\')a++;\\n            if(colors[i]==\\'B\\'& colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\')b++;\\n        }\\n        if(a>b)return true;\\n        if(a<b)return false;\\n        return false;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        bool f=true;\\n        int a=0;\\n        int b=0;\\n        for(int i=1;i<colors.size();i++){\\n            \\n            if(colors[i]==\\'A\\'& colors[i-1]==\\'A\\' && colors[i+1]==\\'A\\')a++;\\n            if(colors[i]==\\'B\\'& colors[i-1]==\\'B\\' && colors[i+1]==\\'B\\')b++;\\n        }\\n        if(a>b)return true;\\n        if(a<b)return false;\\n        return false;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3570812,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSolved a) Flip to monotone increasing\\nb) weekly 347 - min cost to make array equal\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\nint a=0,aw=0;\\nint b=0,bw=0;\\nforeach(char c in colors){\\n if(c==\\'A\\'){ a++;  b=0;\\n           \\n \\n \\n \\n\\n        \\n\\n  if(a==3) {\\n      a--;aw++;\\n  }\\n }\\nelse if(c==\\'B\\'){ \\nb++;a=0;\\n\\nif(b==3){\\n  b--;bw++;\\n}\\n    //Zomatopplayout wrote this after solving weekly contest 347 (min cost to make all arrays equal) and solving binary string monotone increasing\\n\\n} \\n  \\n} \\n   \\n return (aw>bw? true:false);\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\nint a=0,aw=0;\\nint b=0,bw=0;\\nforeach(char c in colors){\\n if(c==\\'A\\'){ a++;  b=0;\\n           \\n \\n \\n \\n\\n        \\n\\n  if(a==3) {\\n      a--;aw++;\\n  }\\n }\\nelse if(c==\\'B\\'){ \\nb++;a=0;\\n\\nif(b==3){\\n  b--;bw++;\\n}\\n    //Zomatopplayout wrote this after solving weekly contest 347 (min cost to make all arrays equal) and solving binary string monotone increasing\\n\\n} \\n  \\n} \\n   \\n return (aw>bw? true:false);\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3570810,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSolved a) Flip to monotone increasing\\nb) weekly 347 - min cost to make array equal\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\nint a=0,aw=0;\\nint b=0,bw=0;\\nforeach(char c in colors){\\n if(c==\\'A\\'){ a++;  b=0;\\n           \\n \\n \\n \\n\\n        \\n\\n  if(a==3) {\\n      a--;aw++;\\n  }\\n }\\nelse if(c==\\'B\\'){ \\nb++;a=0;\\n\\nif(b==3){\\n  b--;bw++;\\n}\\n    //Zomatopplayout wrote this after solving weekly contest 347 (min cost to make all arrays equal) and solving binary string monotone increasing\\n\\n} \\n  \\n} \\n   \\n return (aw>bw? true:false);\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\nint a=0,aw=0;\\nint b=0,bw=0;\\nforeach(char c in colors){\\n if(c==\\'A\\'){ a++;  b=0;\\n           \\n \\n \\n \\n\\n        \\n\\n  if(a==3) {\\n      a--;aw++;\\n  }\\n }\\nelse if(c==\\'B\\'){ \\nb++;a=0;\\n\\nif(b==3){\\n  b--;bw++;\\n}\\n    //Zomatopplayout wrote this after solving weekly contest 347 (min cost to make all arrays equal) and solving binary string monotone increasing\\n\\n} \\n  \\n} \\n   \\n return (aw>bw? true:false);\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3566102,
                "title": "simple-intuitive-solution",
                "content": "# Intuition\\n\\nThe problem you are solving here is essentially determining which player (A or B) has more consecutive appearances of their respective letter in the colors string.\\n\\nThe idea behind the solution is straightforward - traverse the string, for each character, check if it forms a triplet with its previous and next character (i.e., they are all the same). If such a triplet is found, then depending on whether the character is \\'A\\' or \\'B\\', increment the corresponding counter (a or b).\\n\\nThe game\\'s rule is that Player A wins if they have more than Player B, so the function returns True if a is greater than b, and False otherwise.\\n\\n# Approach\\n1. Initialize two counters, a and b, to zero. These counters represent the counts of consecutive appearances for \\'A\\' and \\'B\\', respectively.\\n2. Traverse the string starting from the second character up to the penultimate one (both inclusive). This is because we\\'re looking for triplets, so the first and last characters don\\'t have both a preceding and a following character to form a triplet.\\n3. For each character at index i, check if it forms a triplet with the characters at indices i-1 and i+1 (i.e., they are all the same).\\n  - If they are, then increment the counter corresponding to the character (if the character is \\'A\\', increment a; if \\'B\\', increment b).\\n4. Once the entire string has been traversed, compare the values of a and b. If a > b, then return True, otherwise return False.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(n), where n is the length of the colors string. This is because we\\'re doing a single pass through the string.\\n\\n- Space complexity:\\nThe space complexity is O(1) as we\\'re using a fixed amount of space - the two counters a and b. The input string is not duplicated or manipulated in a way that requires additional space proportional to its size.\\n# Code\\n```\\nclass Solution:\\n  def winnerOfGame(self, colors: str) -> bool:\\n    a = b = 0\\n    \\n    for i in range(1, len(colors) -1):\\n      if colors[i-1] == colors[i+1] == colors[i]:\\n        if colors[i] == \\'A\\':\\n          a += 1\\n        else: \\n          b += 1\\n    # return True if a > b else False\\n    return a > b\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n  def winnerOfGame(self, colors: str) -> bool:\\n    a = b = 0\\n    \\n    for i in range(1, len(colors) -1):\\n      if colors[i-1] == colors[i+1] == colors[i]:\\n        if colors[i] == \\'A\\':\\n          a += 1\\n        else: \\n          b += 1\\n    # return True if a > b else False\\n    return a > b\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3563442,
                "title": "easy-one-line-solution-o-n-time-o-1-space",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        return 0 < sum(1 if 3*\\'A\\' == colors[i:i+3] else -1 if 3*\\'B\\' == colors[i:i+3] else 0 for i in range(len(colors)-2))\\n```\\n\\nPlease let me know if any improvements can be made.\\n\\nThanks",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        return 0 < sum(1 if 3*\\'A\\' == colors[i:i+3] else -1 if 3*\\'B\\' == colors[i:i+3] else 0 for i in range(len(colors)-2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3563438,
                "title": "easy-one-line-solution-o-n-time-o-1-space",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        return 0 < sum(1 if 3*\\'A\\' == colors[i:i+3] else -1 if 3*\\'B\\' == colors[i:i+3] else 0 for i in range(len(colors)-2))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        return 0 < sum(1 if 3*\\'A\\' == colors[i:i+3] else -1 if 3*\\'B\\' == colors[i:i+3] else 0 for i in range(len(colors)-2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3543055,
                "title": "java-97-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 97.22%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 5.98%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        if (colors.length() < 3) return false;\\n        int c = 1;\\n        int[] output = new int[2];\\n        char[] arr = colors.toCharArray();\\n        for (int i = 0; i < arr.length - 1; i++) {\\n            if (arr[i] == arr[i + 1]) {\\n                c++;\\n            }else {\\n                output[arr[i] - \\'A\\'] += Math.max(c - 2, 0);\\n                c = 1;\\n            }\\n        }\\n        if (c > 1) {\\n             output[arr[arr.length - 1] - \\'A\\'] += Math.max(c - 2, 0);\\n        }\\n        return output[0] > output[1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        if (colors.length() < 3) return false;\\n        int c = 1;\\n        int[] output = new int[2];\\n        char[] arr = colors.toCharArray();\\n        for (int i = 0; i < arr.length - 1; i++) {\\n            if (arr[i] == arr[i + 1]) {\\n                c++;\\n            }else {\\n                output[arr[i] - \\'A\\'] += Math.max(c - 2, 0);\\n                c = 1;\\n            }\\n        }\\n        if (c > 1) {\\n             output[arr[arr.length - 1] - \\'A\\'] += Math.max(c - 2, 0);\\n        }\\n        return output[0] > output[1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3536817,
                "title": "using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        ArrayList<StringBuilder> alice = new ArrayList<>();\\n        ArrayList<StringBuilder> bob = new ArrayList<>();\\n\\n        StringBuilder sbAlice = new StringBuilder();\\n        StringBuilder sbBob = new StringBuilder();\\n\\n        \\n\\n        for(int i=0; i<colors.length(); i++){\\n            if(colors.charAt(i)==\\'A\\'){\\n                sbAlice.append(\\'A\\');\\n                if(sbBob.length()>=3){\\n                    bob.add(sbBob);\\n                }\\n                sbBob = new StringBuilder();\\n            }\\n            else{\\n                //its \\'B\\'\\n                sbBob.append(\\'B\\');\\n                if(sbAlice.length()>=3){\\n                    alice.add(sbAlice);\\n                }\\n                sbAlice = new StringBuilder();\\n            }\\n        }\\n\\n        if(sbAlice.length()>=3){\\n            alice.add(sbAlice);\\n        }\\n        if(sbBob.length()>=3){\\n            bob.add(sbBob);\\n        }\\n\\n        // System.out.println(alice);\\n        // System.out.println(bob);\\n\\n        //we have stored our desired input \\n        //lets start the game\\n        int aliceIdx = 0;\\n        int bobIdx = 0;\\n        boolean bl = true;\\n        while(true){\\n            //alice turn\\n            if(alice.size()==0){\\n                bl=false;\\n                break;\\n            }\\n            if(alice.get(aliceIdx).length()>=3){\\n                alice.get(aliceIdx).deleteCharAt(0);\\n                //alice cleared his round now\\n            }\\n            else{\\n                aliceIdx += 1;\\n                if(aliceIdx>=alice.size()){\\n                    bl = false;\\n                    break;\\n                }\\n                else{\\n                    alice.get(aliceIdx).deleteCharAt(0);\\n                }\\n            }\\n\\n            //bob return\\n            if(bob.size()==0){\\n                bl=true;\\n                break;\\n            }\\n            if(bob.get(bobIdx).length()>=3){\\n                bob.get(bobIdx).deleteCharAt(0);\\n                //bob cleared his round now\\n            }\\n            else{\\n                bobIdx += 1;\\n                if(bobIdx>=bob.size()){\\n                    bl = true;\\n                    break;\\n                }\\n                else{\\n                    bob.get(bobIdx).deleteCharAt(0);\\n                }\\n            }\\n        }\\n\\n        return bl;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        ArrayList<StringBuilder> alice = new ArrayList<>();\\n        ArrayList<StringBuilder> bob = new ArrayList<>();\\n\\n        StringBuilder sbAlice = new StringBuilder();\\n        StringBuilder sbBob = new StringBuilder();\\n\\n        \\n\\n        for(int i=0; i<colors.length(); i++){\\n            if(colors.charAt(i)==\\'A\\'){\\n                sbAlice.append(\\'A\\');\\n                if(sbBob.length()>=3){\\n                    bob.add(sbBob);\\n                }\\n                sbBob = new StringBuilder();\\n            }\\n            else{\\n                //its \\'B\\'\\n                sbBob.append(\\'B\\');\\n                if(sbAlice.length()>=3){\\n                    alice.add(sbAlice);\\n                }\\n                sbAlice = new StringBuilder();\\n            }\\n        }\\n\\n        if(sbAlice.length()>=3){\\n            alice.add(sbAlice);\\n        }\\n        if(sbBob.length()>=3){\\n            bob.add(sbBob);\\n        }\\n\\n        // System.out.println(alice);\\n        // System.out.println(bob);\\n\\n        //we have stored our desired input \\n        //lets start the game\\n        int aliceIdx = 0;\\n        int bobIdx = 0;\\n        boolean bl = true;\\n        while(true){\\n            //alice turn\\n            if(alice.size()==0){\\n                bl=false;\\n                break;\\n            }\\n            if(alice.get(aliceIdx).length()>=3){\\n                alice.get(aliceIdx).deleteCharAt(0);\\n                //alice cleared his round now\\n            }\\n            else{\\n                aliceIdx += 1;\\n                if(aliceIdx>=alice.size()){\\n                    bl = false;\\n                    break;\\n                }\\n                else{\\n                    alice.get(aliceIdx).deleteCharAt(0);\\n                }\\n            }\\n\\n            //bob return\\n            if(bob.size()==0){\\n                bl=true;\\n                break;\\n            }\\n            if(bob.get(bobIdx).length()>=3){\\n                bob.get(bobIdx).deleteCharAt(0);\\n                //bob cleared his round now\\n            }\\n            else{\\n                bobIdx += 1;\\n                if(bobIdx>=bob.size()){\\n                    bl = true;\\n                    break;\\n                }\\n                else{\\n                    bob.get(bobIdx).deleteCharAt(0);\\n                }\\n            }\\n        }\\n\\n        return bl;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489173,
                "title": "remove-colored-pieces-if-both-neighbors-are-the-same-color",
                "content": "------------------- Easy C++ Solution ---------------------\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n    int ctA = 0;\\n    int ctB = 0;\\n\\n    for (int i = 1; i + 1 < colors.length(); ++i)\\n      if (colors[i - 1] == colors[i] && colors[i] == colors[i + 1])\\n        if (colors[i] == \\'A\\')\\n          ++ctA;\\n        else\\n          ++ctB;\\n\\n    return ctA > ctB;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n    int ctA = 0;\\n    int ctB = 0;\\n\\n    for (int i = 1; i + 1 < colors.length(); ++i)\\n      if (colors[i - 1] == colors[i] && colors[i] == colors[i + 1])\\n        if (colors[i] == \\'A\\')\\n          ++ctA;\\n        else\\n          ++ctB;\\n\\n    return ctA > ctB;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3474622,
                "title": "java-11ms-clean-and-clear-explanations",
                "content": "# Approach\\n1. Fail Fast: if length() < 3, return false as Alice cannot do any move.\\n2. Traverse the string and count how many groups of 3A or 3B you got.\\n3. The one with more groups will win as he/she can do more moves.\\n4. If both of them have same number (0,1,2) Alice will lose as Bob will do last move.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        if (colors.length() < 3) {\\n            return false;\\n        }\\n        int aCount = 0, bCount = 0;\\n        char prevPrev = colors.charAt(0), prev = colors.charAt(1), current;\\n        for (int i = 2; i < colors.length(); i++) {\\n            current = colors.charAt(i);\\n            if (prevPrev == prev && prev == current) {\\n                if (current == \\'A\\') {\\n                    aCount++;\\n                } else {\\n                    bCount++;\\n                }\\n            }\\n            prevPrev = prev;\\n            prev = current;\\n        }\\n        return aCount - bCount > 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        if (colors.length() < 3) {\\n            return false;\\n        }\\n        int aCount = 0, bCount = 0;\\n        char prevPrev = colors.charAt(0), prev = colors.charAt(1), current;\\n        for (int i = 2; i < colors.length(); i++) {\\n            current = colors.charAt(i);\\n            if (prevPrev == prev && prev == current) {\\n                if (current == \\'A\\') {\\n                    aCount++;\\n                } else {\\n                    bCount++;\\n                }\\n            }\\n            prevPrev = prev;\\n            prev = current;\\n        }\\n        return aCount - bCount > 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457249,
                "title": "simple-and-beginner-friendly-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust Simulate the Process.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCounting the Player with maximum number of turns.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int alice=0;\\n        int bob=0;\\n        for(int i=1;i<colors.size()-1;i++){\\n            if(colors[i-1]==colors[i] && colors[i+1]==colors[i] && colors[i]==\\'A\\'){\\n                alice++;\\n            }\\n            if(colors[i-1]==colors[i] && colors[i+1]==colors[i] && colors[i]==\\'B\\'){\\n                bob++;\\n            }\\n        }\\n         return alice>bob;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int alice=0;\\n        int bob=0;\\n        for(int i=1;i<colors.size()-1;i++){\\n            if(colors[i-1]==colors[i] && colors[i+1]==colors[i] && colors[i]==\\'A\\'){\\n                alice++;\\n            }\\n            if(colors[i-1]==colors[i] && colors[i+1]==colors[i] && colors[i]==\\'B\\'){\\n                bob++;\\n            }\\n        }\\n         return alice>bob;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456898,
                "title": "c-faster-than-70-o-n",
                "content": "# Intuition\\nGo through the string and count the number of items in each group.\\n\\n# Approach\\nGo through the string and count the number of items in each group of equal chars.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        var list = new List<int>{1};\\n        var count = 0;\\n        var currA = (colors[0] == \\'A\\');\\n        for (int i = 1; i < colors.Length; i++)\\n        {\\n            if (colors[i - 1] == colors[i])\\n            {\\n                list[list.Count - 1]++;\\n            }\\n            else\\n            {\\n                if (currA)\\n                {\\n                    count += (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n                }\\n                else\\n                {\\n                    count -= (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n                }\\n                currA = !currA;\\n                list.Add(1);\\n            }\\n        }\\n        if (currA)\\n        {\\n            count += (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n        }\\n        else\\n        {\\n            count -= (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n        }\\n        return count > 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        var list = new List<int>{1};\\n        var count = 0;\\n        var currA = (colors[0] == \\'A\\');\\n        for (int i = 1; i < colors.Length; i++)\\n        {\\n            if (colors[i - 1] == colors[i])\\n            {\\n                list[list.Count - 1]++;\\n            }\\n            else\\n            {\\n                if (currA)\\n                {\\n                    count += (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n                }\\n                else\\n                {\\n                    count -= (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n                }\\n                currA = !currA;\\n                list.Add(1);\\n            }\\n        }\\n        if (currA)\\n        {\\n            count += (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n        }\\n        else\\n        {\\n            count -= (list[list.Count - 1] >= 3 ? list[list.Count - 1] - 2: 0);\\n        }\\n        return count > 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3434497,
                "title": "very-simple-python-o-n-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nKeep counting AAA and BBB using sliding window approach.\\n- if string is \"AAAA\" then alice can have 2 moves i.e. \\n- AAA-A and A-AAA\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Count and keep in AAAs and BBBs using sliding window\\n2. Compare if alice count is strictly greater than bobs\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice, bob = 0, 0\\n        for i in range(len(colors)-2):\\n            # create word window\\n            word = colors[i:i+3]\\n            if \"AAA\" == word:\\n                alice += 1\\n            elif \"BBB\" == word:\\n                bob += 1\\n        return alice > bob\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice, bob = 0, 0\\n        for i in range(len(colors)-2):\\n            # create word window\\n            word = colors[i:i+3]\\n            if \"AAA\" == word:\\n                alice += 1\\n            elif \"BBB\" == word:\\n                bob += 1\\n        return alice > bob\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3434151,
                "title": "most-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string col) {\\n      int n = col.size();\\n      int ta =0; // ALICE TOTAL\\n      int tb =0; // BOB TOTAL\\n      int ans1 =1; //alice counter\\n      int ans2 =1; // bob counter\\n\\n      for(int i =1; i<n ; i++){\\n          if(col[i]==col[i-1] && col[i]==\\'A\\'){\\n              ans1++;\\n          }\\n          else{\\n              if(ans1>2){\\n                  ta+= (ans1-2);\\n              }\\n              ans1=1;\\n          }\\n      }\\n      \\n       if(ans1>2){\\n         ta+= (ans1-2);\\n     }\\n\\n    for(int i =1; i<n ; i++){\\n          if(col[i]==col[i-1] && col[i]==\\'B\\'){\\n              ans2++;\\n          }\\n          else{\\n              if(ans2>2){\\n                  tb+= (ans2-2);\\n              }\\n              ans2=1;\\n          }\\n     }\\n\\n      if(ans2>2){\\n         tb+= (ans2-2);\\n        }\\n          \\n      if(ta<=tb){\\n          return false;\\n      }\\n      return true;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string col) {\\n      int n = col.size();\\n      int ta =0; // ALICE TOTAL\\n      int tb =0; // BOB TOTAL\\n      int ans1 =1; //alice counter\\n      int ans2 =1; // bob counter\\n\\n      for(int i =1; i<n ; i++){\\n          if(col[i]==col[i-1] && col[i]==\\'A\\'){\\n              ans1++;\\n          }\\n          else{\\n              if(ans1>2){\\n                  ta+= (ans1-2);\\n              }\\n              ans1=1;\\n          }\\n      }\\n      \\n       if(ans1>2){\\n         ta+= (ans1-2);\\n     }\\n\\n    for(int i =1; i<n ; i++){\\n          if(col[i]==col[i-1] && col[i]==\\'B\\'){\\n              ans2++;\\n          }\\n          else{\\n              if(ans2>2){\\n                  tb+= (ans2-2);\\n              }\\n              ans2=1;\\n          }\\n     }\\n\\n      if(ans2>2){\\n         tb+= (ans2-2);\\n        }\\n          \\n      if(ta<=tb){\\n          return false;\\n      }\\n      return true;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3416373,
                "title": "beats-100-remove-colored-pieces-if-both-neighbors-are-the-same-color",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, d: str) -> bool:\\n        if len(d)>1000:\\n            return d.count(\"AAA\") > d.count(\"BBB\")\\n        else:\\n            if \"AAA\" not in d:\\n                return False\\n            else:\\n                c = [i for i in d]\\n                l = 1\\n                r = 1\\n                c1 = 0\\n                c2 = 0\\n                p = 0\\n                while p<len(c):\\n                    l = 1\\n                    r = 1\\n                    while l<len(c)-1:\\n                        if c[l-1]==\"A\" and c[l]== \"A\" and c[l+1]==\"A\":\\n                            c.pop(l)\\n                            l=l\\n                            c1+=1\\n                            break\\n                        else:\\n                            l+=1\\n                    while r<len(c)-1:\\n                        if c[r-1]==\"B\" and c[r]== \"B\" and c[r+1]==\"B\":\\n                            c.pop(r)\\n                            r=r\\n                            c2+=1\\n                            break\\n                        else:\\n                            r+=1\\n                    if c1>c2:\\n                        return True\\n                        break\\n                    if c2>c1:\\n                        return False\\n                        break\\n                    p+=1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, d: str) -> bool:\\n        if len(d)>1000:\\n            return d.count(\"AAA\") > d.count(\"BBB\")\\n        else:\\n            if \"AAA\" not in d:\\n                return False\\n            else:\\n                c = [i for i in d]\\n                l = 1\\n                r = 1\\n                c1 = 0\\n                c2 = 0\\n                p = 0\\n                while p<len(c):\\n                    l = 1\\n                    r = 1\\n                    while l<len(c)-1:\\n                        if c[l-1]==\"A\" and c[l]== \"A\" and c[l+1]==\"A\":\\n                            c.pop(l)\\n                            l=l\\n                            c1+=1\\n                            break\\n                        else:\\n                            l+=1\\n                    while r<len(c)-1:\\n                        if c[r-1]==\"B\" and c[r]== \"B\" and c[r+1]==\"B\":\\n                            c.pop(r)\\n                            r=r\\n                            c2+=1\\n                            break\\n                        else:\\n                            r+=1\\n                    if c1>c2:\\n                        return True\\n                        break\\n                    if c2>c1:\\n                        return False\\n                        break\\n                    p+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3412336,
                "title": "simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        \\n        int n = s.size();\\n        if(n<=2) return false;\\n        if(n == 3)\\n        {\\n            if(s==\"AAA\") return true;\\n            else return false;\\n        }\\n\\n        int cntA = 0, cntB = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            string st = \"\";\\n            st = s.substr(i, 3);\\n\\n            if(st == \"AAA\") cntA++;\\n            else if(st == \"BBB\") cntB++;\\n        }\\n\\n        if(cntA > cntB) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        \\n        int n = s.size();\\n        if(n<=2) return false;\\n        if(n == 3)\\n        {\\n            if(s==\"AAA\") return true;\\n            else return false;\\n        }\\n\\n        int cntA = 0, cntB = 0;\\n        for(int i=0; i<n; i++)\\n        {\\n            string st = \"\";\\n            st = s.substr(i, 3);\\n\\n            if(st == \"AAA\") cntA++;\\n            else if(st == \"BBB\") cntB++;\\n        }\\n\\n        if(cntA > cntB) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406468,
                "title": "c-golang-greedy",
                "content": "# Code\\n```\\n// C++\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int n = colors.size(), lenA = 0, lenB = 0, total = 0;\\n        for(int i = 0; i < n; i++) {\\n            if(colors[i] == \\'A\\') {\\n                lenA++;\\n                total -= max(0, lenB - 2);\\n                lenB = 0;\\n            } else {\\n                lenB++;\\n                total += max(0, lenA - 2);\\n                lenA = 0;\\n            }\\n        }\\n        total += max(0, lenA - 2) - max(0, lenB - 2); \\n        return total > 0; \\n    }\\n};\\n\\n\\n// Golang\\nfunc max(a, b int) int {\\n    if a > b {return a}\\n    return b\\n}\\n\\nfunc winnerOfGame(colors string) bool {\\n    var n, lenA, lenB, total int = len(colors), 0, 0, 0\\n    for i := 0; i < n; i++ {\\n        if colors[i] == \\'A\\' {\\n            lenA++\\n            total -= max(0, lenB - 2)\\n            lenB = 0\\n        } else {\\n            lenB++\\n            total += max(0, lenA - 2)\\n            lenA = 0\\n        }\\n    }\\n    total += max(0, lenA - 2) - max(0, lenB - 2)\\n    return total > 0\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Go",
                    "String",
                    "Greedy",
                    "Game Theory"
                ],
                "code": "```\\n// C++\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int n = colors.size(), lenA = 0, lenB = 0, total = 0;\\n        for(int i = 0; i < n; i++) {\\n            if(colors[i] == \\'A\\') {\\n                lenA++;\\n                total -= max(0, lenB - 2);\\n                lenB = 0;\\n            } else {\\n                lenB++;\\n                total += max(0, lenA - 2);\\n                lenA = 0;\\n            }\\n        }\\n        total += max(0, lenA - 2) - max(0, lenB - 2); \\n        return total > 0; \\n    }\\n};\\n\\n\\n// Golang\\nfunc max(a, b int) int {\\n    if a > b {return a}\\n    return b\\n}\\n\\nfunc winnerOfGame(colors string) bool {\\n    var n, lenA, lenB, total int = len(colors), 0, 0, 0\\n    for i := 0; i < n; i++ {\\n        if colors[i] == \\'A\\' {\\n            lenA++\\n            total -= max(0, lenB - 2)\\n            lenB = 0\\n        } else {\\n            lenB++\\n            total += max(0, lenA - 2)\\n            lenA = 0\\n        }\\n    }\\n    total += max(0, lenA - 2) - max(0, lenB - 2)\\n    return total > 0\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380229,
                "title": "javascript-100-o-n-time-o-1-space-counting",
                "content": "![image.png](https://assets.leetcode.com/users/images/a51eedf3-1989-41d6-b396-79becd30eb92_1680627779.0768783.png)\\n\\n# Approach\\nAlice and Bob\\'s movements do not affect each other. There is not way for Bob to remove a `B`, such that this would add or remove a valid `A` for Alice.\\nTherefore, we are only interested in the total number of valid moves for Alice and Bob in the beginning of the game. Since Alice starts first, in order for her to win, she needs to have strictly more valid moves than Bob.\\n\\nTo count the total number of valid moves, we simply find all sequences of straight `A` (or `B`) with 3 or more elements.\\n\\n```\\nfunction winnerOfGame(colors) {\\n    let aCnt = 0; // length of the current A sequence\\n    let bCnt = 0; // length of the current B sequence\\n\\n    let validA = 0; // total valid Alice moves\\n    let validB = 0; // total valid Bob moves\\n\\n    for (let i = 0; i < colors.length; i++) {\\n        if (colors[i] == \\'A\\') {\\n            if (aCnt > 1) validA++;\\n\\n            aCnt++;\\n            bCnt = 0;\\n        } else {\\n            if (bCnt > 1) validB++;\\n\\n            aCnt = 0;\\n            bCnt++;\\n        }\\n    }\\n    \\n    return validA > validB;\\n};\\n```\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ where $$n$$ is `colors.length`\\n\\n- Space complexity: $$O(1)$$\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction winnerOfGame(colors) {\\n    let aCnt = 0; // length of the current A sequence\\n    let bCnt = 0; // length of the current B sequence\\n\\n    let validA = 0; // total valid Alice moves\\n    let validB = 0; // total valid Bob moves\\n\\n    for (let i = 0; i < colors.length; i++) {\\n        if (colors[i] == \\'A\\') {\\n            if (aCnt > 1) validA++;\\n\\n            aCnt++;\\n            bCnt = 0;\\n        } else {\\n            if (bCnt > 1) validB++;\\n\\n            aCnt = 0;\\n            bCnt++;\\n        }\\n    }\\n    \\n    return validA > validB;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3373005,
                "title": "easy-java-solution",
                "content": "![upvote.jpeg](https://assets.leetcode.com/users/images/f73a7a6e-6e2a-4105-adb9-3ef4cc417943_1680497482.947127.jpeg)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int a=0;\\n        int b=0;\\n        for(int i=1;i<colors.length()-1;i++){\\n            char ch=colors.charAt(i);\\n            char c=colors.charAt(i-1);\\n            char c1=colors.charAt(i+1);\\n            if(ch==\\'A\\'){\\n                if(c==\\'A\\'&&c1==\\'A\\')a++;\\n            }\\n            else if(ch==\\'B\\'){\\n                if(c==\\'B\\'&&c1==\\'B\\')b++;\\n            }\\n        }\\n        return a>b?true:false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int a=0;\\n        int b=0;\\n        for(int i=1;i<colors.length()-1;i++){\\n            char ch=colors.charAt(i);\\n            char c=colors.charAt(i-1);\\n            char c1=colors.charAt(i+1);\\n            if(ch==\\'A\\'){\\n                if(c==\\'A\\'&&c1==\\'A\\')a++;\\n            }\\n            else if(ch==\\'B\\'){\\n                if(c==\\'B\\'&&c1==\\'B\\')b++;\\n            }\\n        }\\n        return a>b?true:false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366217,
                "title": "well-explained-python-solution-with-o-n-complexity-for-determining-the-winner-based-on-piece-color",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe solution initializes two variables countQualifiedA and countQualifiedB to zero, which will keep track of the number of qualified pieces that can be removed by Alice and Bob, respectively. A piece is qualified if it is colored \\'A\\' or \\'B\\' and its neighboring pieces are also colored the same.\\n\\nNext, the solution iterates over the pieces in the line, starting from the second piece and ending at the second-to-last piece. For each piece, the solution checks if it is qualified to be removed by either Alice or Bob based on its color and the colors of its neighbors. If a piece is qualified for removal, the corresponding counter is incremented.\\n\\nFinally, the solution compares the values of countQualifiedA and countQualifiedB and returns True if countQualifiedA is greater than countQualifiedB, indicating that Alice can remove more qualified pieces than Bob, and False otherwise.\\n\\nOverall, the solution determines the winner of the game by counting the number of qualified pieces that can be removed by each player and comparing them. The solution assumes that both players play optimally, meaning they will always choose to remove the maximum number of qualified pieces available to them.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n\\n        countQualifiedA = 0\\n        countQualifiedB = 0\\n        n = len(colors)\\n\\n        for i in range(1, n-1):\\n            \\n            if colors[i] == \\'A\\' and colors[i-1] == colors[i] and colors[i+1] == colors[i]:\\n                countQualifiedA += 1\\n\\n            if colors[i] == \\'B\\' and colors[i-1] == colors[i] and colors[i+1] == colors[i]:\\n                countQualifiedB += 1\\n            \\n        return True if countQualifiedA > countQualifiedB else False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n\\n        countQualifiedA = 0\\n        countQualifiedB = 0\\n        n = len(colors)\\n\\n        for i in range(1, n-1):\\n            \\n            if colors[i] == \\'A\\' and colors[i-1] == colors[i] and colors[i+1] == colors[i]:\\n                countQualifiedA += 1\\n\\n            if colors[i] == \\'B\\' and colors[i-1] == colors[i] and colors[i+1] == colors[i]:\\n                countQualifiedB += 1\\n            \\n        return True if countQualifiedA > countQualifiedB else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3351304,
                "title": "c-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        int aCount = 0, bCount = 0;\\n        for(int i = 0, j = 0; i <= colors.Length; i++) {\\n            if (i == colors.Length || colors[i] != colors[j]) {\\n                if(colors[j] == \\'A\\')\\n                    aCount += Math.Max(0, (i - j - 2));\\n                else\\n                    bCount += Math.Max(0, (i - j - 2));\\n                \\n                j = i;\\n            }\\n        }\\n\\n        return aCount > bCount;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Greedy"
                ],
                "code": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        int aCount = 0, bCount = 0;\\n        for(int i = 0, j = 0; i <= colors.Length; i++) {\\n            if (i == colors.Length || colors[i] != colors[j]) {\\n                if(colors[j] == \\'A\\')\\n                    aCount += Math.Max(0, (i - j - 2));\\n                else\\n                    bCount += Math.Max(0, (i - j - 2));\\n                \\n                j = i;\\n            }\\n        }\\n\\n        return aCount > bCount;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3349582,
                "title": "very-easy-solution-with-o-n-explanation",
                "content": "# Intuition\\n<!--  -->\\nWe know that number of moves a player can make doesn\\'t depend on the number of moves the other player can make which makes this problem easier. For eg, unlocking a move by another player would mean for example removing a B in between two As which is impossible.\\n\\n# Approach\\n<!--  -->\\n1. Basic check of length < 3 \\n2. Count the moves of A and B \\n3. Compare and return.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!--  $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!--  $$O(1)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        if(colors.length() < 3)\\n            return false;\\n        int amoves =0;\\n        int bmoves =0;\\n        for(int i=1; i< colors.length() -1 ; i++){\\n            if(colors.charAt(i-1) == \\'A\\' && \\n                colors.charAt(i) == \\'A\\' &&\\n                colors.charAt(i+1) == \\'A\\'){\\n                    amoves++;\\n            }\\n            else if(colors.charAt(i-1) == \\'B\\' && \\n                colors.charAt(i) == \\'B\\' &&\\n                colors.charAt(i+1) == \\'B\\'){\\n                    bmoves++;\\n            }\\n        }\\n        return amoves > bmoves ? true: false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        if(colors.length() < 3)\\n            return false;\\n        int amoves =0;\\n        int bmoves =0;\\n        for(int i=1; i< colors.length() -1 ; i++){\\n            if(colors.charAt(i-1) == \\'A\\' && \\n                colors.charAt(i) == \\'A\\' &&\\n                colors.charAt(i+1) == \\'A\\'){\\n                    amoves++;\\n            }\\n            else if(colors.charAt(i-1) == \\'B\\' && \\n                colors.charAt(i) == \\'B\\' &&\\n                colors.charAt(i+1) == \\'B\\'){\\n                    bmoves++;\\n            }\\n        }\\n        return amoves > bmoves ? true: false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3340070,
                "title": "c-greedy",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n            \\n        int n = colors.length();\\n        \\n        int cnt_A = 0;\\n        int cnt_B = 0;\\n        \\n        int curr_cnt = 1;\\n        for(int i=1 ; i<n ; ++i){\\n            if(colors[i] == colors[i - 1]){\\n                curr_cnt += 1;\\n            }\\n            else{\\n                if(colors[i - 1] == \\'A\\') cnt_A += max(0,curr_cnt - 2);\\n                else cnt_B += max(0,curr_cnt - 2);\\n                curr_cnt = 1;\\n            }\\n        }\\n    \\n        if(colors[n - 1] == \\'A\\') cnt_A += max(0,curr_cnt - 2);\\n        else cnt_B += max(0,curr_cnt - 2);  \\n    \\n        return cnt_A > cnt_B ? true : false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n            \\n        int n = colors.length();\\n        \\n        int cnt_A = 0;\\n        int cnt_B = 0;\\n        \\n        int curr_cnt = 1;\\n        for(int i=1 ; i<n ; ++i){\\n            if(colors[i] == colors[i - 1]){\\n                curr_cnt += 1;\\n            }\\n            else{\\n                if(colors[i - 1] == \\'A\\') cnt_A += max(0,curr_cnt - 2);\\n                else cnt_B += max(0,curr_cnt - 2);\\n                curr_cnt = 1;\\n            }\\n        }\\n    \\n        if(colors[n - 1] == \\'A\\') cnt_A += max(0,curr_cnt - 2);\\n        else cnt_B += max(0,curr_cnt - 2);  \\n    \\n        return cnt_A > cnt_B ? true : false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3338235,
                "title": "c-do-as-given-in-question",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cntA=0,cntB=0;\\n        int n = colors.size();\\n        for(int i=0;i<n;)\\n        {\\n            int cA=0,cB=0;\\n            while(colors[i]==\\'A\\')\\n            {\\n                cA++;\\n                i++;\\n            }\\n            if(cA>=2)\\n            cntA+=cA-2;\\n            while(colors[i]==\\'B\\')\\n            {\\n                cB++;\\n                i++;\\n            }\\n            if(cB>=2)\\n            cntB+=cB-2;\\n        }\\n        if(cntA>cntB)\\n        return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cntA=0,cntB=0;\\n        int n = colors.size();\\n        for(int i=0;i<n;)\\n        {\\n            int cA=0,cB=0;\\n            while(colors[i]==\\'A\\')\\n            {\\n                cA++;\\n                i++;\\n            }\\n            if(cA>=2)\\n            cntA+=cA-2;\\n            while(colors[i]==\\'B\\')\\n            {\\n                cB++;\\n                i++;\\n            }\\n            if(cB>=2)\\n            cntB+=cB-2;\\n        }\\n        if(cntA>cntB)\\n        return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3336037,
                "title": "easy-c-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int n=colors.length();\\n        int count_1=0;\\n        int count_2=0;\\n        int i=0;\\n        while(i<n){\\n            if(colors[i]==\\'A\\'){\\n                int num=0;\\n                while(i<n){\\n                    if(colors[i]==\\'B\\'){\\n                        break;\\n\\n                    }\\n                    else{\\n                        num++;\\n\\n                        i++;\\n                    }\\n                }\\n                if(num>=3){\\n                    count_1+=(num-3+1);\\n                }\\n                continue;\\n            }\\n            else{\\n                int num=0;\\n                while(i<n){\\n                    if(colors[i]==\\'A\\'){\\n                        break;\\n                    }\\n                    else{\\n                        num++;\\n                        i++;\\n                    }\\n                }\\n                if(num>=3){\\n                    count_2+=(num-3+1);\\n                }\\n                continue;\\n            }\\n        }\\n        return count_1>count_2;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int n=colors.length();\\n        int count_1=0;\\n        int count_2=0;\\n        int i=0;\\n        while(i<n){\\n            if(colors[i]==\\'A\\'){\\n                int num=0;\\n                while(i<n){\\n                    if(colors[i]==\\'B\\'){\\n                        break;\\n\\n                    }\\n                    else{\\n                        num++;\\n\\n                        i++;\\n                    }\\n                }\\n                if(num>=3){\\n                    count_1+=(num-3+1);\\n                }\\n                continue;\\n            }\\n            else{\\n                int num=0;\\n                while(i<n){\\n                    if(colors[i]==\\'A\\'){\\n                        break;\\n                    }\\n                    else{\\n                        num++;\\n                        i++;\\n                    }\\n                }\\n                if(num>=3){\\n                    count_2+=(num-3+1);\\n                }\\n                continue;\\n            }\\n        }\\n        return count_1>count_2;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3310906,
                "title": "calculate-the-count-of-a-s-and-b-s-with-the-same-neighbors",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- calculate the count of A\\'s and B\\'s with the same Neighbors\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int numOfA = 0, numOfB = 0;\\n        if(colors.length() < 3) return false;\\n        for(int i=1;i<colors.length()-1;i++){\\n            if(colors.charAt(i) == \\'A\\' && colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')  {\\n                numOfA++;\\n            }else if(colors.charAt(i) == \\'B\\' && colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\'){\\n                numOfB++;\\n            }\\n        }\\n        return numOfA > numOfB;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int numOfA = 0, numOfB = 0;\\n        if(colors.length() < 3) return false;\\n        for(int i=1;i<colors.length()-1;i++){\\n            if(colors.charAt(i) == \\'A\\' && colors.charAt(i-1) == \\'A\\' && colors.charAt(i+1) == \\'A\\')  {\\n                numOfA++;\\n            }else if(colors.charAt(i) == \\'B\\' && colors.charAt(i-1) == \\'B\\' && colors.charAt(i+1) == \\'B\\'){\\n                numOfB++;\\n            }\\n        }\\n        return numOfA > numOfB;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288702,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func winnerOfGame(_ colors: String) -> Bool {\\n        \\n        var a = 0\\n        var b = 0\\n\\n        var ca = 0\\n        var cb = 0\\n\\n        for c in colors {\\n            \\n            if c == \"A\" {\\n                ca += 1\\n                cb = 0\\n            }\\n            else {\\n                ca = 0\\n                cb += 1\\n            }\\n\\n            if ca > 2 { a += 1 }\\n            if cb > 2 { b += 1 }\\n        }\\n\\n        return a > b\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func winnerOfGame(_ colors: String) -> Bool {\\n        \\n        var a = 0\\n        var b = 0\\n\\n        var ca = 0\\n        var cb = 0\\n\\n        for c in colors {\\n            \\n            if c == \"A\" {\\n                ca += 1\\n                cb = 0\\n            }\\n            else {\\n                ca = 0\\n                cb += 1\\n            }\\n\\n            if ca > 2 { a += 1 }\\n            if cb > 2 { b += 1 }\\n        }\\n\\n        return a > b\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3280568,
                "title": "c-7-line",
                "content": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cnt[128] = {};\\n        int pre = 0, len = 0;\\n        for(auto c:colors){\\n            c == pre ? len++ : len=1;\\n            if(len>2) cnt[c]++;\\n            pre = c;\\n        }\\n        return cnt[\\'A\\'] > 0 && cnt[\\'A\\'] > cnt[\\'B\\'];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int cnt[128] = {};\\n        int pre = 0, len = 0;\\n        for(auto c:colors){\\n            c == pre ? len++ : len=1;\\n            if(len>2) cnt[c]++;\\n            pre = c;\\n        }\\n        return cnt[\\'A\\'] > 0 && cnt[\\'A\\'] > cnt[\\'B\\'];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3279231,
                "title": "java-time-o-n-space-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        boolean result = false;\\n        if(colors.length()<2)\\n            result = false;\\n        else {\\n            int _AliceCountTriplets = 0;\\n            int _BobCountTriplets = 0;\\n            for(int i=2; i<colors.length();i++){\\n                if(colors.charAt(i) == \\'A\\' && colors.charAt(i-1) == \\'A\\' && colors.charAt(i-2) == \\'A\\')\\n                    _AliceCountTriplets++;\\n                else if(colors.charAt(i) == \\'B\\' && colors.charAt(i-1) == \\'B\\' && colors.charAt(i-2) == \\'B\\')\\n                    _BobCountTriplets++;\\n            }\\n\\n            result = _AliceCountTriplets>_BobCountTriplets;\\n\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        boolean result = false;\\n        if(colors.length()<2)\\n            result = false;\\n        else {\\n            int _AliceCountTriplets = 0;\\n            int _BobCountTriplets = 0;\\n            for(int i=2; i<colors.length();i++){\\n                if(colors.charAt(i) == \\'A\\' && colors.charAt(i-1) == \\'A\\' && colors.charAt(i-2) == \\'A\\')\\n                    _AliceCountTriplets++;\\n                else if(colors.charAt(i) == \\'B\\' && colors.charAt(i-1) == \\'B\\' && colors.charAt(i-2) == \\'B\\')\\n                    _BobCountTriplets++;\\n            }\\n\\n            result = _AliceCountTriplets>_BobCountTriplets;\\n\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3264511,
                "title": "python3-three-solutions-beats-95-uesrs-beginner-friendly",
                "content": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        consecAs,consecBs=0,0\\n        for i in range(len(colors)-2):\\n            if colors[i:i+3]==\\'AAA\\':\\n                consecAs+=1\\n        for i in range(len(colors)-2):\\n            if colors[i:i+3]==\\'BBB\\':\\n                consecBs+=1\\n        return consecAs>consecBs\\n```\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        consecAs,consecBs=0,0\\n        for i in range(2,len(colors)):\\n            if colors[i-1]==colors[i-2]==colors[i]==\\'A\\':\\n                consecAs+=1\\n            if colors[i-1]==colors[i-2]==colors[i]==\\'B\\':\\n                consecBs+=1\\n        return consecAs>consecBs\\n```\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        consecAs,consecBs=0,0\\n        prevChar=\\'C\\'\\n        count=0\\n        for curChar in colors:\\n            if prevChar==curChar:\\n                count+=1\\n                if count>2:\\n                    if curChar==\\'A\\':\\n                        consecAs+=1\\n                    else:\\n                        consecBs+=1\\n            else:\\n                count=1\\n            prevChar=curChar\\n        return consecAs>consecBs\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        consecAs,consecBs=0,0\\n        for i in range(len(colors)-2):\\n            if colors[i:i+3]==\\'AAA\\':\\n                consecAs+=1\\n        for i in range(len(colors)-2):\\n            if colors[i:i+3]==\\'BBB\\':\\n                consecBs+=1\\n        return consecAs>consecBs\\n```\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        consecAs,consecBs=0,0\\n        for i in range(2,len(colors)):\\n            if colors[i-1]==colors[i-2]==colors[i]==\\'A\\':\\n                consecAs+=1\\n            if colors[i-1]==colors[i-2]==colors[i]==\\'B\\':\\n                consecBs+=1\\n        return consecAs>consecBs\\n```\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        consecAs,consecBs=0,0\\n        prevChar=\\'C\\'\\n        count=0\\n        for curChar in colors:\\n            if prevChar==curChar:\\n                count+=1\\n                if count>2:\\n                    if curChar==\\'A\\':\\n                        consecAs+=1\\n                    else:\\n                        consecBs+=1\\n            else:\\n                count=1\\n            prevChar=curChar\\n        return consecAs>consecBs\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3249066,
                "title": "easy-and-clean-solution-using-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countALenGreateThanThree = 0;\\n        int countBLenGreateThanThree = 0;\\n        int aCount = 0;\\n        int bCount = 0;\\n        for(int i = 0; i < colors.length(); i++)\\n        {\\n            if(colors.charAt(i) == \\'A\\')\\n            {\\n                aCount++;\\n                if(aCount >= 3)\\n                countALenGreateThanThree++;\\n                bCount = 0;\\n            }\\n            else if(colors.charAt(i) == \\'B\\')\\n            {\\n                bCount++;\\n                if(bCount >= 3)\\n                countBLenGreateThanThree++;\\n                aCount = 0;\\n            }\\n        }\\n        return countALenGreateThanThree > countBLenGreateThanThree;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean winnerOfGame(String colors) {\\n        int countALenGreateThanThree = 0;\\n        int countBLenGreateThanThree = 0;\\n        int aCount = 0;\\n        int bCount = 0;\\n        for(int i = 0; i < colors.length(); i++)\\n        {\\n            if(colors.charAt(i) == \\'A\\')\\n            {\\n                aCount++;\\n                if(aCount >= 3)\\n                countALenGreateThanThree++;\\n                bCount = 0;\\n            }\\n            else if(colors.charAt(i) == \\'B\\')\\n            {\\n                bCount++;\\n                if(bCount >= 3)\\n                countBLenGreateThanThree++;\\n                aCount = 0;\\n            }\\n        }\\n        return countALenGreateThanThree > countBLenGreateThanThree;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246645,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn winner_of_game(colors: String) -> bool {\\n        let mut cnts = [0; 2];\\n        let mut cur = colors.chars().next().unwrap();\\n        let mut count = 0;\\n        for c in colors.chars() {\\n            if c == cur {\\n                count += 1;\\n                if count >= 3 {\\n                    cnts[c as usize - \\'A\\' as usize] += 1;\\n                }\\n            } else {\\n                cur = c;\\n                count = 1;\\n            }\\n        }\\n        cnts[0] > cnts[1]\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn winner_of_game(colors: String) -> bool {\\n        let mut cnts = [0; 2];\\n        let mut cur = colors.chars().next().unwrap();\\n        let mut count = 0;\\n        for c in colors.chars() {\\n            if c == cur {\\n                count += 1;\\n                if count >= 3 {\\n                    cnts[c as usize - \\'A\\' as usize] += 1;\\n                }\\n            } else {\\n                cur = c;\\n                count = 1;\\n            }\\n        }\\n        cnts[0] > cnts[1]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3245787,
                "title": "just-counting-aaa-and-bbb-o-n",
                "content": "# Intuition\\nJust find count of AAA and BBB\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nCounting\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        int a = 0;\\n        int b = 0;\\n        \\n        for (int i = 1; i < colors.Length - 1; i++)\\n        {\\n            if (colors[i] == colors[i - 1] && colors[i] == colors[i + 1])\\n            {\\n                if (colors[i] == \\'A\\')\\n                    a ++;\\n                else \\n                    b++;\\n            }\\n        }\\n        \\n        return a > b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public bool WinnerOfGame(string colors) {\\n        int a = 0;\\n        int b = 0;\\n        \\n        for (int i = 1; i < colors.Length - 1; i++)\\n        {\\n            if (colors[i] == colors[i - 1] && colors[i] == colors[i + 1])\\n            {\\n                if (colors[i] == \\'A\\')\\n                    a ++;\\n                else \\n                    b++;\\n            }\\n        }\\n        \\n        return a > b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243300,
                "title": "greedy-c-simple-and-short-approach",
                "content": "```\\nbool winnerOfGame(string str){\\n        int n = str.size(),a = 0,b = 0,cnta = 0,cntb = 0,ind = 0;\\n        while(ind<n){\\n            while(ind<n && str[ind]==\\'A\\'){\\n                ind++;\\n                cnta++;\\n            }\\n            a+=max(0,cnta-2); cnta = 0;\\n            while(ind<n && str[ind]==\\'B\\'){\\n                ind++;\\n                cntb++;\\n            }\\n            b+=max(0,cntb-2); cntb = 0;\\n        }\\n        return a>b;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Counting"
                ],
                "code": "```\\nbool winnerOfGame(string str){\\n        int n = str.size(),a = 0,b = 0,cnta = 0,cntb = 0,ind = 0;\\n        while(ind<n){\\n            while(ind<n && str[ind]==\\'A\\'){\\n                ind++;\\n                cnta++;\\n            }\\n            a+=max(0,cnta-2); cnta = 0;\\n            while(ind<n && str[ind]==\\'B\\'){\\n                ind++;\\n                cntb++;\\n            }\\n            b+=max(0,cntb-2); cntb = 0;\\n        }\\n        return a>b;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3228384,
                "title": "simply-count-scores-for-both-alice-and-bob",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int alice=0,bob=0;\\n        if(s.size()<3)\\n        return false;\\n        for(int i=1;i<s.size();i++)\\n        {\\n            if(i+1<s.size())\\n            if(s[i-1]==s[i+1] &&s[i]==s[i-1])\\n            {\\n            if(s[i]==\\'A\\')\\n            alice++;\\n            else bob++;\\n            }  \\n        }\\n        return alice>bob;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string s) {\\n        int alice=0,bob=0;\\n        if(s.size()<3)\\n        return false;\\n        for(int i=1;i<s.size();i++)\\n        {\\n            if(i+1<s.size())\\n            if(s[i-1]==s[i+1] &&s[i]==s[i-1])\\n            {\\n            if(s[i]==\\'A\\')\\n            alice++;\\n            else bob++;\\n            }  \\n        }\\n        return alice>bob;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3222659,
                "title": "o-1-space-o-n-time",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        A = 0\\n        B = 0\\n        cur_A = 0\\n        cur_B = 0\\n        for c in colors:\\n            if c == \"A\":\\n                cur_A += 1\\n                cur_B = 0\\n            else:\\n                cur_B += 1\\n                cur_A = 0\\n            \\n            if cur_A >= 3:\\n                A += 1\\n            if cur_B >= 3:\\n                B += 1\\n            \\n        if A > B:\\n            return True\\n\\n        return False\\n```",
                "solutionTags": [
                    "Python3",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        A = 0\\n        B = 0\\n        cur_A = 0\\n        cur_B = 0\\n        for c in colors:\\n            if c == \"A\":\\n                cur_A += 1\\n                cur_B = 0\\n            else:\\n                cur_B += 1\\n                cur_A = 0\\n            \\n            if cur_A >= 3:\\n                A += 1\\n            if cur_B >= 3:\\n                B += 1\\n            \\n        if A > B:\\n            return True\\n\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3195212,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe only care about the number of consecutive elements of the same color. \\nSince we can\\'t remove all the letters of one color, we can look per interval. Just rolling window of size 3\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf the previous letter is the same as the current and as the following then we have one move possible. We have to exclude the sides as possible moves. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ since we have to look at all possible letters.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$ no extra memory required.\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        move_A=0\\n        move_B=0\\n        for idx,letter in enumerate(colors):\\n            if idx>0 and idx<len(colors)-1:\\n                if letter==colors[idx-1] and letter==colors[idx+1]:\\n                    if letter==\\'A\\':\\n                        move_A+=1\\n                    else:\\n                        move_B+=1\\n        \\n        if move_A==0 or move_B>=move_A:\\n            return False\\n        else:\\n            return True\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        move_A=0\\n        move_B=0\\n        for idx,letter in enumerate(colors):\\n            if idx>0 and idx<len(colors)-1:\\n                if letter==colors[idx-1] and letter==colors[idx+1]:\\n                    if letter==\\'A\\':\\n                        move_A+=1\\n                    else:\\n                        move_B+=1\\n        \\n        if move_A==0 or move_B>=move_A:\\n            return False\\n        else:\\n            return True\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186964,
                "title": "python-simple-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        # \\'A\\', \\'B\\' count\\n        a = 0\\n        b = 0\\n        \\n        # the number they can remove\\n        alice = 0\\n        bob = 0\\n\\n        for ch in colors:\\n            if ch==\\'A\\': \\n                a += 1\\n                if b>=2: bob-=1\\n                b = 0\\n            else:\\n                if a>=2: alice-=1\\n                a = 0\\n                b += 1\\n\\n            if a>=2: alice+=1\\n            if b>=2: bob+=1\\n\\n        if b>=2: bob-=1\\n        if a>=2: alice-=1\\n\\n        return alice>bob\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        # \\'A\\', \\'B\\' count\\n        a = 0\\n        b = 0\\n        \\n        # the number they can remove\\n        alice = 0\\n        bob = 0\\n\\n        for ch in colors:\\n            if ch==\\'A\\': \\n                a += 1\\n                if b>=2: bob-=1\\n                b = 0\\n            else:\\n                if a>=2: alice-=1\\n                a = 0\\n                b += 1\\n\\n            if a>=2: alice+=1\\n            if b>=2: bob+=1\\n\\n        if b>=2: bob-=1\\n        if a>=2: alice-=1\\n\\n        return alice>bob\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3173134,
                "title": "very-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=1,b=1 ;\\n        int aa=0 , bb=0 ;\\n        int n=colors.size();\\n        int i=1,j=0;\\n        if(n<3) return false ;\\n        \\n            while(j<n){\\n                if(i<n && colors[i]==\\'A\\' && colors[j]==\\'A\\'){\\n                    a++ ;\\n                   // if(a>aa) aa=a ;\\n                }\\n                else if(i<n && colors[i]==\\'B\\' && colors[j]==\\'B\\'){\\n                    b++;\\n                   // if(b>bb) bb=b ;\\n                }\\n                else{\\n                    if(a>=3) aa+=a-2 ;\\n                    if(b>=3) bb+=b-2 ;\\n\\n                    a=1;\\n                    b=1 ;\\n                \\n                }\\n                i++;\\n                j++;\\n            }\\n        if(aa<1) return false ;\\n\\n\\n        \\n        \\n        if(aa>bb ) return true ;\\n        else  return false ;\\n\\n        return 1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=1,b=1 ;\\n        int aa=0 , bb=0 ;\\n        int n=colors.size();\\n        int i=1,j=0;\\n        if(n<3) return false ;\\n        \\n            while(j<n){\\n                if(i<n && colors[i]==\\'A\\' && colors[j]==\\'A\\'){\\n                    a++ ;\\n                   // if(a>aa) aa=a ;\\n                }\\n                else if(i<n && colors[i]==\\'B\\' && colors[j]==\\'B\\'){\\n                    b++;\\n                   // if(b>bb) bb=b ;\\n                }\\n                else{\\n                    if(a>=3) aa+=a-2 ;\\n                    if(b>=3) bb+=b-2 ;\\n\\n                    a=1;\\n                    b=1 ;\\n                \\n                }\\n                i++;\\n                j++;\\n            }\\n        if(aa<1) return false ;\\n\\n\\n        \\n        \\n        if(aa>bb ) return true ;\\n        else  return false ;\\n\\n        return 1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3164719,
                "title": "c-short-and-concise-c-solution-o-n-time-complexity",
                "content": "# Approach\\nWe make two variables count_a and count_b to count no of consecutively occuring three As and three Bs.\\nAs the game starts with ALice, if count_a =0 i.e. alice doesnt have any three consecutively occuring As then return false\\nElse if count_a is greater than count_b return true\\nElse return false.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int count_a=0,count_b=0;\\n        for(int i=0;i<colors.size();i++){\\n            if(colors[i]==\\'A\\'&&colors[i+1]==\\'A\\'&&colors[i+2]==\\'A\\')count_a+=1;\\n            else if(colors[i]==\\'B\\'&&colors[i+1]==\\'B\\'&&colors[i+2]==\\'B\\')count_b+=1;\\n        }\\n        if(count_a==0) return false;\\n        else if(count_a>count_b) return true;\\n        else return false;\\n    }\\n};\\n//  PLEASE UPVOTE IF THE ANSWER WAS HELFUL...THANK YOU\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int count_a=0,count_b=0;\\n        for(int i=0;i<colors.size();i++){\\n            if(colors[i]==\\'A\\'&&colors[i+1]==\\'A\\'&&colors[i+2]==\\'A\\')count_a+=1;\\n            else if(colors[i]==\\'B\\'&&colors[i+1]==\\'B\\'&&colors[i+2]==\\'B\\')count_b+=1;\\n        }\\n        if(count_a==0) return false;\\n        else if(count_a>count_b) return true;\\n        else return false;\\n    }\\n};\\n//  PLEASE UPVOTE IF THE ANSWER WAS HELFUL...THANK YOU\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3161948,
                "title": "python-simple-2-step-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ncompare behind current and next instances of A and B and add them to respective score counts. then the person with highest score wins.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a,b=0,0\\n        for i in range(1,len(colors)-1):\\n            if colors[i-1]==colors[i]==colors[i+1]==\"A\":\\n                a+=1\\n            elif colors[i-1]==colors[i]==colors[i+1]==\"B\":\\n                b+=1\\n        return a>b\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        a,b=0,0\\n        for i in range(1,len(colors)-1):\\n            if colors[i-1]==colors[i]==colors[i+1]==\"A\":\\n                a+=1\\n            elif colors[i-1]==colors[i]==colors[i+1]==\"B\":\\n                b+=1\\n        return a>b\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3139294,
                "title": "c-clean-short-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0,b=0;\\n        for(int i=1;i<colors.size()-1;i++)\\n        {\\n            if(colors[i]==colors[i-1] && colors[i]==colors[i+1])\\n              {\\n                  if(colors[i]==\\'A\\')\\n                  a++;\\n                  else\\n                  b++;\\n              }\\n        }\\n        if(a>b)\\n        return 1;\\n\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string colors) {\\n        int a=0,b=0;\\n        for(int i=1;i<colors.size()-1;i++)\\n        {\\n            if(colors[i]==colors[i-1] && colors[i]==colors[i+1])\\n              {\\n                  if(colors[i]==\\'A\\')\\n                  a++;\\n                  else\\n                  b++;\\n              }\\n        }\\n        if(a>b)\\n        return 1;\\n\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3134608,
                "title": "c-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string v) {\\n        \\nint n = v.size();\\nint a =0;\\nint b = 0;\\nfor(int i=1; i<n-1; i++){\\n    if(v[i]==\\'A\\' && v[i-1]==\\'A\\' && v[i+1]==\\'A\\'){\\na++;\\n    }\\n    else if(v[i]==\\'B\\' && v[i-1]==\\'B\\' && v[i+1]==\\'B\\'){\\nb++;\\n    }\\n}\\n\\nif(a>b){\\n    return true;\\n}\\nreturn false;\\n\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool winnerOfGame(string v) {\\n        \\nint n = v.size();\\nint a =0;\\nint b = 0;\\nfor(int i=1; i<n-1; i++){\\n    if(v[i]==\\'A\\' && v[i-1]==\\'A\\' && v[i+1]==\\'A\\'){\\na++;\\n    }\\n    else if(v[i]==\\'B\\' && v[i-1]==\\'B\\' && v[i+1]==\\'B\\'){\\nb++;\\n    }\\n}\\n\\nif(a>b){\\n    return true;\\n}\\nreturn false;\\n\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3133076,
                "title": "i-win",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice = bob = 0\\n        for i in range(1, len(colors)-1):\\n            alice += (colors[i-1:i+2] == \"AAA\")\\n            bob += (colors[i-1:i+2] == \"BBB\")\\n\\n        return alice > bob\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def winnerOfGame(self, colors: str) -> bool:\\n        alice = bob = 0\\n        for i in range(1, len(colors)-1):\\n            alice += (colors[i-1:i+2] == \"AAA\")\\n            bob += (colors[i-1:i+2] == \"BBB\")\\n\\n        return alice > bob\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1702451,
                "content": [
                    {
                        "username": "nilath",
                        "content": "I guess this should be easy problem."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "you guess wrong"
                    },
                    {
                        "username": "patelishan320",
                        "content": "easy tip to solve is to count number of \"AAA\" and \"BBB\""
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be easy."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "This should be medium. ( TLE error my friend, stop commenting without knowing)"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Solve Easy Increase Medium."
                    }
                ]
            },
            {
                "id": 1959038,
                "content": [
                    {
                        "username": "nilath",
                        "content": "I guess this should be easy problem."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "you guess wrong"
                    },
                    {
                        "username": "patelishan320",
                        "content": "easy tip to solve is to count number of \"AAA\" and \"BBB\""
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be easy."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "This should be medium. ( TLE error my friend, stop commenting without knowing)"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Solve Easy Increase Medium."
                    }
                ]
            },
            {
                "id": 1824542,
                "content": [
                    {
                        "username": "nilath",
                        "content": "I guess this should be easy problem."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "you guess wrong"
                    },
                    {
                        "username": "patelishan320",
                        "content": "easy tip to solve is to count number of \"AAA\" and \"BBB\""
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be easy."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "This should be medium. ( TLE error my friend, stop commenting without knowing)"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Solve Easy Increase Medium."
                    }
                ]
            },
            {
                "id": 1815228,
                "content": [
                    {
                        "username": "nilath",
                        "content": "I guess this should be easy problem."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "you guess wrong"
                    },
                    {
                        "username": "patelishan320",
                        "content": "easy tip to solve is to count number of \"AAA\" and \"BBB\""
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be easy."
                    },
                    {
                        "username": "nilath",
                        "content": "[@M1dn1ght](/M1dn1ght) If you think like, you are not talented. Find another job."
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "This should be medium. ( TLE error my friend, stop commenting without knowing)"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Solve Easy Increase Medium."
                    }
                ]
            }
        ]
    }
]