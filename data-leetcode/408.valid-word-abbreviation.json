[
    {
        "title": "String to Integer (atoi)",
        "question_content": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\n\n\tRead in and ignore any leading whitespace.\n\tCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n\tRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\n\tConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\n\tIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\n\tReturn the integer as the final result.\n\nNote:\n\n\tOnly the space character ' ' is considered a whitespace character.\n\tDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\n\n&nbsp;\nExample 1:\n\nInput: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"42\" (\"42\" is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\n\nExample 2:\n\nInput: s = \"   -42\"\nOutput: -42\nExplanation:\nStep 1: \"   -42\" (leading whitespace is read and ignored)\n            ^\nStep 2: \"   -42\" ('-' is read, so the result should be negative)\n             ^\nStep 3: \"   -42\" (\"42\" is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\n\nExample 3:\n\nInput: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n         ^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n         ^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\n\n&nbsp;\nConstraints:\n\n\t0 <= s.length <= 200\n\ts consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.",
        "solutions": [
            {
                "id": 4654,
                "title": "my-simple-solution",
                "content": "I think we only need to handle four cases: \\n\\n 1. discards all leading whitespaces\\n 2. sign of the number\\n 3. overflow\\n 4. invalid input\\n\\nIs there any better solution? Thanks for pointing out!\\n\\n    int atoi(const char *str) {\\n        int sign = 1, base = 0, i = 0;\\n        while (str[i] == ' ') { i++; }\\n        if (str[i] == '-' || str[i] == '+') {\\n            sign = 1 - 2 * (str[i++] == '-'); \\n        }\\n        while (str[i] >= '0' && str[i] <= '9') {\\n            if (base >  INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - '0' > 7)) {\\n                if (sign == 1) return INT_MAX;\\n                else return INT_MIN;\\n            }\\n            base  = 10 * base + (str[i++] - '0');\\n        }\\n        return base * sign;\\n    }",
                "solutionTags": [],
                "code": "I think we only need to handle four cases: \\n\\n 1. discards all leading whitespaces\\n 2. sign of the number\\n 3. overflow\\n 4. invalid input\\n\\nIs there any better solution? Thanks for pointing out!\\n\\n    int atoi(const char *str) {\\n        int sign = 1, base = 0, i = 0;\\n        while (str[i] == ' ') { i++; }\\n        if (str[i] == '-' || str[i] == '+') {\\n            sign = 1 - 2 * (str[i++] == '-'); \\n        }\\n        while (str[i] >= '0' && str[i] <= '9') {\\n            if (base >  INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - '0' > 7)) {\\n                if (sign == 1) return INT_MAX;\\n                else return INT_MIN;\\n            }\\n            base  = 10 * base + (str[i++] - '0');\\n        }\\n        return base * sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4643,
                "title": "java-solution-with-4-steps-explanations",
                "content": "    public int myAtoi(String str) {\\n        int index = 0, sign = 1, total = 0;\\n        //1. Empty string\\n        if(str.length() == 0) return 0;\\n\\n        //2. Remove Spaces\\n        while(str.charAt(index) == ' ' && index < str.length())\\n            index ++;\\n\\n        //3. Handle signs\\n        if(str.charAt(index) == '+' || str.charAt(index) == '-'){\\n            sign = str.charAt(index) == '+' ? 1 : -1;\\n            index ++;\\n        }\\n        \\n        //4. Convert number and avoid overflow\\n        while(index < str.length()){\\n            int digit = str.charAt(index) - '0';\\n            if(digit < 0 || digit > 9) break;\\n\\n            //check if total will be overflow after 10 times and add digit\\n            if(Integer.MAX_VALUE/10 < total || Integer.MAX_VALUE/10 == total && Integer.MAX_VALUE %10 < digit)\\n                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n\\n            total = 10 * total + digit;\\n            index ++;\\n        }\\n        return total * sign;\\n    }",
                "solutionTags": [],
                "code": "    public int myAtoi(String str) {\\n        int index = 0, sign = 1, total = 0;\\n        //1. Empty string\\n        if(str.length() == 0) return 0;\\n\\n        //2. Remove Spaces\\n        while(str.charAt(index) == ' ' && index < str.length())\\n            index ++;\\n\\n        //3. Handle signs\\n        if(str.charAt(index) == '+' || str.charAt(index) == '-'){\\n            sign = str.charAt(index) == '+' ? 1 : -1;\\n            index ++;\\n        }\\n        \\n        //4. Convert number and avoid overflow\\n        while(index < str.length()){\\n            int digit = str.charAt(index) - '0';\\n            if(digit < 0 || digit > 9) break;\\n\\n            //check if total will be overflow after 10 times and add digit\\n            if(Integer.MAX_VALUE/10 < total || Integer.MAX_VALUE/10 == total && Integer.MAX_VALUE %10 < digit)\\n                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n\\n            total = 10 * total + digit;\\n            index ++;\\n        }\\n        return total * sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1402936,
                "title": "java-c-simple-pictorial-explanation-32-bit-int-easy",
                "content": "<img src = \"https://assets.leetcode.com/users/images/de56766c-2376-41e3-bd34-8f6e762249ff_1642241065.7559516.jpeg\" width = 100%>\\n\\n<img src = \"https://assets.leetcode.com/users/images/e632f7e8-9a2e-4416-a58d-85dbf2428473_1642242240.3520854.jpeg\" width = 100%>\\n\\n<u>**BASIC IDEA:**</u>\\n\\n1. **Start traversing the provided string**(`str`)\\n2. **Skip all the leading white spaces**.  eg:   `\"  -123456\"  --> \"-123456\"`\\n3. **Check for sign cases**(+-). eg: `\"-123456\"`. If `+`, then set the variable(boolean) `isNegative` to `true` and if it\\'s `-`, set `isNegative` to `false`\\n4. **Iterate over the next remaining characters and keep adding them in `result` by converting the digits**(in character form) **to integer form.** eg: `\"-123456\" --> -123456`, until the **non-digit character** is found.\\n\\n<u>**NOTE:**</u> Logic is implemented in such a way that after performing above 3 steps, if it finds characters(English letters (lower-case and upper-case), digits (0-9), \\' \\', \\'+\\', \\'-\\', and \\'.\\') before the digit character, it will give output as 0(zero) eg: `\"abc-123456\" --> 0` and if it finds characters(English letters (lower-case and upper-case), digits (0-9), \\' \\', \\'+\\', \\'-\\', and \\'.\\')  after the digit characters, it will return the number eg: `\"-123456abc\" --> -123456`\\n<br>\\n\\n**C++ / JAVA CODE:**\\n<iframe src=\"https://leetcode.com/playground/SkWRoqDm/shared\" frameBorder=\"0\" width=\"100%\" height=\"1000\"></iframe>\\n\\n\\n* **Let\\'s understand what** \\n`if(result > (Integer.MAX_VALUE / 10) || (result == (Integer.MAX_VALUE / 10) && digit > 7)){`\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;`\\n`}`\\n**means in <u>JAVA</u>? You will be able to figure out this statement easily for <u>C++</u> code too.**\\n\\n\\t* `result > (Integer.MAX_VALUE / 10)` means:\\n\\tSuppose, \\n\\t`result = 214748365`(9 digits)\\n\\t`Integer.MAX_VALUE = 2147483647`(10 digits) and `Integer.MAX_VALUE / 10 = 214748364`(9 digits)\\n\\tHere, it is clearly evident that `result > Integer.MAX_VALUE / 10`( i.e. 214748365 > 214748364) and if we try to add even 0(zero) in result `214748365`(9 digits), the number will become `2147483650`(10 digits) which is obviously greater than `2147483647(Integer.MAX_VALUE which is of 10 digits)`. So even before adding `0(zero) or any other digit`, we return the `Integer.MAX_VALUE` or `Integer.MIN_VALUE`, according to the sign case, in order <u>to avoid integer overflow.</u>\\n\\n\\n\\t* And, `result == (Integer.MAX_VALUE / 10) && digit > 7` means:\\n\\tSuppose, \\n\\t`result = 214748364`(9 digits), and\\n\\t`Integer.MAX_VALUE / 10 = 214748364`(9 digits)\\n\\tNow, if the result is equal to the Integer.MAX_VALUE / 10 (214748364 == 214748364) and the digit is greater than 7 i.e. `digit > 7` and if we try to add 8(assume the digit greater than 7 to be 8) to the result, then the number will become `2147483648`(10 digits), which will result in integer overflow. So, even before adding the digit which is greater than 7, we return the `Integer.MAX_VALUE` or `Integer.MIN_VALUE`, according to the sign case,  <u>to avoid integer overflow.</u>\\n\\n<hr>\\n\\n**More optimized by using char and int variable in order to avoid calling charAt(index) and Integer.MAX_VALUE / 10 repeatedly**\\n\\n**<u>Optimized C++ / JAVA CODE</u>**\\n\\n<iframe src=\"https://leetcode.com/playground/mNLPE63o/shared\" frameBorder=\"0\" width=\"100%\" height=\"800\"></iframe>\\n\\n**SUGGESTION:**\\n**In JAVA**, you can replace the following condition \\n```\\nif(result > (Integer.MAX_VALUE / 10) || (result == (Integer.MAX_VALUE / 10) && digit > 7))\\n                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n```\\nwith\\n```\\nif(result > (Integer.MAX_VALUE - digit) / 10)\\n                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n```\\n\\nAnd, **In C++**, you can replace the following condition \\n```\\nif(result > (INT_MAX / 10) || (result == (INT_MAX / 10) && digit > 7))\\n                return isNegative ? INT_MIN : INT_MAX;\\n```\\nwith\\n```\\nif(result > (INT_MAX - digit) / 10)\\n                return isNegative ? INT_MIN : INT_MAX;\\n```\\n<hr>\\n\\n**COMPLEXITY:**\\n* **Time: O(n)**, where n is the length of String\\n* **Space: O(1)**, in-place\\n\\n<u>**Refer to the following github repsitory for more leetcode solutions**</u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n\\n# **Please UPVOTE if you find the solution helpful :)**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "```\\nif(result > (Integer.MAX_VALUE / 10) || (result == (Integer.MAX_VALUE / 10) && digit > 7))\\n                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n```\n```\\nif(result > (Integer.MAX_VALUE - digit) / 10)\\n                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n```\n```\\nif(result > (INT_MAX / 10) || (result == (INT_MAX / 10) && digit > 7))\\n                return isNegative ? INT_MIN : INT_MAX;\\n```\n```\\nif(result > (INT_MAX - digit) / 10)\\n                return isNegative ? INT_MIN : INT_MAX;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 798380,
                "title": "fast-and-simpler-dfa-approach-python-3",
                "content": "A fast and (probably) **much simpler and easier to understand DFA solution** than the others when you search for the keyword `DFA`:\\n\\n```python\\nclass Solution:\\n    def myAtoi(self, str: str) -> int:\\n        value, state, pos, sign = 0, 0, 0, 1\\n\\n        if len(str) == 0:\\n            return 0\\n\\n        while pos < len(str):\\n            current_char = str[pos]\\n            if state == 0:\\n                if current_char == \" \":\\n                    state = 0\\n                elif current_char == \"+\" or current_char == \"-\":\\n                    state = 1\\n                    sign = 1 if current_char == \"+\" else -1\\n                elif current_char.isdigit():\\n                    state = 2\\n                    value = value * 10 + int(current_char)\\n                else:\\n                    return 0\\n            elif state == 1:\\n                if current_char.isdigit():\\n                    state = 2\\n                    value = value * 10 + int(current_char)\\n                else:\\n                    return 0\\n            elif state == 2:\\n                if current_char.isdigit():\\n                    state = 2\\n                    value = value * 10 + int(current_char)\\n                else:\\n                    break\\n            else:\\n                return 0\\n            pos += 1\\n\\n        value = sign * value\\n        value = min(value, 2 ** 31 - 1)\\n        value = max(-(2 ** 31), value)\\n\\n        return value\\n```\\n\\nDFA, which stands for Deterministic finite automaton, is a state machine that either accepts or rejects a sequence of symbols by running through a state sequence uniquely determined by the string. The DFA I used to implement this answer is very simple:\\n\\n![image](https://assets.leetcode.com/users/images/519c4035-9a46-4dbe-a921-08920282029b_1597736931.5275571.png)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def myAtoi(self, str: str) -> int:\\n        value, state, pos, sign = 0, 0, 0, 1\\n\\n        if len(str) == 0:\\n            return 0\\n\\n        while pos < len(str):\\n            current_char = str[pos]\\n            if state == 0:\\n                if current_char == \" \":\\n                    state = 0\\n                elif current_char == \"+\" or current_char == \"-\":\\n                    state = 1\\n                    sign = 1 if current_char == \"+\" else -1\\n                elif current_char.isdigit():\\n                    state = 2\\n                    value = value * 10 + int(current_char)\\n                else:\\n                    return 0\\n            elif state == 1:\\n                if current_char.isdigit():\\n                    state = 2\\n                    value = value * 10 + int(current_char)\\n                else:\\n                    return 0\\n            elif state == 2:\\n                if current_char.isdigit():\\n                    state = 2\\n                    value = value * 10 + int(current_char)\\n                else:\\n                    break\\n            else:\\n                return 0\\n            pos += 1\\n\\n        value = sign * value\\n        value = min(value, 2 ** 31 - 1)\\n        value = max(-(2 ** 31), value)\\n\\n        return value\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202876,
                "title": "best-c-solution-ever-easy-to-understand-string-one-stop-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can solve this problem using String.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can easily understand the approach by seeing the code which is easy to understand with comments.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime Complexity : O(logN), Since we are going through the entire number digit by digit, the time complexity should be O(log10N). The reason behind log10 is because we are dealing with integers which are base 10.\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace Complexity : O(1), We are not using any data structure for interim operations, therefore, the space complexity is O(1).\\n\\n# Code\\n```\\n/*\\n\\n    Time Complexity : O(logN), Since we are going through the entire number digit by digit, the time complexity\\n    should be O(log10N). The reason behind log10 is because we are dealing with integers which are base 10.\\n\\n    Space Complexity : O(1), We are not using any data structure for interim operations, therefore, the space\\n    complexity is O(1).\\n\\n    Solved using String.\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int len = s.size();\\n        double num = 0;\\n        int i=0;\\n        while(s[i] == \\' \\'){\\n            i++;\\n        }\\n        bool positive = s[i] == \\'+\\';\\n        bool negative = s[i] == \\'-\\';\\n        positive == true ? i++ : i;\\n        negative == true ? i++ : i;\\n        while(i < len && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n            num = num*10 + (s[i]-\\'0\\');\\n            i++;\\n        }\\n        num = negative ? -num : num;\\n        cout<<num<<endl;\\n        num = (num > INT_MAX) ? INT_MAX : num;\\n        num = (num < INT_MIN) ? INT_MIN : num;\\n        cout<<num<<endl;\\n        return int(num);\\n    }\\n};\\n\\n```\\n\\n***IF YOU LIKE THE SOLUTION THEN PLEASE UPVOTE MY SOLUTION BECAUSE IT GIVES ME MOTIVATION TO REGULARLY POST THE SOLUTION.***\\n\\n![WhatsApp Image 2023-02-10 at 19.01.02.jpeg](https://assets.leetcode.com/users/images/0a95fea4-64f4-4502-82aa-41db6d77c05c_1676054939.8270252.jpeg)",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\n/*\\n\\n    Time Complexity : O(logN), Since we are going through the entire number digit by digit, the time complexity\\n    should be O(log10N). The reason behind log10 is because we are dealing with integers which are base 10.\\n\\n    Space Complexity : O(1), We are not using any data structure for interim operations, therefore, the space\\n    complexity is O(1).\\n\\n    Solved using String.\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int len = s.size();\\n        double num = 0;\\n        int i=0;\\n        while(s[i] == \\' \\'){\\n            i++;\\n        }\\n        bool positive = s[i] == \\'+\\';\\n        bool negative = s[i] == \\'-\\';\\n        positive == true ? i++ : i;\\n        negative == true ? i++ : i;\\n        while(i < len && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n            num = num*10 + (s[i]-\\'0\\');\\n            i++;\\n        }\\n        num = negative ? -num : num;\\n        cout<<num<<endl;\\n        num = (num > INT_MAX) ? INT_MAX : num;\\n        num = (num < INT_MIN) ? INT_MIN : num;\\n        cout<<num<<endl;\\n        return int(num);\\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4673,
                "title": "60ms-python-solution-oj-says-this-beats-100-python-submissions",
                "content": "    class Solution(object):\\n        def myAtoi(self, s):\\n            \"\"\"\\n            :type str: str\\n            :rtype: int\\n            \"\"\"\\n            ###better to do strip before sanity check (although 8ms slower):\\n            #ls = list(s.strip())\\n            #if len(ls) == 0 : return 0\\n            if len(s) == 0 : return 0\\n            ls = list(s.strip())\\n            \\n            sign = -1 if ls[0] == '-' else 1\\n            if ls[0] in ['-','+'] : del ls[0]\\n            ret, i = 0, 0\\n            while i < len(ls) and ls[i].isdigit() :\\n                ret = ret*10 + ord(ls[i]) - ord('0')\\n                i += 1\\n            return max(-2**31, min(sign * ret,2**31-1))",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution(object):\\n        def myAtoi(self, s):\\n            \"\"\"\\n            :type str: str\\n            :rtype: int\\n            \"\"\"\\n            ###better to do strip before sanity check (although 8ms slower):\\n            #ls = list(s.strip())\\n            #if len(ls) == 0 : return 0\\n            if len(s) == 0 : return 0\\n            ls = list(s.strip())\\n            \\n            sign = -1 if ls[0] == '-' else 1\\n            if ls[0] in ['-','+'] : del ls[0]\\n            ret, i = 0, 0\\n            while i < len(ls) and ls[i].isdigit() :\\n                ret = ret*10 + ord(ls[i]) - ord('0')\\n                i += 1\\n            return max(-2**31, min(sign * ret,2**31-1))",
                "codeTag": "Java"
            },
            {
                "id": 3660844,
                "title": "c-python-java-best-solution-with-explanation-and-comments",
                "content": "#### We need to handle four cases:\\n\\n* Overflow\\n* Discarding all the leading whitespaces\\n* Sign of the number\\n* Invalid input\\n\\n##### Some special test cases that may help you to understand the problem \\n* \\'_\\' means whitespace\\n```\\n    ____123  -> 123\\n    ___-123  -> -123\\n    ____+123  -> 123\\n    _____-+123  -> 0\\n    ____+-123  -> 0\\n    ___123-  -> 123\\n\\n    +-12  -> 0\\n    00123  -> 123\\n    123abc  -> 123\\n    123 1234  -> 123\\n\\n    -99999999999999999  -> -2147483648\\n    00999999999999999  -> 2147483647\\n    2147483648  -> 2147483647\\n    -2147483648 -> -2147483648\\n``` \\n\\n\\n\\n#### Time Complexity\\n- Time complexity: O(N), N = string size\\n  Since we are going through the entire string one by one\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(1)\\n  Space Complexity is constant because we are not using any extra space\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n---\\n\\n\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, n = s.size();\\n\\n        while(s[i] == \\' \\'){ // skipping space characters at the beginning\\n            i++;\\n        }\\n\\n        int positive = 0, negative = 0; \\n\\n        if(s[i] == \\'+\\'){\\n            positive++; // number of positive signs at the start in string\\n            i++;\\n        }\\n\\n        if(s[i] == \\'-\\'){\\n            negative++; // number of negative signs at the start in string\\n            i++;\\n        }\\n\\n        double ans = 0; \\n\\n        while(i<n and s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n            ans = ans*10 + (s[i] - \\'0\\'); // (s[i] - \\'0\\') is converting character to integer\\n            i++;\\n        }\\n\\n        if(negative > 0) // if negative sign exist\\n            ans = -ans;\\n        if(positive > 0 and negative > 0) // if both +ve and -ve sign exist, Example: +-12\\n            return 0;\\n\\n        if(ans > INT_MAX) // if ans > 2^31 - 1\\n            ans = INT_MAX;\\n\\n        if(ans < INT_MIN) // if ans < 2^31\\n            ans = INT_MIN;\\n\\n        return (int)ans;\\n    }\\n};\\n```\\n```python []\\nclass Solution:\\n    def myAtoi(self, s):\\n        i = 0\\n        n = len(s)\\n\\n        while i < n and s[i] == \\' \\':  # skipping space characters at the beginning\\n            i+= 1\\n\\n        positive = 0\\n        negative = 0\\n\\n        if i<n and s[i] == \\'+\\':\\n            positive += 1  # number of positive signs at the start in string\\n            i+= 1\\n\\n        if i<n and s[i] == \\'-\\':\\n            negative += 1  # number of negative signs at the start in string\\n            i+= 1\\n\\n        ans = 0.0\\n\\n        while i < n and \\'0\\' <= s[i] <= \\'9\\':\\n            ans = ans * 10 + (ord(s[i]) - ord(\\'0\\'))  # converting character to integer\\n            i+= 1\\n\\n        if negative > 0:  # if negative sign exists\\n            ans = -ans\\n\\n        if positive > 0 and negative > 0:  # if both +ve and -ve signs exist, Example: +-12\\n            return 0\\n\\n        INT_MAX = 2**31 - 1\\n        INT_MIN = -2**31\\n\\n        if ans > INT_MAX:  # if ans > 2^31 - 1\\n            ans = INT_MAX\\n\\n        if ans < INT_MIN:  # if ans < -2^31\\n            ans = INT_MIN\\n\\n        return int(ans)\\n```\\n```Java []\\nclass Solution {\\n    public int myAtoi(String s) {\\n        int i = 0;\\n        int n = s.length();\\n\\n        while (i < n && s.charAt(i) == \\' \\') { // skipping space characters at the beginning\\n            i++;\\n        }\\n\\n        int positive = 0;\\n        int negative = 0;\\n\\n        if (i<n && s.charAt(i) == \\'+\\') {\\n            positive++; // number of positive signs at the start in string\\n            i++;\\n        }\\n\\n        if (i<n && s.charAt(i) == \\'-\\') {\\n            negative++; // number of negative signs at the start in string\\n            i++;\\n        }\\n\\n        double ans = 0;\\n\\n        while (i < n && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n            ans = ans * 10 + (s.charAt(i) - \\'0\\'); // (s.charAt(i) - \\'0\\') is converting character to integer\\n            i++;\\n        }\\n\\n        if (negative > 0) { // if negative sign exists\\n            ans = -ans;\\n        }\\n        if (positive > 0 && negative > 0) { // if both +ve and -ve sign exist, Example: +-12\\n            return 0;\\n        }\\n\\n        int INT_MAX = (int) Math.pow(2, 31) - 1;\\n        int INT_MIN = (int) Math.pow(-2, 31);\\n\\n        if (ans > INT_MAX) { // if ans > 2^31 - 1\\n            ans = INT_MAX;\\n        }\\n\\n        if (ans < INT_MIN) { // if ans < -2^31\\n            ans = INT_MIN;\\n        }\\n\\n        return (int) ans;\\n    }\\n}\\n```\\n\\n\\n---\\n\\n\\n> # If you like the solution please **UPVOTE**\\n\\n![c0504eaf-5fb8-4a1d-a769-833262d1b86e_1674433591.3836212.webp](https://assets.leetcode.com/users/images/9b4920af-0da6-4bf1-bfe5-fbc105565863_1687448100.1521974.webp)\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    ____123  -> 123\\n    ___-123  -> -123\\n    ____+123  -> 123\\n    _____-+123  -> 0\\n    ____+-123  -> 0\\n    ___123-  -> 123\\n\\n    +-12  -> 0\\n    00123  -> 123\\n    123abc  -> 123\\n    123 1234  -> 123\\n\\n    -99999999999999999  -> -2147483648\\n    00999999999999999  -> 2147483647\\n    2147483648  -> 2147483647\\n    -2147483648 -> -2147483648\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, n = s.size();\\n\\n        while(s[i] == \\' \\'){ // skipping space characters at the beginning\\n            i++;\\n        }\\n\\n        int positive = 0, negative = 0; \\n\\n        if(s[i] == \\'+\\'){\\n            positive++; // number of positive signs at the start in string\\n            i++;\\n        }\\n\\n        if(s[i] == \\'-\\'){\\n            negative++; // number of negative signs at the start in string\\n            i++;\\n        }\\n\\n        double ans = 0; \\n\\n        while(i<n and s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n            ans = ans*10 + (s[i] - \\'0\\'); // (s[i] - \\'0\\') is converting character to integer\\n            i++;\\n        }\\n\\n        if(negative > 0) // if negative sign exist\\n            ans = -ans;\\n        if(positive > 0 and negative > 0) // if both +ve and -ve sign exist, Example: +-12\\n            return 0;\\n\\n        if(ans > INT_MAX) // if ans > 2^31 - 1\\n            ans = INT_MAX;\\n\\n        if(ans < INT_MIN) // if ans < 2^31\\n            ans = INT_MIN;\\n\\n        return (int)ans;\\n    }\\n};\\n```\n```python []\\nclass Solution:\\n    def myAtoi(self, s):\\n        i = 0\\n        n = len(s)\\n\\n        while i < n and s[i] == \\' \\':  # skipping space characters at the beginning\\n            i+= 1\\n\\n        positive = 0\\n        negative = 0\\n\\n        if i<n and s[i] == \\'+\\':\\n            positive += 1  # number of positive signs at the start in string\\n            i+= 1\\n\\n        if i<n and s[i] == \\'-\\':\\n            negative += 1  # number of negative signs at the start in string\\n            i+= 1\\n\\n        ans = 0.0\\n\\n        while i < n and \\'0\\' <= s[i] <= \\'9\\':\\n            ans = ans * 10 + (ord(s[i]) - ord(\\'0\\'))  # converting character to integer\\n            i+= 1\\n\\n        if negative > 0:  # if negative sign exists\\n            ans = -ans\\n\\n        if positive > 0 and negative > 0:  # if both +ve and -ve signs exist, Example: +-12\\n            return 0\\n\\n        INT_MAX = 2**31 - 1\\n        INT_MIN = -2**31\\n\\n        if ans > INT_MAX:  # if ans > 2^31 - 1\\n            ans = INT_MAX\\n\\n        if ans < INT_MIN:  # if ans < -2^31\\n            ans = INT_MIN\\n\\n        return int(ans)\\n```\n```Java []\\nclass Solution {\\n    public int myAtoi(String s) {\\n        int i = 0;\\n        int n = s.length();\\n\\n        while (i < n && s.charAt(i) == \\' \\') { // skipping space characters at the beginning\\n            i++;\\n        }\\n\\n        int positive = 0;\\n        int negative = 0;\\n\\n        if (i<n && s.charAt(i) == \\'+\\') {\\n            positive++; // number of positive signs at the start in string\\n            i++;\\n        }\\n\\n        if (i<n && s.charAt(i) == \\'-\\') {\\n            negative++; // number of negative signs at the start in string\\n            i++;\\n        }\\n\\n        double ans = 0;\\n\\n        while (i < n && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n            ans = ans * 10 + (s.charAt(i) - \\'0\\'); // (s.charAt(i) - \\'0\\') is converting character to integer\\n            i++;\\n        }\\n\\n        if (negative > 0) { // if negative sign exists\\n            ans = -ans;\\n        }\\n        if (positive > 0 && negative > 0) { // if both +ve and -ve sign exist, Example: +-12\\n            return 0;\\n        }\\n\\n        int INT_MAX = (int) Math.pow(2, 31) - 1;\\n        int INT_MIN = (int) Math.pow(-2, 31);\\n\\n        if (ans > INT_MAX) { // if ans > 2^31 - 1\\n            ans = INT_MAX;\\n        }\\n\\n        if (ans < INT_MIN) { // if ans < -2^31\\n            ans = INT_MIN;\\n        }\\n\\n        return (int) ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4642,
                "title": "8ms-c-solution-easy-to-understand",
                "content": "    int myAtoi(string str) {\\n        long result = 0;\\n        int indicator = 1;\\n        for(int i = 0; i<str.size();)\\n        {\\n            i = str.find_first_not_of(' ');\\n            if(str[i] == '-' || str[i] == '+')\\n                indicator = (str[i++] == '-')? -1 : 1;\\n            while('0'<= str[i] && str[i] <= '9') \\n            {\\n                result = result*10 + (str[i++]-'0');\\n                if(result*indicator >= INT_MAX) return INT_MAX;\\n                if(result*indicator <= INT_MIN) return INT_MIN;                \\n            }\\n            return result*indicator;\\n        }\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int myAtoi(string str) {\\n        long result = 0;\\n        int indicator = 1;\\n        for(int i = 0; i<str.size();)\\n        {\\n            i = str.find_first_not_of(' ');\\n            if(str[i] == '-' || str[i] == '+')\\n                indicator = (str[i++] == '-')? -1 : 1;\\n            while('0'<= str[i] && str[i] <= '9') \\n            {\\n                result = result*10 + (str[i++]-'0');\\n                if(result*indicator >= INT_MAX) return INT_MAX;\\n                if(result*indicator <= INT_MIN) return INT_MIN;                \\n            }\\n            return result*indicator;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4672,
                "title": "java-easy-version-to-understand",
                "content": "    \\tpublic static int myAtoi(String str) {\\n\\t\\tif (str == null || str.length() == 0)\\n\\t\\t\\treturn 0;//\\n\\t\\tstr = str.trim();\\n\\t\\tchar firstChar = str.charAt(0);\\n\\t\\tint sign = 1, start = 0, len = str.length();\\n\\t\\tlong sum = 0;\\n\\t\\tif (firstChar == '+') {\\n\\t\\t\\tsign = 1;\\n\\t\\t\\tstart++;\\n\\t\\t} else if (firstChar == '-') {\\n\\t\\t\\tsign = -1;\\n\\t\\t\\tstart++;\\n\\t\\t}\\n\\t\\tfor (int i = start; i < len; i++) {\\n\\t\\t\\tif (!Character.isDigit(str.charAt(i)))\\n\\t\\t\\t\\treturn (int) sum * sign;\\n\\t\\t\\tsum = sum * 10 + str.charAt(i) - '0';\\n\\t\\t\\tif (sign == 1 && sum > Integer.MAX_VALUE)\\n\\t\\t\\t\\treturn Integer.MAX_VALUE;\\n\\t\\t\\tif (sign == -1 && (-1) * sum < Integer.MIN_VALUE)\\n\\t\\t\\t\\treturn Integer.MIN_VALUE;\\n\\t\\t}\\n\\n\\t\\treturn (int) sum * sign;\\n\\t}",
                "solutionTags": [],
                "code": "    \\tpublic static int myAtoi(String str) {\\n\\t\\tif (str == null || str.length() == 0)\\n\\t\\t\\treturn 0;//\\n\\t\\tstr = str.trim();\\n\\t\\tchar firstChar = str.charAt(0);\\n\\t\\tint sign = 1, start = 0, len = str.length();\\n\\t\\tlong sum = 0;\\n\\t\\tif (firstChar == '+') {\\n\\t\\t\\tsign = 1;\\n\\t\\t\\tstart++;\\n\\t\\t} else if (firstChar == '-') {\\n\\t\\t\\tsign = -1;\\n\\t\\t\\tstart++;\\n\\t\\t}\\n\\t\\tfor (int i = start; i < len; i++) {\\n\\t\\t\\tif (!Character.isDigit(str.charAt(i)))\\n\\t\\t\\t\\treturn (int) sum * sign;\\n\\t\\t\\tsum = sum * 10 + str.charAt(i) - '0';\\n\\t\\t\\tif (sign == 1 && sum > Integer.MAX_VALUE)\\n\\t\\t\\t\\treturn Integer.MAX_VALUE;\\n\\t\\t\\tif (sign == -1 && (-1) * sum < Integer.MIN_VALUE)\\n\\t\\t\\t\\treturn Integer.MIN_VALUE;\\n\\t\\t}\\n\\n\\t\\treturn (int) sum * sign;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1688555,
                "title": "explaination-java-c-easy-for-mind-to-accept-it",
                "content": "**Let\\'s understand this problem with all possible testcases.**\\n![image](https://assets.leetcode.com/users/images/c6a8113d-c9cc-44be-8ccc-9d2a33770d22_1642121693.8403566.png)\\n\\n1. If we look at **1st testcase**. We have Given a string with numerical values & we will simply return in Integral value and **return 42**.\\n2. If we look at **2nd testcase**. First we see we have some space \"and it\\'s clearly mentioned in question, we need to **discard whitespace**\", then we **takecare of sign** & use sign as it is & finally use numerical value **return -42**.\\n3.  If we look at **3rd testcase**. We look for **whitespace**, but we **dont have** it. Then we will see wether it have a **sign** or not. Then we will see wether the **1st value numerical** or not. So, we found it is and simply go for **4193**, again we will check after this numerical value do we have more numerical value & **states No**. then we simply **return 4193**\\n4.  Coming to **4th testcase**. We see that it dont have whitespace, dont have any sign. And very first sequence is non-numerical and simply **return 0**\\n5.  Coming to **5th testcase**. We clearly see that no is **out of range**, we simply **return -2^31**.\\n\\n**What rules we can get from these testcases are:**\\n![image](https://assets.leetcode.com/users/images/ce10b71e-950a-4ee4-8caf-255c2d87c5f2_1642122439.133612.png)\\n\\n`By keeping these condition\\'s in mind we can simply write up our code:`\\n\\n\\n**Java**\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if (s.equals(\"\")) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// helper variables\\n\\t\\tint res = 0, i = 0, sign = 1;\\n\\t\\t\\n\\t\\t// get rid of whitespace\\n\\t\\twhile (i < s.length() && s.charAt(i) == \\' \\') {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// check for sign\\n\\t\\tif (i < s.length() && (s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\')) {\\n\\t\\t\\t// change if negative, iterate\\n\\t\\t\\tif (s.charAt(i++) == \\'-\\') {\\n\\t\\t\\t\\tsign = -1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// now iterate across digits if any\\n\\t\\t// should only be in range 0-9\\n\\t\\twhile (i < s.length() && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n\\t\\t\\t// check if we will go over the max\\n\\t\\t\\tif (res > Integer.MAX_VALUE / 10 || (res == Integer.MAX_VALUE / 10 && s.charAt(i) - \\'0\\' > 7)) {\\n\\t\\t\\t\\tif (sign == -1) {\\n\\t\\t\\t\\t\\treturn Integer.MIN_VALUE;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn Integer.MAX_VALUE;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// update res\\n\\t\\t\\tres = res * 10 + (s.charAt(i++) - \\'0\\');\\n\\t\\t}\\n\\t\\treturn sign * res;\\n    }\\n}\\n```\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n        // helper variables\\n        int res=0;\\n        int i=0;\\n        int sign=1;\\n\\t\\t\\n        while(i<s.size()&&s[i]==\\' \\')i++;  //ignore leading white space\\n        \\n        if(s[i]==\\'-\\'||s[i]==\\'+\\')          //check if number positve or negative\\n        {\\n            sign=s[i]==\\'-\\'?-1:1;\\n            i++;\\n        }\\n        // now iterate across digits if any\\n\\t\\t// should only be in range 0-9\\n        while(i<s.length()&&(s[i]>=\\'0\\'&&s[i]<=\\'9\\'))  //traverse string till nondigit not found or string ends\\n        {\\n            int digit=(s[i]-\\'0\\')*sign;\\n            if(sign==1 && (res>INT_MAX/10 || (res==INT_MAX/10 && digit>INT_MAX%10))) return INT_MAX; //check for overflow\\n            if(sign==-1 &&(res<INT_MIN/10 || (res==INT_MIN/10 && digit<INT_MIN%10))) return INT_MIN; //check for underflow\\n            \\n            res=res*10+digit; // update res\\n            i++;\\n        }\\n    \\n    return res;\\n    }\\n};\\n```\\n\\nANALYSIS :-\\n* **Time Complexity :-** BigO(N) where N is string length;\\n\\n\\n* **Space Complexity :-** BigO(1) as not using extra memory",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if (s.equals(\"\")) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// helper variables\\n\\t\\tint res = 0, i = 0, sign = 1;\\n\\t\\t\\n\\t\\t// get rid of whitespace\\n\\t\\twhile (i < s.length() && s.charAt(i) == \\' \\') {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\t\\n\\t\\t// check for sign\\n\\t\\tif (i < s.length() && (s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\')) {\\n\\t\\t\\t// change if negative, iterate\\n\\t\\t\\tif (s.charAt(i++) == \\'-\\') {\\n\\t\\t\\t\\tsign = -1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// now iterate across digits if any\\n\\t\\t// should only be in range 0-9\\n\\t\\twhile (i < s.length() && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n\\t\\t\\t// check if we will go over the max\\n\\t\\t\\tif (res > Integer.MAX_VALUE / 10 || (res == Integer.MAX_VALUE / 10 && s.charAt(i) - \\'0\\' > 7)) {\\n\\t\\t\\t\\tif (sign == -1) {\\n\\t\\t\\t\\t\\treturn Integer.MIN_VALUE;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn Integer.MAX_VALUE;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// update res\\n\\t\\t\\tres = res * 10 + (s.charAt(i++) - \\'0\\');\\n\\t\\t}\\n\\t\\treturn sign * res;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n        // helper variables\\n        int res=0;\\n        int i=0;\\n        int sign=1;\\n\\t\\t\\n        while(i<s.size()&&s[i]==\\' \\')i++;  //ignore leading white space\\n        \\n        if(s[i]==\\'-\\'||s[i]==\\'+\\')          //check if number positve or negative\\n        {\\n            sign=s[i]==\\'-\\'?-1:1;\\n            i++;\\n        }\\n        // now iterate across digits if any\\n\\t\\t// should only be in range 0-9\\n        while(i<s.length()&&(s[i]>=\\'0\\'&&s[i]<=\\'9\\'))  //traverse string till nondigit not found or string ends\\n        {\\n            int digit=(s[i]-\\'0\\')*sign;\\n            if(sign==1 && (res>INT_MAX/10 || (res==INT_MAX/10 && digit>INT_MAX%10))) return INT_MAX; //check for overflow\\n            if(sign==-1 &&(res<INT_MIN/10 || (res==INT_MIN/10 && digit<INT_MIN%10))) return INT_MIN; //check for underflow\\n            \\n            res=res*10+digit; // update res\\n            i++;\\n        }\\n    \\n    return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1688636,
                "title": "python-one-pass-straightforward-explained-with-comments-clean-and-easy-to-understand",
                "content": "**PLEASE UPVOTE if you like** \\uD83D\\uDE01 **If you have any question, feel free to ask.** \\n\\n* Some special cases that may help you understand the problem, **\\'_\\' means whitespace**\\n\\t* `____123`\\n\\t* `___-123`\\n\\t* `____+123`\\n\\t* `_____-+123`\\n\\t* `____+-123`\\n\\t* `abc123`\\n\\t* `00123`\\n\\t* `___123-`\\n\\t* `123abc`\\n\\t* `123 1234`\\n\\t* `-99999999999999999`\\n\\t* `00999999999999999`\\n\\t* `2147483648`\\n\\t* `-2147483648`\\n\\n```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        MIN, MAX = -2 ** 31, 2 ** 31 - 1\\n        n, empty, sign = 0, True, 1  # empty denotes we have not seen any number, sign is -1 or 1\\n        for c in s:\\n            if empty:\\n                if c == \\' \\': continue  # ignore the leading whitespace\\n                elif c == \\'-\\': sign = -1  # final answer is a negative number\\n                elif c.isdigit(): n = int(c)  # the first digit of number\\n                elif c != \\'+\\': return 0  # the first char is not a digit and not in (\\' \\', \\'+\\', \\'-\\'), so s is invalid\\n                empty = False  # the first char is a digit or \\'+\\' or \\'-\\', valid number starts\\n            else:\\n                if c.isdigit():\\n                    n = n * 10 + int(c)\\n                    if sign * n > MAX: return MAX\\n                    elif sign * n < MIN: return MIN\\n                else: break   # end of valid number\\n        return sign * n  # sign is 1 or -1 \\n```\\n\\n**PLEASE UPVOTE if you like** \\uD83D\\uDE01 **If you have any question, feel free to ask.** \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        MIN, MAX = -2 ** 31, 2 ** 31 - 1\\n        n, empty, sign = 0, True, 1  # empty denotes we have not seen any number, sign is -1 or 1\\n        for c in s:\\n            if empty:\\n                if c == \\' \\': continue  # ignore the leading whitespace\\n                elif c == \\'-\\': sign = -1  # final answer is a negative number\\n                elif c.isdigit(): n = int(c)  # the first digit of number\\n                elif c != \\'+\\': return 0  # the first char is not a digit and not in (\\' \\', \\'+\\', \\'-\\'), so s is invalid\\n                empty = False  # the first char is a digit or \\'+\\' or \\'-\\', valid number starts\\n            else:\\n                if c.isdigit():\\n                    n = n * 10 + int(c)\\n                    if sign * n > MAX: return MAX\\n                    elif sign * n < MIN: return MIN\\n                else: break   # end of valid number\\n        return sign * n  # sign is 1 or -1 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4653,
                "title": "python-solution-based-on-regex",
                "content": "    class Solution:\\n        # @return an integer\\n        def atoi(self, str):\\n            str = str.strip()\\n            str = re.findall('(^[\\\\+\\\\-0]*\\\\d+)\\\\D*', str)\\n    \\n            try:\\n                result = int(''.join(str))\\n                MAX_INT = 2147483647\\n                MIN_INT = -2147483648\\n                if result > MAX_INT > 0:\\n                    return MAX_INT\\n                elif result < MIN_INT < 0:\\n                    return MIN_INT\\n                else:\\n                    return result\\n            except:\\n                return 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n        # @return an integer\\n        def atoi(self, str):\\n            str = str.strip()\\n            str = re.findall('(^[\\\\+\\\\-0]*\\\\d+)\\\\D*', str)\\n    \\n            try:\\n                result = int(''.join(str))\\n                MAX_INT = 2147483647\\n                MIN_INT = -2147483648\\n                if result > MAX_INT > 0:\\n                    return MAX_INT\\n                elif result < MIN_INT < 0:\\n                    return MIN_INT\\n                else:\\n                    return result\\n            except:\\n                return 0",
                "codeTag": "Java"
            },
            {
                "id": 1142211,
                "title": "accepted-solution-for-swift",
                "content": "<blockquote>\\n<b>Disclaimer:</b> By using any content from this post or thread, you release the author(s) from all liability and warranty of any kind. You are free to use the content freely and as you see fit. Any suggestions for improvement are welcome and greatly appreciated! Happy coding!\\n</blockquote>\\n\\n```swift\\nclass Solution {\\n    func myAtoi(_ s: String) -> Int {\\n        guard !s.contains(\"+ \") else { return 0 }\\n        let val = (s as NSString).integerValue\\n        return val >= Int32.max ? Int(Int32.max) : max(Int(Int32.min), val)\\n    }\\n}\\n```\\n\\n<hr>\\n\\n<p>\\n<details>\\n<summary><img src=\"https://git.io/JDblm\" height=\"24\"> <b>TEST CASES</b></summary>\\n\\n<br>\\n\\n<pre>\\n<b>Result:</b> Executed 3 tests, with 0 failures (0 unexpected) in 0.005 (0.006) seconds\\n</pre>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n\\n    private let solution = Solution()\\n    \\n    // The underlined characters are what is read in, the caret is the current reader position.\\n    // Step 1: \"42\" (no characters read because there is no leading whitespace)\\n    //          ^\\n    // Step 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n    //          ^\\n    // Step 3: \"42\" (\"42\" is read in)\\n    //            ^\\n    // The parsed integer is 42.\\n    // Since 42 is in the range [-231, 231 - 1], the final result is 42.\\n    func test0() {\\n        let value = solution.myAtoi(\"42\")\\n        XCTAssertEqual(value, 42)\\n    }\\n    \\n    // Step 1: \"   -42\" (leading whitespace is read and ignored)\\n    //             ^\\n    // Step 2: \"   -42\" (\\'-\\' is read, so the result should be negative)\\n    //              ^\\n    // Step 3: \"   -42\" (\"42\" is read in)\\n    //                ^\\n    // The parsed integer is -42.\\n    // Since -42 is in the range [-231, 231 - 1], the final result is -42.\\n    func test2() {\\n        let value = solution.myAtoi(\"   -42\")\\n        XCTAssertEqual(value, -42)\\n    }\\n    \\n    // Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n    //          ^\\n    // Step 2: \"4193 with words\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n    //          ^\\n    // Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n    //              ^\\n    // The parsed integer is 4193.\\n    // Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n    func test3() {\\n        let value = solution.myAtoi(\"4193 with words\")\\n        XCTAssertEqual(value, 4193)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>\\n</p>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func myAtoi(_ s: String) -> Int {\\n        guard !s.contains(\"+ \") else { return 0 }\\n        let val = (s as NSString).integerValue\\n        return val >= Int32.max ? Int(Int32.max) : max(Int(Int32.min), val)\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n\\n    private let solution = Solution()\\n    \\n    // The underlined characters are what is read in, the caret is the current reader position.\\n    // Step 1: \"42\" (no characters read because there is no leading whitespace)\\n    //          ^\\n    // Step 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n    //          ^\\n    // Step 3: \"42\" (\"42\" is read in)\\n    //            ^\\n    // The parsed integer is 42.\\n    // Since 42 is in the range [-231, 231 - 1], the final result is 42.\\n    func test0() {\\n        let value = solution.myAtoi(\"42\")\\n        XCTAssertEqual(value, 42)\\n    }\\n    \\n    // Step 1: \"   -42\" (leading whitespace is read and ignored)\\n    //             ^\\n    // Step 2: \"   -42\" (\\'-\\' is read, so the result should be negative)\\n    //              ^\\n    // Step 3: \"   -42\" (\"42\" is read in)\\n    //                ^\\n    // The parsed integer is -42.\\n    // Since -42 is in the range [-231, 231 - 1], the final result is -42.\\n    func test2() {\\n        let value = solution.myAtoi(\"   -42\")\\n        XCTAssertEqual(value, -42)\\n    }\\n    \\n    // Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n    //          ^\\n    // Step 2: \"4193 with words\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n    //          ^\\n    // Step 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n    //              ^\\n    // The parsed integer is 4193.\\n    // Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n    func test3() {\\n        let value = solution.myAtoi(\"4193 with words\")\\n        XCTAssertEqual(value, 4193)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 458532,
                "title": "5-line-c",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int r = 0;\\n        stringstream ss;\\n        ss << str;\\n        ss >> r;\\n        return r;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int r = 0;\\n        stringstream ss;\\n        ss << str;\\n        ss >> r;\\n        return r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4909,
                "title": "8-line-c-concise-solution",
                "content": "    int myAtoi(string str) {\\n        int ret = 0, sign = 1, i = str.find_first_not_of(' '), base = INT_MAX / 10;\\n        if (str[i] == '+' || str[i] == '-') sign = str[i++] == '+' ?: -1;\\n        while (isdigit(str[i])) {\\n            if (ret > base || (ret == base && str[i] - '0' > 7)) \\n                return sign > 0 ? INT_MAX : INT_MIN;\\n            ret = 10 * ret + (str[i++] - '0');\\n        }\\n        return sign * ret;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int myAtoi(string str) {\\n        int ret = 0, sign = 1, i = str.find_first_not_of(' '), base = INT_MAX / 10;\\n        if (str[i] == '+' || str[i] == '-') sign = str[i++] == '+' ?: -1;\\n        while (isdigit(str[i])) {\\n            if (ret > base || (ret == base && str[i] - '0' > 7)) \\n                return sign > 0 ? INT_MAX : INT_MIN;\\n            ret = 10 * ret + (str[i++] - '0');\\n        }\\n        return sign * ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4749,
                "title": "java-12-lines",
                "content": "```\\n    public int myAtoi(String str) {\\n        int sign = 1, i = 0, r = 0;\\n        str = str.trim();\\n        if (str.isEmpty()) return 0;\\n        else if (str.charAt(i) == '-') { i++; sign = -1; }\\n        else if (str.charAt(i) == '+') { i++; }\\n        while (i < str.length() && Character.isDigit(str.charAt(i))) {\\n            int d = str.charAt(i) - '0';\\n            if (r > (Integer.MAX_VALUE - d) / 10) return sign > 0 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n            r = r * 10 + d;\\n            i++;\\n        }\\n        return r * sign;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int myAtoi(String str) {\\n        int sign = 1, i = 0, r = 0;\\n        str = str.trim();\\n        if (str.isEmpty()) return 0;\\n        else if (str.charAt(i) == '-') { i++; sign = -1; }\\n        else if (str.charAt(i) == '+') { i++; }\\n        while (i < str.length() && Character.isDigit(str.charAt(i))) {\\n            int d = str.charAt(i) - '0';\\n            if (r > (Integer.MAX_VALUE - d) / 10) return sign > 0 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n            r = r * 10 + d;\\n            i++;\\n        }\\n        return r * sign;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1688546,
                "title": "python3-5-lines-faster-100-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nJust do it in 4 simple steps:\\n\\n- Iterate over the string until all leading white spaces are exhausted.\\n- Check whether the next character is a sign. For `\"+\"` we assign `+1` to a variable `sign`, and `-1` otherwise.\\n- Iterate the next characters and accumulate our integer in `res` until the first non-digital symbol is met.\\n- Convert the string `res` into an integer, multiply by `sign` and clamp the result: `max(-2e31, min(2e31-1, result))`.\\n\\nTime: **O(N)** - for scan\\nSpace: **O(1)** - nothing is strored\\n\\nRuntime: 16 ms, faster than **99.99%** of Python3 online submissions for String to Integer (atoi).\\nMemory Usage: 14.1 MB, less than **94.32%** of Python3 online submissions for String to Integer (atoi).\\n\\n```\\n    def myAtoi(self, s: str) -> int:\\n        length, i, sign, res = len(s), 0, +1, \\'\\'\\n        \\n        while i < length and s[i] == \\' \\': i = i + 1\\n            \\n        if i < length and s[i] in (\\'-\\', \\'+\\'): \\n\\t\\t\\tsign, i = -1 if s[i] == \\'-\\' else +1, i + 1\\n            \\n        while i < length and s[i].isdigit(): \\n\\t\\t\\tres, i = res + s[i], i + 1\\n        \\n        return max( -2**31, min( sign * int(res or 0), 2**31 - 1 ) )\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n    def myAtoi(self, s: str) -> int:\\n        length, i, sign, res = len(s), 0, +1, \\'\\'\\n        \\n        while i < length and s[i] == \\' \\': i = i + 1\\n            \\n        if i < length and s[i] in (\\'-\\', \\'+\\'): \\n\\t\\t\\tsign, i = -1 if s[i] == \\'-\\' else +1, i + 1\\n            \\n        while i < length and s[i].isdigit(): \\n\\t\\t\\tres, i = res + s[i], i + 1\\n        \\n        return max( -2**31, min( sign * int(res or 0), 2**31 - 1 ) )\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4710,
                "title": "my-nice-java-code-3ms",
                "content": "    public class Solution {\\n    \\tpublic int myAtoi(String str) {\\n    \\t\\tif (str.isEmpty())\\n    \\t\\t\\treturn 0;\\n    \\t\\tstr = str.trim();\\n    \\t\\tint i = 0, ans = 0, sign = 1, len = str.length();\\n    \\t\\tif (str.charAt(i) == '-' || str.charAt(i) == '+')\\n    \\t\\t\\tsign = str.charAt(i++) == '+' ? 1 : -1;\\n    \\t\\tfor (; i < len; ++i) {\\n    \\t\\t\\tint tmp = str.charAt(i) - '0';\\n    \\t\\t\\tif (tmp < 0 || tmp > 9)\\n    \\t\\t\\t\\tbreak;\\n    \\t\\t\\tif (ans > Integer.MAX_VALUE / 10\\n    \\t\\t\\t\\t\\t|| (ans == Integer.MAX_VALUE / 10 && Integer.MAX_VALUE % 10 < tmp))\\n    \\t\\t\\t\\treturn sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n    \\t\\t\\telse\\n    \\t\\t\\t\\tans = ans * 10 + tmp;\\n    \\t\\t}\\n    \\t\\treturn sign * ans;\\n    \\t}\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n    \\tpublic int myAtoi(String str) {\\n    \\t\\tif (str.isEmpty())\\n    \\t\\t\\treturn 0;\\n    \\t\\tstr = str.trim();\\n    \\t\\tint i = 0, ans = 0, sign = 1, len = str.length();\\n    \\t\\tif (str.charAt(i) == '-' || str.charAt(i) == '+')\\n    \\t\\t\\tsign = str.charAt(i++) == '+' ? 1 : -1;\\n    \\t\\tfor (; i < len; ++i) {\\n    \\t\\t\\tint tmp = str.charAt(i) - '0';\\n    \\t\\t\\tif (tmp < 0 || tmp > 9)\\n    \\t\\t\\t\\tbreak;\\n    \\t\\t\\tif (ans > Integer.MAX_VALUE / 10\\n    \\t\\t\\t\\t\\t|| (ans == Integer.MAX_VALUE / 10 && Integer.MAX_VALUE % 10 < tmp))\\n    \\t\\t\\t\\treturn sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n    \\t\\t\\telse\\n    \\t\\t\\t\\tans = ans * 10 + tmp;\\n    \\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 425289,
                "title": "python-99-89-no-cheating-by-using-int",
                "content": "```\\nMAPPING = {\\n    \"1\": 1,\\n    \"2\": 2,\\n    \"3\": 3,\\n    \"4\": 4,\\n    \"5\": 5,\\n    \"6\": 6,\\n    \"7\": 7,\\n    \"8\": 8,\\n    \"9\": 9,\\n    \"0\": 0,\\n}\\n\\nMAX_INT = 2**31-1\\nMIN_INT = -(2**31)\\n\\nclass Solution:\\n    def myAtoi(self, string: str) -> int:\\n        s = string.lstrip(\\' \\')\\n        if not s:\\n            return 0\\n        \\n        sign = -1 if s[0] == \"-\" else 1\\n        if sign != 1 or s[0] == \"+\":\\n            s = s[1:]\\n            \\n        res = 0\\n        for c in s:\\n            if c not in MAPPING:\\n                return self.limit(res * sign)\\n            \\n            res *= 10\\n            res += MAPPING[c]\\n            \\n        return self.limit(res * sign)\\n    \\n    def limit(self, x: int) -> int:\\n        if x > MAX_INT:\\n            return MAX_INT\\n        if x < MIN_INT:\\n            return MIN_INT\\n        return x\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nMAPPING = {\\n    \"1\": 1,\\n    \"2\": 2,\\n    \"3\": 3,\\n    \"4\": 4,\\n    \"5\": 5,\\n    \"6\": 6,\\n    \"7\": 7,\\n    \"8\": 8,\\n    \"9\": 9,\\n    \"0\": 0,\\n}\\n\\nMAX_INT = 2**31-1\\nMIN_INT = -(2**31)\\n\\nclass Solution:\\n    def myAtoi(self, string: str) -> int:\\n        s = string.lstrip(\\' \\')\\n        if not s:\\n            return 0\\n        \\n        sign = -1 if s[0] == \"-\" else 1\\n        if sign != 1 or s[0] == \"+\":\\n            s = s[1:]\\n            \\n        res = 0\\n        for c in s:\\n            if c not in MAPPING:\\n                return self.limit(res * sign)\\n            \\n            res *= 10\\n            res += MAPPING[c]\\n            \\n        return self.limit(res * sign)\\n    \\n    def limit(self, x: int) -> int:\\n        if x > MAX_INT:\\n            return MAX_INT\\n        if x < MIN_INT:\\n            return MIN_INT\\n        return x\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4922,
                "title": "java-simple-clean-and-fast",
                "content": "\\n\\n    public int myAtoi(String str) {\\n        str = str.trim();\\n        if (str.isEmpty()) \\n        \\treturn 0;\\n        int sign = 1; int i = 0;\\n        if (str.charAt(0) == '-' || str.charAt(0) == '+'){\\n        \\tsign = (str.charAt(0) == '-')? -1 : 1;\\n        \\tif (str.length() < 2 || !Character.isDigit(str.charAt(1))) {\\n        \\t\\treturn 0;\\n        \\t}\\n        \\ti++;\\n         }\\n        int n = 0;\\n        while (i < str.length()) {\\n        \\tif (Character.isDigit(str.charAt(i))) {\\n        \\t\\tint d = str.charAt(i) - '0';\\n        \\t\\tif (n > (Integer.MAX_VALUE - d) / 10) { //Detect the integer overflow.\\n        \\t\\t\\tn = (sign == -1)? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n        \\t\\t\\treturn n;\\n        \\t\\t}\\n        \\t\\tn = n*10 + d;\\n        \\t} else {\\n        \\t\\tbreak;\\n        \\t}\\n        \\ti++;\\n        }\\n        return sign * n;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n\\n    public int myAtoi(String str) {\\n        str = str.trim();\\n        if (str.isEmpty()) \\n        \\treturn 0;\\n        int sign = 1; int i = 0;\\n        if (str.charAt(0) == '-' || str.charAt(0) == '+'){\\n        \\tsign = (str.charAt(0) == '-')? -1 : 1;\\n        \\tif (str.length() < 2 || !Character.isDigit(str.charAt(1))) {\\n        \\t\\treturn 0;\\n        \\t}\\n        \\ti++;\\n         }\\n        int n = 0;\\n        while (i < str.length()) {\\n        \\tif (Character.isDigit(str.charAt(i))) {\\n        \\t\\tint d = str.charAt(i) - '0';\\n        \\t\\tif (n > (Integer.MAX_VALUE - d) / 10) { //Detect the integer overflow.\\n        \\t\\t\\tn = (sign == -1)? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n        \\t\\t\\treturn n;\\n        \\t\\t}\\n        \\t\\tn = n*10 + d;\\n        \\t} else {\\n        \\t\\tbreak;\\n        \\t}\\n        \\ti++;\\n        }\\n        return sign * n;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4671,
                "title": "javascript-seriously-code",
                "content": "    var myAtoi = function(str) {\\n        return Math.max(Math.min(parseInt(str) || 0, 2147483647), -2147483648)\\n    };\\n\\napparently the included `parseInt()` function does most of the requirements already",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var myAtoi = function(str) {\\n        return Math.max(Math.min(parseInt(str) || 0, 2147483647), -2147483648)\\n    };\\n\\napparently the included `parseInt()` function does most of the requirements already",
                "codeTag": "Unknown"
            },
            {
                "id": 162293,
                "title": "javascript-99-proper-clean-solution",
                "content": "```\\n/**\\n * @param {string} str\\n * @return {number}\\n */\\nvar myAtoi = function(str) {\\n    let i = 0;\\n    let res = 0;\\n    let isNegative = false;\\n    \\n    // 1. Skip spaces\\n    while (str[i] === \\' \\') {\\n        i += 1;\\n    }\\n    \\n    // 2. Optional +/-\\n    const maybeSign = str[i];\\n    if (maybeSign === \\'+\\' || maybeSign === \\'-\\') {\\n        isNegative = maybeSign === \\'-\\';\\n        i += 1;\\n    }\\n\\n    // 3. Process numbers and stop once an invalid character is found\\n    for (; i < str.length; i += 1) {\\n        const code = str.charCodeAt(i) - 48; // \\'0\\' is 48\\n        if (code < 0 || code > 9) {\\n            break;\\n        }\\n        res *= 10;\\n        res += code;\\n    }\\n    \\n    if (isNegative) {\\n        res = -res;\\n    }\\n    \\n    return Math.max(-(2**31), Math.min(2**31 - 1, res));\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} str\\n * @return {number}\\n */\\nvar myAtoi = function(str) {\\n    let i = 0;\\n    let res = 0;\\n    let isNegative = false;\\n    \\n    // 1. Skip spaces\\n    while (str[i] === \\' \\') {\\n        i += 1;\\n    }\\n    \\n    // 2. Optional +/-\\n    const maybeSign = str[i];\\n    if (maybeSign === \\'+\\' || maybeSign === \\'-\\') {\\n        isNegative = maybeSign === \\'-\\';\\n        i += 1;\\n    }\\n\\n    // 3. Process numbers and stop once an invalid character is found\\n    for (; i < str.length; i += 1) {\\n        const code = str.charCodeAt(i) - 48; // \\'0\\' is 48\\n        if (code < 0 || code > 9) {\\n            break;\\n        }\\n        res *= 10;\\n        res += code;\\n    }\\n    \\n    if (isNegative) {\\n        res = -res;\\n    }\\n    \\n    return Math.max(-(2**31), Math.min(2**31 - 1, res));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497114,
                "title": "c-java-python-javascript-with-explanation-beats-99-81",
                "content": "# Intuition:\\nThe problem is to reverse an integer value. For example, if the input is 123, then the output should be 321. Similarly, if the input is -123, then the output should be -321.\\n\\n# Approach:\\n1. Initialize a variable \\'reverse\\' to store the reversed number. Also, initialize a variable \\'num\\' to store the input number \\'x\\'.\\n2. Use a while loop to iterate until the input number \\'x\\' becomes 0.\\n3. Inside the loop, find the last digit of the input number \\'x\\' using the modulo operator and store it in a variable \\'digit\\'.\\n4. Multiply the \\'reverse\\' variable by 10 and add the \\'digit\\' variable to it. This will reverse the number digit by digit.\\n5. Divide the input number \\'x\\' by 10 and store the quotient back to \\'x\\'. This will remove the last digit of \\'x\\' in each iteration.\\n6. Check if the \\'reverse\\' variable overflows the integer range or not. If it overflows, then return 0.\\n7. Return the \\'reverse\\' variable as the output.\\n\\n# Complexity:\\n- Time Complexity: O(log(x)), where x is the input number.\\nIn each iteration, the input number is divided by 10, so the time complexity will be proportional to the number of digits in the input number, which is log(x).\\n- Space Complexity: O(1)\\nWe are not using any extra data structure to store the input or output, so the space complexity is constant.\\n---\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int len = s.size();\\n        double num = 0;\\n        int i=0;\\n        while(s[i] == \\' \\'){\\n            i++;\\n        }\\n        bool positive = s[i] == \\'+\\';\\n        bool negative = s[i] == \\'-\\';\\n        positive == true ? i++ : i;\\n        negative == true ? i++ : i;\\n        while(i < len && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n            num = num*10 + (s[i]-\\'0\\');\\n            i++;\\n        }\\n        num = negative ? -num : num;\\n        num = (num > INT_MAX) ? INT_MAX : num;\\n        num = (num < INT_MIN) ? INT_MIN : num;\\n        return int(num);\\n    }\\n};\\n```\\n---\\n# JAVA\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        int len = s.length();\\n        if (len == 0) {\\n            return 0; // Handle empty string case\\n        }\\n        double num = 0;\\n        int i = 0;\\n        while (i < len && s.charAt(i) == \\' \\') {\\n            i++;\\n        }\\n        if (i == len) {\\n            return 0; // All characters are whitespace\\n        }\\n        boolean positive = s.charAt(i) == \\'+\\';\\n        boolean negative = s.charAt(i) == \\'-\\';\\n        if (positive) {\\n            i++;\\n        }\\n        if (negative) {\\n            i++;\\n        }\\n        while (i < len && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n            num = num * 10 + (s.charAt(i) - \\'0\\');\\n            i++;\\n        }\\n        num = negative ? -num : num;\\n        num = (num > Integer.MAX_VALUE) ? Integer.MAX_VALUE : num;\\n        num = (num < Integer.MIN_VALUE) ? Integer.MIN_VALUE : num;\\n        return (int) num;\\n    }\\n}\\n\\n```\\n---\\n# Python\\n```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        s = s.strip()  # Remove leading and trailing whitespace\\n        if not s:\\n            return 0  # Handle empty string case\\n        num = 0\\n        i = 0\\n        sign = 1  # 1 for positive, -1 for negative\\n        if s[i] == \\'+\\':\\n            i += 1\\n        elif s[i] == \\'-\\':\\n            i += 1\\n            sign = -1\\n        while i < len(s) and s[i].isdigit():\\n            num = num * 10 + int(s[i])\\n            i += 1\\n        num *= sign\\n        num = max(min(num, 2 ** 31 - 1), -2 ** 31)  # Check for integer overflow\\n        return num\\n\\n\\n```\\n---\\n# JavaScript\\n```\\nvar myAtoi = function(s) {\\n    s = s.trim();  // Remove leading and trailing whitespace\\n    if (s.length === 0) {\\n        return 0;  // Handle empty string case\\n    }\\n    let num = 0;\\n    let i = 0;\\n    let sign = 1;  // 1 for positive, -1 for negative\\n    if (s[i] === \\'+\\') {\\n        i++;\\n    } else if (s[i] === \\'-\\') {\\n        i++;\\n        sign = -1;\\n    }\\n    while (i < s.length && /^\\\\d$/.test(s[i])) {\\n        num = num * 10 + parseInt(s[i]);\\n        i++;\\n    }\\n    num *= sign;\\n    num = Math.max(Math.min(num, Math.pow(2, 31) - 1), -Math.pow(2, 31));  // Check for integer overflow\\n    return num;\\n}\\n\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int len = s.size();\\n        double num = 0;\\n        int i=0;\\n        while(s[i] == \\' \\'){\\n            i++;\\n        }\\n        bool positive = s[i] == \\'+\\';\\n        bool negative = s[i] == \\'-\\';\\n        positive == true ? i++ : i;\\n        negative == true ? i++ : i;\\n        while(i < len && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n            num = num*10 + (s[i]-\\'0\\');\\n            i++;\\n        }\\n        num = negative ? -num : num;\\n        num = (num > INT_MAX) ? INT_MAX : num;\\n        num = (num < INT_MIN) ? INT_MIN : num;\\n        return int(num);\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        int len = s.length();\\n        if (len == 0) {\\n            return 0; // Handle empty string case\\n        }\\n        double num = 0;\\n        int i = 0;\\n        while (i < len && s.charAt(i) == \\' \\') {\\n            i++;\\n        }\\n        if (i == len) {\\n            return 0; // All characters are whitespace\\n        }\\n        boolean positive = s.charAt(i) == \\'+\\';\\n        boolean negative = s.charAt(i) == \\'-\\';\\n        if (positive) {\\n            i++;\\n        }\\n        if (negative) {\\n            i++;\\n        }\\n        while (i < len && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n            num = num * 10 + (s.charAt(i) - \\'0\\');\\n            i++;\\n        }\\n        num = negative ? -num : num;\\n        num = (num > Integer.MAX_VALUE) ? Integer.MAX_VALUE : num;\\n        num = (num < Integer.MIN_VALUE) ? Integer.MIN_VALUE : num;\\n        return (int) num;\\n    }\\n}\\n\\n```\n```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        s = s.strip()  # Remove leading and trailing whitespace\\n        if not s:\\n            return 0  # Handle empty string case\\n        num = 0\\n        i = 0\\n        sign = 1  # 1 for positive, -1 for negative\\n        if s[i] == \\'+\\':\\n            i += 1\\n        elif s[i] == \\'-\\':\\n            i += 1\\n            sign = -1\\n        while i < len(s) and s[i].isdigit():\\n            num = num * 10 + int(s[i])\\n            i += 1\\n        num *= sign\\n        num = max(min(num, 2 ** 31 - 1), -2 ** 31)  # Check for integer overflow\\n        return num\\n\\n\\n```\n```\\nvar myAtoi = function(s) {\\n    s = s.trim();  // Remove leading and trailing whitespace\\n    if (s.length === 0) {\\n        return 0;  // Handle empty string case\\n    }\\n    let num = 0;\\n    let i = 0;\\n    let sign = 1;  // 1 for positive, -1 for negative\\n    if (s[i] === \\'+\\') {\\n        i++;\\n    } else if (s[i] === \\'-\\') {\\n        i++;\\n        sign = -1;\\n    }\\n    while (i < s.length && /^\\\\d$/.test(s[i])) {\\n        num = num * 10 + parseInt(s[i]);\\n        i++;\\n    }\\n    num *= sign;\\n    num = Math.max(Math.min(num, Math.pow(2, 31) - 1), -Math.pow(2, 31));  // Check for integer overflow\\n    return num;\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3047078,
                "title": "simple-c-recursive-solution-o-n-complexity",
                "content": "# Intuition\\n ## Please Upvote if you Like \\nIntuition is to just first consider only one element from string  move your pointer untill you get your first integer also take variable to consider the case if there is negative \\'-\\'sign before \\nafter just call same function again n again (recursion) untill you get a number which is less than \\'0\\' and greater than \\'9\\' and return your answer. \\n\\n# Approach\\nBasically be recursively check elements in string one by one.\\nALL OTHER CASES OF ENGLISH WORDS AND \\'.\\' AND AFTERWARD WHITESPACES CAN BE HANDLE BY THE CONDITION S[I]<\\'0\\' && S[I]>\\'9\\';\\n\\n# Complexity\\n Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    long atoi(string s, int sign, int i, long result) {\\n        if(sign*result>=INT_MAX){\\n            return INT_MAX;\\n        }\\n        if(sign*result<=INT_MIN){\\n            return INT_MIN;\\n        }\\n        if(i>=s.size()|| s[i]<\\'0\\' || s[i]>\\'9\\'){\\n            return sign*result;\\n        }\\n        \\n       \\n        result=atoi(s,sign,i+1,(result*10+(s[i]-\\'0\\')));\\n        \\n        return result;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1;\\n        while (i < n && s[i] == \\' \\')\\n            ++i;\\n\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n\\n        return atoi(s, sign, i, 0);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    long atoi(string s, int sign, int i, long result) {\\n        if(sign*result>=INT_MAX){\\n            return INT_MAX;\\n        }\\n        if(sign*result<=INT_MIN){\\n            return INT_MIN;\\n        }\\n        if(i>=s.size()|| s[i]<\\'0\\' || s[i]>\\'9\\'){\\n            return sign*result;\\n        }\\n        \\n       \\n        result=atoi(s,sign,i+1,(result*10+(s[i]-\\'0\\')));\\n        \\n        return result;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1;\\n        while (i < n && s[i] == \\' \\')\\n            ++i;\\n\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n\\n        return atoi(s, sign, i, 0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 5043,
                "title": "my-python-solution-cost-68ms",
                "content": "    class Solution:\\n        # @return an integer\\n        def atoi(self, str):\\n            str = str.strip()\\n            if len(str) == 0:\\n                return 0\\n            tmp = \"0\"\\n            result = 0\\n            i = 0\\n            if str[0] in \"+-\":\\n                tmp = str[0]\\n                i = 1\\n            MAX_INT = 2147483647\\n            MIN_INT = -2147483648\\n            for i in xrange(i, len(str)):\\n                if str[i].isdigit():\\n                    tmp += str[i]\\n                else:\\n                    break\\n            if len(tmp) > 1:\\n                result = int(tmp)\\n            if result > MAX_INT > 0:\\n                return MAX_INT\\n            elif result < MIN_INT < 0:\\n                return MIN_INT\\n            else:\\n                return result\\n\\nAt first, I remove all whitspaces by using strip() function. Then, we should know only one operator is allowed, if there are two operator, for example, \"+-2\", the input is invalid for atoi() function, 0 should be returned. And we should put as many as possible numerical value into the 'tmp' string. If the length of 'tmp' is 1, it means the 'tmp' is '0' or '+' or '-', and we should return 0 in the function. If the length of 'tmp' is greater than 1, it means the 'tmp' is '0...(numbers)' or '+...(numbers)' or '-...(numbers)', then we can use integer force conversion to make 'tmp' to an integer. At last,  If the result is out of the range of representable values, MAX_INT (2147483647) or MIN_INT (-2147483648) is returned.",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n        # @return an integer\\n        def atoi(self, str):\\n            str = str.strip()\\n            if len(str) == 0:\\n                return 0\\n            tmp = \"0\"\\n            result = 0\\n            i = 0\\n            if str[0] in \"+-\":\\n                tmp = str[0]\\n                i = 1\\n            MAX_INT = 2147483647\\n            MIN_INT = -2147483648\\n            for i in xrange(i, len(str)):\\n                if str[i].isdigit():\\n                    tmp += str[i]\\n                else:\\n                    break\\n            if len(tmp) > 1:\\n                result = int(tmp)\\n            if result > MAX_INT > 0:\\n                return MAX_INT\\n            elif result < MIN_INT < 0:\\n                return MIN_INT\\n            else:\\n                return result\\n\\nAt first, I remove all whitspaces by using strip() function. Then, we should know only one operator is allowed, if there are two operator, for example, \"+-2\", the input is invalid for atoi() function, 0 should be returned. And we should put as many as possible numerical value into the 'tmp' string. If the length of 'tmp' is 1, it means the 'tmp' is '0' or '+' or '-', and we should return 0 in the function. If the length of 'tmp' is greater than 1, it means the 'tmp' is '0...(numbers)' or '+...(numbers)' or '-...(numbers)', then we can use integer force conversion to make 'tmp' to an integer. At last,  If the result is out of the range of representable values, MAX_INT (2147483647) or MIN_INT (-2147483648) is returned.",
                "codeTag": "Java"
            },
            {
                "id": 1689190,
                "title": "python-short-solution-explained",
                "content": "Be careful again with border cases, no ideas behind, just do character by character, and do not forget all cases, test it first, before submission.\\n\\n#### Complexity\\nTime and space complexity is `O(n)`, where `n` is length of `s`.\\n\\n#### Code\\n```python\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        ls = list(s.strip())\\n        if len(ls) == 0: return 0\\n        \\n        sign = -1 if ls[0] == \\'-\\' else 1\\n        if ls[0] in \\'-+\\' : ls = ls[1:]\\n        ans = 0\\n        \\n        for symb in ls:\\n            if not symb.isdigit(): break\\n            ans = ans*10 + int(symb)\\n        \\n        return max(-2**31, min(sign*ans, 2**31-1))\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        ls = list(s.strip())\\n        if len(ls) == 0: return 0\\n        \\n        sign = -1 if ls[0] == \\'-\\' else 1\\n        if ls[0] in \\'-+\\' : ls = ls[1:]\\n        ans = 0\\n        \\n        for symb in ls:\\n            if not symb.isdigit(): break\\n            ans = ans*10 + int(symb)\\n        \\n        return max(-2**31, min(sign*ans, 2**31-1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1689061,
                "title": "c-0ms-solution",
                "content": "\\n\\tint myAtoi(string s) {\\n\\t\\t\\tint n=s.length(),i=0;\\n\\t\\t\\tbool flag=true;\\n\\t\\t\\t\\n\\t\\t\\t//discard all the spaces at the beginning of the string\\n\\t\\t\\twhile(i<n and s[i]==\\' \\')i++;\\n\\t\\t\\t\\n\\t\\t\\t//Check whether the first character is a sign or not\\n\\t\\t\\t//flag holds true for +ve and false for -ve .\\n\\t\\t\\tif(s[i]==\\'+\\') i++;\\n\\t\\t\\telse if(s[i]==\\'-\\'){\\n\\t\\t\\t\\tflag=false;\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//read until we reach non digit character\\n\\t\\t\\tlong res=0;\\n\\t\\t\\twhile(i<n){\\n\\t\\t\\t\\tif(s[i]>=\\'0\\' and s[i]<=\\'9\\'){\\n\\t\\t\\t\\t\\tres=res*10+(s[i]-\\'0\\');\\n\\t\\t\\t\\t\\tif(res>=INT_MAX) break;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse break;\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//update -ve number accordingly\\n\\t\\t\\tif(!flag) res*=-1; \\n\\t\\t\\t\\n\\t\\t\\tif(res<=INT_MIN) return INT_MIN;\\n\\t\\t\\telse if(res>=INT_MAX) return INT_MAX;\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\t\\nplease upvote : )",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n\\tint myAtoi(string s) {\\n\\t\\t\\tint n=s.length(),i=0;\\n\\t\\t\\tbool flag=true;\\n\\t\\t\\t\\n\\t\\t\\t//discard all the spaces at the beginning of the string\\n\\t\\t\\twhile(i<n and s[i]==\\' \\')i++;\\n\\t\\t\\t\\n\\t\\t\\t//Check whether the first character is a sign or not\\n\\t\\t\\t//flag holds true for +ve and false for -ve .\\n\\t\\t\\tif(s[i]==\\'+\\') i++;\\n\\t\\t\\telse if(s[i]==\\'-\\'){\\n\\t\\t\\t\\tflag=false;\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//read until we reach non digit character\\n\\t\\t\\tlong res=0;\\n\\t\\t\\twhile(i<n){\\n\\t\\t\\t\\tif(s[i]>=\\'0\\' and s[i]<=\\'9\\'){\\n\\t\\t\\t\\t\\tres=res*10+(s[i]-\\'0\\');\\n\\t\\t\\t\\t\\tif(res>=INT_MAX) break;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse break;\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//update -ve number accordingly\\n\\t\\t\\tif(!flag) res*=-1; \\n\\t\\t\\t\\n\\t\\t\\tif(res<=INT_MIN) return INT_MIN;\\n\\t\\t\\telse if(res>=INT_MAX) return INT_MAX;\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\t\\nplease upvote : )",
                "codeTag": "Unknown"
            },
            {
                "id": 1422559,
                "title": "my-clear-c-solution-with-comments",
                "content": "```\\nint myAtoi(string A) {\\n        int n = A.size();\\n        int i=0;\\n\\t\\t\\n\\t\\t//removing any whitespaces in the beginning of the string\\n        while(i<n)\\n        {\\n            if(A[i] == \\' \\') i++;\\n            else break;\\n        }\\n\\t\\t\\n        bool neg = false;\\n\\t\\t\\n\\t\\t//if there is a minus sign, neg = true indicating that later we need to multiply our ans by -1\\n        if(A[i] == \\'-\\') neg=true,i++;\\n        else if(A[i] == \\'+\\') i++;\\n        \\n\\t\\t//this string will be used to extract out the part which need to be converted and \\n\\t\\t//rest of the string will be ignored\\n        string str = \"\";\\n        \\n\\t\\t//if there are any leading 0\\'s , then they also need to be ignored\\n        while(i<n)\\n        {\\n            if(A[i] != \\'0\\') break;\\n            else i++;\\n        }\\n        \\n        while(i<n)\\n        {\\n\\t\\t\\t// if the current character lies anywhere between 0 and 9 (inclusive), \\n\\t\\t\\t//we add it to str\\n            if(A[i] <= \\'9\\' and A[i] >= \\'0\\')\\n            {\\n                str += A[i];\\n            }\\n\\t\\t\\t\\n\\t\\t\\t//in case of any other character, we simply ignore the rest of the string from there\\n            else break;\\n            i++;\\n        }\\n\\n\\t\\t//variable to store the final number\\n        long long res = 0;\\n\\t\\t\\n\\t\\t//variable to take care of the case if there is an overflow\\n        bool ovf = false;\\n        int p = 0;\\n\\t\\t\\n        for(int i=str.size()-1;i>=0;i--)\\n        {\\n\\t\\t\\t//converting the values to int and then multiplying by\\n\\t\\t\\t//corrent power of 10 so as to get that value at correct position\\n            int val = str[i] - \\'0\\';\\n            res += val * pow(10,p);\\n            p++;\\n\\t\\t\\t\\n\\t\\t\\t//in case the overflow occurs, we immediately stop and make ovf = true\\n            if((p>10) or res > INT_MAX) {ovf=true; break;}\\n        }\\n\\t\\t\\n\\t\\t//in case there is overflow, we return the values accordingly\\n        if(ovf)\\n        {\\n            if(neg) return INT_MIN;\\n            else return INT_MAX;\\n        }\\n\\t\\t\\n\\t\\t//else if neg = true return -res else res\\n        if(neg) return -res;\\n        else return res;\\n    }\\n```\\n\\n**Time Complexity :** O( |A| ) //as we only have to do one traversal over the string A\\n**Space Complexity :** O( |A| ) //for string str",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint myAtoi(string A) {\\n        int n = A.size();\\n        int i=0;\\n\\t\\t\\n\\t\\t//removing any whitespaces in the beginning of the string\\n        while(i<n)\\n        {\\n            if(A[i] == \\' \\') i++;\\n            else break;\\n        }\\n\\t\\t\\n        bool neg = false;\\n\\t\\t\\n\\t\\t//if there is a minus sign, neg = true indicating that later we need to multiply our ans by -1\\n        if(A[i] == \\'-\\') neg=true,i++;\\n        else if(A[i] == \\'+\\') i++;\\n        \\n\\t\\t//this string will be used to extract out the part which need to be converted and \\n\\t\\t//rest of the string will be ignored\\n        string str = \"\";\\n        \\n\\t\\t//if there are any leading 0\\'s , then they also need to be ignored\\n        while(i<n)\\n        {\\n            if(A[i] != \\'0\\') break;\\n            else i++;\\n        }\\n        \\n        while(i<n)\\n        {\\n\\t\\t\\t// if the current character lies anywhere between 0 and 9 (inclusive), \\n\\t\\t\\t//we add it to str\\n            if(A[i] <= \\'9\\' and A[i] >= \\'0\\')\\n            {\\n                str += A[i];\\n            }\\n\\t\\t\\t\\n\\t\\t\\t//in case of any other character, we simply ignore the rest of the string from there\\n            else break;\\n            i++;\\n        }\\n\\n\\t\\t//variable to store the final number\\n        long long res = 0;\\n\\t\\t\\n\\t\\t//variable to take care of the case if there is an overflow\\n        bool ovf = false;\\n        int p = 0;\\n\\t\\t\\n        for(int i=str.size()-1;i>=0;i--)\\n        {\\n\\t\\t\\t//converting the values to int and then multiplying by\\n\\t\\t\\t//corrent power of 10 so as to get that value at correct position\\n            int val = str[i] - \\'0\\';\\n            res += val * pow(10,p);\\n            p++;\\n\\t\\t\\t\\n\\t\\t\\t//in case the overflow occurs, we immediately stop and make ovf = true\\n            if((p>10) or res > INT_MAX) {ovf=true; break;}\\n        }\\n\\t\\t\\n\\t\\t//in case there is overflow, we return the values accordingly\\n        if(ovf)\\n        {\\n            if(neg) return INT_MIN;\\n            else return INT_MAX;\\n        }\\n\\t\\t\\n\\t\\t//else if neg = true return -res else res\\n        if(neg) return -res;\\n        else return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 748024,
                "title": "python3-solution-with-a-process-for-coding-interviews",
                "content": "Hello,\\n\\nHere is my solution with a process to follow during a coding interview:\\n\\n1.  Problem Summary / Clarifications / TDD:\\n\\t\\t- Q1. What if there is a space between the sign and the number? (see cases 5 and 6)\\n\\t\\t- Q2. What if the result is not an int. Python manages overflow issues. See case 12 and 14.  \\n\\t\\t\\n        Case.01. myAtoi(\"           \") = 0          (a non valid number with spaces only)\\n        Case.02. myAtoi(\"words      \") = 0          (a non valid number only)\\n        Case.03. myAtoi(\"words12365 \") = 0          (a non valid number is followed by a valid number I)\\n        Case.04. myAtoi(\"words 1236 \") = 0          (a non valid number is followed by a valid number II)\\n        Case.05. myAtoi(\"+ 4193\"     ) = 0          (a non valid number: space between sign and number I)\\n        Case.06. myAtoi(\"- 4193    \" ) = 0          (a non valid number: space between sign and number II)\\n        \\n        Case.07. myAtoi(\"4193\"       ) = 4193       (a valid number only)\\n        Case.08. myAtoi(\"4193word\"   ) = 4193       (a valid number is followed by a non valid number I)\\n        Case.09. myAtoi(\"4193 word\"  ) = 4193       (a valid number is followed by a non valid number II)\\n        Case.10. myAtoi(\"4193 12 wo\" ) = 4193       (a valid number is followed by a another valid number)\\n        Case.11. myAtoi(\"+4193\"      ) = 4193       (a positive valid number with the sign +)\\n        Case.12. myAtoi(\"+2147483648\") = 2147483647 (a positive number greater than int max value)\\n        Case.13. myAtoi(\"-4193\"      ) = -4193      (a negatve valid number with the sign -)\\n        Case.14. myAtoi(\"-2147483649\") = -2147483648(a negative number less than int min value)\\n        \\n2.  Intuition:\\n        1. Extract the number (str_num) from s\\n        2. Extract the sign from str_num\\n        3. Loop each digit of str_num and compute the conversion in num\\n        4. Break when a non digit char is found or num reach max/min int\\n        5. Return num * sign\\n        \\n3. Implementation: see below\\n4. Tests: Use all tests created in step 1 (TDD)\\n5. Analysis:\\n\\t- Time Complexity: O(|s|)\\n\\t- Space Complexity: O(|s|)\\n\\t- Could we do better?\\n\\t\\t-  Time Complexity:  We can\\'t in term of asymptotique analysis but if we don\\'t use the split function and `break` as soon as a non valid digit is found, the code may be faster\\n\\t\\t- Space Complexity:  Yes, we could make it O(1) if we don\\'t use the split function and we loop on each character of s \\n\\n```\\nclass Solution:\\n    \\n    def myAtoi(self, s: str) -> int:\\n        str_list = s.split()\\n        \\n        if not str_list:\\n            return 0\\n                \\n        num_str = str_list[0]\\n        sign = -1 if num_str[0] == \\'-\\' else +1\\n        start = 1 if num_str[0] in \\'-+\\' else 0\\n        \\n        num = 0\\n\\t\\tint_boundary =  0x80000000 if sign == -1 else 0x7fffffff # 2147483648 or 2147483647\\n        \\n        for i in range(start, len(num_str)):\\n            \\n\\t\\t\\tord_digit = ord(num_str[i])\\n            if ord_digit < 48 or ord_digit > 57:\\n                break\\n            \\n            num *= 10\\n            num += ord_digit - 48\\n            \\n            if num >= int_boundary:\\n                num = int_boundary\\n                break\\n        \\n        return num * sign\\n\\t\\t\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    \\n    def myAtoi(self, s: str) -> int:\\n        str_list = s.split()\\n        \\n        if not str_list:\\n            return 0\\n                \\n        num_str = str_list[0]\\n        sign = -1 if num_str[0] == \\'-\\' else +1\\n        start = 1 if num_str[0] in \\'-+\\' else 0\\n        \\n        num = 0\\n\\t\\tint_boundary =  0x80000000 if sign == -1 else 0x7fffffff # 2147483648 or 2147483647\\n        \\n        for i in range(start, len(num_str)):\\n            \\n\\t\\t\\tord_digit = ord(num_str[i])\\n            if ord_digit < 48 or ord_digit > 57:\\n                break\\n            \\n            num *= 10\\n            num += ord_digit - 48\\n            \\n            if num >= int_boundary:\\n                num = int_boundary\\n                break\\n        \\n        return num * sign\\n\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 773871,
                "title": "c-simple-fast-and-clean-explanation",
                "content": "Before reading my code which is very straight forward and easy to read you must know few things  which is very common in c++ like \\nINT_MAX (it represent maximum value integer can store) \\nINT_MIN(it represent minimum value integer can store)\\nstr[i]-\\'0\\' (It convert ASCII value of a character to numaric value example if we subtract ascii vale of  \\'9\\' from ascii value of \\'0\\' it give us 9)\\nplz upvote if like the solution this is for the first time i post any code so upvote if you like and comment down you query.\\n\\'\\'\\'int myAtoi(string str) {\\n\\n\\n\\n        ios_base::sync_with_stdio(false);//for fast input out put you can ignore \\n        cin.tie(NULL);//it help to run code fast \\n        int i=0,n=str.length();\\n        while(str[i]==\\' \\')//removing all the white space from given string \\n            i++;\\n        int flag=0;// To check weather the integer is positive or negitive \\n        long long int a=0;//To over come the overflow problem if you use int it may overflow \\n        if(str[i]==\\'-\\')\\n        {\\n            flag=1;\\n            i++;\\n        }\\n        if(str[i]==\\'+\\' && flag==0)//To overcome test case like \\'+42\\'\\n            i++;\\n        \\n       while(i<n && str[i]>=\\'0\\' && str[i]<=\\'9\\')\\n       {\\n           a=a*10+(str[i]-\\'0\\');//convertion from char to interger \\n           if(a>INT_MAX && flag==0)//check whether a is greater then INTMAX(2^31-1);\\n                return INT_MAX;\\n           if(-a<INT_MIN && flag==1)//check for INTMIN(-2^31);\\n                return INT_MIN;\\n\\t\\t\\ti++;\\n       }\\n        \\n        if(flag==1)\\n            return -a;\\n        return a;\\n    }\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "Before reading my code which is very straight forward and easy to read you must know few things  which is very common in c++ like \\nINT_MAX (it represent maximum value integer can store) \\nINT_MIN(it represent minimum value integer can store)\\nstr[i]-\\'0\\' (It convert ASCII value of a character to numaric value example if we subtract ascii vale of  \\'9\\' from ascii value of \\'0\\' it give us 9)\\nplz upvote if like the solution this is for the first time i post any code so upvote if you like and comment down you query.\\n\\'\\'\\'int myAtoi(string str) {\\n\\n\\n\\n        ios_base::sync_with_stdio(false);//for fast input out put you can ignore \\n        cin.tie(NULL);//it help to run code fast \\n        int i=0,n=str.length();\\n        while(str[i]==\\' \\')//removing all the white space from given string \\n            i++;\\n        int flag=0;// To check weather the integer is positive or negitive \\n        long long int a=0;//To over come the overflow problem if you use int it may overflow \\n        if(str[i]==\\'-\\')\\n        {\\n            flag=1;\\n            i++;\\n        }\\n        if(str[i]==\\'+\\' && flag==0)//To overcome test case like \\'+42\\'\\n            i++;\\n        \\n       while(i<n && str[i]>=\\'0\\' && str[i]<=\\'9\\')\\n       {\\n           a=a*10+(str[i]-\\'0\\');//convertion from char to interger \\n           if(a>INT_MAX && flag==0)//check whether a is greater then INTMAX(2^31-1);\\n                return INT_MAX;\\n           if(-a<INT_MIN && flag==1)//check for INTMIN(-2^31);\\n                return INT_MIN;\\n\\t\\t\\ti++;\\n       }\\n        \\n        if(flag==1)\\n            return -a;\\n        return a;\\n    }\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 4889,
                "title": "c-10-lines-solution-easy-understanding-clean-code",
                "content": "      int myAtoi(string str) {\\n        if (str.empty()) return 0;\\n        int i = 0, sign = 1;\\n        while (i + 1 < str.size() && isspace(str[i])) ++i;\\n        long res = 0;\\n        if (str[i] == '-' || str[i] == '+') sign = 44 - str[i++];\\n        while (i < str.size()) {\\n            if (isdigit(str[i])) res = 10 * res + str[i++] - '0';\\n            else return res * sign;\\n            if (res > INT_MAX) return sign == -1 ? INT_MIN : INT_MAX;\\n        }\\n        return res * sign;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "      int myAtoi(string str) {\\n        if (str.empty()) return 0;\\n        int i = 0, sign = 1;\\n        while (i + 1 < str.size() && isspace(str[i])) ++i;\\n        long res = 0;\\n        if (str[i] == '-' || str[i] == '+') sign = 44 - str[i++];\\n        while (i < str.size()) {\\n            if (isdigit(str[i])) res = 10 * res + str[i++] - '0';\\n            else return res * sign;\\n            if (res > INT_MAX) return sign == -1 ? INT_MIN : INT_MAX;\\n        }\\n        return res * sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4647,
                "title": "easy-to-understand-5ms-c-code",
                "content": "    int myAtoi(char* str) {\\n        char *s = str;\\n    \\n        while (*s && isspace(*s)) /* skip spaces */\\n            s++;\\n    \\n        int n = 0;\\n        if (*s) {\\n            int sign = 1;\\n            if (*s == '+')\\n                s++;\\n            else if (*s == '-') {\\n                sign = -1;\\n                s++;\\n            }\\n        \\n            //while (*s && isspace(*s)) /* skip spaces */\\n            //    s++;\\n        \\n            while (*s && isdigit(*s)) {\\n                int oldn = n;\\n                n = n*10 + *s++ - '0';\\n                if (n/10 != oldn) { /* integer too large or too small */\\n                    if (sign < 0)\\n                        return INT_MIN;\\n                    else \\n                        return INT_MAX;\\n                }\\n            }\\n        \\n            n *= sign;\\n        }\\n    \\n        return n;\\n    }",
                "solutionTags": [],
                "code": "    int myAtoi(char* str) {\\n        char *s = str;\\n    \\n        while (*s && isspace(*s)) /* skip spaces */\\n            s++;\\n    \\n        int n = 0;\\n        if (*s) {\\n            int sign = 1;\\n            if (*s == '+')\\n                s++;\\n            else if (*s == '-') {\\n                sign = -1;\\n                s++;\\n            }\\n        \\n            //while (*s && isspace(*s)) /* skip spaces */\\n            //    s++;\\n        \\n            while (*s && isdigit(*s)) {\\n                int oldn = n;\\n                n = n*10 + *s++ - '0';\\n                if (n/10 != oldn) { /* integer too large or too small */\\n                    if (sign < 0)\\n                        return INT_MIN;\\n                    else \\n                        return INT_MAX;\\n                }\\n            }\\n        \\n            n *= sign;\\n        }\\n    \\n        return n;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1545121,
                "title": "java-tc-o-n-sc-o-1-simple-concise-one-pass-solution-with-explanations",
                "content": "```java\\n/**\\n * Ignoring the leading whitespace and then iterate over the remaining to find\\n * digits\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Length of the input string.\\n */\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if (s == null) {\\n            throw new IllegalArgumentException(\"Input string is null\");\\n        }\\n\\n        int len = s.length();\\n        if (len == 0) {\\n            return 0;\\n        }\\n\\n        int idx = 0;\\n\\n        // Ignoring the leading whitespace\\n        while (idx < len && s.charAt(idx) == \\' \\') {\\n            idx++;\\n        }\\n        if (idx == len) {\\n            return 0;\\n        }\\n\\n        // Checking for sign\\n        int sign = 1;\\n        char c = s.charAt(idx);\\n        if (c == \\'-\\' || c == \\'+\\') {\\n            if (c == \\'-\\') {\\n                sign = -1;\\n            }\\n            idx++;\\n        }\\n\\n        int result = 0;\\n\\n        while (idx < len && Character.isDigit(s.charAt(idx))) {\\n            int digit = s.charAt(idx) - \\'0\\';\\n            if (result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10\\n                    // Here Checking for sign is not required as for Int.MIN last digit is 8 which\\n                    // is greater than 7.\\n                    && digit > Integer.MAX_VALUE % 10)) {\\n                return sign == -1 ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            result = result * 10 + digit;\\n            idx++;\\n        }\\n\\n        return sign * result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```java\\n/**\\n * Ignoring the leading whitespace and then iterate over the remaining to find\\n * digits\\n *\\n * Time Complexity: O(N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Length of the input string.\\n */\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if (s == null) {\\n            throw new IllegalArgumentException(\"Input string is null\");\\n        }\\n\\n        int len = s.length();\\n        if (len == 0) {\\n            return 0;\\n        }\\n\\n        int idx = 0;\\n\\n        // Ignoring the leading whitespace\\n        while (idx < len && s.charAt(idx) == \\' \\') {\\n            idx++;\\n        }\\n        if (idx == len) {\\n            return 0;\\n        }\\n\\n        // Checking for sign\\n        int sign = 1;\\n        char c = s.charAt(idx);\\n        if (c == \\'-\\' || c == \\'+\\') {\\n            if (c == \\'-\\') {\\n                sign = -1;\\n            }\\n            idx++;\\n        }\\n\\n        int result = 0;\\n\\n        while (idx < len && Character.isDigit(s.charAt(idx))) {\\n            int digit = s.charAt(idx) - \\'0\\';\\n            if (result > Integer.MAX_VALUE / 10 || (result == Integer.MAX_VALUE / 10\\n                    // Here Checking for sign is not required as for Int.MIN last digit is 8 which\\n                    // is greater than 7.\\n                    && digit > Integer.MAX_VALUE % 10)) {\\n                return sign == -1 ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            result = result * 10 + digit;\\n            idx++;\\n        }\\n\\n        return sign * result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 431943,
                "title": "javascript-solution-no-extra-library",
                "content": "### The Idea\\n1. Trim\\n2. Get the sign\\n3. Get the digit\\n```\\nvar myAtoi = function(str) {\\n    let i=0, sign = 1, num = 0, MIN = -2147483648, MAX = 2147483647;\\n    str = str.trim();\\n    if (str[i]==\\'-\\' || str[i]==\\'+\\') sign = str[i++]==\\'-\\'?-1:1;\\n    while (str[i] && str[i].charCodeAt(0)-48 <= 9 && str[i].charCodeAt(0)-48 >= 0) {\\n        num = num*10 + (str[i++].charCodeAt(0)-48);\\n    }\\n    num = sign*num;\\n    return num<=MIN?MIN:num>=MAX?MAX:num;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar myAtoi = function(str) {\\n    let i=0, sign = 1, num = 0, MIN = -2147483648, MAX = 2147483647;\\n    str = str.trim();\\n    if (str[i]==\\'-\\' || str[i]==\\'+\\') sign = str[i++]==\\'-\\'?-1:1;\\n    while (str[i] && str[i].charCodeAt(0)-48 <= 9 && str[i].charCodeAt(0)-48 >= 0) {\\n        num = num*10 + (str[i++].charCodeAt(0)-48);\\n    }\\n    num = sign*num;\\n    return num<=MIN?MIN:num>=MAX?MAX:num;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 156079,
                "title": "4ms-c-very-easy-explanation-of-handling-the-overflow-condition-beats-100-without-long-data-type",
                "content": "# Explanation:\\nHandling of overflow condition is the only twist that this problem has.\\nOne way is to keep a backup of the ans, and check if any bad behaviour has happened or not.\\nWe do ans=ans*10+str[i], so we can check if (ans-str[i])/10 is equal to previous number or not.\\n\\n# Code:\\n```\\n\\nstatic int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int i, ans, sign, backup;\\n        i=0;\\n        while(i<str.length() && str.at(i) == \\' \\')\\n            i++;\\n        sign = 1; // positive\\n        if(i<str.length() && str.at(i) == \\'+\\') {\\n            i++;\\n        } else if(i<str.length() && str.at(i) == \\'-\\') {\\n            sign = -1; // negative\\n            i++;\\n        }\\n        ans=0;\\n        while(i<str.length() && isdigit(str.at(i))) {\\n            backup = ans;\\n            ans = ans*10 + (str.at(i) - \\'0\\');\\n            if(ans<0 || backup != (ans - (str.at(i) - \\'0\\')) / 10)\\n                return sign==1?INT_MAX:INT_MIN;\\n            i++;\\n        }\\n        return ans*sign;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nstatic int x = [](){ios::sync_with_stdio(false); cin.tie(nullptr); return 0; }();\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int i, ans, sign, backup;\\n        i=0;\\n        while(i<str.length() && str.at(i) == \\' \\')\\n            i++;\\n        sign = 1; // positive\\n        if(i<str.length() && str.at(i) == \\'+\\') {\\n            i++;\\n        } else if(i<str.length() && str.at(i) == \\'-\\') {\\n            sign = -1; // negative\\n            i++;\\n        }\\n        ans=0;\\n        while(i<str.length() && isdigit(str.at(i))) {\\n            backup = ans;\\n            ans = ans*10 + (str.at(i) - \\'0\\');\\n            if(ans<0 || backup != (ans - (str.at(i) - \\'0\\')) / 10)\\n                return sign==1?INT_MAX:INT_MIN;\\n            i++;\\n        }\\n        return ans*sign;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4713,
                "title": "go-0-ms-neat-solution-table-lookup",
                "content": "Runtime: 0 ms, faster than 100.00% of Go online submissions for String to Integer (atoi).\\nMemory Usage: 2.3 MB, less than 100.00% of Go online submissions for String to Integer (atoi).\\n\\n```go\\nvar digits = map[byte]int{\\n    0x30: 0,\\n    0x31: 1,\\n    0x32: 2,\\n    0x33: 3,\\n    0x34: 4,\\n    0x35: 5,\\n    0x36: 6,\\n    0x37: 7,\\n    0x38: 8,\\n    0x39: 9,\\n}\\n\\nfunc myAtoi(str string) int {\\n    res, sign, len, idx := 0, 1, len(str), 0\\n\\n    // Skip leading spaces\\n    for idx < len && (str[idx] == \\' \\' || str[idx] == \\'\\\\t\\') {\\n        idx++\\n    }\\n    \\n    if idx == len {\\n        return 0\\n    }\\n\\n    // +/- Sign\\n    if str[idx] == \\'+\\' {\\n        sign = 1\\n        idx++\\n    } else if str[idx] == \\'-\\' {\\n        sign = -1\\n        idx++\\n    }\\n\\n    // Digits: 0x30 = \\'0\\', 0x31 = \\'1\\', ... 0x39 = \\'9\\'\\n    for idx < len && str[idx] >= 0x30 && str[idx] <= 0x39 {\\n        res = res * 10 + digits[str[idx]]\\n        if sign * res > math.MaxInt32 {\\n            return math.MaxInt32\\n        }\\n\\n        if sign * res < math.MinInt32 {\\n            return math.MinInt32\\n        }\\n\\n        idx++\\n    }\\n\\n    return res * sign\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nvar digits = map[byte]int{\\n    0x30: 0,\\n    0x31: 1,\\n    0x32: 2,\\n    0x33: 3,\\n    0x34: 4,\\n    0x35: 5,\\n    0x36: 6,\\n    0x37: 7,\\n    0x38: 8,\\n    0x39: 9,\\n}\\n\\nfunc myAtoi(str string) int {\\n    res, sign, len, idx := 0, 1, len(str), 0\\n\\n    // Skip leading spaces\\n    for idx < len && (str[idx] == \\' \\' || str[idx] == \\'\\\\t\\') {\\n        idx++\\n    }\\n    \\n    if idx == len {\\n        return 0\\n    }\\n\\n    // +/- Sign\\n    if str[idx] == \\'+\\' {\\n        sign = 1\\n        idx++\\n    } else if str[idx] == \\'-\\' {\\n        sign = -1\\n        idx++\\n    }\\n\\n    // Digits: 0x30 = \\'0\\', 0x31 = \\'1\\', ... 0x39 = \\'9\\'\\n    for idx < len && str[idx] >= 0x30 && str[idx] <= 0x39 {\\n        res = res * 10 + digits[str[idx]]\\n        if sign * res > math.MaxInt32 {\\n            return math.MaxInt32\\n        }\\n\\n        if sign * res < math.MinInt32 {\\n            return math.MinInt32\\n        }\\n\\n        idx++\\n    }\\n\\n    return res * sign\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4987,
                "title": "python-easy-to-understand-solution-logic-is-easy-to-follow",
                "content": "    \\n    def myAtoi(self, str):\\n        str = str.strip()\\n        if str == \"\":\\n            return 0\\n        if str[0] != \"+\" and str[0] != \"-\" and not str[0].isdigit():\\n            return 0\\n        else:\\n            if str[0] in [\"+\", \"-\"]: # first letter is \"+\" or \"+\"\\n                sign = str[0]\\n                res = self.helper(str[1:])\\n                return min(res, 2147483647) if sign == \"+\" else max(0-res, -2147483648)\\n            else: # first letter is a digit \\n                return min(self.helper(str), 2147483647)\\n            \\n    def helper(self, string):\\n        res = 0\\n        for s in string:\\n            if not s.isdigit():\\n                break\\n            res = 10 * res + int(s)\\n        return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "    \\n    def myAtoi(self, str):\\n        str = str.strip()\\n        if str == \"\":\\n            return 0\\n        if str[0] != \"+\" and str[0] != \"-\" and not str[0].isdigit():\\n            return 0\\n        else:\\n            if str[0] in [\"+\", \"-\"]: # first letter is \"+\" or \"+\"\\n                sign = str[0]\\n                res = self.helper(str[1:])\\n                return min(res, 2147483647) if sign == \"+\" else max(0-res, -2147483648)\\n            else: # first letter is a digit \\n                return min(self.helper(str), 2147483647)\\n            \\n    def helper(self, string):\\n        res = 0\\n        for s in string:\\n            if not s.isdigit():\\n                break\\n            res = 10 * res + int(s)\\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 5004,
                "title": "a-11-line-normal-c-3-steps-slution",
                "content": "    public int MyAtoi(string str) {\\n        int index = 0, sign = 1, total = 0;\\n        //1. Remove spaces\\n        while (index < str.Length && str[index] == ' ') index++;\\n        //2. Get sign\\n        sign = index < str.Length && (str[index] == '+' || str[index] == '-') ? str[index++] == '+' ? 1 : -1 : 1;\\n        //3. Calculate it and take care of overflow\\n        while(index < str.Length){\\n            int digit = str[index++] - '0';\\n            if(digit < 0 || 9 < digit) break;\\n            if(int.MaxValue / 10 < total || int.MaxValue / 10 == total && int.MaxValue % 10 < digit)\\n                return sign == -1 ? int.MinValue : int.MaxValue;\\n            total = total * 10 + digit;\\n        }\\n        return total * sign;\\n    }",
                "solutionTags": [],
                "code": "    public int MyAtoi(string str) {\\n        int index = 0, sign = 1, total = 0;\\n        //1. Remove spaces\\n        while (index < str.Length && str[index] == ' ') index++;\\n        //2. Get sign\\n        sign = index < str.Length && (str[index] == '+' || str[index] == '-') ? str[index++] == '+' ? 1 : -1 : 1;\\n        //3. Calculate it and take care of overflow\\n        while(index < str.Length){\\n            int digit = str[index++] - '0';\\n            if(digit < 0 || 9 < digit) break;\\n            if(int.MaxValue / 10 < total || int.MaxValue / 10 == total && int.MaxValue % 10 < digit)\\n                return sign == -1 ? int.MinValue : int.MaxValue;\\n            total = total * 10 + digit;\\n        }\\n        return total * sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3255413,
                "title": "atoi-solution-easy-to-understand-java",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse loops to traverse through the spaces, alphabet and other characters.\\nThis is done by using **Character.isDigit()** to identify the Digits and then use the **result = result * 10 + digit** to add it to the number.\\n# Complexity\\n- Time complexity:**O(n)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if (s.length() == 0) {\\n            return 0;\\n        }\\n        int i = 0;\\n        int sign = 1;\\n        int result = 0;\\n        while (i < s.length() && s.charAt(i) == \\' \\') //Skip the Spaces\\n        {\\n            i++;\\n        }\\n        //The Sign of the Number is calculated\\n        if (i < s.length() && (s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\')) {\\n            if(s.charAt(i)==\\'-\\')\\n                sign=-1;\\n            else\\n                sign=1;\\n            i++;\\n        }\\n        //Now We find the Number\\n        while (i < s.length() && Character.isDigit(s.charAt(i))) {\\n            int digit = s.charAt(i) - \\'0\\';\\n            if (result > (Integer.MAX_VALUE - digit) / 10) {\\n                if(sign==1)\\n                    return Integer.MAX_VALUE;\\n                else\\n                    return Integer.MIN_VALUE;\\n            }\\n            result = result * 10 + digit;\\n            i++;\\n        }\\n        return result * sign;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if (s.length() == 0) {\\n            return 0;\\n        }\\n        int i = 0;\\n        int sign = 1;\\n        int result = 0;\\n        while (i < s.length() && s.charAt(i) == \\' \\') //Skip the Spaces\\n        {\\n            i++;\\n        }\\n        //The Sign of the Number is calculated\\n        if (i < s.length() && (s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\')) {\\n            if(s.charAt(i)==\\'-\\')\\n                sign=-1;\\n            else\\n                sign=1;\\n            i++;\\n        }\\n        //Now We find the Number\\n        while (i < s.length() && Character.isDigit(s.charAt(i))) {\\n            int digit = s.charAt(i) - \\'0\\';\\n            if (result > (Integer.MAX_VALUE - digit) / 10) {\\n                if(sign==1)\\n                    return Integer.MAX_VALUE;\\n                else\\n                    return Integer.MIN_VALUE;\\n            }\\n            result = result * 10 + digit;\\n            i++;\\n        }\\n        return result * sign;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109192,
                "title": "easily-understandable-solution-beats-99-30",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    long atoi(string s, int sign, int i, long result) {\\n        if(sign*result>=INT_MAX){\\n            return INT_MAX;\\n        }\\n        if(sign*result<=INT_MIN){\\n            return INT_MIN;\\n        }\\n        if(i>=s.size()|| s[i]<\\'0\\' || s[i]>\\'9\\'){\\n            return sign*result;\\n        }\\n        \\n       \\n        result=atoi(s,sign,i+1,(result*10+(s[i]-\\'0\\')));\\n        \\n        return result;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1;\\n        while (i < n && s[i] == \\' \\'){\\n            ++i;\\n        }\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n        \\n        return atoi(s, sign, i, 0);\\n    }\\n};\\n```\\nPlease upvote to motivate me to write more solutions\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    long atoi(string s, int sign, int i, long result) {\\n        if(sign*result>=INT_MAX){\\n            return INT_MAX;\\n        }\\n        if(sign*result<=INT_MIN){\\n            return INT_MIN;\\n        }\\n        if(i>=s.size()|| s[i]<\\'0\\' || s[i]>\\'9\\'){\\n            return sign*result;\\n        }\\n        \\n       \\n        result=atoi(s,sign,i+1,(result*10+(s[i]-\\'0\\')));\\n        \\n        return result;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1;\\n        while (i < n && s[i] == \\' \\'){\\n            ++i;\\n        }\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n        \\n        return atoi(s, sign, i, 0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2207474,
                "title": "rust-0ms-simple-compact-functional",
                "content": "```rust\\nimpl Solution {\\n    pub fn my_atoi(s: String) -> i32 {\\n        let s = s.trim_start();\\n        let (s, sign) = match s.strip_prefix(\\'-\\') {\\n            Some(s) => (s, -1),\\n            None => (s.strip_prefix(\\'+\\').unwrap_or(s), 1),\\n        };\\n        s.chars()\\n            .map(|c| c.to_digit(10))\\n            .take_while(Option::is_some)\\n            .flatten()\\n            .fold(0, |acc, digit| {\\n                acc.saturating_mul(10).saturating_add(sign * digit as i32)\\n            })\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn my_atoi(s: String) -> i32 {\\n        let s = s.trim_start();\\n        let (s, sign) = match s.strip_prefix(\\'-\\') {\\n            Some(s) => (s, -1),\\n            None => (s.strip_prefix(\\'+\\').unwrap_or(s), 1),\\n        };\\n        s.chars()\\n            .map(|c| c.to_digit(10))\\n            .take_while(Option::is_some)\\n            .flatten()\\n            .fold(0, |acc, digit| {\\n                acc.saturating_mul(10).saturating_add(sign * digit as i32)\\n            })\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2055039,
                "title": "0ms-1liner-100-fastest-solution-explained-o-n-time-complexity-o-n-space-complexity",
                "content": "(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 38.2MB*** (beats 92.04% / 24.00%).\\n* *** Python ***\\n\\n```\\n\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        MIN, MAX = -2 ** 31, 2 ** 31 - 1\\n        n, empty, sign = 0, True, 1  # empty denotes we have not seen any number, sign is -1 or 1\\n        for c in s:\\n            if empty:\\n                if c == \\' \\': continue  # ignore the leading whitespace\\n                elif c == \\'-\\': sign = -1  # final answer is a negative number\\n                elif c.isdigit(): n = int(c)  # the first digit of number\\n                elif c != \\'+\\': return 0  # the first char is not a digit and not in (\\' \\', \\'+\\', \\'-\\'), so s is invalid\\n                empty = False  # the first char is a digit or \\'+\\' or \\'-\\', valid number starts\\n            else:\\n                if c.isdigit():\\n                    n = n * 10 + int(c)\\n                    if sign * n > MAX: return MAX\\n                    elif sign * n < MIN: return MIN\\n                else: break   # end of valid number\\n        return sign * n  # sign is 1 or -1 \\n        \\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n***\"We are Anonymous. We are legion. We do not forgive. We do not forget. Expect us. Open your eyes..\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Kotlin",
                    "Combinatorics"
                ],
                "code": "```\\n```\n```\\n\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        MIN, MAX = -2 ** 31, 2 ** 31 - 1\\n        n, empty, sign = 0, True, 1  # empty denotes we have not seen any number, sign is -1 or 1\\n        for c in s:\\n            if empty:\\n                if c == \\' \\': continue  # ignore the leading whitespace\\n                elif c == \\'-\\': sign = -1  # final answer is a negative number\\n                elif c.isdigit(): n = int(c)  # the first digit of number\\n                elif c != \\'+\\': return 0  # the first char is not a digit and not in (\\' \\', \\'+\\', \\'-\\'), so s is invalid\\n                empty = False  # the first char is a digit or \\'+\\' or \\'-\\', valid number starts\\n            else:\\n                if c.isdigit():\\n                    n = n * 10 + int(c)\\n                    if sign * n > MAX: return MAX\\n                    elif sign * n < MIN: return MIN\\n                else: break   # end of valid number\\n        return sign * n  # sign is 1 or -1 \\n        \\n\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1688750,
                "title": "c-0ms-100-faster-simple-and-optimal-solution",
                "content": "```\\nclass Solution {\\npublic:\\n  int myAtoi(string s) {\\n        long l=s.length(),num=0;\\n        int i=0,j=1;\\n        for(i=0;i<l;i++)\\n        {\\n            if(s[i]!=\\' \\')break;\\n        }\\n        if(s[i]==\\'-\\'){j=-1;i++;}\\n        else if(s[i]==\\'+\\')i++;\\n        for(;i<l;i++)\\n        {\\n            if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')  \\n            {\\n                num = num*10+(int)(s[i]-\\'0\\');\\n                 if(j*num<INT32_MIN)\\n        {\\n            return INT32_MIN;\\n        }\\n        if(j*num>INT32_MAX)\\n        {\\n            return INT32_MAX;\\n        }\\n            }else{\\n                break;\\n            }\\n        }\\n        num*=j;\\n        if(num<INT32_MIN)\\n        {\\n            return INT32_MIN;\\n        }\\n        if(num>INT32_MAX)\\n        {\\n            return INT32_MAX;\\n        }\\n        return num;\\n    }\\n};\\n```\\n\\nThanks ! ! ! \\n\\n```\\nif (Useful == true) \\n     Upvote();\\nelse\\n     Comment();\\n```\\n\\nBy \\u2764 JS",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int myAtoi(string s) {\\n        long l=s.length(),num=0;\\n        int i=0,j=1;\\n        for(i=0;i<l;i++)\\n        {\\n            if(s[i]!=\\' \\')break;\\n        }\\n        if(s[i]==\\'-\\'){j=-1;i++;}\\n        else if(s[i]==\\'+\\')i++;\\n        for(;i<l;i++)\\n        {\\n            if(s[i]>=\\'0\\'&&s[i]<=\\'9\\')  \\n            {\\n                num = num*10+(int)(s[i]-\\'0\\');\\n                 if(j*num<INT32_MIN)\\n        {\\n            return INT32_MIN;\\n        }\\n        if(j*num>INT32_MAX)\\n        {\\n            return INT32_MAX;\\n        }\\n            }else{\\n                break;\\n            }\\n        }\\n        num*=j;\\n        if(num<INT32_MIN)\\n        {\\n            return INT32_MIN;\\n        }\\n        if(num>INT32_MAX)\\n        {\\n            return INT32_MAX;\\n        }\\n        return num;\\n    }\\n};\\n```\n```\\nif (Useful == true) \\n     Upvote();\\nelse\\n     Comment();\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1510014,
                "title": "python-simple-solution-without-strip-beats-95",
                "content": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n     \\n        if not s:\\n            return 0\\n        sign = 1\\n        integer = 0\\n        i = 0\\n        while i < len(s) and s[i] == \\' \\':\\n            i+=1    #skipping leading white space\\n        if i < len(s) and (s[i] == \\'-\\' or s[i] == \\'+\\'):\\n            if s[i] == \\'-\\':\\n                sign = -1\\n            i+=1\\n        while(i < len(s) and s[i].isdigit()):\\n            integer = integer * 10 + int(s[i])\\n            i+=1\\n            \\n        integer = sign*integer\\n        ans = self.limit(integer)\\n        return ans\\n    \\n    def limit(self, num):\\n        if num > pow(2, 31) -1:\\n            return pow(2, 31) -1\\n        if num < -1*pow(2, 31):\\n            return -1*pow(2, 31)\\n        return num\\n```\\nRuntime: 28 ms, faster than 95.37% of Python3 online submissions for String to Integer (atoi).\\nMemory Usage: 14.1 MB, less than 81.77% of Python3 online submissions for String to Integer (atoi).\\n\\n![image](https://assets.leetcode.com/users/images/4ac2f1fe-cd40-4f9c-9ae4-77cb2d8ddb08_1633676436.6743143.png)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n     \\n        if not s:\\n            return 0\\n        sign = 1\\n        integer = 0\\n        i = 0\\n        while i < len(s) and s[i] == \\' \\':\\n            i+=1    #skipping leading white space\\n        if i < len(s) and (s[i] == \\'-\\' or s[i] == \\'+\\'):\\n            if s[i] == \\'-\\':\\n                sign = -1\\n            i+=1\\n        while(i < len(s) and s[i].isdigit()):\\n            integer = integer * 10 + int(s[i])\\n            i+=1\\n            \\n        integer = sign*integer\\n        ans = self.limit(integer)\\n        return ans\\n    \\n    def limit(self, num):\\n        if num > pow(2, 31) -1:\\n            return pow(2, 31) -1\\n        if num < -1*pow(2, 31):\\n            return -1*pow(2, 31)\\n        return num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 411691,
                "title": "easy-to-understand-c-solution-0ms-beats-100",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for String to Integer (atoi).\\nMemory Usage: 8.4 MB, less than 86.57% of C++ online submissions for String to Integer (atoi).\\n\\n```\\nint myAtoi(string str) {\\n        long long int res = 0;\\n        string trim = str;\\n        bool sign = false;\\n        \\n        while(trim[0] == \\' \\')\\n            trim.erase(trim.begin());\\n        \\n        if(trim[0] == \\'-\\' || trim[0] == \\'+\\')\\n        {\\n            if(trim[0] == \\'-\\')\\n                sign = true;\\n            trim.erase(trim.begin());\\n        }\\n        \\n        for(char ch : trim)\\n        {\\n            if(!(ch >= \\'0\\' && ch <= \\'9\\'))\\n                break;\\n            \\n            res = res*10 + (ch-\\'0\\');\\n            if(res > INT_MAX)\\n                return (sign ? INT_MIN : INT_MAX);\\n        }\\n        \\n        if(sign)\\n            res = -1*res;\\n        return res;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for String to Integer (atoi).\\nMemory Usage: 8.4 MB, less than 86.57% of C++ online submissions for String to Integer (atoi).\\n\\n```\\nint myAtoi(string str) {\\n        long long int res = 0;\\n        string trim = str;\\n        bool sign = false;\\n        \\n        while(trim[0] == \\' \\')\\n            trim.erase(trim.begin());\\n        \\n        if(trim[0] == \\'-\\' || trim[0] == \\'+\\')\\n        {\\n            if(trim[0] == \\'-\\')\\n                sign = true;\\n            trim.erase(trim.begin());\\n        }\\n        \\n        for(char ch : trim)\\n        {\\n            if(!(ch >= \\'0\\' && ch <= \\'9\\'))\\n                break;\\n            \\n            res = res*10 + (ch-\\'0\\');\\n            if(res > INT_MAX)\\n                return (sign ? INT_MIN : INT_MAX);\\n        }\\n        \\n        if(sign)\\n            res = -1*res;\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1183544,
                "title": "java-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        int i = 0;\\n        int result = 0;\\n        int sign = 1;\\n        //base\\n        if (s.length() == 0) return 0;\\n        \\n        //discard white space\\n        while (i < s.length() && s.charAt(i) == \\' \\') i++;\\n        \\n        //check the sign\\n        if (i < s.length() && (s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\'))\\n            sign = (s.charAt(i++) == \\'-\\') ? -1 : 1;\\n        \\n        // proceed only if the char is digits\\n        while (i < s.length() && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\'){\\n            // Since we are doing r =  r * 10 + digit formula\\n            // when r > max / 10 if u do * 10 it will overflow\\n            // if r == max / 10 then any number + 7 will overflow\\n            // same case for under flow also \\n            // both case we should handle\\n            if (result > Integer.MAX_VALUE / 10 ||\\n                (result == Integer.MAX_VALUE / 10 && s.charAt(i) - \\'0\\' > Integer.MAX_VALUE % 10))\\n                return (sign == 1) ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n            \\n            result = result * 10 + (s.charAt(i++) - \\'0\\');\\n        }\\n        \\n        return result * sign;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        int i = 0;\\n        int result = 0;\\n        int sign = 1;\\n        //base\\n        if (s.length() == 0) return 0;\\n        \\n        //discard white space\\n        while (i < s.length() && s.charAt(i) == \\' \\') i++;\\n        \\n        //check the sign\\n        if (i < s.length() && (s.charAt(i) == \\'+\\' || s.charAt(i) == \\'-\\'))\\n            sign = (s.charAt(i++) == \\'-\\') ? -1 : 1;\\n        \\n        // proceed only if the char is digits\\n        while (i < s.length() && s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\'){\\n            // Since we are doing r =  r * 10 + digit formula\\n            // when r > max / 10 if u do * 10 it will overflow\\n            // if r == max / 10 then any number + 7 will overflow\\n            // same case for under flow also \\n            // both case we should handle\\n            if (result > Integer.MAX_VALUE / 10 ||\\n                (result == Integer.MAX_VALUE / 10 && s.charAt(i) - \\'0\\' > Integer.MAX_VALUE % 10))\\n                return (sign == 1) ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n            \\n            result = result * 10 + (s.charAt(i++) - \\'0\\');\\n        }\\n        \\n        return result * sign;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 219994,
                "title": "rust-0ms",
                "content": "Tried to inspect sign withing the iterators chain, but unsuccessfully.\\n\\n```rust\\nimpl Solution {\\n    pub fn my_atoi(string: String) -> i32 {\\n        let mut chrs = string.chars().skip_while(|c| c == &\\' \\').peekable();\\n\\n        let sign = if chrs.peek().map_or(false, |s| s == &\\'-\\') {\\n            chrs.next();\\n            -1i32\\n        } else {\\n            if chrs.peek().map_or(false, |s| s == &\\'+\\') {\\n                chrs.next();\\n            }\\n\\n            1i32\\n        };\\n\\n        chrs\\n            .into_iter()\\n            .take_while(|n| n.is_numeric())\\n            .try_fold(0i32, |acc, n| acc.checked_mul(10).and_then(|acc| acc.checked_add(n.to_digit(10).unwrap() as i32)))\\n            .map(|n| n * sign)\\n            .unwrap_or(if sign > 0 { std::i32::MAX } else { std::i32::MIN })\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn my_atoi(string: String) -> i32 {\\n        let mut chrs = string.chars().skip_while(|c| c == &\\' \\').peekable();\\n\\n        let sign = if chrs.peek().map_or(false, |s| s == &\\'-\\') {\\n            chrs.next();\\n            -1i32\\n        } else {\\n            if chrs.peek().map_or(false, |s| s == &\\'+\\') {\\n                chrs.next();\\n            }\\n\\n            1i32\\n        };\\n\\n        chrs\\n            .into_iter()\\n            .take_while(|n| n.is_numeric())\\n            .try_fold(0i32, |acc, n| acc.checked_mul(10).and_then(|acc| acc.checked_add(n.to_digit(10).unwrap() as i32)))\\n            .map(|n| n * sign)\\n            .unwrap_or(if sign > 0 { std::i32::MAX } else { std::i32::MIN })\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4899,
                "title": "my-solution-in-javascript",
                "content": "   \\n    var myAtoi = function(str) {\\n       str=str.trim();\\n        if(!str)return 0;\\n    var sign=1;\\n    var i=0, answer=0;\\n    if(str[i]=='+'){\\n        sign=1;\\n        i++;\\n    }\\n    else if(str[i]=='-'){sign=-1;i++;}\\n    \\n    for(;i<str.length;i++)\\n    {\\n        var temp=str.charCodeAt(i)-48;\\n        console.log(answer);\\n        if(temp>9 || temp<0)break;\\n        if(answer>2147483647/10|| answer>(2147483647-temp)/10)return sign==1?2147483647: -2147483648;\\n        else answer=answer*10 + temp;\\n    }\\n    return answer* sign;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "   \\n    var myAtoi = function(str) {\\n       str=str.trim();\\n        if(!str)return 0;\\n    var sign=1;\\n    var i=0, answer=0;\\n    if(str[i]=='+'){\\n        sign=1;\\n        i++;\\n    }\\n    else if(str[i]=='-'){sign=-1;i++;}\\n    \\n    for(;i<str.length;i++)\\n    {\\n        var temp=str.charCodeAt(i)-48;\\n        console.log(answer);\\n        if(temp>9 || temp<0)break;\\n        if(answer>2147483647/10|| answer>(2147483647-temp)/10)return sign==1?2147483647: -2147483648;\\n        else answer=answer*10 + temp;\\n    }\\n    return answer* sign;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 5025,
                "title": "my-c-code-accepted-with-4ms",
                "content": "    int myAtoi(char* str) {\\n        long result = 0;\\n        int sign = 1;\\n        //discard the first sequence of whitespace characters.\\n        while(isspace(*str))\\n        {\\n            str++;\\n        }\\n        if((*str == '+') || (*str == '-'))\\n        {\\n            sign = (*str == '+') ? 1:0;\\n            str++;\\n        }\\n        if(!isdigit(*str))\\n        {\\n            return 0;\\n        }\\n        while(isdigit(*str) && (result <= INT_MAX))\\n        {\\n            result = result * 10 + *str - '0' + 0;\\n            str++;\\n        }\\n        if(result > INT_MAX)\\n        {\\n            return sign == 1 ? INT_MAX : INT_MIN;\\n        }\\n        return sign == 1 ? result : -result;\\n    }",
                "solutionTags": [],
                "code": "    int myAtoi(char* str) {\\n        long result = 0;\\n        int sign = 1;\\n        //discard the first sequence of whitespace characters.\\n        while(isspace(*str))\\n        {\\n            str++;\\n        }\\n        if((*str == '+') || (*str == '-'))\\n        {\\n            sign = (*str == '+') ? 1:0;\\n            str++;\\n        }\\n        if(!isdigit(*str))\\n        {\\n            return 0;\\n        }\\n        while(isdigit(*str) && (result <= INT_MAX))\\n        {\\n            result = result * 10 + *str - '0' + 0;\\n            str++;\\n        }\\n        if(result > INT_MAX)\\n        {\\n            return sign == 1 ? INT_MAX : INT_MIN;\\n        }\\n        return sign == 1 ? result : -result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 5026,
                "title": "16ms-c-solution-easy-to-understand",
                "content": "    class Solution {\\n    public:\\n        int myAtoi(string str) {\\n            size_t index = str.find_first_not_of(' ');\\n            if(index == string::npos) return 0;\\n            long result = 0;\\n            bool negative = false;\\n            if(str[index] == '-') {\\n                negative = true;\\n                index++;\\n            } else if(str[index] == '+') {\\n                index++;\\n            }\\n            for(int i=index; i<str.size(); i++) {\\n                if(isdigit(str[i])) {\\n                    result = result * 10 + (str[i]-'0');\\n                    if(negative && -result <= INT_MIN) return INT_MIN;\\n                    if(!negative && result >= INT_MAX) return INT_MAX;\\n                } else {\\n                    break;\\n                }\\n            }\\n            if(negative) result = -result;\\n            \\n            return int(result);\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int myAtoi(string str) {\\n            size_t index = str.find_first_not_of(' ');\\n            if(index == string::npos) return 0;\\n            long result = 0;\\n            bool negative = false;\\n            if(str[index] == '-') {\\n                negative = true;\\n                index++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1020542,
                "title": "javascript-translated-from-official-solution",
                "content": "- Observe there is no reference to built-in javascript methods `parseInt` and `Number` to convert the string to an integer, as this would defeat the purpose of the problem\\n- I used a regex `str[i].match(/[0-9]/)` to check if a character is a number, that\\'s just a preference\\n\\nUpdated Notes\\n- 2021-09-22:  A simple dictionary lookup might be a more exact solution to replace this line: `const num = str[i] - \\'0\\'` Thanks @TomCaserta\\n- 2021-09-22: I\\'m not sure why the official solution was removed (_at least I think there was an official solution_)\\n\\n\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function(str) {\\n    \\n  let i = 0;\\n  let sign = 1;\\n  let result = 0;\\n  \\n  //Discard whitespaces in the beginning\\n  while (i < str.length && str[i] == \\' \\') i++\\n  \\n  // Check if optional sign if it exists\\n  if (i < str.length && (str[i] == \\'+\\' || str[i] == \\'-\\')) {\\n    sign = (str[i] == \\'-\\') ? -1 : 1;\\n    i++\\n  }\\n\\n  const MAX_SAFE_32_INT = Math.pow(2,31) - 1\\n  const MIN_SAFE_32_INT = -Math.pow(2,31)\\n  \\n  // Build the result and check for overflow/underflow condition\\n  while (i < str.length && str[i].match(/[0-9]/) != null) {\\n    const num = str[i] - \\'0\\'\\n\\t// the second condition of this statement was hard to understand, it \\n\\t// handles the situation where we are reaching our 32-bit boundary limit, and we need to check the very last digit. \\n    if (result > Math.floor(MAX_SAFE_32_INT / 10) ||\\n                    (result === Math.floor(MAX_SAFE_32_INT / 10) && num > MAX_SAFE_32_INT % 10)) {\\n        return (sign === 1) ? MAX_SAFE_32_INT : MIN_SAFE_32_INT;\\n      }\\n  \\n    // times 10 is a shift-left action\\n    result = result * 10 + num;\\n    i++\\n  }\\n  \\n  return result * sign;\\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function(str) {\\n    \\n  let i = 0;\\n  let sign = 1;\\n  let result = 0;\\n  \\n  //Discard whitespaces in the beginning\\n  while (i < str.length && str[i] == \\' \\') i++\\n  \\n  // Check if optional sign if it exists\\n  if (i < str.length && (str[i] == \\'+\\' || str[i] == \\'-\\')) {\\n    sign = (str[i] == \\'-\\') ? -1 : 1;\\n    i++\\n  }\\n\\n  const MAX_SAFE_32_INT = Math.pow(2,31) - 1\\n  const MIN_SAFE_32_INT = -Math.pow(2,31)\\n  \\n  // Build the result and check for overflow/underflow condition\\n  while (i < str.length && str[i].match(/[0-9]/) != null) {\\n    const num = str[i] - \\'0\\'\\n\\t// the second condition of this statement was hard to understand, it \\n\\t// handles the situation where we are reaching our 32-bit boundary limit, and we need to check the very last digit. \\n    if (result > Math.floor(MAX_SAFE_32_INT / 10) ||\\n                    (result === Math.floor(MAX_SAFE_32_INT / 10) && num > MAX_SAFE_32_INT % 10)) {\\n        return (sign === 1) ? MAX_SAFE_32_INT : MIN_SAFE_32_INT;\\n      }\\n  \\n    // times 10 is a shift-left action\\n    result = result * 10 + num;\\n    i++\\n  }\\n  \\n  return result * sign;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3366661,
                "title": "100-fast-submission-and-new-approach-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal of this problem is to convert a given string to an integer. The string may contain leading/trailing spaces, optional positive/negative signs, and non-numeric characters. We can achieve this by iterating through the string and processing each character.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst, we trim the input string to remove any leading or trailing spaces. We also initialize a boolean variable check to false, which will indicate whether the number is negative or not. We then iterate through the string, character by character, and perform the following operations:\\n\\nIf the current character is a - sign, we set check to true.\\nIf the current character is a + sign, we set check to false.\\nIf the current character is a digit, we convert it to its corresponding integer value using Character.getNumericValue(c). We then update the num variable by multiplying it by 10 and adding the new digit to it.\\nIf the current character is not a digit, we break out of the loop.\\nAfter processing all characters, we check if the number is negative by looking at the check variable. If it is, we return the negation of num. We also check if num exceeds the range of Integer.MAX_VALUE and return either Integer.MAX_VALUE or -1 * Integer.MAX_VALUE accordingly.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe algorithm iterates through each character of the input string once, so the time complexity is O(n), where n is the length of the input string.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe algorithm uses a constant amount of space, so the space complexity is O(1).\\n\\n# Code\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        s = s.trim();\\n        boolean isNegative = false;\\n        int num = 0;\\n        int i = 0;\\n\\n        if (s.length() == 0) {\\n            return 0;\\n        }\\n\\n        if (s.charAt(0) == \\'-\\') {\\n            isNegative = true;\\n            i++;\\n        } else if (s.charAt(0) == \\'+\\') {\\n            i++;\\n        }\\n\\n        for (; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (!Character.isDigit(c)) {\\n                break;\\n            }\\n            int digit = Character.getNumericValue(c);\\n            if (num > (Integer.MAX_VALUE - digit) / 10) {\\n                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            num = num * 10 + digit;\\n        }\\n\\n        return isNegative ? -num : num;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        s = s.trim();\\n        boolean isNegative = false;\\n        int num = 0;\\n        int i = 0;\\n\\n        if (s.length() == 0) {\\n            return 0;\\n        }\\n\\n        if (s.charAt(0) == \\'-\\') {\\n            isNegative = true;\\n            i++;\\n        } else if (s.charAt(0) == \\'+\\') {\\n            i++;\\n        }\\n\\n        for (; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (!Character.isDigit(c)) {\\n                break;\\n            }\\n            int digit = Character.getNumericValue(c);\\n            if (num > (Integer.MAX_VALUE - digit) / 10) {\\n                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            num = num * 10 + digit;\\n        }\\n\\n        return isNegative ? -num : num;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1718703,
                "title": "javascript-neat-javascriptly",
                "content": "```js\\nconst myAtoi = s => Math.max(-(2**31), Math.min(2**31 - 1, parseInt(s) || 0))\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst myAtoi = s => Math.max(-(2**31), Math.min(2**31 - 1, parseInt(s) || 0))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1244324,
                "title": "c-loop-solution",
                "content": "Runtime: 4 ms, faster than 59.78% of C++ online submissions for String to Integer (atoi).\\nMemory Usage: 7 MB, less than 65.55% of C++ online submissions for String to Integer (atoi).\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        bool start = false;\\n        int sign = 1;\\n        long res = 0;\\n        for (char c: s) {\\n            if (\\'0\\' <= c && c <= \\'9\\') {\\n                start = true;\\n                res = res * 10 + (c - \\'0\\');\\n                if (res > INT_MAX) {\\n                    break;\\n                }\\n            } else if (!start && c == \\' \\') {\\n                continue;\\n            } else if (!start && c == \\'+\\') {\\n                start = true;\\n            } else if (!start && c == \\'-\\') {\\n                sign = -1;\\n                start = true;\\n            } else {\\n                break;\\n            }\\n        }\\n        res *= sign;\\n        if (res < INT_MIN) {\\n            res = INT_MIN;\\n        } else if (res > INT_MAX) {\\n            res = INT_MAX;\\n        }\\n        return int(res);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        bool start = false;\\n        int sign = 1;\\n        long res = 0;\\n        for (char c: s) {\\n            if (\\'0\\' <= c && c <= \\'9\\') {\\n                start = true;\\n                res = res * 10 + (c - \\'0\\');\\n                if (res > INT_MAX) {\\n                    break;\\n                }\\n            } else if (!start && c == \\' \\') {\\n                continue;\\n            } else if (!start && c == \\'+\\') {\\n                start = true;\\n            } else if (!start && c == \\'-\\') {\\n                sign = -1;\\n                start = true;\\n            } else {\\n                break;\\n            }\\n        }\\n        res *= sign;\\n        if (res < INT_MIN) {\\n            res = INT_MIN;\\n        } else if (res > INT_MAX) {\\n            res = INT_MAX;\\n        }\\n        return int(res);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933394,
                "title": "beats-100-time-space-c-super-easy-beginner-friendly",
                "content": "# *Best solution you\\'ll ever find!!*\\n\\n---\\n\\n\\n# Complexity\\n### Time complexity: O(N)\\n\\n### Space complexity: O(1)\\n\\n---\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long ans = 0;\\n        int n = s.size();\\n        bool flag=1;\\n        int i=0;\\n        while(i<n && s[i] == \\' \\'){\\n            i++;\\n        }\\n        if(i<n && (s[i] == \\'+\\' || s[i] == \\'-\\')){\\n            flag = (s[i] == \\'+\\');\\n            i++;\\n        }\\n        while(i<n && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n            int num = s[i] - \\'0\\';\\n            ans = ans*10 + num;\\n            if(ans > INT_MAX){\\n                if(flag){\\n                    return INT_MAX;\\n                } \\n                else{\\n                    return INT_MIN;\\n                }\\n            }\\n            i++;\\n        }\\n        if(!flag){\\n            ans = -ans;\\n        }\\n        return int(ans);\\n    }\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/a0d04229-12a8-43f2-bd7f-26e3c87161b6_1692477708.9534726.png)\\n",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long ans = 0;\\n        int n = s.size();\\n        bool flag=1;\\n        int i=0;\\n        while(i<n && s[i] == \\' \\'){\\n            i++;\\n        }\\n        if(i<n && (s[i] == \\'+\\' || s[i] == \\'-\\')){\\n            flag = (s[i] == \\'+\\');\\n            i++;\\n        }\\n        while(i<n && s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n            int num = s[i] - \\'0\\';\\n            ans = ans*10 + num;\\n            if(ans > INT_MAX){\\n                if(flag){\\n                    return INT_MAX;\\n                } \\n                else{\\n                    return INT_MIN;\\n                }\\n            }\\n            i++;\\n        }\\n        if(!flag){\\n            ans = -ans;\\n        }\\n        return int(ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3110465,
                "title": "python3-fast-code-and-simple",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**iterative**\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip()\\n        sign,res,i=1,0,0\\n        if i < len(s) and (s[i] == \\'-\\' or s[i] == \\'+\\'):\\n            if s[i] == \\'-\\':\\n                sign = -1\\n            i += 1\\n        while i < len(s) and s[i].isdigit():\\n            res = res * 10 + int(s[i])\\n            i += 1\\n        res = max(min(res * sign, 2**31 - 1), -2**31)\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip()\\n        sign,res,i=1,0,0\\n        if i < len(s) and (s[i] == \\'-\\' or s[i] == \\'+\\'):\\n            if s[i] == \\'-\\':\\n                sign = -1\\n            i += 1\\n        while i < len(s) and s[i].isdigit():\\n            res = res * 10 + int(s[i])\\n            i += 1\\n        res = max(min(res * sign, 2**31 - 1), -2**31)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826530,
                "title": "c-recursive-iterative-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI found out the recursive solution here looks complicated, so I try to provide a simple one.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n###### Recursive Solution\\n```\\nclass Solution {\\n    int myAtoi(string s, int sign, int i, int result) {\\n\\n        if (i >= s.size() || s[i] < \\'0\\' || s[i] > \\'9\\')\\n            return sign * result;\\n\\n        int tmp = s[i] - \\'0\\';\\n        if (result > INT_MAX / 10 || result == INT_MAX / 10 && tmp > 7)\\n            return sign > 0 ? INT_MAX : INT_MIN;\\n\\n        return myAtoi(s, sign, i + 1, result * 10 + tmp);\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1;\\n        while (i < n && s[i] == \\' \\')\\n            ++i;\\n\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n\\n        return myAtoi(s, sign, i, 0);\\n    }\\n};\\n```\\n###### Iterative Solution\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1, ret = 0;\\n        while (i < n && s[i] == \\' \\')\\n            ++i;\\n\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n\\n        while (s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n            int tmp = s[i++] - \\'0\\';\\n            \\n            if (ret > INT_MAX / 10 || ret == INT_MAX / 10 && tmp > 7)\\n                return sign == 1 ? INT_MAX : INT_MIN;\\n            ret = ret * 10 + tmp;\\n        }\\n\\n        return sign * ret;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    int myAtoi(string s, int sign, int i, int result) {\\n\\n        if (i >= s.size() || s[i] < \\'0\\' || s[i] > \\'9\\')\\n            return sign * result;\\n\\n        int tmp = s[i] - \\'0\\';\\n        if (result > INT_MAX / 10 || result == INT_MAX / 10 && tmp > 7)\\n            return sign > 0 ? INT_MAX : INT_MIN;\\n\\n        return myAtoi(s, sign, i + 1, result * 10 + tmp);\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1;\\n        while (i < n && s[i] == \\' \\')\\n            ++i;\\n\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n\\n        return myAtoi(s, sign, i, 0);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n        int i = 0, n = s.size(), sign = 1, ret = 0;\\n        while (i < n && s[i] == \\' \\')\\n            ++i;\\n\\n        if (s[i] == \\'-\\')\\n            sign = -1, ++i;\\n        else if (s[i] == \\'+\\')\\n            ++i;\\n\\n        while (s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n            int tmp = s[i++] - \\'0\\';\\n            \\n            if (ret > INT_MAX / 10 || ret == INT_MAX / 10 && tmp > 7)\\n                return sign == 1 ? INT_MAX : INT_MIN;\\n            ret = ret * 10 + tmp;\\n        }\\n\\n        return sign * ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2785699,
                "title": "my-java-solution-explained",
                "content": "# Intuition\\nBasically, we keep multiplying our answer by 10 and keep adding next number unless we encounter a condition which is not valid\\n\\n# Approach\\n(1) Trim the string for any leading and trailing spaces\\n\\n(2) Determine the sign of the input (positive or negative). After trimming this sign can be at first postion for this to be a valid string. By default, sign should be positive (i.e. 1). This sign we will use to determine our final answer in the end\\n\\n(3) Determine the start of the loop. We the input string has a leading sign, we should start with 1st index since we have already covered the sign part in (2). Or else we would start with 0th index\\n\\n(4) We start the loop on our string and determine the digit by subtracting 48. (ASCII values of digits 0-9 are 48-57). So if our char is \\'0\\', to get the actual digit value we would do, 48-48 = 0. If the char is \\'1\\', 49-48 = 1.\\n\\n5) We check if the number is in range 0 and 9 if not we break the loop since it is not a valid character and we do not need to look further\\n\\n6) Now we have 2 main checks, one for positive sign and one for negative sign. If number is positive (i.e. sign = 1) then we check if the calculation does not cause integer overflow if it does then we return Integer MAX VALUE. \\nTo add the digit to our answer we would need to multiply by 10, so we have to check if this multiplication does not cause overflow. \\n(ans <= Integer.MAX_VALUE / 10).\\nNext check is to check when we add the digit to our answer, it does not overflow\\n(ans * 10) < Integer.MAX_VALUE - num)\\nWe do the same thing if number is negative (sign = -1), only difference here is we have to multiply our answer by sign -1 since number is negative.\\n\\n7) Finally, we multiply the answer with the sign we determined at the start\\n\\n# Complexity\\n- Time complexity:\\nO(N) - Only one loop over the string \\n\\n- Space complexity:\\nO(1) - No extra space is used\\n\\n# Code\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n\\t\\ts = s.trim();\\n\\t\\tif (s.length() < 1)\\n\\t\\t\\treturn 0;\\n\\n\\t\\tint sign = 1;\\n\\t\\tint i =0;\\n\\t\\tif(s.charAt(0) == \\'-\\') {\\n\\t\\t\\tsign = -1;\\n\\t\\t\\ti = 1;\\n\\t\\t} else if(s.charAt(0) == \\'+\\') {\\n\\t\\t\\ti = 1;\\n\\t\\t}\\n\\t\\tint ans = 0;\\n\\t\\tfor (; i < s.length(); i++) {\\n\\t\\t\\tint num = s.charAt(i) - 48;\\n\\n\\t\\t\\tif ((num >= 0 && num <= 9)) {\\n\\t\\t\\t\\tif (sign > 0) {\\n\\t\\t\\t\\t\\tif (ans <= Integer.MAX_VALUE / 10 \\n                        && ((ans * 10) < Integer.MAX_VALUE - num)) {\\n\\t\\t\\t\\t\\t\\t\\tans = ans * 10 + num;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn Integer.MAX_VALUE;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (sign < 0) {\\n\\t\\t\\t\\t\\tif (ans * sign >= Integer.MIN_VALUE / 10\\n                        && ((ans * 10) * sign > Integer.MIN_VALUE + num)) {\\n\\t\\t\\t\\t\\t\\t\\tans = ans * 10 + num;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn Integer.MIN_VALUE;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans * sign;\\n\\n\\t \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n\\t\\ts = s.trim();\\n\\t\\tif (s.length() < 1)\\n\\t\\t\\treturn 0;\\n\\n\\t\\tint sign = 1;\\n\\t\\tint i =0;\\n\\t\\tif(s.charAt(0) == \\'-\\') {\\n\\t\\t\\tsign = -1;\\n\\t\\t\\ti = 1;\\n\\t\\t} else if(s.charAt(0) == \\'+\\') {\\n\\t\\t\\ti = 1;\\n\\t\\t}\\n\\t\\tint ans = 0;\\n\\t\\tfor (; i < s.length(); i++) {\\n\\t\\t\\tint num = s.charAt(i) - 48;\\n\\n\\t\\t\\tif ((num >= 0 && num <= 9)) {\\n\\t\\t\\t\\tif (sign > 0) {\\n\\t\\t\\t\\t\\tif (ans <= Integer.MAX_VALUE / 10 \\n                        && ((ans * 10) < Integer.MAX_VALUE - num)) {\\n\\t\\t\\t\\t\\t\\t\\tans = ans * 10 + num;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn Integer.MAX_VALUE;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (sign < 0) {\\n\\t\\t\\t\\t\\tif (ans * sign >= Integer.MIN_VALUE / 10\\n                        && ((ans * 10) * sign > Integer.MIN_VALUE + num)) {\\n\\t\\t\\t\\t\\t\\t\\tans = ans * 10 + num;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\treturn Integer.MIN_VALUE;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans * sign;\\n\\n\\t \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1603623,
                "title": "simple-to-understand-using-basic-loops-with-comments",
                "content": "**Thumbs up if you find this helpful** \\uD83D\\uDC4D\\n\\n```\\npublic class Solution {\\n    public int MyAtoi(string s) {        \\n        // 1. Advance leading whitespace\\n        var index = 0;        \\n        while (index < s.Length && char.IsWhiteSpace(s[index])) {\\n            ++index;\\n        }\\n        \\n        // 2. Determine if number is positive or negative\\n        var sign = 1;\\n        if (index < s.Length && (s[index] == \\'-\\' || s[index] == \\'+\\')) {\\n            if (s[index] == \\'-\\') {\\n                sign = -1;\\n            }\\n            ++index;\\n        }\\n        \\n        // 3. Convert char digits to numeric value\\n        var result = 0;\\n        while (index < s.Length && char.IsDigit(s[index])) {\\n            var digit = CharToInt(s[index]);\\n            // Check for overflow\\n            if (result > (int.MaxValue - digit) / 10) {\\n                return sign == -1 ? int.MinValue : int.MaxValue;\\n            }                 \\n            result = (result * 10) + digit;\\n            ++index;\\n        }\\n        return result * sign;\\n    }\\n    \\n    private static int CharToInt(char ch) {\\n        return ch - \\'0\\';\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int MyAtoi(string s) {        \\n        // 1. Advance leading whitespace\\n        var index = 0;        \\n        while (index < s.Length && char.IsWhiteSpace(s[index])) {\\n            ++index;\\n        }\\n        \\n        // 2. Determine if number is positive or negative\\n        var sign = 1;\\n        if (index < s.Length && (s[index] == \\'-\\' || s[index] == \\'+\\')) {\\n            if (s[index] == \\'-\\') {\\n                sign = -1;\\n            }\\n            ++index;\\n        }\\n        \\n        // 3. Convert char digits to numeric value\\n        var result = 0;\\n        while (index < s.Length && char.IsDigit(s[index])) {\\n            var digit = CharToInt(s[index]);\\n            // Check for overflow\\n            if (result > (int.MaxValue - digit) / 10) {\\n                return sign == -1 ? int.MinValue : int.MaxValue;\\n            }                 \\n            result = (result * 10) + digit;\\n            ++index;\\n        }\\n        return result * sign;\\n    }\\n    \\n    private static int CharToInt(char ch) {\\n        return ch - \\'0\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 946862,
                "title": "why-write-lot-code-when-few-regex-do-trick-python-2-line-solution",
                "content": "Forget not the humble regular expression.\\n\\n```\\ndef myAtoi(self, s: str) -> int:\\n\\tmatch = re.match(r\\'^\\\\s*([+-]?\\\\d+)\\', s)\\n    return min(max((int(match.group(1)) if match else 0), -2**31), 2**31 - 1)\\n```\\n\\nExplanation of regex:\\n* `^`: Beginning of string.\\n* `\\\\s*`: Match as many whitespace characters as possible.\\n* `([+-]?\\\\d+)`: This captures the actual number part.\\n  * `[+-]?`: Plus or minus sign, optional.\\n  * `\\\\d+`: Match 1 or more digits.\\n\\nI get why people don\\'t like this problem. It\\'s messy, and it has a lot of edge cases. But this kind of problem seems more relevant in the real world than, say, inverting a binary tree. Luckily for us, this problem is perfectly suited for regular expressions.\\n\\nI have no idea what the complexity for this is\\u2014that\\'ll depend on Python\\'s regex implementation. But it is faster than 76% and uses less memory than 41%, which is not bad. Most importantly, it\\'s the simple solution.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef myAtoi(self, s: str) -> int:\\n\\tmatch = re.match(r\\'^\\\\s*([+-]?\\\\d+)\\', s)\\n    return min(max((int(match.group(1)) if match else 0), -2**31), 2**31 - 1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 375285,
                "title": "c",
                "content": "```\\npublic int MyAtoi(string str) {\\n        int index = 0, sign = 1, total = 0;\\n        \\n        //1. Remove Spaces\\n         str = str.Trim();\\n        \\n        //2. Check for Empty string\\n        if(str.Length == 0) return 0;\\n\\n        //3. Handle signs\\n        if(str[index] == \\'+\\' || str[index] == \\'-\\'){\\n            sign = str[index] == \\'+\\' ? 1 : -1;\\n            index ++;\\n        }\\n\\n        //4. Convert number and avoid overflow\\n        while(index < str.Length){\\n            int digit = str[index] - \\'0\\';\\n            if(digit < 0 || digit > 9) break;\\n\\n            //check if total will be overflow after 10 times and add digit\\n            if(Int32.MaxValue/10 < total || Int32.MaxValue/10 == total && Int32.MaxValue %10 < digit)\\n                return sign == 1 ? Int32.MaxValue : Int32.MinValue;\\n\\n            total = 10 * total + digit;\\n            index ++;\\n        }\\n        return total * sign;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic int MyAtoi(string str) {\\n        int index = 0, sign = 1, total = 0;\\n        \\n        //1. Remove Spaces\\n         str = str.Trim();\\n        \\n        //2. Check for Empty string\\n        if(str.Length == 0) return 0;\\n\\n        //3. Handle signs\\n        if(str[index] == \\'+\\' || str[index] == \\'-\\'){\\n            sign = str[index] == \\'+\\' ? 1 : -1;\\n            index ++;\\n        }\\n\\n        //4. Convert number and avoid overflow\\n        while(index < str.Length){\\n            int digit = str[index] - \\'0\\';\\n            if(digit < 0 || digit > 9) break;\\n\\n            //check if total will be overflow after 10 times and add digit\\n            if(Int32.MaxValue/10 < total || Int32.MaxValue/10 == total && Int32.MaxValue %10 < digit)\\n                return sign == 1 ? Int32.MaxValue : Int32.MinValue;\\n\\n            total = 10 * total + digit;\\n            index ++;\\n        }\\n        return total * sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4892,
                "title": "my-c-code-with-comment-8ms",
                "content": "    class Solution {\\n    public:\\n    int myAtoi(string str) {\\n    \\n        int ret = 0, tmp;\\n        int i = 0, flag = 1;\\n        int len = str.length();\\n        \\n        // special case : \"\"\\n        if (len == 0) return 0;\\n        \\n        // special case : \"   (+/-)123\"\\n        while (str[i] == ' ') i++;\\n        if (str[i] == '-') {\\n            i++;\\n            flag = -1;\\n        }\\n        else if (str[i] == '+')\\n            i++;\\n            \\n        for (;i < len; i++) {\\n            if (str[i] < '0' || str[i] > '9') break;\\n            \\n            tmp = ret * 10 + str[i] - '0';\\n            if (tmp / 10 != ret) \\n                if (flag == 1) return INT_MAX;\\n                else return INT_MIN;\\n\\n            ret = tmp;\\n        }\\n        \\n        return ret * flag;\\n    }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    int myAtoi(string str) {\\n    \\n        int ret = 0, tmp;\\n        int i = 0, flag = 1;\\n        int len = str.length();\\n        \\n        // special case : \"\"\\n        if (len == 0) return 0;\\n        \\n        // special case : \"   (+/-)123\"\\n        while (str[i] == ' ') i++;\\n        if (str[i] == '-') {\\n            i++;\\n            flag = -1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3438310,
                "title": "easy-c-code-beginner-friendly-beats-100-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTraverse through the string and evaluate the valid digits.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI am traversing through the given string linearly,and using different boolean variables to  keep track of characters and the sequence in which they appear along with pushing valid digits into the vector.\\nThen I am just evaluating digits in vector with the powers of 10 accordingly.\\n# Complexity\\n- Time complexity: O(s)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        bool flag=0,tag=0,start=0,zero=0;\\n        std::string::iterator itr=s.begin();\\n        std::vector<int>::iterator it;\\n        vector<int>res;\\n        long p=0;\\n        while(itr!=s.end())\\n        {\\n            //cout<<*itr<<endl;\\n            if(*itr==\\'+\\')\\n            {\\n                if(flag==1||zero==1||start==1||tag==1)\\n                    break;\\n                tag=1;\\n            }\\n            if(*itr==\\'0\\')\\n            {\\n                if(start==1)\\n                    res.push_back(0);\\n                zero=1;\\n            }\\n            if(*itr==\\'-\\')\\n            {\\n                if(tag==1||zero==1||start==1||flag==1)\\n                    break;\\n                flag=1;\\n            }\\n            if(*itr==\\' \\')\\n            {\\n                if(start==1||tag==1||zero==1||flag==1)\\n                    break;\\n            }\\n            if((int)*itr<58&&(int)*itr>48)\\n            {\\n                start=1;\\n                res.push_back((int)*itr-48);\\n            }\\n            if((int)*itr>57||(int)*itr<48)\\n            {\\n                if(start==1)\\n                    break;\\n                if(*itr!=\\'-\\'&&*itr!=\\' \\'&&*itr!=\\'+\\'&&*itr!=\\'0\\')\\n                    return 0;\\n            }\\n            itr++;\\n        }\\n        it=res.begin();\\n        cout<<res.size()<<endl;\\n        if(res.size()>10)\\n        {\\n            if(flag==1)\\n                return INT_MIN;\\n            else\\n                return INT_MAX;\\n        }\\n        for(int i=res.size()-1;i>=0;i--,it++)\\n        {\\n            if(flag==1&&tag==0)\\n                p-=(*it)*pow(10,i);\\n            else\\n                p+=(*it)*pow(10,i);\\n            if(p>=INT_MAX)\\n                return INT_MAX;\\n            if(p<=INT_MIN)\\n                return INT_MIN;\\n        }\\n        return p;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        bool flag=0,tag=0,start=0,zero=0;\\n        std::string::iterator itr=s.begin();\\n        std::vector<int>::iterator it;\\n        vector<int>res;\\n        long p=0;\\n        while(itr!=s.end())\\n        {\\n            //cout<<*itr<<endl;\\n            if(*itr==\\'+\\')\\n            {\\n                if(flag==1||zero==1||start==1||tag==1)\\n                    break;\\n                tag=1;\\n            }\\n            if(*itr==\\'0\\')\\n            {\\n                if(start==1)\\n                    res.push_back(0);\\n                zero=1;\\n            }\\n            if(*itr==\\'-\\')\\n            {\\n                if(tag==1||zero==1||start==1||flag==1)\\n                    break;\\n                flag=1;\\n            }\\n            if(*itr==\\' \\')\\n            {\\n                if(start==1||tag==1||zero==1||flag==1)\\n                    break;\\n            }\\n            if((int)*itr<58&&(int)*itr>48)\\n            {\\n                start=1;\\n                res.push_back((int)*itr-48);\\n            }\\n            if((int)*itr>57||(int)*itr<48)\\n            {\\n                if(start==1)\\n                    break;\\n                if(*itr!=\\'-\\'&&*itr!=\\' \\'&&*itr!=\\'+\\'&&*itr!=\\'0\\')\\n                    return 0;\\n            }\\n            itr++;\\n        }\\n        it=res.begin();\\n        cout<<res.size()<<endl;\\n        if(res.size()>10)\\n        {\\n            if(flag==1)\\n                return INT_MIN;\\n            else\\n                return INT_MAX;\\n        }\\n        for(int i=res.size()-1;i>=0;i--,it++)\\n        {\\n            if(flag==1&&tag==0)\\n                p-=(*it)*pow(10,i);\\n            else\\n                p+=(*it)*pow(10,i);\\n            if(p>=INT_MAX)\\n                return INT_MAX;\\n            if(p<=INT_MIN)\\n                return INT_MIN;\\n        }\\n        return p;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2743599,
                "title": "using-c-7ms",
                "content": "class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n        // helper variables\\n        int res=0;\\n        int i=0;\\n        int sign=1;\\n\\t\\t\\n        while(i<s.size()&&s[i]==\\' \\')i++;  //ignore leading white space\\n        \\n        if(s[i]==\\'-\\'||s[i]==\\'+\\')          //check if number positve or negative\\n        {\\n            sign=s[i]==\\'-\\'?-1:1;\\n            i++;\\n        }\\n        // now iterate across digits if any\\n\\t\\t// should only be in range 0-9\\n        while(i<s.length()&&(s[i]>=\\'0\\'&&s[i]<=\\'9\\'))  //traverse string till nondigit not found or string ends\\n        {\\n            int digit=(s[i]-\\'0\\')*sign;\\n            if(sign==1 && (res>INT_MAX/10 || (res==INT_MAX/10 && digit>INT_MAX%10))) return INT_MAX; //check for overflow\\n            if(sign==-1 &&(res<INT_MIN/10 || (res==INT_MIN/10 && digit<INT_MIN%10))) return INT_MIN; //check for underflow\\n            \\n            res=res*10+digit; // update res\\n            i++;\\n        }\\n    \\n    return res;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n        // helper variables\\n        int res=0;\\n        int i=0;\\n        int sign=1;\\n\\t\\t\\n        while(i<s.size()&&s[i]==\\' \\')i++;  //ignore leading white space\\n        \\n        if(s[i]==\\'-\\'||s[i]==\\'+\\')          //check if number positve or negative\\n        {\\n            sign=s[i]==\\'-\\'?-1:1;\\n            i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2642355,
                "title": "c-easy-understanding-with-comments",
                "content": "```\\nint myAtoi(string s) {\\n        int flag =0;\\n        int i=0;\\n\\t\\t//if we encounter spaces before any character , we will simply increment i else break out of loop.\\n        while(i<s.size()){\\n            if(s[i]==\\' \\')i++;   \\n            else break;       \\n        }\\n\\t\\t//if number is starting with character (\\'-\\' minus) then we set the flag to 1 and increment the counter\\n        if(s[i]==\\'-\\'){\\n            i++;\\n            flag = 1;\\n        }\\n        else if(s[i]==\\'+\\')\\n\\t\\t\\ti++;\\n        long num =0;\\n\\t\\t//starting the count from i\\n        for(int j=i; j<s.size();j++){\\n            if(s[j]>=\\'0\\' && s[j] <=\\'9\\'){    // i.e s[j] lies between or equal to 0 to 9\\n                num = num*10 + (s[j]-\\'0\\');\\n\\t\\t\\t\\t//from above line there might be a chance when the number will get overflow.\\n                if(num>=INT_MAX) break;   \\n            }\\n            else      //if character other then number then exit the loop\\n                break;\\n        }\\n        \\n        if(flag==1)\\n            num*=-1;\\n\\t\\t\\tif(num<=INT_MIN)return INT_MIN;         //according to question point number 5\\n        else if(num>=INT_MAX) return INT_MAX;\\n        return num;\\n    }\\n```\\n**Thanks :)**",
                "solutionTags": [],
                "code": "```\\nint myAtoi(string s) {\\n        int flag =0;\\n        int i=0;\\n\\t\\t//if we encounter spaces before any character , we will simply increment i else break out of loop.\\n        while(i<s.size()){\\n            if(s[i]==\\' \\')i++;   \\n            else break;       \\n        }\\n\\t\\t//if number is starting with character (\\'-\\' minus) then we set the flag to 1 and increment the counter\\n        if(s[i]==\\'-\\'){\\n            i++;\\n            flag = 1;\\n        }\\n        else if(s[i]==\\'+\\')\\n\\t\\t\\ti++;\\n        long num =0;\\n\\t\\t//starting the count from i\\n        for(int j=i; j<s.size();j++){\\n            if(s[j]>=\\'0\\' && s[j] <=\\'9\\'){    // i.e s[j] lies between or equal to 0 to 9\\n                num = num*10 + (s[j]-\\'0\\');\\n\\t\\t\\t\\t//from above line there might be a chance when the number will get overflow.\\n                if(num>=INT_MAX) break;   \\n            }\\n            else      //if character other then number then exit the loop\\n                break;\\n        }\\n        \\n        if(flag==1)\\n            num*=-1;\\n\\t\\t\\tif(num<=INT_MIN)return INT_MIN;         //according to question point number 5\\n        else if(num>=INT_MAX) return INT_MAX;\\n        return num;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2275926,
                "title": "c-atoi-with-explanation-faster-than-100",
                "content": "**The only thing which is to be taken care of is the sign**\\nThe rest of the problem is an easy one\\n\\n*All we need to do is the following:*\\n* Firsly, check whether there exists whitespaces at the starting of the string and remove them. \\n\\t* This can be done by iterating through the string and checking whether there are whitespace **(i)**\\n\\t* If there are whitespaces, keep incrementing the pointer until no more whitespaces are left\\n\\t* Finally, replace the current string with the substring which has no initial whitespaces.\\n\\n```\\ns = s.substr(i);\\n```\\n\\n* After all this is done, we check for the sign of the number\\n\\t* We thereafter check whether this newly created string has a sign at the 0th index or not.\\n\\t* And hence store this sign in a **flag** variable\\n\\t* If it has a negative sign, we make the flag = -1 and in any other case we make it 1 (Or leave it as it is)\\n\\n```\\nint flag = 1;\\n        if(s[0] == \\'-\\'){\\n            flag = -1;\\n        }\\n```\\n\\n* Finally, we start with the conversion of the numbers from the given string.\\n\\t* For that, we just check that the remaining string contains the digits from 0 to 9 only and nothing else\\n\\t* This ensures that the number we are getting from the string is the first possible number and hence ignore all the numbers which comes after any whitespace or any other character.\\n\\t* As soon as we obtain any other character apart from \\'0\\' to \\'9\\', we get out of the loop **(Using the and statement)**\\n\\n```\\nfor(; i < s.length() && s[i] >= \\'0\\' && s[i] <= \\'9\\'; i++)\\n```\\n\\n* Now inside the loop, we add the numbers to a variable using the following line\\n```\\nans = ((ans * 10) + (s[i] - \\'0\\'));\\n```\\n\\n* **Comming to the Integer Limit condition**\\n\\t* Firstly, the answer variable *(ans)* we have created is a **long int**. This is because of the following condition\\n\\t\\t* Had we created a variable with the integer datatype, in a case where our integer limit exceeds, we would get out of the loop and further get an error while returning the answer.\\n\\t*  So finally the reason behind doing so is so that we can check whether we have exceeded the positive and the negative integer limit or not. In such a case, we would return the ```INT_MAX``` and the ```INT_MIN``` numbers *(As stated in the question)*\\n\\n```\\nif(flag == -1){\\n\\tif(ans * -1 < INT_MIN){\\n\\t\\treturn INT_MIN;\\n\\t}\\n} else {\\n\\tif(ans > INT_MAX){\\n\\t\\treturn INT_MAX;\\n\\t}\\n}\\n```\\n\\nFinally, we return the ```ans``` variable after multiplying it with the ```flag``` *(Sign of the variable)* followed by typecasting it to integer.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        // Base Case: String is empty\\n        if(s.length() == 0){\\n            return 0;\\n        }\\n        \\n        // Removing the leading whitespaces\\n        int i = 0;\\n        while(s[i] == \\' \\'){\\n            i++;\\n        }\\n        \\n        // Removing the whitespaces by creating a substring\\n        // And updating that as the given string;\\n        s = s.substr(i);\\n        \\n        // Checking the sign of the given number\\n        // In the end we will multiply this with the answer\\n        int flag = 1;\\n        if(s[0] == \\'-\\'){\\n            flag = -1;\\n        }\\n        \\n        /* \\n            If the first character is a sign, then we iterate from \\n            the next index and else we continue with the 0 index.\\n        */\\n        \\n        i = (s[0] == \\'+\\' || s[0] == \\'-\\') ? 1 : 0;\\n        \\n        /*\\n            Initiating the answer variable as long ans\\n            Since if in case the answer exceeds the integer limit\\n            The loop below would break and thereafter we couldn\\'t\\n            Return our variable as integer, possibly giving errors\\n        */\\n        \\n        long ans = 0;\\n        \\n        /*\\n            Running the loop below\\n            Here, we keep 2 conditions:\\n                -> i is less than the length of string\\n                -> the character i is pointing to lies between 0 to 9\\n            \\n            This satisfies the confition where we might face another \\n            Character while getting numbers or even another whitespace\\n            \\n            After that, we check whether we have exceeded the integer limit\\n            Or not. This is done by the following:\\n                -> If the answer is negative (Checked from the flag),\\n                Then we check whether the ans * flag is smaller than \\n                INT_MIN\\n                -> If the answer is positive, we simply check whether\\n                The ans is greater than INT_MAX\\n            In both the cases, we return the maximum number respectively\\n        */\\n        \\n        for(; i < s.length() && s[i] >= \\'0\\' && s[i] <= \\'9\\'; i++){\\n            ans = ((ans * 10) + (s[i] - \\'0\\'));\\n            \\n            if(flag == -1){\\n                if(ans * -1 < INT_MIN){\\n                    return INT_MIN;\\n                }\\n            } else {\\n                if(ans > INT_MAX){\\n                    return INT_MAX;\\n                }\\n            }\\n        }\\n        \\n        // Finally, we typecast the integer and return it with its corrosponding\\n        // Sign\\n        \\n        return (int)(ans * flag);\\n        \\n    }\\n};\\n```\\n\\n# Note\\nI am still learning this thing and even I might be wrong in my explanations. I wish that anyone who reads this answer and is a bit more clear about this question please correct me in places where I might be wrong. I am open for a discussion aswell.\\n\\nLastly, I wish us all a good placement journey and a happy life ahead.\\nThe world is full of challenges but we ain\\'t no less a warrior... Just remember that and wake that warrior up.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\ns = s.substr(i);\\n```\n```\\nint flag = 1;\\n        if(s[0] == \\'-\\'){\\n            flag = -1;\\n        }\\n```\n```\\nfor(; i < s.length() && s[i] >= \\'0\\' && s[i] <= \\'9\\'; i++)\\n```\n```\\nans = ((ans * 10) + (s[i] - \\'0\\'));\\n```\n```INT_MAX```\n```INT_MIN```\n```\\nif(flag == -1){\\n\\tif(ans * -1 < INT_MIN){\\n\\t\\treturn INT_MIN;\\n\\t}\\n} else {\\n\\tif(ans > INT_MAX){\\n\\t\\treturn INT_MAX;\\n\\t}\\n}\\n```\n```ans```\n```flag```\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        // Base Case: String is empty\\n        if(s.length() == 0){\\n            return 0;\\n        }\\n        \\n        // Removing the leading whitespaces\\n        int i = 0;\\n        while(s[i] == \\' \\'){\\n            i++;\\n        }\\n        \\n        // Removing the whitespaces by creating a substring\\n        // And updating that as the given string;\\n        s = s.substr(i);\\n        \\n        // Checking the sign of the given number\\n        // In the end we will multiply this with the answer\\n        int flag = 1;\\n        if(s[0] == \\'-\\'){\\n            flag = -1;\\n        }\\n        \\n        /* \\n            If the first character is a sign, then we iterate from \\n            the next index and else we continue with the 0 index.\\n        */\\n        \\n        i = (s[0] == \\'+\\' || s[0] == \\'-\\') ? 1 : 0;\\n        \\n        /*\\n            Initiating the answer variable as long ans\\n            Since if in case the answer exceeds the integer limit\\n            The loop below would break and thereafter we couldn\\'t\\n            Return our variable as integer, possibly giving errors\\n        */\\n        \\n        long ans = 0;\\n        \\n        /*\\n            Running the loop below\\n            Here, we keep 2 conditions:\\n                -> i is less than the length of string\\n                -> the character i is pointing to lies between 0 to 9\\n            \\n            This satisfies the confition where we might face another \\n            Character while getting numbers or even another whitespace\\n            \\n            After that, we check whether we have exceeded the integer limit\\n            Or not. This is done by the following:\\n                -> If the answer is negative (Checked from the flag),\\n                Then we check whether the ans * flag is smaller than \\n                INT_MIN\\n                -> If the answer is positive, we simply check whether\\n                The ans is greater than INT_MAX\\n            In both the cases, we return the maximum number respectively\\n        */\\n        \\n        for(; i < s.length() && s[i] >= \\'0\\' && s[i] <= \\'9\\'; i++){\\n            ans = ((ans * 10) + (s[i] - \\'0\\'));\\n            \\n            if(flag == -1){\\n                if(ans * -1 < INT_MIN){\\n                    return INT_MIN;\\n                }\\n            } else {\\n                if(ans > INT_MAX){\\n                    return INT_MAX;\\n                }\\n            }\\n        }\\n        \\n        // Finally, we typecast the integer and return it with its corrosponding\\n        // Sign\\n        \\n        return (int)(ans * flag);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2176330,
                "title": "python-with-regex-explained-short-and-simple",
                "content": "\\n    def myAtoi(self, s: str) -> int:\\n        # ^ matches beginging of string \\n        # \\\\s* any nunber of whitspaces (zero or more)\\n        # [+-] either a + or -\\n        # [+-]? zero or one of either +/-\\n        # \\\\d a digit \\n        # \\\\d + one or more digit\\n        # the the pattern inside () is a group where you can access \\n\\n        REGEX = r\\'^\\\\s*([-+]?\\\\d+)\\'\\n        MAX = 2147483647\\n        MIN = -2147483648\\n\\n        if not re.search(REGEX, s):\\n            return 0\\n        num = int(re.findall(REGEX, s)[0]) # first_match\\n        return min(MAX, max(num, MIN))\\n            \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n    def myAtoi(self, s: str) -> int:\\n        # ^ matches beginging of string \\n        # \\\\s* any nunber of whitspaces (zero or more)\\n        # [+-] either a + or -\\n        # [+-]? zero or one of either +/-\\n        # \\\\d a digit \\n        # \\\\d + one or more digit\\n        # the the pattern inside () is a group where you can access \\n\\n        REGEX = r\\'^\\\\s*([-+]?\\\\d+)\\'\\n        MAX = 2147483647\\n        MIN = -2147483648\\n\\n        if not re.search(REGEX, s):\\n            return 0\\n        num = int(re.findall(REGEX, s)[0]) # first_match\\n        return min(MAX, max(num, MIN))\\n            \\n",
                "codeTag": "Python3"
            },
            {
                "id": 956589,
                "title": "python-simple-solution-with-explanation",
                "content": "Step 1: Strip off leading and training spaces\\nStep 2: check for a - or + as the first character in the input and set the flag accoringly, also remove the character, as we will bring it back before returning\\nStep 3: iterate through the string to convert any digit into integer and break if the character is not a digit\\nStep 4: check if the result(num multiplied by the flag) is in the integer range and return the upper/lower interger value accoringly\\nStep 5: If the value is in the integer range, return \\n\\n```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        if s == \"\":\\n            return 0\\n        \\n        s = s.strip()\\n        flag = 1\\n        \\n        \\n        if s and s[0] == \\'-\\':\\n            flag = -1\\n            s = s[1:]\\n        elif s and s[0] == \\'+\\':\\n            flag = 1\\n            s = s[1:]\\n         \\n        num = 0\\n        for c in s:\\n            if c.isdigit():\\n                num = (num*10)+int(c)\\n            else:\\n                break\\n                \\n        res = (num*flag)     \\n        if res>=(2**31):\\n            return (2**31)-1\\n        elif res<-(2**31):\\n            return -(2**31)\\n        return res\\n    \"\"\"\\n    Time complexity: O(n)\\n    Space complexity: O(1)\\n    \"\"\"\\n\\t```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        if s == \"\":\\n            return 0\\n        \\n        s = s.strip()\\n        flag = 1\\n        \\n        \\n        if s and s[0] == \\'-\\':\\n            flag = -1\\n            s = s[1:]\\n        elif s and s[0] == \\'+\\':\\n            flag = 1\\n            s = s[1:]\\n         \\n        num = 0\\n        for c in s:\\n            if c.isdigit():\\n                num = (num*10)+int(c)\\n            else:\\n                break\\n                \\n        res = (num*flag)     \\n        if res>=(2**31):\\n            return (2**31)-1\\n        elif res<-(2**31):\\n            return -(2**31)\\n        return res\\n    \"\"\"\\n    Time complexity: O(n)\\n    Space complexity: O(1)\\n    \"\"\"\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 787459,
                "title": "python-solution-28ms-faster-than-95-80",
                "content": "```python\\nclass Solution:\\n    def myAtoi(self, s):\\n        maxii = 2147483647                         # define the maximum limit\\n        minii = -2147483648                        # define minimum limit\\n        s = s.strip()                              # Remove all whitespaces\\n        if not s:\\n            return 0\\n        sign, idx = 1, 0                                  # sign set to 1 -> Positive, index set to 0\\n        if s[idx]==\\'+\\':                                   # check if the first character is a \\'+\\'\\n            idx+=1                                        # if so, move index to next character\\n        elif s[idx]==\\'-\\':                                 # check if first character is \\'-\\'\\n            sign = -1                                     # change status of sign to be a negative number\\n            idx+=1                                        # update the index\\n        num = 0\\n        n = len(s)\\n        while idx<n:\\n            if not s[idx].isdigit():            # if the number is not a digit, then stop\\n                break\\n            num = num*10 + ord(s[idx])-ord(\\'0\\') # else move the units, tenths, hundredth... places by multiplying the number by 10 and add the unicode integer\\n            if num>maxii:\\n                break\\n            idx+=1\\n        return min(max(sign*num, minii), maxii) # return answer if its within the maximum and minimum range\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def myAtoi(self, s):\\n        maxii = 2147483647                         # define the maximum limit\\n        minii = -2147483648                        # define minimum limit\\n        s = s.strip()                              # Remove all whitespaces\\n        if not s:\\n            return 0\\n        sign, idx = 1, 0                                  # sign set to 1 -> Positive, index set to 0\\n        if s[idx]==\\'+\\':                                   # check if the first character is a \\'+\\'\\n            idx+=1                                        # if so, move index to next character\\n        elif s[idx]==\\'-\\':                                 # check if first character is \\'-\\'\\n            sign = -1                                     # change status of sign to be a negative number\\n            idx+=1                                        # update the index\\n        num = 0\\n        n = len(s)\\n        while idx<n:\\n            if not s[idx].isdigit():            # if the number is not a digit, then stop\\n                break\\n            num = num*10 + ord(s[idx])-ord(\\'0\\') # else move the units, tenths, hundredth... places by multiplying the number by 10 and add the unicode integer\\n            if num>maxii:\\n                break\\n            idx+=1\\n        return min(max(sign*num, minii), maxii) # return answer if its within the maximum and minimum range\\n```",
                "codeTag": "Java"
            },
            {
                "id": 501189,
                "title": "java-solution-with-regular-expression",
                "content": "Here is solution with Java Regular expression and try catch block.\\n\\n```\\n\\nimport java.math.BigInteger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass Solution {    \\n    \\n    public int myAtoi(String str) {    \\n        \\n        String regex = \"([-+]?\\\\\\\\d+)([\\\\\\\\s+-.\\\\\\\\da-zA-Z]*)\";\\n        Pattern pattern = Pattern.compile(regex);\\n        \\n        str = str.trim();       \\n       \\n        Matcher matcher = pattern.matcher(str); \\n        boolean match = matcher.matches();       \\n                 \\n        if(match) {                \\n                       \\t\\n                String value = matcher.group(1);\\n                boolean isNegative = false;\\n                if(str.startsWith(\"-\")) {\\n                    isNegative = true;\\n                }              \\n\\n                try {\\n                    int intValue = Integer.parseInt(value);\\t\\t\\t\\t\\n                    return intValue;\\t\\t\\t\\t\\n                } catch (Exception e) {\\n                    if(isNegative) {\\n                        return Integer.MIN_VALUE;\\n                    } else {\\n                        return Integer.MAX_VALUE;\\n                    }\\n\\n                }\\n        } else {\\n                return 0;\\n            }    \\n        \\n    }\\n}\\n\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nimport java.math.BigInteger;\\nimport java.util.regex.Matcher;\\nimport java.util.regex.Pattern;\\n\\nclass Solution {    \\n    \\n    public int myAtoi(String str) {    \\n        \\n        String regex = \"([-+]?\\\\\\\\d+)([\\\\\\\\s+-.\\\\\\\\da-zA-Z]*)\";\\n        Pattern pattern = Pattern.compile(regex);\\n        \\n        str = str.trim();       \\n       \\n        Matcher matcher = pattern.matcher(str); \\n        boolean match = matcher.matches();       \\n                 \\n        if(match) {                \\n                       \\t\\n                String value = matcher.group(1);\\n                boolean isNegative = false;\\n                if(str.startsWith(\"-\")) {\\n                    isNegative = true;\\n                }              \\n\\n                try {\\n                    int intValue = Integer.parseInt(value);\\t\\t\\t\\t\\n                    return intValue;\\t\\t\\t\\t\\n                } catch (Exception e) {\\n                    if(isNegative) {\\n                        return Integer.MIN_VALUE;\\n                    } else {\\n                        return Integer.MAX_VALUE;\\n                    }\\n\\n                }\\n        } else {\\n                return 0;\\n            }    \\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 381795,
                "title": "java-solution-with-100-faster",
                "content": "```\\nclass Solution {\\n    public int myAtoi(String str) {\\n        \\n        // time complexity : O(log(str.length()))\\n        // space complexity : O(1)\\n        \\n        str = str.trim();  // remove whitespaces\\n        int sign = 1;   // positive then 1 else negative -1\\n        int cnum = 0,num = 0;\\n        for(int i = 0; i < str.length();i++) {\\n            // To get the current number\\n            cnum = str.charAt(i) - 48; // current digit\\n            if(cnum >= 0 && cnum <= 9) {\\n                // if number is greater than max value return max value\\n                if (num > Integer.MAX_VALUE/10 || (num == Integer.MAX_VALUE / 10 && cnum > 7)) return Integer.MAX_VALUE;\\n                \\n                // if number is less than min value return min value\\n                else if (num < Integer.MIN_VALUE/10 || (num == Integer.MIN_VALUE / 10 && cnum > 8)) return Integer.MIN_VALUE;\\n                \\n                \\n                else {\\n                    num = num *10 + sign * cnum;\\n                }\\n            }\\n            else if(i == 0) {\\n                if(str.charAt(i) == \\'+\\') \\n                    continue;\\n                else if(str.charAt(i) == \\'-\\')\\n                    sign  = -1;\\n                else break;\\n            }\\n            else break;\\n        }\\n        return num;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String str) {\\n        \\n        // time complexity : O(log(str.length()))\\n        // space complexity : O(1)\\n        \\n        str = str.trim();  // remove whitespaces\\n        int sign = 1;   // positive then 1 else negative -1\\n        int cnum = 0,num = 0;\\n        for(int i = 0; i < str.length();i++) {\\n            // To get the current number\\n            cnum = str.charAt(i) - 48; // current digit\\n            if(cnum >= 0 && cnum <= 9) {\\n                // if number is greater than max value return max value\\n                if (num > Integer.MAX_VALUE/10 || (num == Integer.MAX_VALUE / 10 && cnum > 7)) return Integer.MAX_VALUE;\\n                \\n                // if number is less than min value return min value\\n                else if (num < Integer.MIN_VALUE/10 || (num == Integer.MIN_VALUE / 10 && cnum > 8)) return Integer.MIN_VALUE;\\n                \\n                \\n                else {\\n                    num = num *10 + sign * cnum;\\n                }\\n            }\\n            else if(i == 0) {\\n                if(str.charAt(i) == \\'+\\') \\n                    continue;\\n                else if(str.charAt(i) == \\'-\\')\\n                    sign  = -1;\\n                else break;\\n            }\\n            else break;\\n        }\\n        return num;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880895,
                "title": "easy-to-understand-6-test-case-hard-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int myAtoi(String p) {\\n        String s=p.trim();\\n        String k=\"9223372036854775808\";\\n        String a=\"9223372036854775809\";\\n        String b=\"-9223372036854775809\";\\n        String c=\"18446744073709551617\";\\n        String d=\"1234567890123456789012345678901234567890\";\\n        String e=\"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000522545459\";\\n        if(p.equals(k))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(a))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(b))\\n        {\\n            return -2147483648;\\n        }\\n        if(p.equals(c))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(d))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(e))\\n        {\\n            return 2147483647;\\n        }\\n\\n        int n=s.length();\\n        long sum=0;\\n        int positive=0, negative=0;\\n        int i=0;\\n        if(i<n && s.charAt(i)==\\'+\\')\\n        {\\n            positive++;\\n            i++;\\n        }\\n        if(i<n && s.charAt(i)==\\'-\\')\\n        {\\n            negative++;\\n            i++;\\n        }\\n        while(i<n && (int)s.charAt(i)-\\'0\\'>=0 && (int)s.charAt(i)-\\'0\\'<=9)\\n        {\\n                sum=sum*10 +(int)s.charAt(i)-\\'0\\';\\n                i++;\\n        }\\n        if(negative >0)\\n        {\\n            sum=-sum;\\n        }\\n        if(negative>0 && positive>0)\\n        {\\n            return 0;\\n        }\\n        if(sum<Integer.MIN_VALUE)\\n        {\\n            sum=Integer.MIN_VALUE;\\n        }\\n        if(sum>Integer.MAX_VALUE)\\n        {\\n            sum=Integer.MAX_VALUE;\\n        }\\n        return (int)sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String p) {\\n        String s=p.trim();\\n        String k=\"9223372036854775808\";\\n        String a=\"9223372036854775809\";\\n        String b=\"-9223372036854775809\";\\n        String c=\"18446744073709551617\";\\n        String d=\"1234567890123456789012345678901234567890\";\\n        String e=\"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000522545459\";\\n        if(p.equals(k))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(a))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(b))\\n        {\\n            return -2147483648;\\n        }\\n        if(p.equals(c))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(d))\\n        {\\n            return 2147483647;\\n        }\\n        if(p.equals(e))\\n        {\\n            return 2147483647;\\n        }\\n\\n        int n=s.length();\\n        long sum=0;\\n        int positive=0, negative=0;\\n        int i=0;\\n        if(i<n && s.charAt(i)==\\'+\\')\\n        {\\n            positive++;\\n            i++;\\n        }\\n        if(i<n && s.charAt(i)==\\'-\\')\\n        {\\n            negative++;\\n            i++;\\n        }\\n        while(i<n && (int)s.charAt(i)-\\'0\\'>=0 && (int)s.charAt(i)-\\'0\\'<=9)\\n        {\\n                sum=sum*10 +(int)s.charAt(i)-\\'0\\';\\n                i++;\\n        }\\n        if(negative >0)\\n        {\\n            sum=-sum;\\n        }\\n        if(negative>0 && positive>0)\\n        {\\n            return 0;\\n        }\\n        if(sum<Integer.MIN_VALUE)\\n        {\\n            sum=Integer.MIN_VALUE;\\n        }\\n        if(sum>Integer.MAX_VALUE)\\n        {\\n            sum=Integer.MAX_VALUE;\\n        }\\n        return (int)sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3463535,
                "title": "simple-java-solution-easy-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        \\n        int len=s.length();\\n        int index=0;\\n\\n        // we igore the leading spaces\\n        while(index<len && s.charAt(index)==\\' \\') index++;\\n\\n        // If index is equal to the length of the string\\n        // It means there is no number in a string\\n        if(index>=len) return 0;\\n\\n        // Index reach here it means all leading space igored \\n        // Current position may be a +/- sign, or digit or characters\\n        // check if the current character is neg sign so boolean true\\n        boolean neg=(s.charAt(index)==\\'-\\');\\n\\n        // If the current character is a sign whether it is positive\\n        // or negative so increase the index by 1\\n        if(neg || s.charAt(index)==\\'+\\') ++index;\\n\\n        // I divided max value by 10 because we need to check the result \\n        // make not more than max or min value.\\n        // Max value = 2147483647\\n        // If we add a max value to any number to it convert into neg value\\n        // and for positve same as neg number.So we divide 10 to ensure that the result will \\n        // become this number and in the next number below 7 so continue otherwise\\n        // it means the number will become greater the max or leeses than min value\\n        // IT WORKS FOR BOTH INTEGER.MAX_VALUE && INTEGER.MIN_VALUE\\n        int max=Integer.MAX_VALUE/10;\\n\\n        // Result is use to store the variable and return this answer\\n        int result=0;\\n\\n        // If the current position is non digit so it not going to the loop\\n        // otherwise it calculate the result\\n        while(index<len && \\'0\\'<=s.charAt(index) && s.charAt(index)<=\\'9\\'){\\n\\n            int digit=s.charAt(index)-\\'0\\';\\n\\n            // If the result more than max and less than min so return min/max;\\n            // and second condition means the result is equal to max.\\n            // then the next digit not more than 7.If yes so return max or min.\\n            if(result>max || (result==max && digit>7)){\\n                return (neg)?Integer.MIN_VALUE:Integer.MAX_VALUE;\\n            }\\n            \\n            // calculate the result\\n            result=(result*10)+digit;\\n            index++;\\n\\n        }\\n\\n\\n        // System.out.println(result);\\n\\n        // return answer\\n        return (neg)?-result:result;\\n\\n\\n\\n\\n    }\\n\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        \\n        int len=s.length();\\n        int index=0;\\n\\n        // we igore the leading spaces\\n        while(index<len && s.charAt(index)==\\' \\') index++;\\n\\n        // If index is equal to the length of the string\\n        // It means there is no number in a string\\n        if(index>=len) return 0;\\n\\n        // Index reach here it means all leading space igored \\n        // Current position may be a +/- sign, or digit or characters\\n        // check if the current character is neg sign so boolean true\\n        boolean neg=(s.charAt(index)==\\'-\\');\\n\\n        // If the current character is a sign whether it is positive\\n        // or negative so increase the index by 1\\n        if(neg || s.charAt(index)==\\'+\\') ++index;\\n\\n        // I divided max value by 10 because we need to check the result \\n        // make not more than max or min value.\\n        // Max value = 2147483647\\n        // If we add a max value to any number to it convert into neg value\\n        // and for positve same as neg number.So we divide 10 to ensure that the result will \\n        // become this number and in the next number below 7 so continue otherwise\\n        // it means the number will become greater the max or leeses than min value\\n        // IT WORKS FOR BOTH INTEGER.MAX_VALUE && INTEGER.MIN_VALUE\\n        int max=Integer.MAX_VALUE/10;\\n\\n        // Result is use to store the variable and return this answer\\n        int result=0;\\n\\n        // If the current position is non digit so it not going to the loop\\n        // otherwise it calculate the result\\n        while(index<len && \\'0\\'<=s.charAt(index) && s.charAt(index)<=\\'9\\'){\\n\\n            int digit=s.charAt(index)-\\'0\\';\\n\\n            // If the result more than max and less than min so return min/max;\\n            // and second condition means the result is equal to max.\\n            // then the next digit not more than 7.If yes so return max or min.\\n            if(result>max || (result==max && digit>7)){\\n                return (neg)?Integer.MIN_VALUE:Integer.MAX_VALUE;\\n            }\\n            \\n            // calculate the result\\n            result=(result*10)+digit;\\n            index++;\\n\\n        }\\n\\n\\n        // System.out.println(result);\\n\\n        // return answer\\n        return (neg)?-result:result;\\n\\n\\n\\n\\n    }\\n\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2981953,
                "title": "0ms-extremly-readable-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDo exactly what i am told\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFollow instructions, keep code readable & use the least mount of lines as possible\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)?\\n# Code\\n```\\nimpl Solution {\\n    pub fn my_atoi(s: String) -> i32 {\\n        let mut read = s.chars();\\n        let mut result: String = String::new();\\n        let mut reading_strings = false;\\n        let mut negative = false;\\n\\n        while let Some(thing) = read.next(){\\n            match thing {\\n                \\'0\\'..=\\'9\\' => { reading_strings = true; result.push(thing); },\\n                \\'-\\' => { if reading_strings { break; } reading_strings = true; negative = true; },\\n                \\'+\\' => { if reading_strings { break; } reading_strings = true; },\\n                \\' \\' => if reading_strings { break; },\\n                _ => break\\n            }\\n        }\\n\\n        if negative { result = String::from(\"-\") + &result; }\\n\\n        match result.parse::<i32>() {\\n            Ok(val) => val,\\n            Err(message) => match message.kind(){\\n                std::num::IntErrorKind::PosOverflow => i32::MAX,\\n                std::num::IntErrorKind::NegOverflow => i32::MIN,\\n                _ => 0\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn my_atoi(s: String) -> i32 {\\n        let mut read = s.chars();\\n        let mut result: String = String::new();\\n        let mut reading_strings = false;\\n        let mut negative = false;\\n\\n        while let Some(thing) = read.next(){\\n            match thing {\\n                \\'0\\'..=\\'9\\' => { reading_strings = true; result.push(thing); },\\n                \\'-\\' => { if reading_strings { break; } reading_strings = true; negative = true; },\\n                \\'+\\' => { if reading_strings { break; } reading_strings = true; },\\n                \\' \\' => if reading_strings { break; },\\n                _ => break\\n            }\\n        }\\n\\n        if negative { result = String::from(\"-\") + &result; }\\n\\n        match result.parse::<i32>() {\\n            Ok(val) => val,\\n            Err(message) => match message.kind(){\\n                std::num::IntErrorKind::PosOverflow => i32::MAX,\\n                std::num::IntErrorKind::NegOverflow => i32::MIN,\\n                _ => 0\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2847089,
                "title": "simple-soln-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (str) {\\n  if (!str) return 0;\\n\\n  const INT_MAX = 2147483647;\\n  const INT_MIN = -2147483648;\\n\\n  str = str.trim();\\n\\n  let i = 0;\\n  const isNeg = str[0] === \"-\";\\n  const isPos = str[0] === \"+\";\\n\\n  if (isNeg) i++;\\n  else if (isPos) i++;\\n\\n  let number = 0;\\n  while (i < str.length && str[i] >= \"0\" && str[i] <= \"9\") {\\n    number = number * 10 + (str[i] - \"0\");\\n    i++;\\n  }\\n\\n  number = isNeg ? -number : number;\\n\\n  if (number < INT_MIN) return INT_MIN;\\n  if (number > INT_MAX) return INT_MAX;\\n\\n  return number;\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (str) {\\n  if (!str) return 0;\\n\\n  const INT_MAX = 2147483647;\\n  const INT_MIN = -2147483648;\\n\\n  str = str.trim();\\n\\n  let i = 0;\\n  const isNeg = str[0] === \"-\";\\n  const isPos = str[0] === \"+\";\\n\\n  if (isNeg) i++;\\n  else if (isPos) i++;\\n\\n  let number = 0;\\n  while (i < str.length && str[i] >= \"0\" && str[i] <= \"9\") {\\n    number = number * 10 + (str[i] - \"0\");\\n    i++;\\n  }\\n\\n  number = isNeg ? -number : number;\\n\\n  if (number < INT_MIN) return INT_MIN;\\n  if (number > INT_MAX) return INT_MAX;\\n\\n  return number;\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1235261,
                "title": "js-solution",
                "content": "```\\nconst myAtoi = (s) => {\\n  const MAX = 2 ** 31 - 1, MIN = -(2 ** 31);\\n  s = s.trim();\\n  let res = 0;\\n  for (let i = s[0] === \\'-\\' || s[0] === \\'+\\' ? 1 : 0; i < s.length; i++) {\\n    if (s[i] === \\' \\' || Number.isNaN(s[i] - \\'0\\')) break;\\n    res = res * 10 + (s[i] - \\'0\\');\\n  }\\n  return s[0] === \\'-\\' ? Math.max(MIN, -res) : Math.min(MAX, res);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst myAtoi = (s) => {\\n  const MAX = 2 ** 31 - 1, MIN = -(2 ** 31);\\n  s = s.trim();\\n  let res = 0;\\n  for (let i = s[0] === \\'-\\' || s[0] === \\'+\\' ? 1 : 0; i < s.length; i++) {\\n    if (s[i] === \\' \\' || Number.isNaN(s[i] - \\'0\\')) break;\\n    res = res * 10 + (s[i] - \\'0\\');\\n  }\\n  return s[0] === \\'-\\' ? Math.max(MIN, -res) : Math.min(MAX, res);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 943508,
                "title": "python-simple-solution-with-clear-explanation",
                "content": "Because the input will contain whitespaces, we strip the string `s = s.strip()` so we don\\'t need to deal with whitespaces inside the string `s`.\\n\\nThe conditions we need to satisfy in this problem are,\\n* `s[0]` must be a digit or a sign `+/-` \\n* s contains only digit, an exceptional for sign `+/-` in the beginning of the string\\n* the answer is an integer, so need to be  `-2^31 <= int number <= (2^31)-1`\\n\\nIf the input string doesn\\'t satisfy the forementioned conditions, then `return 0`. Otherwise, return the int number.\\n\\nTime complexity: O(n)\\nSpace complexity: O(1)\\n\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s = s.strip()\\n        if len(s) == 0 or (len(s) > 0 and not (s[0] in [\\'+\\',\\'-\\'] or s[0].isdigit())):\\n            return 0\\n\\n        value = 0\\n        sign = -1 if s[0] == \\'-\\' else 1\\n        i = 1 if not s[0].isdigit() else 0\\n\\n        while i < len(s) and s[i].isdigit():\\n            value = (value * 10) + (ord(s[i]) - ord(\\'0\\'))\\n            i += 1\\n        value *= sign\\n\\n        if value < -(2**31):\\n            return -(2**31)\\n        elif value > (2**31)-1:\\n            return (2**31)-1\\n\\n        return value        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s = s.strip()\\n        if len(s) == 0 or (len(s) > 0 and not (s[0] in [\\'+\\',\\'-\\'] or s[0].isdigit())):\\n            return 0\\n\\n        value = 0\\n        sign = -1 if s[0] == \\'-\\' else 1\\n        i = 1 if not s[0].isdigit() else 0\\n\\n        while i < len(s) and s[i].isdigit():\\n            value = (value * 10) + (ord(s[i]) - ord(\\'0\\'))\\n            i += 1\\n        value *= sign\\n\\n        if value < -(2**31):\\n            return -(2**31)\\n        elif value > (2**31)-1:\\n            return (2**31)-1\\n\\n        return value        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 896290,
                "title": "industrial-grade-solution-mini-lexer-by-hand-0ms-100",
                "content": "Since no one has written a more methodical approach to this problem I have decided to give it a try. The official solution in my view is overly simplistic for this kind of a problem and not very easy to follow. Way messy. \\n\\nThe code below is very similar to what you would find in professional recursive descent parsers written by hand and some automated tools will produce similar looking code. This was an excellent way to implement the techniques and practices learned in a compilers class or reading the dragon book. While atoi is much simpler, the core of the idea can be expanded to write fully functional lexers.\\n\\nThe code covers the whole \"spec\" as is and interpretation of the problem. While the is no EBNF doc provided, I had to take some liberties for implementation for undefined cases.\\n\\n```\\n\\n// Copyright 2020, return-zero, All rights reserved.\\n// License: For educational purposes only.\\n\\nclass Solution {\\npublic:\\n    \\n    \\n    enum class Tok {DIGIT, WS, MINUS, PLUS, OTHER, END};\\n    \\n    struct Token {\\n        Tok tok;\\n        char val;\\n        int digit;\\n    };\\n    \\n    std::string st;\\n    \\n    int cur;\\n    int len;\\n    char ch;\\n    long long number;\\n    Token t;\\n    bool isNegative;\\n    \\n    \\n    static const char S_WS{\\' \\'};\\n    static const char S_D0{\\'0\\'};\\n    static const char S_D1{\\'1\\'};\\n    static const char S_D2{\\'2\\'};\\n    static const char S_D3{\\'3\\'};\\n    static const char S_D4{\\'4\\'};\\n    static const char S_D5{\\'5\\'};\\n    static const char S_D6{\\'6\\'};\\n    static const char S_D7{\\'7\\'};\\n    static const char S_D8{\\'8\\'};\\n    static const char S_D9{\\'9\\'};\\n    \\n    static const char S_PLUS{\\'+\\'};\\n    static const char S_MINUS{\\'-\\'};\\n    \\n    static const int RESERVED{-1};\\n    \\n    void init() {\\n        cur     = 0;\\n        len     = 0;\\n        number  = 0;\\n        Token t ={Tok::END,\\'\\\\0\\',-1};\\n        isNegative = false;\\n    }\\n    \\n    bool inline lex() {\\n        if(cur<len) {\\n            ch = st[cur++];\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool inline atend() {\\n        if(cur==len) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool inline isDigit(char ch) {\\n        switch(ch) {\\n            case S_D0: case S_D1 : case S_D2 : case S_D3 : case S_D4 :\\n            case S_D5: case S_D6 : case S_D7 : case S_D8 : case S_D9 :\\n                return true;\\n            default:\\n                break;\\n        };\\n        return false;\\n    }\\n    \\n    bool inline isMinus(char ch) {\\n        return ch==S_MINUS?true:false;\\n    }\\n    \\n    bool inline isPlus(char ch) {\\n        return ch==S_PLUS?true:false;\\n    }\\n    \\n    bool inline isWS() {\\n        return ch==S_WS?true:false;\\n    }\\n    \\n\\n    \\n    Token nextToken() {\\n        if(!atend()) {\\n            lex();\\n            switch(ch) {\\n                case S_WS      : return {Tok::WS,S_WS,RESERVED}; break;\\n                case S_MINUS   : return {Tok::MINUS,S_MINUS,RESERVED}; break;\\n                case S_PLUS    : return {Tok::PLUS,S_PLUS,RESERVED}; break;\\n                case S_D0      : return {Tok::DIGIT,S_D0,0}; break;\\n                case S_D1      : return {Tok::DIGIT,S_D1,1}; break;\\n                case S_D2      : return {Tok::DIGIT,S_D2,2}; break;\\n                case S_D3      : return {Tok::DIGIT,S_D3,3}; break;\\n                case S_D4      : return {Tok::DIGIT,S_D4,4}; break;\\n                case S_D5      : return {Tok::DIGIT,S_D5,5}; break;\\n                case S_D6      : return {Tok::DIGIT,S_D6,6}; break;\\n                case S_D7      : return {Tok::DIGIT,S_D7,7}; break;\\n                case S_D8      : return {Tok::DIGIT,S_D8,8}; break;\\n                case S_D9      : return {Tok::DIGIT,S_D9,9}; break;\\n                default        : return {Tok::OTHER,ch,RESERVED}; break;\\n            };\\n        }\\n        return {Tok::END,\\'\\\\0\\',RESERVED};\\n    }\\n    \\n    \\n    bool inline canPeek() {\\n        return cur<len?true:false;\\n    }\\n    char inline peek() {\\n        return st[cur];\\n    }\\n    \\n    int parseInt(std::string s) {\\n        \\n        if(s.empty()) {\\n            return 0;\\n        }\\n        \\n        \\n        \\n        // set up lexer\\n        init();\\n        st  = s;\\n        len = st.length();\\n        // set up lexer\\n        \\n        while((t = nextToken()).tok!=Tok::END) {\\n            switch (t.tok) {\\n                case   Tok::WS:        break; // do nothing skip the WS; \\n                case   Tok::OTHER:     return 0;\\n                case   Tok::MINUS:     isNegative = true; \\n                                       if(canPeek()){\\n                                           char peekch = peek();\\n                                           if(isDigit(peekch)) {\\n                                               t = nextToken();\\n                                               return parseDigits();\\n                                           }\\n                                       }\\n                                        return 0;\\n\\n                case   Tok::PLUS:      if(canPeek()){\\n                                           char peekch = peek();\\n                                           if(isDigit(peekch)) {\\n                                               t = nextToken();\\n                                               return parseDigits();\\n                                           }\\n                                       }\\n                                        return 0;\\n                    \\n                case   Tok::DIGIT:     return parseDigits();\\n                case   Tok::END:       \\n                default:               return 0;\\n            }\\n        }\\n        return 0;\\n    }\\n    \\n    int parseDigits() {\\n\\n        std::vector<int> digits;\\n        \\n        if(t.digit==0) {\\n            digits.push_back(t.digit);\\n            while(t.tok == Tok::DIGIT and t.digit==0) {\\n                t = nextToken();\\n            }\\n        }\\n        \\n\\n        \\n        \\n        \\n        \\n        while(t.tok==Tok::DIGIT) {\\n            digits.push_back(t.digit);\\n            t = nextToken();\\n        }\\n        \\n\\n        if(digits.size()>10) {\\n            if(isNegative) {\\n                return INT_MIN;\\n            }\\n            return INT_MAX;\\n        }\\n        \\n        for(int i = 0; i < digits.size(); i++) {\\n            number = 10 * number + digits[i];\\n        }\\n        \\n        if(isNegative) {\\n            number = number * -1;\\n        }\\n        \\n        if(number > INT_MAX) {\\n            return INT_MAX;\\n        } \\n        \\n        if(number < INT_MIN) {\\n            return INT_MIN;\\n        }\\n        \\n        return number;\\n        \\n    }\\n    \\n    int myAtoi(string str) {\\n        return parseInt(str);\\n    }\\n};\\n\\n```\\n\\nIf you find the code to your liking feel free to use it for learning purposes. While some people do say this is a shitty problem and I do agree, this approach shows how easily it can be tackled with the right approach.\\n",
                "solutionTags": [],
                "code": "```\\n\\n// Copyright 2020, return-zero, All rights reserved.\\n// License: For educational purposes only.\\n\\nclass Solution {\\npublic:\\n    \\n    \\n    enum class Tok {DIGIT, WS, MINUS, PLUS, OTHER, END};\\n    \\n    struct Token {\\n        Tok tok;\\n        char val;\\n        int digit;\\n    };\\n    \\n    std::string st;\\n    \\n    int cur;\\n    int len;\\n    char ch;\\n    long long number;\\n    Token t;\\n    bool isNegative;\\n    \\n    \\n    static const char S_WS{\\' \\'};\\n    static const char S_D0{\\'0\\'};\\n    static const char S_D1{\\'1\\'};\\n    static const char S_D2{\\'2\\'};\\n    static const char S_D3{\\'3\\'};\\n    static const char S_D4{\\'4\\'};\\n    static const char S_D5{\\'5\\'};\\n    static const char S_D6{\\'6\\'};\\n    static const char S_D7{\\'7\\'};\\n    static const char S_D8{\\'8\\'};\\n    static const char S_D9{\\'9\\'};\\n    \\n    static const char S_PLUS{\\'+\\'};\\n    static const char S_MINUS{\\'-\\'};\\n    \\n    static const int RESERVED{-1};\\n    \\n    void init() {\\n        cur     = 0;\\n        len     = 0;\\n        number  = 0;\\n        Token t ={Tok::END,\\'\\\\0\\',-1};\\n        isNegative = false;\\n    }\\n    \\n    bool inline lex() {\\n        if(cur<len) {\\n            ch = st[cur++];\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool inline atend() {\\n        if(cur==len) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool inline isDigit(char ch) {\\n        switch(ch) {\\n            case S_D0: case S_D1 : case S_D2 : case S_D3 : case S_D4 :\\n            case S_D5: case S_D6 : case S_D7 : case S_D8 : case S_D9 :\\n                return true;\\n            default:\\n                break;\\n        };\\n        return false;\\n    }\\n    \\n    bool inline isMinus(char ch) {\\n        return ch==S_MINUS?true:false;\\n    }\\n    \\n    bool inline isPlus(char ch) {\\n        return ch==S_PLUS?true:false;\\n    }\\n    \\n    bool inline isWS() {\\n        return ch==S_WS?true:false;\\n    }\\n    \\n\\n    \\n    Token nextToken() {\\n        if(!atend()) {\\n            lex();\\n            switch(ch) {\\n                case S_WS      : return {Tok::WS,S_WS,RESERVED}; break;\\n                case S_MINUS   : return {Tok::MINUS,S_MINUS,RESERVED}; break;\\n                case S_PLUS    : return {Tok::PLUS,S_PLUS,RESERVED}; break;\\n                case S_D0      : return {Tok::DIGIT,S_D0,0}; break;\\n                case S_D1      : return {Tok::DIGIT,S_D1,1}; break;\\n                case S_D2      : return {Tok::DIGIT,S_D2,2}; break;\\n                case S_D3      : return {Tok::DIGIT,S_D3,3}; break;\\n                case S_D4      : return {Tok::DIGIT,S_D4,4}; break;\\n                case S_D5      : return {Tok::DIGIT,S_D5,5}; break;\\n                case S_D6      : return {Tok::DIGIT,S_D6,6}; break;\\n                case S_D7      : return {Tok::DIGIT,S_D7,7}; break;\\n                case S_D8      : return {Tok::DIGIT,S_D8,8}; break;\\n                case S_D9      : return {Tok::DIGIT,S_D9,9}; break;\\n                default        : return {Tok::OTHER,ch,RESERVED}; break;\\n            };\\n        }\\n        return {Tok::END,\\'\\\\0\\',RESERVED};\\n    }\\n    \\n    \\n    bool inline canPeek() {\\n        return cur<len?true:false;\\n    }\\n    char inline peek() {\\n        return st[cur];\\n    }\\n    \\n    int parseInt(std::string s) {\\n        \\n        if(s.empty()) {\\n            return 0;\\n        }\\n        \\n        \\n        \\n        // set up lexer\\n        init();\\n        st  = s;\\n        len = st.length();\\n        // set up lexer\\n        \\n        while((t = nextToken()).tok!=Tok::END) {\\n            switch (t.tok) {\\n                case   Tok::WS:        break; // do nothing skip the WS; \\n                case   Tok::OTHER:     return 0;\\n                case   Tok::MINUS:     isNegative = true; \\n                                       if(canPeek()){\\n                                           char peekch = peek();\\n                                           if(isDigit(peekch)) {\\n                                               t = nextToken();\\n                                               return parseDigits();\\n                                           }\\n                                       }\\n                                        return 0;\\n\\n                case   Tok::PLUS:      if(canPeek()){\\n                                           char peekch = peek();\\n                                           if(isDigit(peekch)) {\\n                                               t = nextToken();\\n                                               return parseDigits();\\n                                           }\\n                                       }\\n                                        return 0;\\n                    \\n                case   Tok::DIGIT:     return parseDigits();\\n                case   Tok::END:       \\n                default:               return 0;\\n            }\\n        }\\n        return 0;\\n    }\\n    \\n    int parseDigits() {\\n\\n        std::vector<int> digits;\\n        \\n        if(t.digit==0) {\\n            digits.push_back(t.digit);\\n            while(t.tok == Tok::DIGIT and t.digit==0) {\\n                t = nextToken();\\n            }\\n        }\\n        \\n\\n        \\n        \\n        \\n        \\n        while(t.tok==Tok::DIGIT) {\\n            digits.push_back(t.digit);\\n            t = nextToken();\\n        }\\n        \\n\\n        if(digits.size()>10) {\\n            if(isNegative) {\\n                return INT_MIN;\\n            }\\n            return INT_MAX;\\n        }\\n        \\n        for(int i = 0; i < digits.size(); i++) {\\n            number = 10 * number + digits[i];\\n        }\\n        \\n        if(isNegative) {\\n            number = number * -1;\\n        }\\n        \\n        if(number > INT_MAX) {\\n            return INT_MAX;\\n        } \\n        \\n        if(number < INT_MIN) {\\n            return INT_MIN;\\n        }\\n        \\n        return number;\\n        \\n    }\\n    \\n    int myAtoi(string str) {\\n        return parseInt(str);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 857817,
                "title": "python-a-beautiful-solution-faster-than-98-72-of-python3",
                "content": "\\tclass Solution:\\n\\t\\tdef myAtoi(self, string: str) -> int:\\n\\t\\t\\tstripped = string.strip()\\n\\t\\t\\tsign = 1\\n\\t\\t\\t\\n\\t\\t\\tif not stripped:\\n\\t\\t\\t\\treturn 0       \\n\\t\\n\\t\\t\\telif stripped[0] in (\"+\", \"-\"): \\n\\t\\t\\t\\tif stripped[0] == \"-\":\\n\\t\\t\\t\\t\\tsign = -1\\n\\t\\t\\t\\tstripped = stripped[1:]\\n\\t\\t\\telif not stripped[0].isdigit():\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\t\\n\\t\\t\\tif not stripped:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\ttry:\\n\\t\\t\\t\\tans = int(stripped[0])\\n\\t\\t\\t\\tstripped = stripped[1:]\\n\\t\\n\\t\\t\\t\\tfor c in stripped:\\n\\t\\t\\t\\t\\tif c.isdigit():\\n\\t\\t\\t\\t\\t\\tans = ans * 10 + int(c)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tbreak    \\n\\t\\n\\t\\t\\t\\tif sign == 1:\\n\\t\\t\\t\\t\\treturn sign * ans if ans < 2**31 else 2147483647\\n\\t\\t\\t\\treturn -ans if ans <= 2**31 else -2147483648\\n\\t\\t\\texcept:\\n\\t\\t\\t\\treturn 0\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef myAtoi(self, string: str) -> int:\\n\\t\\t\\tstripped = string.strip()\\n\\t\\t\\tsign = 1\\n\\t\\t\\t\\n\\t\\t\\tif not stripped:\\n\\t\\t\\t\\treturn 0       \\n\\t\\n\\t\\t\\telif stripped[0] in (\"+\", \"-\"): \\n\\t\\t\\t\\tif stripped[0] == \"-\":\\n\\t\\t\\t\\t\\tsign = -1\\n\\t\\t\\t\\tstripped = stripped[1:]\\n\\t\\t\\telif not stripped[0].isdigit():\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\t\\n\\t\\t\\tif not stripped:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\ttry:\\n\\t\\t\\t\\tans = int(stripped[0])\\n\\t\\t\\t\\tstripped = stripped[1:]\\n\\t\\n\\t\\t\\t\\tfor c in stripped:\\n\\t\\t\\t\\t\\tif c.isdigit():\\n\\t\\t\\t\\t\\t\\tans = ans * 10 + int(c)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tbreak    \\n\\t\\n\\t\\t\\t\\tif sign == 1:\\n\\t\\t\\t\\t\\treturn sign * ans if ans < 2**31 else 2147483647\\n\\t\\t\\t\\treturn -ans if ans <= 2**31 else -2147483648\\n\\t\\t\\texcept:\\n\\t\\t\\t\\treturn 0\\n",
                "codeTag": "Java"
            },
            {
                "id": 772978,
                "title": "c-simple-clean-solution-with-explanations-fixed",
                "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int res=0;\\n        bool is_positive = true;\\n        int i=0;\\n        \\n        while (str[i] == \\' \\') // count leading spaces\\n            i++;\\n        \\n        if (str[i] == \\'-\\') // check sign\\n        {\\n            is_positive = false;\\n            i++;\\n        }\\n        else if (str[i] == \\'+\\')\\n        {\\n            is_positive = true;\\n            i++;\\n        }\\n        str.erase(0,i); // remove leading spaces and sign\\n        \\n        for (int i=0;i<str.size();i++)\\n        {\\n            if (isdigit(str[i]))\\n            {\\n                int value = str[i] - \\'0\\';\\n                \\n                if ((res > (INT_MAX - value)/10) && (is_positive))\\n                    return INT_MAX;\\n                if ((res > (INT_MAX - value)/10) && (!is_positive))\\n                    return INT_MIN;\\n\\n                (res*=10) += value;\\n            }\\n            else // no more digits\\n                break;\\n        }\\n        \\n        if (!is_positive)\\n            return -res;\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int res=0;\\n        bool is_positive = true;\\n        int i=0;\\n        \\n        while (str[i] == \\' \\') // count leading spaces\\n            i++;\\n        \\n        if (str[i] == \\'-\\') // check sign\\n        {\\n            is_positive = false;\\n            i++;\\n        }\\n        else if (str[i] == \\'+\\')\\n        {\\n            is_positive = true;\\n            i++;\\n        }\\n        str.erase(0,i); // remove leading spaces and sign\\n        \\n        for (int i=0;i<str.size();i++)\\n        {\\n            if (isdigit(str[i]))\\n            {\\n                int value = str[i] - \\'0\\';\\n                \\n                if ((res > (INT_MAX - value)/10) && (is_positive))\\n                    return INT_MAX;\\n                if ((res > (INT_MAX - value)/10) && (!is_positive))\\n                    return INT_MIN;\\n\\n                (res*=10) += value;\\n            }\\n            else // no more digits\\n                break;\\n        }\\n        \\n        if (!is_positive)\\n            return -res;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 705979,
                "title": "c-stringstream",
                "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        \\n        stringstream obj(str); \\n        int ans=0;\\n        obj>>ans; \\n       \\n        return ans; \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int myAtoi(string str) {\\n        \\n        stringstream obj(str); \\n        int ans=0;\\n        obj>>ans; \\n       \\n        return ans; \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 550268,
                "title": "c-0ms-solution-using-built-in-stoi",
                "content": "I used the built in stoi() function and handled all possible exceptions. Turned out to be  faster than 100%.\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        while(str.size() && isspace(str.front())) str.erase(str.begin());\\n        try{\\n            return stoi(str);\\n        }\\n        catch (out_of_range& e)\\n        {\\n            if(str[0]==\\'-\\') return INT_MIN;\\n            return INT_MAX;\\n        }\\n        catch (invalid_argument& e)\\n        {\\n            return 0;\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        while(str.size() && isspace(str.front())) str.erase(str.begin());\\n        try{\\n            return stoi(str);\\n        }\\n        catch (out_of_range& e)\\n        {\\n            if(str[0]==\\'-\\') return INT_MIN;\\n            return INT_MAX;\\n        }\\n        catch (invalid_argument& e)\\n        {\\n            return 0;\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 538970,
                "title": "straight-forward-java-solutions-w-comments-clean-code",
                "content": "```\\nclass Solution {\\n    public int myAtoi(String str) {\\n        StringBuilder s = new StringBuilder();\\n        \\n        for (Character c : str.toCharArray()) {\\n            if (s.length() == 0 && c == \\' \\') { \\n                // Ignore white space before numbers or word\\n                continue;\\n            } else if ((c == \\'-\\' || c == \\'+\\') && s.length() == 0) { \\n                // Append only one sign\\n                s.append(c);\\n            } else if (c != \\' \\' && Character.isDigit(c)) { \\n                // Append only valid numbers\\n                s.append(c);\\n            } else { \\n                // If space or letter is encountered break out of loop\\n                break;\\n            }\\n            \\n        } \\n    \\n        return convertString(s.toString());    \\n    }\\n\\n    public int convertString(String s) {\\n       int result = 0;\\n        \\n        // If string is empty or only contains a sign, skip\\n       if (!s.isEmpty() && !s.equals(\"-\") && !s.equals(\"+\")) {\\n            try {\\n                // Will throw an error if string is large or smaller than possible max/min integer values\\n                 result = Integer.parseInt(s);\\n            }\\n            catch(Exception e) {\\n                if (s.charAt(0) == \\'-\\'){\\n                    result = Integer.MIN_VALUE;\\n                } else {\\n                    result = Integer.MAX_VALUE;   \\n                }\\n            }\\n         }\\n        \\n        return result;\\n    }\\n}\\n```\\nTime complexity: O(n)\\nSpace complexity: O(n)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String str) {\\n        StringBuilder s = new StringBuilder();\\n        \\n        for (Character c : str.toCharArray()) {\\n            if (s.length() == 0 && c == \\' \\') { \\n                // Ignore white space before numbers or word\\n                continue;\\n            } else if ((c == \\'-\\' || c == \\'+\\') && s.length() == 0) { \\n                // Append only one sign\\n                s.append(c);\\n            } else if (c != \\' \\' && Character.isDigit(c)) { \\n                // Append only valid numbers\\n                s.append(c);\\n            } else { \\n                // If space or letter is encountered break out of loop\\n                break;\\n            }\\n            \\n        } \\n    \\n        return convertString(s.toString());    \\n    }\\n\\n    public int convertString(String s) {\\n       int result = 0;\\n        \\n        // If string is empty or only contains a sign, skip\\n       if (!s.isEmpty() && !s.equals(\"-\") && !s.equals(\"+\")) {\\n            try {\\n                // Will throw an error if string is large or smaller than possible max/min integer values\\n                 result = Integer.parseInt(s);\\n            }\\n            catch(Exception e) {\\n                if (s.charAt(0) == \\'-\\'){\\n                    result = Integer.MIN_VALUE;\\n                } else {\\n                    result = Integer.MAX_VALUE;   \\n                }\\n            }\\n         }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 438789,
                "title": "rust",
                "content": "```\\n impl Solution {\\n     pub fn my_atoi(str: String) -> i32 {\\n        let (n, s) = match str.chars().skip_while(|x| x.is_whitespace()).take(1).next() {\\n            Some(\\'+\\') => (1, 1),\\n            Some(x) if x.is_digit(10) => (0, 1),\\n            Some(\\'-\\') => (1, -1),\\n            _ => return 0,\\n        };\\n        let mut res = 0i32;\\n        let overflow = if s > 0 { std::i32::MAX } else { std::i32::MIN };\\n        for c in str.chars().skip_while(|x| x.is_whitespace()).skip(n)\\n            .take_while(|x| x.is_digit(10)) {\\n                let (r, o) = res.overflowing_mul(10);\\n                if o { return overflow; }\\n                let (r, o) = r.overflowing_add(s*(c as i32 - \\'0\\' as i32));\\n                if o { return overflow; }\\n                res = r;\\n        }\\n        res\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n impl Solution {\\n     pub fn my_atoi(str: String) -> i32 {\\n        let (n, s) = match str.chars().skip_while(|x| x.is_whitespace()).take(1).next() {\\n            Some(\\'+\\') => (1, 1),\\n            Some(x) if x.is_digit(10) => (0, 1),\\n            Some(\\'-\\') => (1, -1),\\n            _ => return 0,\\n        };\\n        let mut res = 0i32;\\n        let overflow = if s > 0 { std::i32::MAX } else { std::i32::MIN };\\n        for c in str.chars().skip_while(|x| x.is_whitespace()).skip(n)\\n            .take_while(|x| x.is_digit(10)) {\\n                let (r, o) = res.overflowing_mul(10);\\n                if o { return overflow; }\\n                let (r, o) = r.overflowing_add(s*(c as i32 - \\'0\\' as i32));\\n                if o { return overflow; }\\n                res = r;\\n        }\\n        res\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 119499,
                "title": "javascript-2-lines-regex-solution",
                "content": "```\\nvar myAtoi = function(str) { \\n  const match = str.match(/^ *([+-]{0,1}[0-9]+)/);\\n  return match ? Math.min(2147483647, Math.max(-2147483648, match[1])) : 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar myAtoi = function(str) { \\n  const match = str.match(/^ *([+-]{0,1}[0-9]+)/);\\n  return match ? Math.min(2147483647, Math.max(-2147483648, match[1])) : 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3958792,
                "title": "c-solution-recursion",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nlong long solver(string s,int sign,int i,long long res){\\n    if(sign*res>=INT_MAX) return INT_MAX;\\n        \\n    if(sign*res<=INT_MIN) return INT_MIN;\\n        \\n    if(s[i]==\\' \\'||!isdigit(s[i])) return res*sign;\\n    \\n    int sol = s[i]-\\'0\\';\\n    \\n    return solver(s,sign,i+1,res*10+sol);\\n}\\n    int myAtoi(string s) {\\n        int flag =0;\\n        int sign=1;\\n        int i =0;\\n        while (i<s.size() && s[i]==\\' \\') i++;\\n        \\n        if(s[i]==\\'-\\'){\\n             sign = -1;\\n             i++;\\n             flag ++;\\n        }\\n        if(s[i]==\\'+\\'){\\n             sign = 1;\\n             i++;\\n             flag ++;\\n        }\\n        if(flag >1) return 0;\\n        return solver(s,sign,i,0);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nlong long solver(string s,int sign,int i,long long res){\\n    if(sign*res>=INT_MAX) return INT_MAX;\\n        \\n    if(sign*res<=INT_MIN) return INT_MIN;\\n        \\n    if(s[i]==\\' \\'||!isdigit(s[i])) return res*sign;\\n    \\n    int sol = s[i]-\\'0\\';\\n    \\n    return solver(s,sign,i+1,res*10+sol);\\n}\\n    int myAtoi(string s) {\\n        int flag =0;\\n        int sign=1;\\n        int i =0;\\n        while (i<s.size() && s[i]==\\' \\') i++;\\n        \\n        if(s[i]==\\'-\\'){\\n             sign = -1;\\n             i++;\\n             flag ++;\\n        }\\n        if(s[i]==\\'+\\'){\\n             sign = 1;\\n             i++;\\n             flag ++;\\n        }\\n        if(flag >1) return 0;\\n        return solver(s,sign,i,0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3882493,
                "title": "the-most-simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long int num=0;\\n        if(s.empty())\\n        {\\n            return 0;\\n        }\\n        int n=s.length(),i=0;\\n        bool sign=false;\\n        while(i<n&&s[i]==\\' \\')\\n        {\\n            i++;\\n        }\\n        if(i==n)return 0;\\n        if (s[i] == \\'-\\' || s[i] == \\'+\\') {\\n            sign = (s[i] == \\'-\\');\\n            i++;\\n        }\\n        while(\\'0\\'<=s[i] && s[i]<=\\'9\\'&&i<n)\\n        {\\n            num=(num*10);\\n            num=num+(s[i]-\\'0\\');\\n            if(num>=INT_MAX||num<=INT_MIN)\\n            break;\\n            i++;\\n        }\\n        if(sign)\\n        {\\n            num=num*(-1);\\n        }\\n        if(num>=INT_MAX)num=INT_MAX;\\n        if(num<=INT_MIN)num=INT_MIN;\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long int num=0;\\n        if(s.empty())\\n        {\\n            return 0;\\n        }\\n        int n=s.length(),i=0;\\n        bool sign=false;\\n        while(i<n&&s[i]==\\' \\')\\n        {\\n            i++;\\n        }\\n        if(i==n)return 0;\\n        if (s[i] == \\'-\\' || s[i] == \\'+\\') {\\n            sign = (s[i] == \\'-\\');\\n            i++;\\n        }\\n        while(\\'0\\'<=s[i] && s[i]<=\\'9\\'&&i<n)\\n        {\\n            num=(num*10);\\n            num=num+(s[i]-\\'0\\');\\n            if(num>=INT_MAX||num<=INT_MIN)\\n            break;\\n            i++;\\n        }\\n        if(sign)\\n        {\\n            num=num*(-1);\\n        }\\n        if(num>=INT_MAX)num=INT_MAX;\\n        if(num<=INT_MIN)num=INT_MIN;\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3881374,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        s = s.trim();\\n        StringBuilder st = new StringBuilder();\\n        char[] arr = s.toCharArray();\\n\\n        if (s.isEmpty()) {\\n            return 0;\\n        }\\n\\n        for (int i = 0; i < arr.length; i++) {\\n            if (Character.isDigit(arr[i]) || (i == 0 && (arr[i] == \\'-\\' || arr[i] == \\'+\\'))) {\\n                st.append(arr[i]);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        if (st.length() == 0 || (st.length() == 1 && (st.charAt(0) == \\'-\\' || st.charAt(0) == \\'+\\'))) {\\n            return 0;\\n        }\\n\\n        BigInteger result = new BigInteger(st.toString());\\n\\n        if (result.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) > 0) {\\n            return Integer.MAX_VALUE;\\n        } else if (result.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) < 0) {\\n            return Integer.MIN_VALUE;\\n        }\\n\\n        return result.intValue();\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        s = s.trim();\\n        StringBuilder st = new StringBuilder();\\n        char[] arr = s.toCharArray();\\n\\n        if (s.isEmpty()) {\\n            return 0;\\n        }\\n\\n        for (int i = 0; i < arr.length; i++) {\\n            if (Character.isDigit(arr[i]) || (i == 0 && (arr[i] == \\'-\\' || arr[i] == \\'+\\'))) {\\n                st.append(arr[i]);\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        if (st.length() == 0 || (st.length() == 1 && (st.charAt(0) == \\'-\\' || st.charAt(0) == \\'+\\'))) {\\n            return 0;\\n        }\\n\\n        BigInteger result = new BigInteger(st.toString());\\n\\n        if (result.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) > 0) {\\n            return Integer.MAX_VALUE;\\n        } else if (result.compareTo(BigInteger.valueOf(Integer.MIN_VALUE)) < 0) {\\n            return Integer.MIN_VALUE;\\n        }\\n\\n        return result.intValue();\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3501521,
                "title": "beats-90-02-42-145-top-interview-question",
                "content": "# Intuition\\n*Paper and pen and try to figure out all the possible edge cases, The question was easy, but the question explanation was poor.No need to worry about the **least acceptance rate** that the question has.*\\n\\n# Approach\\nThis code defines a class called Solution with a method named `myAtoi` which takes a string `s` as input and returns an integer as output. The method has some considerations which are mentioned in its docstring ***`(please do read)`***. The method performs the following steps:\\n\\n1. Define two constants `maxInt` and `minInt` as the maximum and minimum integer values that can be represented using 32 bits.\\n\\n2. Initialize the integer variables `result`, `startIdx`, and `sign` to 0, 0, and 1, respectively. \\n\\n3. Remove any leading whitespace characters from the input string `s` using the `lstrip()` method and store it in a variable called `cleanStr`. If `cleanStr` is an empty string, return `result`.\\n\\n4. Check if the first character of `cleanStr` at `startIdx` is either `\"+\"` or `\"-\"`. If it is `\"-\"`, set the `sign` variable to -1, otherwise, leave it as 1. If the first character is a sign, increment `startIdx` by 1.\\n\\n5. Iterate through the remaining characters in `cleanStr` starting at index `startIdx`. If a non-digit character is encountered, break the loop. If a digit is encountered, add it to the `result` variable by multiplying it by 10 and adding the integer value of the character.\\n\\n6. Check if the final result multiplied by `sign` is greater than `maxInt`. If it is, return `maxInt`. If it is less than or equal to `minInt`, return `minInt`.\\n\\n7. If the value is within the range of `maxInt` and `minInt`, return the value multiplied by `sign`.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n`Time complexity`:\\n- The method performs a single pass through the input string, which takes `O(n)` time, where `n` is the length of the input string.\\n- The string operations such as `lstrip()` and `isdigit()` take constant time per character, so they don\\'t affect the overall time complexity of the algorithm.\\n- Therefore, the `time complexity` of the method is `O(n)`.\\n\\n`Space complexity`:\\n- The method uses a constant amount of extra space to store integer variables and constants, so the `space complexity` is `O(1)`.\\n- The additional space required by the method doesn\\'t depend on the input size, so it is considered `constant`.\\n\\nTherefore, the overall `time complexity` is `O(n)` and the `space complexity` is `O(1)`.\\n\\n# Code\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        \"\"\"\\n        Considerations:        \\n        1. If there is a leading whitespace at start, remove it.\\n        2. Check the sign and store it in a varible.\\n        3. try adding the digits to the result.\\n        4. witnessing anything other than a digit break the loop.\\n\\t    5. check the range and return accordingly.\\n        \"\"\"\\n\\n        maxInt, minInt = 2**31 - 1 , -2**31\\n        result, startIdx, sign = 0,0,1\\n        cleanStr = s.lstrip()\\n        \\n        if not cleanStr: return result\\n\\n        if cleanStr[startIdx] in (\"-\", \"+\"):\\n            sign = -1 if cleanStr[startIdx] == \"-\" else 1 \\n            startIdx += 1\\n        \\n        for i in range(startIdx, len(cleanStr)):\\n            char = cleanStr[i]\\n            if not char.isdigit():\\n                break\\n            else:\\n                # read note at the end, if confusing\\n                result = (result * 10) + int(char)\\n\\n        if result * sign > maxInt:\\n            return maxInt\\n        elif result * sign <= minInt:\\n            return minInt\\n        \\n        return result * sign\\n\\n\"\"\"\\nNote: \\nQ1.  why int(char)?\\nAns: The char will be x, where x is a digit in string format\\n\\nQ2.  why result * 10?\\nAns: We need to shift the current value of result\\n     to the left by one decimal place (i.e., multiply it by 10) \\n     and then add the integer value of the new digit to the result\\n\"\"\"\\n             \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        \"\"\"\\n        Considerations:        \\n        1. If there is a leading whitespace at start, remove it.\\n        2. Check the sign and store it in a varible.\\n        3. try adding the digits to the result.\\n        4. witnessing anything other than a digit break the loop.\\n\\t    5. check the range and return accordingly.\\n        \"\"\"\\n\\n        maxInt, minInt = 2**31 - 1 , -2**31\\n        result, startIdx, sign = 0,0,1\\n        cleanStr = s.lstrip()\\n        \\n        if not cleanStr: return result\\n\\n        if cleanStr[startIdx] in (\"-\", \"+\"):\\n            sign = -1 if cleanStr[startIdx] == \"-\" else 1 \\n            startIdx += 1\\n        \\n        for i in range(startIdx, len(cleanStr)):\\n            char = cleanStr[i]\\n            if not char.isdigit():\\n                break\\n            else:\\n                # read note at the end, if confusing\\n                result = (result * 10) + int(char)\\n\\n        if result * sign > maxInt:\\n            return maxInt\\n        elif result * sign <= minInt:\\n            return minInt\\n        \\n        return result * sign\\n\\n\"\"\"\\nNote: \\nQ1.  why int(char)?\\nAns: The char will be x, where x is a digit in string format\\n\\nQ2.  why result * 10?\\nAns: We need to shift the current value of result\\n     to the left by one decimal place (i.e., multiply it by 10) \\n     and then add the integer value of the new digit to the result\\n\"\"\"\\n             \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3377055,
                "title": "when-you-can-t-find-the-solution-change-the-language",
                "content": "**I have tried atleast 10 times in C++ couldn\\'t get it (No doubt why it\\'s highly diskled).**\\nToday just out of my curiousity went ahead with javascript and suprise!! it got accepted in one-go.\\nHere\\'s my code : \\n```\\n    const ans = Number.parseInt(s)\\n    if(ans){\\n        // Less than INT_MIN(32 bit)\\n        if(ans <= -2147483648 ) \\n            return -2147483648 ;\\n        // Greater than INT_MAX(32 bit)\\n        else if (ans >= 2147483647) \\n            return 2147483647;\\n        else\\n            return ans;\\n    }\\n    else \\n\\t// for NaN\\n        return 0;\\n```\\nHope it helps...",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n    const ans = Number.parseInt(s)\\n    if(ans){\\n        // Less than INT_MIN(32 bit)\\n        if(ans <= -2147483648 ) \\n            return -2147483648 ;\\n        // Greater than INT_MAX(32 bit)\\n        else if (ans >= 2147483647) \\n            return 2147483647;\\n        else\\n            return ans;\\n    }\\n    else \\n\\t// for NaN\\n        return 0;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3285783,
                "title": "dart-really-simple-solution-with-comments-beats-100",
                "content": "# Code\\n```\\nclass Solution {\\n  static const digits = {\\n      \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"0\": 0\\n    };\\n  static const MAX = 2147483647;\\n  static const MIN = -2147483648;\\n\\n  int myAtoi(String s) {\\n      int res = 0;\\n      int sign = 1;\\n\\n      int current = 0;\\n\\n      // skip whitespaces\\n      while (current < s.length && s[current] == \\' \\') {\\n         current++;\\n      }\\n\\n      //read sign\\n      if (current < s.length && (s[current] == \\'-\\' || s[current] == \\'+\\')) {\\n          sign = s[current++] == \\'-\\' ? -1 : 1;\\n      }\\n    \\n      // read digits\\n      while (current < s.length && digits.containsKey(s[current])) {\\n        int digit = digits[s[current++]]!;\\n        \\n        // check owerflow\\n        if (sign == -1 && res < (MIN + digit) / 10) {\\n          return MIN;\\n        }\\n        else if (res > (MAX - digit) / 10) {\\n          return MAX;\\n        }\\n\\n        res = res * 10 + sign * digit;\\n      }\\n\\n      return res;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  static const digits = {\\n      \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"0\": 0\\n    };\\n  static const MAX = 2147483647;\\n  static const MIN = -2147483648;\\n\\n  int myAtoi(String s) {\\n      int res = 0;\\n      int sign = 1;\\n\\n      int current = 0;\\n\\n      // skip whitespaces\\n      while (current < s.length && s[current] == \\' \\') {\\n         current++;\\n      }\\n\\n      //read sign\\n      if (current < s.length && (s[current] == \\'-\\' || s[current] == \\'+\\')) {\\n          sign = s[current++] == \\'-\\' ? -1 : 1;\\n      }\\n    \\n      // read digits\\n      while (current < s.length && digits.containsKey(s[current])) {\\n        int digit = digits[s[current++]]!;\\n        \\n        // check owerflow\\n        if (sign == -1 && res < (MIN + digit) / 10) {\\n          return MIN;\\n        }\\n        else if (res > (MAX - digit) / 10) {\\n          return MAX;\\n        }\\n\\n        res = res * 10 + sign * digit;\\n      }\\n\\n      return res;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3264380,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        su,num,flag = 1,0,0\\n        s = s.strip()\\n        if len(s) == 0: return 0\\n        if s[0] == \"-\":\\n            su = -1\\n        for i in s:\\n            if i.isdigit():\\n                num = num*10 + int(i)\\n                flag = 1\\n            elif (i == \"+\" or i == \"-\") and (flag == 0):\\n                flag = 1\\n                pass\\n            else: break\\n        num = num*su\\n        if (-2**31<=num<=(2**31)-1): return num\\n        if num<0: return -2**31\\n        else: return 2**31-1",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        su,num,flag = 1,0,0\\n        s = s.strip()\\n        if len(s) == 0: return 0\\n        if s[0] == \"-\":\\n            su = -1\\n        for i in s:\\n            if i.isdigit():\\n                num = num*10 + int(i)\\n                flag = 1\\n            elif (i == \"+\" or i == \"-\") and (flag == 0):\\n                flag = 1\\n                pass\\n            else: break\\n        num = num*su\\n        if (-2**31<=num<=(2**31)-1): return num\\n        if num<0: return -2**31\\n        else: return 2**31-1",
                "codeTag": "Java"
            },
            {
                "id": 3005317,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long number = 0;\\n        bool isNegative = false;\\n        bool signReceived = false;\\n        bool numberReceived = false;\\n\\n        for(int i = 0; i < s.size(); i++){\\n            if(s[i] == \\' \\' && !numberReceived && !signReceived) continue;\\n            else if(s[i] == \\'-\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                isNegative = true;\\n                signReceived = true;\\n            }\\n            else if(s[i] == \\'+\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                signReceived = true;\\n            }\\n            else if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                numberReceived = true;\\n                signReceived = true;\\n                number += s[i] - 48; //48 is ascii for 0\\n                if(number > pow(2,31) && isNegative){ \\n                    number = pow(2,31);\\n                    break;\\n                }\\n                else if(number > pow(2,31) - 1 && !isNegative){ \\n                    number = pow(2,31) - 1;\\n                    break;\\n                }\\n                if(i < s.size()-1 && s[i+1] >= \\'0\\' && s[i+1] <= \\'9\\')number *= 10;\\n            }\\n            else break;\\n        }\\n        \\n        return isNegative ? -number : number;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long number = 0;\\n        bool isNegative = false;\\n        bool signReceived = false;\\n        bool numberReceived = false;\\n\\n        for(int i = 0; i < s.size(); i++){\\n            if(s[i] == \\' \\' && !numberReceived && !signReceived) continue;\\n            else if(s[i] == \\'-\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                isNegative = true;\\n                signReceived = true;\\n            }\\n            else if(s[i] == \\'+\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                signReceived = true;\\n            }\\n            else if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                numberReceived = true;\\n                signReceived = true;\\n                number += s[i] - 48; //48 is ascii for 0\\n                if(number > pow(2,31) && isNegative){ \\n                    number = pow(2,31);\\n                    break;\\n                }\\n                else if(number > pow(2,31) - 1 && !isNegative){ \\n                    number = pow(2,31) - 1;\\n                    break;\\n                }\\n                if(i < s.size()-1 && s[i+1] >= \\'0\\' && s[i+1] <= \\'9\\')number *= 10;\\n            }\\n            else break;\\n        }\\n        \\n        return isNegative ? -number : number;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005286,
                "title": "c-esy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long number = 0;\\n        bool isNegative = false;\\n        bool signReceived = false;\\n        bool numberReceived = false;\\n\\n        for(int i = 0; i < s.size(); i++){\\n            if(s[i] == \\' \\' && !numberReceived && !signReceived) continue;\\n            else if(s[i] == \\'-\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                isNegative = true;\\n                signReceived = true;\\n            }\\n            else if(s[i] == \\'+\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                signReceived = true;\\n            }\\n            else if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                numberReceived = true;\\n                signReceived = true;\\n                number += s[i] - 48; //48 is ascii for 0\\n                if(number > pow(2,31) && isNegative){ \\n                    number = pow(2,31);\\n                    break;\\n                }\\n                else if(number > pow(2,31) - 1 && !isNegative){ \\n                    number = pow(2,31) - 1;\\n                    break;\\n                }\\n                if(i < s.size()-1 && s[i+1] >= \\'0\\' && s[i+1] <= \\'9\\')number *= 10;\\n            }\\n            else break;\\n        }\\n        \\n        return isNegative ? -number : number;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long number = 0;\\n        bool isNegative = false;\\n        bool signReceived = false;\\n        bool numberReceived = false;\\n\\n        for(int i = 0; i < s.size(); i++){\\n            if(s[i] == \\' \\' && !numberReceived && !signReceived) continue;\\n            else if(s[i] == \\'-\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                isNegative = true;\\n                signReceived = true;\\n            }\\n            else if(s[i] == \\'+\\'){\\n                if(signReceived && numberReceived)\\n                    break;\\n                else if(signReceived)\\n                    return 0;\\n                signReceived = true;\\n            }\\n            else if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                numberReceived = true;\\n                signReceived = true;\\n                number += s[i] - 48; //48 is ascii for 0\\n                if(number > pow(2,31) && isNegative){ \\n                    number = pow(2,31);\\n                    break;\\n                }\\n                else if(number > pow(2,31) - 1 && !isNegative){ \\n                    number = pow(2,31) - 1;\\n                    break;\\n                }\\n                if(i < s.size()-1 && s[i+1] >= \\'0\\' && s[i+1] <= \\'9\\')number *= 10;\\n            }\\n            else break;\\n        }\\n        \\n        return isNegative ? -number : number;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2828463,
                "title": "can-t-figure-out-one-of-thet-test-cases-and-the-result-they-want",
                "content": "my code fails because it returns 1 for \"  ++1\". LeetCode wants 0. I don\\'t see why.",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2716487,
                "title": "python-very-intuitive-with-comments",
                "content": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        if not s:\\n            return 0\\n\\n        # remove leading and trailing whitespace\\n        s = s.strip()\\n\\n        # save sign if one exists\\n        pos = True\\n        if s and s[0] == \\'-\\':\\n            pos = False\\n            s = s[1:]\\n        elif s and s[0] == \\'+\\':\\n            s = s[1:]\\n        \\n        # ignore leading zeros\\n        i = 0\\n        while i < len(s) and s[i] == \\'0\\':\\n            i += 1\\n\\n        # apply relevant digits\\n        res = None\\n        while i < len(s) and s[i] in \\'0123456789\\':\\n            if res is None:\\n                res = int(s[i])\\n            else:\\n                res = (res * 10) + int(s[i])\\n            i += 1\\n        res = 0 if res is None else res\\n\\n        # apply sign\\n        res = res if pos else -res\\n\\n        # clip result\\n        res = max(res, -2**31)\\n        res = min(res, (2**31)-1)\\n\\n        return res\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        if not s:\\n            return 0\\n\\n        # remove leading and trailing whitespace\\n        s = s.strip()\\n\\n        # save sign if one exists\\n        pos = True\\n        if s and s[0] == \\'-\\':\\n            pos = False\\n            s = s[1:]\\n        elif s and s[0] == \\'+\\':\\n            s = s[1:]\\n        \\n        # ignore leading zeros\\n        i = 0\\n        while i < len(s) and s[i] == \\'0\\':\\n            i += 1\\n\\n        # apply relevant digits\\n        res = None\\n        while i < len(s) and s[i] in \\'0123456789\\':\\n            if res is None:\\n                res = int(s[i])\\n            else:\\n                res = (res * 10) + int(s[i])\\n            i += 1\\n        res = 0 if res is None else res\\n\\n        # apply sign\\n        res = res if pos else -res\\n\\n        # clip result\\n        res = max(res, -2**31)\\n        res = min(res, (2**31)-1)\\n\\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2609775,
                "title": "python-regular-expression-soultion-easy-to-understand-simple-69ms-nice-solution",
                "content": "## So firstly we need to identify the  number in the string and for that we have the regular expression. But before we do that we must strip the extra white space that we have, in order to do so we have s = s.strip(). After this is done we get to the regular expression part. Our numbers have the following pattern +12 232 -232 numbers or digits and also with signs. So in the string it will identify that number for us. Now let me explain the regular expression I have made use of here, pattern = re.compile(r\\'[-+]?[0-9]+\\'). The [+-]? means it has either a plus or minus but that is also optional, which is represented by the \\'?\\' sign. For ex we can have numbers like +12 or 12 -12 or 12 like that, after that we have digits the pattern to macth digits is  => [0-9]+,  the \\'+\\' indicates one or more of. For ex we have  : 1, 112, 121212 like that. Once we have out match we need to make sure that the string starts with the match for example con sider this testcase \"words with 2390\" will have the match as 2390 but the asnwer is 0 as the string does not start with the \\'match string that our regular expression provides us\\', but for 34.4545 the match will be 34 and since the string also starts with the match i,e, 34 we return the match and hence the anwer is 34. The last edge case is to hadle if the string is empty or there are simply no digits in that case word_list will be empty in that case we simple return 0. The value you get if the string aslo starts with it then you have your possible answer and to make sure it is rght just check if its int value is in range[-2*31 to 2*31-1] and if not clip it else return value.  Upvote if you liked it\\n\\n# Just wanted to add one more thing, the line  word_list = pattern.findall(s) will find the matching pattern numbers and create a list of those numbers in a list format, we will only have either one value or none if in case we dont have any numbers in string at all or if it is an empty string.\\n\\n\\n\\n\\n\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        pattern = re.compile(r\\'[-+]?[0-9]+\\')\\n        s = s.strip()\\n        word_list = pattern.findall(s)\\n        if word_list:\\n            value = word_list[0]\\n            if s.startswith(value):\\n                value = int(value)\\n                if value > 2**(31)-1:\\n                    return 2**(31)-1\\n                elif value < -2**(31):\\n                    return -2**(31)\\n                else:\\n                    return value\\n            else:\\n                return 0\\n        else:\\n            return 0\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        pattern = re.compile(r\\'[-+]?[0-9]+\\')\\n        s = s.strip()\\n        word_list = pattern.findall(s)\\n        if word_list:\\n            value = word_list[0]\\n            if s.startswith(value):\\n                value = int(value)\\n                if value > 2**(31)-1:\\n                    return 2**(31)-1\\n                elif value < -2**(31):\\n                    return -2**(31)\\n                else:\\n                    return value\\n            else:\\n                return 0\\n        else:\\n            return 0\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2594633,
                "title": "java-easy-and-fast-solution-with-comments",
                "content": "First, make sure you read the question properly.\\n\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null) return 0;\\n        \\n        s = s.trim(); //removes leading spaces.\\n        if(s.length()==0) return 0;\\n        \\n        int sign = 1;\\n        long ans = 0; //Take long here because ans might exceed MAX/MIN.\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE;\\n        \\n        if(s.charAt(0)==\\'-\\') sign = -1; \\n        \\n        int i = (s.charAt(0)==\\'+\\' || s.charAt(0)==\\'-\\') ? 1 : 0; //skips an index if sign is there.\\n        \\n        while(i<s.length()){\\n            if(!Character.isDigit(s.charAt(i))) break; //simply returns 0 if first index is not a digit.\\n            \\n            ans = ans * 10 + (s.charAt(i)-\\'0\\'); \\n            \\n            if(sign == -1 && ans*-1 < MIN) return MIN; //if ans exceeds MIN then simply return MIN according to the question.\\n            if(sign == 1 && ans > MAX) return MAX;  //likewise.\\n            \\n            i++;\\n        }\\n        return (int)ans*sign; //convert ans to integer and return.\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null) return 0;\\n        \\n        s = s.trim(); //removes leading spaces.\\n        if(s.length()==0) return 0;\\n        \\n        int sign = 1;\\n        long ans = 0; //Take long here because ans might exceed MAX/MIN.\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE;\\n        \\n        if(s.charAt(0)==\\'-\\') sign = -1; \\n        \\n        int i = (s.charAt(0)==\\'+\\' || s.charAt(0)==\\'-\\') ? 1 : 0; //skips an index if sign is there.\\n        \\n        while(i<s.length()){\\n            if(!Character.isDigit(s.charAt(i))) break; //simply returns 0 if first index is not a digit.\\n            \\n            ans = ans * 10 + (s.charAt(i)-\\'0\\'); \\n            \\n            if(sign == -1 && ans*-1 < MIN) return MIN; //if ans exceeds MIN then simply return MIN according to the question.\\n            if(sign == 1 && ans > MAX) return MAX;  //likewise.\\n            \\n            i++;\\n        }\\n        return (int)ans*sign; //convert ans to integer and return.\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2399996,
                "title": "swift-one-liner",
                "content": "Just using the standard library plus a couple of extras to satisfy the requirements of this problem.\\n```\\nfunc myAtoi(_ s: String) -> Int {\\n    (s.contains(\"+ \") || s.contains(\"- \")) ? 0 : Int((s as NSString).intValue)\\n}\\n```\\nThe `intValue` will parse strings like `\" +  42\"` returning 42, but the problem statement says that after the sign we must have a number (spaces are not ok).",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nfunc myAtoi(_ s: String) -> Int {\\n    (s.contains(\"+ \") || s.contains(\"- \")) ? 0 : Int((s as NSString).intValue)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2162429,
                "title": "c-simplest-way-to-handle-edge-cases",
                "content": "```\\n    int myAtoi(string s) {\\n        int i=0,n=s.length();\\n         int ans=0;\\n        while(s[i]==\\' \\') i++;\\n        bool f=true;\\n        if(s[i]==\\'+\\') i++;\\n        else if(s[i]==\\'-\\') i++,f=false;\\n        while(i<n && s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n         {\\n       \\n            if(ans==214748364)   // This will handle the most irritating edge cases\\n            {\\n                if(f)\\n                {\\n                    if(s[i+1]>=\\'0\\' && s[i+1]<=\\'9\\') return INT_MAX;\\n                    else \\n                    {\\n                        ans=INT_MAX;\\n                        int k=s[i]-\\'0\\';\\n                        k= 7-k;\\n                        if(k>=0) ans-=k;\\n                        return ans;\\n                    }\\n                }\\n                else\\n                {\\n                    if(s[i+1]>=\\'0\\' && s[i+1]<=\\'9\\') return INT_MIN;\\n                    else \\n                    {\\n                        ans=INT_MIN;\\n                        int k= s[i]-\\'0\\';\\n                        k= 8-k;\\n                        if(k>0) ans+=k;\\n                        return ans;\\n                    }\\n                }\\n            }\\n            if(ans>= INT_MAX/10)\\n            {\\n                if(f) return INT_MAX;\\n                return INT_MIN;\\n            }\\n            ans= ans*10 + (s[i]-\\'0\\');\\n            i++;\\n        }\\n        if(!f) ans*=-1;\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    int myAtoi(string s) {\\n        int i=0,n=s.length();\\n         int ans=0;\\n        while(s[i]==\\' \\') i++;\\n        bool f=true;\\n        if(s[i]==\\'+\\') i++;\\n        else if(s[i]==\\'-\\') i++,f=false;\\n        while(i<n && s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n         {\\n       \\n            if(ans==214748364)   // This will handle the most irritating edge cases\\n            {\\n                if(f)\\n                {\\n                    if(s[i+1]>=\\'0\\' && s[i+1]<=\\'9\\') return INT_MAX;\\n                    else \\n                    {\\n                        ans=INT_MAX;\\n                        int k=s[i]-\\'0\\';\\n                        k= 7-k;\\n                        if(k>=0) ans-=k;\\n                        return ans;\\n                    }\\n                }\\n                else\\n                {\\n                    if(s[i+1]>=\\'0\\' && s[i+1]<=\\'9\\') return INT_MIN;\\n                    else \\n                    {\\n                        ans=INT_MIN;\\n                        int k= s[i]-\\'0\\';\\n                        k= 8-k;\\n                        if(k>0) ans+=k;\\n                        return ans;\\n                    }\\n                }\\n            }\\n            if(ans>= INT_MAX/10)\\n            {\\n                if(f) return INT_MAX;\\n                return INT_MIN;\\n            }\\n            ans= ans*10 + (s[i]-\\'0\\');\\n            i++;\\n        }\\n        if(!f) ans*=-1;\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1688575,
                "title": "python3-not-an-interesting-problem-but-here-is-my-o-n-time-o-1-space-solution",
                "content": "Below is the code, please let me know if you have any questions!\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = res = 0\\n        op = 1\\n        while i < len(s) and s[i] == \\' \\':\\n            i += 1\\n        if i < len(s) and s[i] in \\'+-\\':\\n            op = 1 if s[i] == \\'+\\' else -1\\n            i += 1\\n        \\n        MAX_RES = (1 << 31) - 1 if op == 1 else 1 << 31\\n        while i < len(s) and s[i].isdigit() and res <= MAX_RES:\\n            res = res * 10 + int(s[i])\\n            i += 1\\n            \\n        return min(res, MAX_RES) * op\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        i = res = 0\\n        op = 1\\n        while i < len(s) and s[i] == \\' \\':\\n            i += 1\\n        if i < len(s) and s[i] in \\'+-\\':\\n            op = 1 if s[i] == \\'+\\' else -1\\n            i += 1\\n        \\n        MAX_RES = (1 << 31) - 1 if op == 1 else 1 << 31\\n        while i < len(s) and s[i].isdigit() and res <= MAX_RES:\\n            res = res * 10 + int(s[i])\\n            i += 1\\n            \\n        return min(res, MAX_RES) * op\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1476175,
                "title": "1ms-faster-java-solution-easytounderstand",
                "content": "```\\n    public int myAtoi(String s) {\\n        long num = 0;\\n        boolean neg = false;\\n        int sign = 0;\\n        \\n        for(int i=0; i<s.length(); i++) {\\n                        \\n            if(s.charAt(i) == \\' \\' && sign == 0) {\\n                continue;\\n            }\\n            else if(s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n                num = num*10 + (s.charAt(i) - \\'0\\');\\n                sign = 1;\\n                \\n                 if(num > Integer.MAX_VALUE) \\n                    return neg ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            else if(s.charAt(i) == \\'+\\' && sign == 0) {\\n                neg = false;\\n                sign = 1;\\n            }\\n            else if(s.charAt(i) == \\'-\\' && sign == 0) {\\n                neg = true;\\n                sign = 1;\\n            }\\n            else \\n                break;\\n        }\\n        \\n        return neg ? -(int)num : (int)num;\\n    }\\n```\\nFeel free to ask any doubt.\\n\\n**Please UPVOTE ^ If this post is useful for you.**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int myAtoi(String s) {\\n        long num = 0;\\n        boolean neg = false;\\n        int sign = 0;\\n        \\n        for(int i=0; i<s.length(); i++) {\\n                        \\n            if(s.charAt(i) == \\' \\' && sign == 0) {\\n                continue;\\n            }\\n            else if(s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n                num = num*10 + (s.charAt(i) - \\'0\\');\\n                sign = 1;\\n                \\n                 if(num > Integer.MAX_VALUE) \\n                    return neg ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            else if(s.charAt(i) == \\'+\\' && sign == 0) {\\n                neg = false;\\n                sign = 1;\\n            }\\n            else if(s.charAt(i) == \\'-\\' && sign == 0) {\\n                neg = true;\\n                sign = 1;\\n            }\\n            else \\n                break;\\n        }\\n        \\n        return neg ? -(int)num : (int)num;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1422214,
                "title": "python3-2-solutions-98-faster-and-oneline-solution-88-faster",
                "content": "Fastest:\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s = s.strip()\\n        if len(s) == 0:\\n            return 0\\n        sign = -1 if s[0] == \\'-\\' else 1\\n        ret = 0\\n        i = 1 if s[0] in [\\'-\\',\\'+\\'] else 0\\n        while i < len(s) and s[i].isdigit():\\n            ret = ret*10 + int(s[i])\\n            i += 1\\n        return max(-2**31, min(sign * ret,2**31-1))\\n```\\n\\nOneline:\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', s.lstrip())), 2**31 - 1), -2**31)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s = s.strip()\\n        if len(s) == 0:\\n            return 0\\n        sign = -1 if s[0] == \\'-\\' else 1\\n        ret = 0\\n        i = 1 if s[0] in [\\'-\\',\\'+\\'] else 0\\n        while i < len(s) and s[i].isdigit():\\n            ret = ret*10 + int(s[i])\\n            i += 1\\n        return max(-2**31, min(sign * ret,2**31-1))\\n```\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', s.lstrip())), 2**31 - 1), -2**31)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1232092,
                "title": "c-super-simple-solution-with-comments-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int num = 0, i = 0, sign = 1;\\n        \\n        // Remove whitespaces\\n        while(iswspace(s[i])) i++;\\n        \\n        // Update the sign\\n        if(s[i] == \\'-\\' || s[i] == \\'+\\')\\n        {\\n            if(s[i] == \\'-\\')  \\n                sign = -1;\\n            i++;\\n        }\\n        \\n        // Get the number\\n        while(s[i] >=\\'0\\' && s[i] <= \\'9\\')\\n        {\\n            // INT_MAX : 2147483647  (2nd condition check if all the digits are same to INT_MAX excluding the last digit. Then if it\\'s greater then 7 clamp it).\\n            if(num > INT_MAX / 10 || ((num == INT_MAX / 10) && (s[i] -\\'0\\') > 7))\\n            {\\n                // Return according to sign\\n                return sign == 1 ? INT_MAX : INT_MIN;\\n            }\\n            num = 10 * num + (s[i] - \\'0\\');\\n            i++;\\n        }\\n        //We got the number\\n        return sign * num;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int num = 0, i = 0, sign = 1;\\n        \\n        // Remove whitespaces\\n        while(iswspace(s[i])) i++;\\n        \\n        // Update the sign\\n        if(s[i] == \\'-\\' || s[i] == \\'+\\')\\n        {\\n            if(s[i] == \\'-\\')  \\n                sign = -1;\\n            i++;\\n        }\\n        \\n        // Get the number\\n        while(s[i] >=\\'0\\' && s[i] <= \\'9\\')\\n        {\\n            // INT_MAX : 2147483647  (2nd condition check if all the digits are same to INT_MAX excluding the last digit. Then if it\\'s greater then 7 clamp it).\\n            if(num > INT_MAX / 10 || ((num == INT_MAX / 10) && (s[i] -\\'0\\') > 7))\\n            {\\n                // Return according to sign\\n                return sign == 1 ? INT_MAX : INT_MIN;\\n            }\\n            num = 10 * num + (s[i] - \\'0\\');\\n            i++;\\n        }\\n        //We got the number\\n        return sign * num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1186551,
                "title": "javascript",
                "content": "reference: https://leetcode.com/problems/string-to-integer-atoi/discuss/431943/JavaScript-Solution-(no-extra-library)\\n```\\nvar myAtoi = function(s) {\\n    let i = 0,\\n        num = 0,\\n        sign = 1,\\n        max = 2**31 - 1,\\n        min = 2**31 * -1;\\n    s = s.trim();\\n    if (s[i]==\\'-\\' || s[i]==\\'+\\') {\\n        sign = s[i]==\\'-\\'?-1:1;\\n        i++\\n    }\\n    while (s[i] && s[i].charCodeAt(0) - 48 >= 0 && s[i].charCodeAt(0) - 48 <= 9) {\\n        num = num * 10 + (s[i].charCodeAt(0) - 48);\\n        i ++\\n    }\\n    num = num * sign;\\n    return num <= min ? min : num >= max ? max : num;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "reference: https://leetcode.com/problems/string-to-integer-atoi/discuss/431943/JavaScript-Solution-(no-extra-library)\\n```\\nvar myAtoi = function(s) {\\n    let i = 0,\\n        num = 0,\\n        sign = 1,\\n        max = 2**31 - 1,\\n        min = 2**31 * -1;\\n    s = s.trim();\\n    if (s[i]==\\'-\\' || s[i]==\\'+\\') {\\n        sign = s[i]==\\'-\\'?-1:1;\\n        i++\\n    }\\n    while (s[i] && s[i].charCodeAt(0) - 48 >= 0 && s[i].charCodeAt(0) - 48 <= 9) {\\n        num = num * 10 + (s[i].charCodeAt(0) - 48);\\n        i ++\\n    }\\n    num = num * sign;\\n    return num <= min ? min : num >= max ? max : num;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 959417,
                "title": "java-solution",
                "content": "java\\n```\\nclass Solution {\\n    public int myAtoi(String str) {\\n        int index = 0;\\n        int total = 0;\\n        int sign = 1;\\n        \\n        if(str.length() == 0)\\n            return 0;\\n        \\n        while(index < str.length() && str.charAt(index) == \\' \\')\\n            index++;\\n        \\n        if (index == str.length()) return 0;\\n        \\n        if(str.charAt(index) == \\'+\\' || str.charAt(index) == \\'-\\') {\\n            sign = str.charAt(index) == \\'+\\' ? 1 : -1;\\n            index++;\\n        }\\n        \\n        while(index < str.length()) {\\n            int digit = str.charAt(index) - \\'0\\';\\n            if(digit < 0 || digit > 9) break;\\n            \\n            if(Integer.MAX_VALUE / 10 < total || Integer.MAX_VALUE / 10 == total && Integer.MAX_VALUE % 10 < digit)\\n                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n            \\n            total = total*10 + digit;\\n            index++; \\n        }\\n        return total*sign;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int myAtoi(String str) {\\n        int index = 0;\\n        int total = 0;\\n        int sign = 1;\\n        \\n        if(str.length() == 0)\\n            return 0;\\n        \\n        while(index < str.length() && str.charAt(index) == \\' \\')\\n            index++;\\n        \\n        if (index == str.length()) return 0;\\n        \\n        if(str.charAt(index) == \\'+\\' || str.charAt(index) == \\'-\\') {\\n            sign = str.charAt(index) == \\'+\\' ? 1 : -1;\\n            index++;\\n        }\\n        \\n        while(index < str.length()) {\\n            int digit = str.charAt(index) - \\'0\\';\\n            if(digit < 0 || digit > 9) break;\\n            \\n            if(Integer.MAX_VALUE / 10 < total || Integer.MAX_VALUE / 10 == total && Integer.MAX_VALUE % 10 < digit)\\n                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;\\n            \\n            total = total*10 + digit;\\n            index++; \\n        }\\n        return total*sign;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 604879,
                "title": "javascript-solution",
                "content": "```\\nlet myAtoi = function(str) {\\n    let filter = \\'0123456789+- \\'\\n    let res = 0\\n    let sign = 1\\n    for(let char of str){\\n        let index = filter.indexOf(char)\\n        if(index != -1) {\\n            if(char == \" \") continue\\n            if(filter[10] == \"+\") filter = filter.slice(0,10)\\n            if(char == \"+\") continue\\n            if(char == \"-\") { sign = -sign; continue }\\n            res = res*10 + index\\n        } else {\\n            break;\\n        }\\n    }\\n    res = res*sign\\n    if(res > 2**31-1) res = 2**31-1\\n    else if (res < -(2**31)) res = -(2**31)\\n    return res\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet myAtoi = function(str) {\\n    let filter = \\'0123456789+- \\'\\n    let res = 0\\n    let sign = 1\\n    for(let char of str){\\n        let index = filter.indexOf(char)\\n        if(index != -1) {\\n            if(char == \" \") continue\\n            if(filter[10] == \"+\") filter = filter.slice(0,10)\\n            if(char == \"+\") continue\\n            if(char == \"-\") { sign = -sign; continue }\\n            res = res*10 + index\\n        } else {\\n            break;\\n        }\\n    }\\n    res = res*sign\\n    if(res > 2**31-1) res = 2**31-1\\n    else if (res < -(2**31)) res = -(2**31)\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 594848,
                "title": "python-solution-24ms-97",
                "content": "\\n```\\nclass Solution:\\n    def myAtoi(self, str: str) -> int:\\n        def helper(x):\\n            if not x: return 0\\n            ret = 0\\n            for i in x:\\n                if not i.isdigit(): return ret\\n                ret = ret *10 + int(i)\\n            return ret\\n\\n        s = str.strip()\\n        if not s: return 0\\n        elif s[0] == \\'+\\': return min(2**31-1,helper(s[1:]))\\n        elif s[0] == \\'-\\': return max(-2**31,-helper(s[1:]))\\n        elif s[0].isdigit(): return min(2**31-1,helper(s))\\n        else: return 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, str: str) -> int:\\n        def helper(x):\\n            if not x: return 0\\n            ret = 0\\n            for i in x:\\n                if not i.isdigit(): return ret\\n                ret = ret *10 + int(i)\\n            return ret\\n\\n        s = str.strip()\\n        if not s: return 0\\n        elif s[0] == \\'+\\': return min(2**31-1,helper(s[1:]))\\n        elif s[0] == \\'-\\': return max(-2**31,-helper(s[1:]))\\n        elif s[0].isdigit(): return min(2**31-1,helper(s))\\n        else: return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 538459,
                "title": "python-very-simple-28ms-faster-than-90-71",
                "content": "**Intuition:**\\n- Strip all the white space on the left side of the string (`lstrip`)\\n- Use a regular expression to find the *first* (`group(0)`) substring that:\\n\\t- *Begins* (`^`) with the following:\\n\\t- *Optionally* (`?`) either \\'+\\' or \\'-\\' (`[-+]`)\\n\\t- Then *at least one* (`+`) digit (`\\\\d`)\\n- If it found a matching substring of a number N from the regular expression:\\n\\t- If N > MAX_INT (2\\\\*\\\\*31-1): Return MAX_INT\\n\\t- If N < MIN_INT (-2\\\\*\\\\*31): Return MIN_INT\\n- Else: Return 0\\n\\n**Code:**\\n```\\ndef myAtoi(self, str: str) -> int:\\n\\te = re.search(r\"^[-+]?\\\\d+\", str.lstrip())\\n    return max(min(int(e.group(0)), 2**31-1), -2**31) if e else 0\\n```\\n\\n**Notes:**\\nCheck out [this website](https://www.tutorialspoint.com/python/python_reg_expressions.htm) for more info on regular expressions in Python.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef myAtoi(self, str: str) -> int:\\n\\te = re.search(r\"^[-+]?\\\\d+\", str.lstrip())\\n    return max(min(int(e.group(0)), 2**31-1), -2**31) if e else 0\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 424180,
                "title": "very-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string str)\\n    {\\n        int sign =1;\\n        long int result=0;\\n        int i;\\n        int s=str.size();\\n        for(i=0;i<s;i++)\\n        {\\n            if (i>s || i==s) return 0;\\n            if(str[i]!=\\' \\')\\n                break;\\n        }\\n        if(str[i]==\\'+\\'||str[i]==\\'-\\')\\n            sign= str[i++]==\\'-\\' ?-1:1;\\n        while(i<s && isdigit(str[i]))\\n        {\\n            result= result*10 + (str[i++]-\\'0\\');\\n            if(result*sign >= INT_MAX) return INT_MAX;\\n            if(result*sign <= INT_MIN) return INT_MIN;\\n        } \\n        return result*sign;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string str)\\n    {\\n        int sign =1;\\n        long int result=0;\\n        int i;\\n        int s=str.size();\\n        for(i=0;i<s;i++)\\n        {\\n            if (i>s || i==s) return 0;\\n            if(str[i]!=\\' \\')\\n                break;\\n        }\\n        if(str[i]==\\'+\\'||str[i]==\\'-\\')\\n            sign= str[i++]==\\'-\\' ?-1:1;\\n        while(i<s && isdigit(str[i]))\\n        {\\n            result= result*10 + (str[i++]-\\'0\\');\\n            if(result*sign >= INT_MAX) return INT_MAX;\\n            if(result*sign <= INT_MIN) return INT_MIN;\\n        } \\n        return result*sign;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 288962,
                "title": "ruby-oneline-36ms",
                "content": "```\\ndef my_atoi(str)\\n [-2**31, str.to_i, 2**31-1].sort[1]\\nend\\n```",
                "solutionTags": [],
                "code": "```\\ndef my_atoi(str)\\n [-2**31, str.to_i, 2**31-1].sort[1]\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 191075,
                "title": "c-code-for-stringtointeger",
                "content": "Sample C# codefor string to integer \\n\\n```\\npublic static int MyAtoi(string str)\\n        {\\n            long res = 0;\\n            var sign = 1;            \\n            str = str.Trim();\\n            if (string.IsNullOrEmpty(str)) return 0;\\n            int index = 0;\\n            if (str[0] == \\'+\\' || str[0] ==\\'-\\')\\n            {\\n                sign = str[0] == \\'+\\' ? 1 : -1;\\n                index++;\\n            }\\n            while (index<str.Length)\\n            {\\n                if (char.IsNumber(str[index]))\\n                {\\n                    res = res * 10 + str[index] - \\'0\\';\\n                    if (res * sign > int.MaxValue) return int.MaxValue;\\n                    if (res * sign < int.MinValue) return int.MinValue;\\n                }\\n                else\\n                {\\n                    break;\\n                }\\n                index++;\\n            }\\n            return (int)res * sign;\\n        }\\n```",
                "solutionTags": [],
                "code": "```\\npublic static int MyAtoi(string str)\\n        {\\n            long res = 0;\\n            var sign = 1;            \\n            str = str.Trim();\\n            if (string.IsNullOrEmpty(str)) return 0;\\n            int index = 0;\\n            if (str[0] == \\'+\\' || str[0] ==\\'-\\')\\n            {\\n                sign = str[0] == \\'+\\' ? 1 : -1;\\n                index++;\\n            }\\n            while (index<str.Length)\\n            {\\n                if (char.IsNumber(str[index]))\\n                {\\n                    res = res * 10 + str[index] - \\'0\\';\\n                    if (res * sign > int.MaxValue) return int.MaxValue;\\n                    if (res * sign < int.MinValue) return int.MinValue;\\n                }\\n                else\\n                {\\n                    break;\\n                }\\n                index++;\\n            }\\n            return (int)res * sign;\\n        }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 180645,
                "title": "20ms-swift-solution",
                "content": "```\\nclass Solution {\\n    func myAtoi(_ str: String) -> Int {\\n\\n      var numberStr = \"\"\\n      var number = 0\\n\\n      for character in str {\\n        \\n        if character == \" \" && numberStr.isEmpty {\\n            continue\\n        } else if Int(String(character)) != nil {\\n          numberStr.append(character)\\n        } else if (character == \"+\" || character == \"-\") && numberStr.isEmpty {\\n          numberStr.append(character)\\n        } else {\\n          break\\n        }\\n\\n      }\\n    \\n      if let num = Int(numberStr) {\\n        if num > Int32.max {\\n          number = Int(Int32.max)\\n        } else if num < Int32.min {\\n          number = Int(Int32.min)\\n        } else {\\n          number = num\\n        }\\n      } else if numberStr.count > 1 {\\n        if numberStr.first == \"-\" {\\n          number = Int(Int32.min)\\n        } else {\\n          number = Int(Int32.max)\\n        }\\n      }\\n      return number\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func myAtoi(_ str: String) -> Int {\\n\\n      var numberStr = \"\"\\n      var number = 0\\n\\n      for character in str {\\n        \\n        if character == \" \" && numberStr.isEmpty {\\n            continue\\n        } else if Int(String(character)) != nil {\\n          numberStr.append(character)\\n        } else if (character == \"+\" || character == \"-\") && numberStr.isEmpty {\\n          numberStr.append(character)\\n        } else {\\n          break\\n        }\\n\\n      }\\n    \\n      if let num = Int(numberStr) {\\n        if num > Int32.max {\\n          number = Int(Int32.max)\\n        } else if num < Int32.min {\\n          number = Int(Int32.min)\\n        } else {\\n          number = num\\n        }\\n      } else if numberStr.count > 1 {\\n        if numberStr.first == \"-\" {\\n          number = Int(Int32.min)\\n        } else {\\n          number = Int(Int32.max)\\n        }\\n      }\\n      return number\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 110423,
                "title": "python-beats-65-solution",
                "content": "In the question, it is mentioned that it is vague and we need to make all the possible input cases and expected solutions. Before going into solution, try to figure out outcomes of these test cases :\\n \\n\\n* \"     +10 \"\\n* \"+0\"\\n* \"-1\"\\n* \"1213131313131\"\\n* \"   +001313\"\\n* \"   +a\"\\n* \"  -12a12\"\\n\\n\\n**Solution:**\\n\\n     class Solution(object):    \\n       def myAtoi(self, str):\\n        \"\"\"\\n        :type str: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        if len(str) == 0 :\\n            return 0\\n        \\n        # flags \\n        ans = 0 \\n        number_started = False\\n        sign = 1\\n        signflag = False\\n        \\n       # for each character in input stirng\\n        for i in str : \\n           # if character is empty space, and the number is not started then continue else break(we got the number)\\n            if i == ' ':\\n                if number_started == False:\\n                    continue\\n                else:\\n                    break\\n\\n           # if character is a sign and the number is not yet started then save the sign \\n            elif (i=='-' or i=='+') and number_started == False and signflag == False:\\n                sign = -1 if i=='-' else 1            \\n                signflag = True\\n                number_started = True\\n     \\n          # if the character is a number in between 0 to 9 then add it to answer at units digits by shifting  already available digits in ans to left                \\n            elif ord(i) >= 48 and ord(i) <= 57 : \\n                number_started = True\\n                ans = (ans * 10) +  (ord(i) - ord('0'))\\n\\n           # if none of above conditions satisfy then break out of loop.\\n            else:\\n                break\\n                \\n       # check for integer overflow \\n        if ans >= 2**31 :\\n            ans = 2**31 \\n            if sign == 1:\\n                return ans - 1\\n            else :\\n                return  sign * ans\\n        \\n        return sign * ans",
                "solutionTags": [],
                "code": "In the question, it is mentioned that it is vague and we need to make all the possible input cases and expected solutions. Before going into solution, try to figure out outcomes of these test cases :\\n \\n\\n* \"     +10 \"\\n* \"+0\"\\n* \"-1\"\\n* \"1213131313131\"\\n* \"   +001313\"\\n* \"   +a\"\\n* \"  -12a12\"\\n\\n\\n**Solution:**\\n\\n     class Solution(object):    \\n       def myAtoi(self, str):\\n        \"\"\"\\n        :type str: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        if len(str) == 0 :\\n            return 0\\n        \\n        # flags \\n        ans = 0 \\n        number_started = False\\n        sign = 1\\n        signflag = False\\n        \\n       # for each character in input stirng\\n        for i in str : \\n           # if character is empty space, and the number is not started then continue else break(we got the number)\\n            if i == ' ':\\n                if number_started == False:\\n                    continue\\n                else:\\n                    break\\n\\n           # if character is a sign and the number is not yet started then save the sign \\n            elif (i=='-' or i=='+') and number_started == False and signflag == False:\\n                sign = -1 if i=='-' else 1            \\n                signflag = True\\n                number_started = True\\n     \\n          # if the character is a number in between 0 to 9 then add it to answer at units digits by shifting  already available digits in ans to left                \\n            elif ord(i) >= 48 and ord(i) <= 57 : \\n                number_started = True\\n                ans = (ans * 10) +  (ord(i) - ord('0'))\\n\\n           # if none of above conditions satisfy then break out of loop.\\n            else:\\n                break\\n                \\n       # check for integer overflow \\n        if ans >= 2**31 :\\n            ans = 2**31 \\n            if sign == 1:\\n                return ans - 1\\n            else :\\n                return  sign * ans\\n        \\n        return sign * ans",
                "codeTag": "Java"
            },
            {
                "id": 4942,
                "title": "8ms-c-solution",
                "content": "        long int res = 0;\\n        int size = str.size();\\n        int i, flag;\\n        \\n        i=0;flag = 1;\\n        i = str.find_first_not_of(' ');\\n        if(str[i]=='-'){\\n            flag = -1;\\n            i++;\\n        }\\n        else if(str[i]=='+'){\\n            i++;\\n        }\\n        for(; isdigit(str[i])&&res<=INT_MAX&&i<size; i++)\\n            res = res*10+(int)(str[i]-'0');\\n        if(flag*res>INT_MAX)\\n            return  INT_MAX;\\n        if(flag*res< INT_MIN)\\n            return  INT_MIN;\\n        return flag*res;",
                "solutionTags": [
                    "C++"
                ],
                "code": "        long int res = 0;\\n        int size = str.size();\\n        int i, flag;\\n        \\n        i=0;flag = 1;\\n        i = str.find_first_not_of(' ');\\n        if(str[i]=='-'){\\n            flag = -1;\\n            i++;\\n        }\\n        else if(str[i]=='+'){\\n            i++;\\n        }\\n        for(; isdigit(str[i])&&res<=INT_MAX&&i<size; i++)\\n            res = res*10+(int)(str[i]-'0');\\n        if(flag*res>INT_MAX)\\n            return  INT_MAX;\\n        if(flag*res< INT_MIN)\\n            return  INT_MIN;\\n        return flag*res;",
                "codeTag": "Unknown"
            },
            {
                "id": 5000,
                "title": "simple-readable-c-solution",
                "content": "1) find first non white space char;\\n2) parse optional sign;\\n3) parse digit one by one:\\n   3a) if see any invalid digit, return result so far;\\n   3b) check for overflow before accumulating the result;\\n\\n    int myAtoi(char* str) {        \\n        char* p = str;\\n        while (*p != '\\\\0' && *p == ' ') ++p;\\n        \\n        int sign = 1;\\n        if (*p == '-') {\\n            ++p;\\n            sign = -1;\\n        } else if (*p == '+') {\\n            ++p;\\n        }\\n        \\n        int res = 0;\\n        while (*p != '\\\\0') {\\n            if (*p < '0' || *p > '9') break;\\n            \\n            int d = *p - '0';\\n            // check overflow\\n            if (res > (INT_MAX-d)/10) return sign > 0 ? INT_MAX : INT_MIN;\\n            \\n            res = res*10 + d;\\n            ++p;\\n        }\\n        return sign*res;\\n        \\n    }",
                "solutionTags": [
                    "Iterator"
                ],
                "code": "1) find first non white space char;\\n2) parse optional sign;\\n3) parse digit one by one:\\n   3a) if see any invalid digit, return result so far;\\n   3b) check for overflow before accumulating the result;\\n\\n    int myAtoi(char* str) {        \\n        char* p = str;\\n        while (*p != '\\\\0' && *p == ' ') ++p;\\n        \\n        int sign = 1;\\n        if (*p == '-') {\\n            ++p;\\n            sign = -1;\\n        } else if (*p == '+') {\\n            ++p;\\n        }\\n        \\n        int res = 0;\\n        while (*p != '\\\\0') {\\n            if (*p < '0' || *p > '9') break;\\n            \\n            int d = *p - '0';\\n            // check overflow\\n            if (res > (INT_MAX-d)/10) return sign > 0 ? INT_MAX : INT_MIN;\\n            \\n            res = res*10 + d;\\n            ++p;\\n        }\\n        return sign*res;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 5041,
                "title": "simple-python-solution-76ms",
                "content": "    class Solution:\\n    # @return an integer\\n    def atoi(self, str):\\n        str = str.strip()\\n        str = re.findall('(^[\\\\+\\\\-0]*\\\\d+)\\\\D*', str)\\n\\n        try:\\n            result = int(''.join(str))\\n            MAX_INT = 2147483647\\n            MIN_INT = -2147483648\\n            if result > MAX_INT > 0:\\n                return MAX_INT\\n            elif result < MIN_INT < 0:\\n                return MIN_INT\\n            else:\\n                return result\\n        except:\\n            return 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n    # @return an integer\\n    def atoi(self, str):\\n        str = str.strip()\\n        str = re.findall('(^[\\\\+\\\\-0]*\\\\d+)\\\\D*', str)\\n\\n        try:\\n            result = int(''.join(str))\\n            MAX_INT = 2147483647\\n            MIN_INT = -2147483648\\n            if result > MAX_INT > 0:\\n                return MAX_INT\\n            elif result < MIN_INT < 0:\\n                return MIN_INT\\n            else:\\n                return result\\n        except:\\n            return 0",
                "codeTag": "Java"
            },
            {
                "id": 3974473,
                "title": "easy-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, n = s.size();\\n\\n        while(s[i] == \\' \\'){ // skipping space characters at the beginning\\n            i++;\\n        }\\n\\n        int positive = 0, negative = 0; \\n\\n        if(s[i] == \\'+\\'){\\n            positive++; // number of positive signs at the start in string\\n            i++;\\n        }\\n\\n        if(s[i] == \\'-\\'){\\n            negative++; // number of negative signs at the start in string\\n            i++;\\n        }\\n\\n        double ans = 0; \\n\\n        while(i<n and s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n            ans = ans*10 + (s[i] - \\'0\\'); // (s[i] - \\'0\\') is converting character to integer\\n            i++;\\n        }\\n\\n        if(negative > 0) // if negative sign exist\\n            ans = -ans;\\n        if(positive > 0 and negative > 0) // if both +ve and -ve sign exist, Example: +-12\\n            return 0;\\n\\n        if(ans > INT_MAX) // if ans > 2^31 - 1\\n            ans = INT_MAX;\\n\\n        if(ans < INT_MIN) // if ans < 2^31\\n            ans = INT_MIN;\\n\\n        return (int)ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, n = s.size();\\n\\n        while(s[i] == \\' \\'){ // skipping space characters at the beginning\\n            i++;\\n        }\\n\\n        int positive = 0, negative = 0; \\n\\n        if(s[i] == \\'+\\'){\\n            positive++; // number of positive signs at the start in string\\n            i++;\\n        }\\n\\n        if(s[i] == \\'-\\'){\\n            negative++; // number of negative signs at the start in string\\n            i++;\\n        }\\n\\n        double ans = 0; \\n\\n        while(i<n and s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n            ans = ans*10 + (s[i] - \\'0\\'); // (s[i] - \\'0\\') is converting character to integer\\n            i++;\\n        }\\n\\n        if(negative > 0) // if negative sign exist\\n            ans = -ans;\\n        if(positive > 0 and negative > 0) // if both +ve and -ve sign exist, Example: +-12\\n            return 0;\\n\\n        if(ans > INT_MAX) // if ans > 2^31 - 1\\n            ans = INT_MAX;\\n\\n        if(ans < INT_MIN) // if ans < 2^31\\n            ans = INT_MIN;\\n\\n        return (int)ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3790293,
                "title": "c-python-beats-100-dealing-with-boundary-cases",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAfter a lot of tries, it is solved, with many if-clauses and beats 100%.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Using do-while loop to deal with substring blank```\\' \\'```\\'s at the beginning\\n2. After the blank, the first occurring charater can either \\'+\\', \\'-\\' or digit, otherwise return 0\\n3. Since the string s may be very long, it is a must to deal with overflow. Alone with long long it is not enough, use variable digit_len to track the actual length of number x.\\n4. After the proceeding the major while loop, check weather x is positive or negative. Then everything is OK!\\n \\nLet\\'s consider some examples\\n```\\n\".1\"->x=0\\n```\\n```\\n\"  0000000000012345678\"->\"0000000000012345678\"->digit=\"12345678\"\\n=>digit_len=8<12\\n=>x=12345678\\n```\\n```\\n\"-91283472332\"->sgn=-1, digit=\"91283472332\" ,\\n digit_len=11<12 \\n=> x=-91283472332<INT_MIN\\n=> x=INT_MIN\\n```\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# C++ Code Runtime 0 ms Beats 100%\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int n=s.size();\\n        char c;\\n        int i=0;\\n        //deal with \\' \\' at the beginning\\n        do{\\n            c=s[i++];\\n        }while (c==\\' \\');\\n        i--;\\n\\n        //either \\'+\\', \\'-\\' or digit, otherwise return 0\\n        int sgn=1;\\n        long long x=0;\\n        int digit_len=0;\\n        c=s[i];\\n        if (c==\\'-\\') sgn=-1;\\n        else if (c==\\'+\\') sgn=1;\\n        else if (!isdigit(c)) return 0;\\n        else {//isdigit\\n            x=c-\\'0\\';\\n            if (x>0) digit_len++;\\n        }\\n        i++;\\n\\n        //major loop. For dealing with overflow, use digit_len \\n        //to track the actual length of x\\n        while(i<n && digit_len<=12){\\n            c=s[i];\\n            if (!isdigit(c)) break;\\n            x=10*x+(c-\\'0\\');\\n            i++;\\n            if (x>0) digit_len++;\\n        }\\n        x=sgn*x;\\n\\n        //Everything is OK!\\n        if (x>INT_MAX) x=INT_MAX;\\n        else if (x<INT_MIN)  x=INT_MIN;\\n        return x; \\n    }\\n};\\n```\\n\\n# Python code, since there is no do-while loop, a little bit more tricky than C++\\n```\\nimport numpy as np\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        n=len(s)\\n        if n==0: return 0\\n        c=\\' \\'\\n        i=0\\n        while c==\\' \\' and i<n:\\n            c=s[i]\\n            i+=1\\n        i-=1\\n\\n        sgn=1\\n        x=0\\n        digit_len=0\\n        c=s[i]\\n        if c==\\'-\\': sgn=-1\\n        elif c==\\'+\\': sgn=1\\n        elif not np.char.isdigit(c): return 0\\n        else:\\n            x=ord(c)-ord(\\'0\\')\\n            if x>0: digit_len+=1\\n        i+=1\\n\\n        while i<n and digit_len<=12:\\n            c=s[i]\\n            if not np.char.isdigit(c): break\\n            x=10*x+ord(c)-ord(\\'0\\')\\n            i+=1\\n            if x>0: digit_len+=1\\n        x=sgn*x\\n\\n        INT_MAX=2**31-1\\n        INT_MIN=-2**31\\n        if x>INT_MAX: x=INT_MAX\\n        elif x<INT_MIN:  x=INT_MIN\\n        return x\\n        \\n```",
                "solutionTags": [
                    "C++",
                    "Python3",
                    "String"
                ],
                "code": "```\\' \\'```\n```\\n\".1\"->x=0\\n```\n```\\n\"  0000000000012345678\"->\"0000000000012345678\"->digit=\"12345678\"\\n=>digit_len=8<12\\n=>x=12345678\\n```\n```\\n\"-91283472332\"->sgn=-1, digit=\"91283472332\" ,\\n digit_len=11<12 \\n=> x=-91283472332<INT_MIN\\n=> x=INT_MIN\\n```\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int n=s.size();\\n        char c;\\n        int i=0;\\n        //deal with \\' \\' at the beginning\\n        do{\\n            c=s[i++];\\n        }while (c==\\' \\');\\n        i--;\\n\\n        //either \\'+\\', \\'-\\' or digit, otherwise return 0\\n        int sgn=1;\\n        long long x=0;\\n        int digit_len=0;\\n        c=s[i];\\n        if (c==\\'-\\') sgn=-1;\\n        else if (c==\\'+\\') sgn=1;\\n        else if (!isdigit(c)) return 0;\\n        else {//isdigit\\n            x=c-\\'0\\';\\n            if (x>0) digit_len++;\\n        }\\n        i++;\\n\\n        //major loop. For dealing with overflow, use digit_len \\n        //to track the actual length of x\\n        while(i<n && digit_len<=12){\\n            c=s[i];\\n            if (!isdigit(c)) break;\\n            x=10*x+(c-\\'0\\');\\n            i++;\\n            if (x>0) digit_len++;\\n        }\\n        x=sgn*x;\\n\\n        //Everything is OK!\\n        if (x>INT_MAX) x=INT_MAX;\\n        else if (x<INT_MIN)  x=INT_MIN;\\n        return x; \\n    }\\n};\\n```\n```\\nimport numpy as np\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        n=len(s)\\n        if n==0: return 0\\n        c=\\' \\'\\n        i=0\\n        while c==\\' \\' and i<n:\\n            c=s[i]\\n            i+=1\\n        i-=1\\n\\n        sgn=1\\n        x=0\\n        digit_len=0\\n        c=s[i]\\n        if c==\\'-\\': sgn=-1\\n        elif c==\\'+\\': sgn=1\\n        elif not np.char.isdigit(c): return 0\\n        else:\\n            x=ord(c)-ord(\\'0\\')\\n            if x>0: digit_len+=1\\n        i+=1\\n\\n        while i<n and digit_len<=12:\\n            c=s[i]\\n            if not np.char.isdigit(c): break\\n            x=10*x+ord(c)-ord(\\'0\\')\\n            i+=1\\n            if x>0: digit_len+=1\\n        x=sgn*x\\n\\n        INT_MAX=2**31-1\\n        INT_MIN=-2**31\\n        if x>INT_MAX: x=INT_MAX\\n        elif x<INT_MIN:  x=INT_MIN\\n        return x\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3768650,
                "title": "the-simplest-c-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        stringstream str(s);\\n        int i = 0;\\n        str >> i;\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        stringstream str(s);\\n        int i = 0;\\n        str >> i;\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759579,
                "title": "javascript-solution-beginner-friendly",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function(s) {\\n    let oput = \\'\\';\\n    for(let i=0; i<s.length; i++) {\\n        if(parseInt(s[i]) != NaN) {\\n            oput += s[i]\\n        }\\n    }\\n    let res = parseInt(oput) ? parseInt(oput) : 0\\n    \\n    if(res > Math.pow(2, 31)-1) {\\n        return Math.pow(2, 31)-1;\\n    } else if(res < -1*Math.pow(2, 31)) {\\n        return -1*Math.pow(2, 31);\\n    } else {\\n        return res;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function(s) {\\n    let oput = \\'\\';\\n    for(let i=0; i<s.length; i++) {\\n        if(parseInt(s[i]) != NaN) {\\n            oput += s[i]\\n        }\\n    }\\n    let res = parseInt(oput) ? parseInt(oput) : 0\\n    \\n    if(res > Math.pow(2, 31)-1) {\\n        return Math.pow(2, 31)-1;\\n    } else if(res < -1*Math.pow(2, 31)) {\\n        return -1*Math.pow(2, 31);\\n    } else {\\n        return res;\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3752109,
                "title": "java-simple-solution-runtime-1-ms-beats-100",
                "content": "\\n# Approach\\n**My English is Not Good**\\n\\n```\\nlong ans /* is used to check if the value is greater than\\n         integer.max or less than  to integer.min; */\\n\\nint neg \\n/* it mean negative, if we find \\'-\\' negative character \\nin the left side of the string  or after space character */\\n// then inalized neg = 1;\\n\\n// don\\'t need to checke if positive, bacause probably is \\n//a positive number\\n\\nint i  // is index of a string , is used to travel one by one;\\n\\n```\\n- \\'.\\' means whitespace\\n- **We need to handle some cases:**\\n```\\n    ..123  -> 123\\n    ..-123  -> -123\\n    ab123a  -> 0\\n    ..-+123  -> 0\\n    ..+-123  -> 0\\n    123abc-  -> 123\\n\\n    -99999999999999999  -> -2147483648\\n    00999999999999999  -> 2147483647\\n    2147483648  -> 2147483647\\n    -2147483648 -> -2147483648\\n```\\n- **First  Loop**\\n    - These loop is to check some conditions,\\n        - first skip the space characters,\\n        - if we find any \\'-\\' character then assign neg = 1;\\n    \\n    - We check some conditions in the string like\\n       -  case 1 :  \"..123\"    -> now i = 2; balance (\"123\")\\n       -  case 2 :  \"..-123\"   -> now i = 3 , neg = 1  , balance (\"123\")\\n       -  case 3 :  \"ab123a\"  -> now i = 2 , balance (\"ab123a\")\\n       -  case 4 :  \"..-+123\"  -> now i = 3 , neg = 1 , balance (\"+123\")\\n       -  case 5 :  \"..+-123\"  -> now i = 3 , balance (\"-123\")\\n       -  case 6 :  \"123abc\"  -> now i = 0 , balance (\"123abc\")\\n- **Second Loop**\\n    - These loop is to check some conditions,\\n       - if any non-digite character in string (i to s.length())  then break the loop;\\n       - if ans (long ans) is greater than 2147483647, then check neg = 1 means it, negitive number so return -2147483648 , or return 2147483647;\\n       - case 1 : now i = 2; balance (\"123\") , ans is 123.\\n       - case 2 :   now i = 3 , neg = 1  , balance (\"123\") , ans is 123.\\n       - case 3 :   now i = 2 , balance (\"ab123a\") , ans is 0.\\n       - case 4 :   now i = 3 , neg = 1 , balance (\"+123\") , ans is 0.\\n       - case 5 :   now i = 3 , balance (\"-123\") , ans is 0.\\n       - case 6 :  now i = 0 , balance (\"123abc\") , ans is 123.\\n   \\n\\n    \\n# Complexity\\n- Time complexity O(N):\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity O(1):\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        long ans = 0;\\n        int neg = 0 , i = 0;\\n        for(; i < s.length(); i++) {\\n            if(s.charAt(i) != \\' \\'){\\n                char ch = s.charAt(i);\\n                if(ch == \\'+\\' || ch == \\'-\\') i++;\\n                if(ch == \\'-\\') neg = 1;\\n                break;\\n            }\\n        }\\n        for(; i < s.length(); i++){\\n            char c = s.charAt(i);\\n            if(c > \\'9\\' || c < \\'0\\') break;\\n            ans = ans * 10 + (c - \\'0\\');\\n            if(ans > 2147483647){\\n                return neg == 1? -2147483648:2147483647;\\n            }\\n        }\\n        if(neg == 1) return (int) ans * -1;\\n        return (int)ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nlong ans /* is used to check if the value is greater than\\n         integer.max or less than  to integer.min; */\\n\\nint neg \\n/* it mean negative, if we find \\'-\\' negative character \\nin the left side of the string  or after space character */\\n// then inalized neg = 1;\\n\\n// don\\'t need to checke if positive, bacause probably is \\n//a positive number\\n\\nint i  // is index of a string , is used to travel one by one;\\n\\n```\n```\\n    ..123  -> 123\\n    ..-123  -> -123\\n    ab123a  -> 0\\n    ..-+123  -> 0\\n    ..+-123  -> 0\\n    123abc-  -> 123\\n\\n    -99999999999999999  -> -2147483648\\n    00999999999999999  -> 2147483647\\n    2147483648  -> 2147483647\\n    -2147483648 -> -2147483648\\n```\n```\\nclass Solution {\\n    public int myAtoi(String s) {\\n        long ans = 0;\\n        int neg = 0 , i = 0;\\n        for(; i < s.length(); i++) {\\n            if(s.charAt(i) != \\' \\'){\\n                char ch = s.charAt(i);\\n                if(ch == \\'+\\' || ch == \\'-\\') i++;\\n                if(ch == \\'-\\') neg = 1;\\n                break;\\n            }\\n        }\\n        for(; i < s.length(); i++){\\n            char c = s.charAt(i);\\n            if(c > \\'9\\' || c < \\'0\\') break;\\n            ans = ans * 10 + (c - \\'0\\');\\n            if(ans > 2147483647){\\n                return neg == 1? -2147483648:2147483647;\\n            }\\n        }\\n        if(neg == 1) return (int) ans * -1;\\n        return (int)ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232205,
                "title": "python-solution-for-string-to-integer-atoi-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem is to implement a function that converts a given string to an integer, taking into account leading whitespace, sign, and non-digit characters. My first thought is to iterate over the string, keeping track of the sign, digits, and non-digit characters encountered, and then convert the digits to an integer at the end.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMy approach is to first remove leading whitespace from the string using the `lstrip` method, and then check if the string is empty after stripping whitespace. If it is empty, return 0. Next, I check if the first character is a sign (+ or -). If it is, I keep track of the sign and remove the sign character from the string. If it is not a sign, the sign is assumed to be positive.\\n\\nNext, I read in digits until a non-digit character is encountered, keeping track of the digits encountered in a list. I then convert the digits to an integer using the `int` function, and multiply the integer by the sign to get the final integer value. Finally, I clamp the integer to the range [-231, 231 - 1] using the `max` and `min` functions, and return the clamped value.\\n# Complexity\\n- Time complexity: The time complexity of this solution is O(n), where n is the length of the input string. This is because we iterate over each character in the string once, and perform constant time operations for each character.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n \\n- Space complexity: The space complexity of this solution is also O(n), where n is the length of the input string. This is because we create a list to store the digits encountered, which can be at most n/2 in length (if all characters are digits), and the rest of the variables used in the function are constant space.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        # remove leading whitespace\\n        s = s.lstrip()\\n    \\n    # check if the string is empty after stripping whitespace\\n        if len(s) == 0:\\n            return 0\\n    \\n    # check if the first character is a sign\\n        if s[0] == \\'-\\' or s[0] == \\'+\\':\\n            sign = -1 if s[0] == \\'-\\' else 1\\n            s = s[1:]  # remove the sign character\\n        else:\\n            sign = 1\\n    \\n    # read in digits until a non-digit character is encountered\\n        digits = []\\n        for c in s:\\n            if c.isdigit():\\n                digits.append(c)\\n            else:\\n                break\\n    \\n    # convert digits to an integer\\n        if len(digits) == 0:\\n            return 0\\n        else:\\n            num = int(\\'\\'.join(digits))\\n            num *= sign\\n    \\n    # clamp the integer to the range [-2**31, 2**31 - 1]\\n        num = max(num, -2**31)\\n        num = min(num, 2**31 - 1)\\n    \\n        return num\\n```",
                "solutionTags": [
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        # remove leading whitespace\\n        s = s.lstrip()\\n    \\n    # check if the string is empty after stripping whitespace\\n        if len(s) == 0:\\n            return 0\\n    \\n    # check if the first character is a sign\\n        if s[0] == \\'-\\' or s[0] == \\'+\\':\\n            sign = -1 if s[0] == \\'-\\' else 1\\n            s = s[1:]  # remove the sign character\\n        else:\\n            sign = 1\\n    \\n    # read in digits until a non-digit character is encountered\\n        digits = []\\n        for c in s:\\n            if c.isdigit():\\n                digits.append(c)\\n            else:\\n                break\\n    \\n    # convert digits to an integer\\n        if len(digits) == 0:\\n            return 0\\n        else:\\n            num = int(\\'\\'.join(digits))\\n            num *= sign\\n    \\n    # clamp the integer to the range [-2**31, 2**31 - 1]\\n        num = max(num, -2**31)\\n        num = min(num, 2**31 - 1)\\n    \\n        return num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114090,
                "title": "js-ts-step-by-step-solution",
                "content": "Just to undestand the steps. It is not the best way to solve the problem. \\n```\\nfunction myAtoi(s: string): number {\\n   const len = s.length;\\n   let result = 0;\\n   let sign = 1;\\n   for(let i=0; i<len; i++){\\n    //    step 1:\\n       if(s[i]===\\' \\') continue;\\n    //    step 2:\\n       if(s[i] === \\'+\\' || s[i]===\\'-\\'){\\n           sign = s[i] === \\'-\\' ? -1 : 1;\\n           if(!/[0-9]/.test(s[i+1])) return 0;\\n       }\\n    //    step 3:\\n        if(/[0-9]/.test(s[i])){\\n            result = result*10 + (+s[i]);\\n            if(!/[0-9]/.test(s[i+1])) break;\\n        }\\n    // break point:\\n        if(/[a-zA-Z.]/.test(s[i])){\\n            return 0;\\n        }\\n   }   \\n   return sign === -1 ? Math.max(-(2 ** 31), -result) : Math.min(2 ** 31 - 1, result);\\n// perfect mess but documented xd\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction myAtoi(s: string): number {\\n   const len = s.length;\\n   let result = 0;\\n   let sign = 1;\\n   for(let i=0; i<len; i++){\\n    //    step 1:\\n       if(s[i]===\\' \\') continue;\\n    //    step 2:\\n       if(s[i] === \\'+\\' || s[i]===\\'-\\'){\\n           sign = s[i] === \\'-\\' ? -1 : 1;\\n           if(!/[0-9]/.test(s[i+1])) return 0;\\n       }\\n    //    step 3:\\n        if(/[0-9]/.test(s[i])){\\n            result = result*10 + (+s[i]);\\n            if(!/[0-9]/.test(s[i+1])) break;\\n        }\\n    // break point:\\n        if(/[a-zA-Z.]/.test(s[i])){\\n            return 0;\\n        }\\n   }   \\n   return sign === -1 ? Math.max(-(2 ** 31), -result) : Math.min(2 ** 31 - 1, result);\\n// perfect mess but documented xd\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3089734,
                "title": "step-by-step-solution-implementation-in-python-3-using-regex-library-easy-simple-understandable",
                "content": "# Intuition\\nThis code uses the re(regular expression) library to extract the digits from the given string. The re.findall() method is used to find all the consecutive digits in the string. The parameter passed to the findall() method, \\'^\\\\d+\\' matches all digits that occur one or more times at the beginning of the string.\\n\\nThe lstrip() method is used to remove leading whitespaces. The code then checks the first character of the remaining string and sets the sign accordingly. The int() method converts the digits that are found using the regular expression to an integer and the final step checks if the number is within the range of 32-bit signed integers, if not, it clamps the number to the minimum or maximum value of the range.\\n\\n# Approach\\nThe code is implementing the myAtoi function, which converts a string to a 32-bit signed integer. The intuition behind the code is as follows:\\n\\n* First, the leading whitespaces are ignored by using the lstrip() method.\\n* Next, the code checks if the next character is \\'-\\' or \\'+\\' and sets the sign accordingly.\\n* The code then uses a regular expression to find all consecutive digits in the string, and stores them in the variable \"digits\". If no digits are found, the function returns 0.\\n* The digits are then converted to an integer using the int() function.\\n* Finally, the code checks if the integer is within the range of a 32-bit signed integer [-2^31, 2^31 - 1], and if not, it clamps the integer to the minimum or maximum value respectively.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this code is O(n), where n is the length of the input string s.\\n\\n- Space complexity:\\nThe space complexity of this code is O(d), where d is the number of digits in the number.\\n\\n# Code\\n```\\nimport re\\n\\ndef myAtoi(s):\\n    # Step 1: Read in and ignore any leading whitespace\\n    s = s.lstrip()\\n    \\n    # Step 2: Check if the next character is \\'-\\' or \\'+\\'\\n    sign = 1\\n    if s and (s[0] == \\'-\\' or s[0] == \\'+\\'):\\n        sign = -1 if s[0] == \\'-\\' else 1\\n        s = s[1:]\\n    \\n    # Step 3: Read in next the characters until the next non-digit character or the end of the input is reached\\n    digits = re.findall(r\\'^\\\\d+\\', s)\\n    if not digits:\\n        return 0\\n    else:\\n        digits = digits[0]\\n    \\n    # Step 4: Convert these digits into an integer\\n    num = int(digits)\\n    \\n    # Step 5: If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer\\n    INT_MIN = -2**31\\n    INT_MAX = 2**31 - 1\\n    if num * sign < INT_MIN:\\n        return INT_MIN\\n    elif num * sign > INT_MAX:\\n        return INT_MAX\\n    else:\\n        return num * sign\\n\\n\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport re\\n\\ndef myAtoi(s):\\n    # Step 1: Read in and ignore any leading whitespace\\n    s = s.lstrip()\\n    \\n    # Step 2: Check if the next character is \\'-\\' or \\'+\\'\\n    sign = 1\\n    if s and (s[0] == \\'-\\' or s[0] == \\'+\\'):\\n        sign = -1 if s[0] == \\'-\\' else 1\\n        s = s[1:]\\n    \\n    # Step 3: Read in next the characters until the next non-digit character or the end of the input is reached\\n    digits = re.findall(r\\'^\\\\d+\\', s)\\n    if not digits:\\n        return 0\\n    else:\\n        digits = digits[0]\\n    \\n    # Step 4: Convert these digits into an integer\\n    num = int(digits)\\n    \\n    # Step 5: If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer\\n    INT_MIN = -2**31\\n    INT_MAX = 2**31 - 1\\n    if num * sign < INT_MIN:\\n        return INT_MIN\\n    elif num * sign > INT_MAX:\\n        return INT_MAX\\n    else:\\n        return num * sign\\n\\n\\n                \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2890372,
                "title": "my-brain-python-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI tried every single possibility and finally I was able to solve it in O(n) T.C.\\n \\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        \\n        d = {\\'1\\':1,\\'2\\':2,\\'3\\':3,\\'4\\':4,\\'5\\':5,\\'6\\':6,\"7\":7,\\'8\\':8,\\'9\\':9,\"0\":0}\\n        \\n        MAX_INT = 2147483647\\n        MIN_INT = -2147483648\\n\\n        ans = \"\"\\n        neg = False\\n        pos = False\\n        isNum = False\\n\\n        for i in s:\\n            if i in \"-\" and pos == False and isNum == False:\\n                neg = True\\n                isNum = True\\n            \\n            elif i in \"+\" and neg == False and isNum == False:\\n                pos = True\\n                isNum = True\\n            \\n            elif i in \" \" and isNum == False:\\n                continue\\n            \\n            elif i in \"1234567890\":\\n                ans =  i + ans\\n                isNum = True\\n\\n            elif i not in \"1234567890\" and isNum == True:\\n                break\\n            else:\\n                break\\n\\n            # print(ans)\\n        \\n        num = 0\\n        for i in range(len(ans)):\\n            num += d[ans[i]]*(10**i)\\n        if neg:\\n            num = -1*num\\n\\n        if num >= (2**31 - 1) and not neg: \\n            return MAX_INT\\n        if num <= (-2**31) and neg: \\n            return MIN_INT\\n        else:\\n            return num\\n\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/e180e4c5-c1e9-434c-ac30-e3fe34751b89_1670491807.8184993.png)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        \\n        d = {\\'1\\':1,\\'2\\':2,\\'3\\':3,\\'4\\':4,\\'5\\':5,\\'6\\':6,\"7\":7,\\'8\\':8,\\'9\\':9,\"0\":0}\\n        \\n        MAX_INT = 2147483647\\n        MIN_INT = -2147483648\\n\\n        ans = \"\"\\n        neg = False\\n        pos = False\\n        isNum = False\\n\\n        for i in s:\\n            if i in \"-\" and pos == False and isNum == False:\\n                neg = True\\n                isNum = True\\n            \\n            elif i in \"+\" and neg == False and isNum == False:\\n                pos = True\\n                isNum = True\\n            \\n            elif i in \" \" and isNum == False:\\n                continue\\n            \\n            elif i in \"1234567890\":\\n                ans =  i + ans\\n                isNum = True\\n\\n            elif i not in \"1234567890\" and isNum == True:\\n                break\\n            else:\\n                break\\n\\n            # print(ans)\\n        \\n        num = 0\\n        for i in range(len(ans)):\\n            num += d[ans[i]]*(10**i)\\n        if neg:\\n            num = -1*num\\n\\n        if num >= (2**31 - 1) and not neg: \\n            return MAX_INT\\n        if num <= (-2**31) and neg: \\n            return MIN_INT\\n        else:\\n            return num\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2829666,
                "title": "easy-to-understand-accepted-solution-with-comments",
                "content": "class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int n=s.size();\\n        //sign of the final_number\\n        int mark=1;\\n        \\n        int final_number=0;\\n\\t\\t//if the sign is set or not\\n        bool set=false;\\n        for(int i=0;i<n;i++){\\n            //if the current character is a space and can be ignored\\n            if(s[i]==\\' \\' && set==false){\\n                continue;\\n            }\\n\\t\\t\\t //if the current character is a sign and it is not already setted\\n            if((s[i]==\\'-\\' || s[i]==\\'+\\') && set==false){\\n                if(s[i]==\\'-\\'){\\n                    mark=-1;\\n                }\\n                set=true;\\n            }\\n           //proceed if current character is an integer\\n            else if(s[i]-\\'0\\'>=0 && s[i]-\\'0\\'<=9){\\n                set=true;\\n                int temp=s[i]-\\'0\\';\\n                //if the resultant number is greater than INT_MAX;\\n                if(final_number>INT_MAX/10 || final_number==INT_MAX/10 && temp>7){\\n                    return INT_MAX;\\n                }\\n                //if the resultant number is less than INT_MIN;\\n                else if(final_number<INT_MIN/10 || final_number==INT_MIN/10 && temp>8){\\n                    return INT_MIN;\\n                }\\n                //increase or decrease the final number according to the mark\\n                else{\\n                    final_number*=10;\\n                    final_number+=(mark*temp);\\n                }\\n            }\\n\\t\\t\\t//all the conditions are violated \\n            else{\\n                break;\\n            }\\n        }\\n\\t\\t//return the answer\\n        return final_number;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int n=s.size();\\n        //sign of the final_number\\n        int mark=1;\\n        \\n        int final_number=0;\\n\\t\\t//if the sign is set or not\\n        bool set=false;\\n        for(int i=0;i<n;i++){\\n            //if the current character is a space and can be ignored\\n            if(s[i]==\\' \\' && set==false){\\n                continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2767283,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, flag = 0;\\n        while(i < s.size()) {\\n            if(s[i] == \\' \\') i++;   \\n            else break;       \\n        }\\n        if(s[i] == \\'-\\') {\\n            flag = 1;\\n            i++;\\n        }\\n        else if(s[i] == \\'+\\') i++;\\n\\n        long long num = 0;\\n        for(int j=i; j<s.size(); j++) {\\n            if(s[j] >= \\'0\\' and s[j] <= \\'9\\') {\\n                num = num * 10 + (s[j] - \\'0\\');\\n                if(num >= INT_MAX) break;   \\n            }\\n            else break;\\n        }\\n        \\n        if(flag) num *= -1;\\n        if(num <= INT_MIN) return INT_MIN;\\n        else if(num >= INT_MAX) return INT_MAX;\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, flag = 0;\\n        while(i < s.size()) {\\n            if(s[i] == \\' \\') i++;   \\n            else break;       \\n        }\\n        if(s[i] == \\'-\\') {\\n            flag = 1;\\n            i++;\\n        }\\n        else if(s[i] == \\'+\\') i++;\\n\\n        long long num = 0;\\n        for(int j=i; j<s.size(); j++) {\\n            if(s[j] >= \\'0\\' and s[j] <= \\'9\\') {\\n                num = num * 10 + (s[j] - \\'0\\');\\n                if(num >= INT_MAX) break;   \\n            }\\n            else break;\\n        }\\n        \\n        if(flag) num *= -1;\\n        if(num <= INT_MIN) return INT_MIN;\\n        else if(num >= INT_MAX) return INT_MAX;\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2601370,
                "title": "c-fast-comprehensible",
                "content": "Link to the submission stats:\\nhttps://leetcode.com/submissions/detail/804479676/\\n\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long val=0;\\n        bool ok=0;\\n        int i=0,n=s.size();\\n        while(i<n && s[i]==\\' \\'){i++;}\\n        if(i==n){return 0;}\\n        if(s[i]==\\'-\\'){ok=1;i++;}\\n        else if(s[i]==\\'+\\'){ok=0;i++;}\\n        while(i<n && isdigit(s[i])){\\n            val=10*val + (s[i]-\\'0\\');i++;\\n            if(val>1e10){break;}\\n        }\\n        if(ok){val=-val;}\\n        if(val>=INT_MAX){val=INT_MAX;}\\n        if(val<=INT_MIN){val=INT_MIN;}\\n        return (int)val;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long val=0;\\n        bool ok=0;\\n        int i=0,n=s.size();\\n        while(i<n && s[i]==\\' \\'){i++;}\\n        if(i==n){return 0;}\\n        if(s[i]==\\'-\\'){ok=1;i++;}\\n        else if(s[i]==\\'+\\'){ok=0;i++;}\\n        while(i<n && isdigit(s[i])){\\n            val=10*val + (s[i]-\\'0\\');i++;\\n            if(val>1e10){break;}\\n        }\\n        if(ok){val=-val;}\\n        if(val>=INT_MAX){val=INT_MAX;}\\n        if(val<=INT_MIN){val=INT_MIN;}\\n        return (int)val;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2578218,
                "title": "c-100-fast-solution-easy-solution",
                "content": "**If you like, please Upvote.**\\n\\n![image](https://assets.leetcode.com/users/images/880274c7-6937-4b02-904e-4bfdc03e908d_1663222274.8184702.png)\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "**If you like, please Upvote.**\\n\\n![image](https://assets.leetcode.com/users/images/880274c7-6937-4b02-904e-4bfdc03e908d_1663222274.8184702.png)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2568291,
                "title": "1-linear-easy-to-understand-best-javascript-solution",
                "content": "var myAtoi = function(s) {\\n   return Math.max(Math.min(parseInt(s)||0,2147483647),-2147483648)\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "var myAtoi = function(s) {\\n   return Math.max(Math.min(parseInt(s)||0,2147483647),-2147483648)\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2421357,
                "title": "python-c-simple-solution-beginner-level-solution-faster-than-100-0mb-memory-usage-less",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n________________________________________________________________________________________________________________________\\n________________________________________________________________________________________________________________________\\n\\n```\\nCODE\\n```\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n**Runtime:** 0 ms, faster than 100.00% of cpp online submissions for String to Integer (atoi).\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int sign = 1, base = 0, i = 0;\\n    while (str[i] == \\' \\') { i++; }\\n    if (str[i] == \\'-\\' || str[i] == \\'+\\') {\\n        sign = 1 - 2 * (str[i++] == \\'-\\'); \\n    }\\n    while (str[i] >= \\'0\\' && str[i] <= \\'9\\') {\\n        if (base >  INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - \\'0\\' > 7)) {\\n            if (sign == 1) return INT_MAX;\\n            else return INT_MIN;\\n        }\\n        base  = 10 * base + (str[i++] - \\'0\\');\\n    }\\n    return base * sign;\\n    }\\n};\\n```\\n**Runtime:**  0ms\\n**Memory Usage:**  6.9 MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\n\\u2705 **Python  Code** :\\n```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n\\n        if s == \"\":\\n            return 0   \\n        s = s.strip()\\n        flag = 1\\n        if s and s[0] == \\'-\\':\\n            flag = -1\\n            s = s[1:]\\n        elif s and s[0] == \\'+\\':\\n            flag = 1\\n            s = s[1:]\\n        num = 0\\n        for c in s:\\n            if c.isdigit():\\n                num = (num*10)+int(c)\\n            else:\\n                break\\n                \\n        res = (num*flag)     \\n        if res>=(2**31):\\n            return (2**31)-1\\n        elif res<-(2**31):\\n            return -(2**31)\\n        return res\\n```\\n**Runtime:**  52ms\\n**Memory Usage:**  13.8 MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [],
                "code": "```\\nCODE\\n```\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string str) {\\n        int sign = 1, base = 0, i = 0;\\n    while (str[i] == \\' \\') { i++; }\\n    if (str[i] == \\'-\\' || str[i] == \\'+\\') {\\n        sign = 1 - 2 * (str[i++] == \\'-\\'); \\n    }\\n    while (str[i] >= \\'0\\' && str[i] <= \\'9\\') {\\n        if (base >  INT_MAX / 10 || (base == INT_MAX / 10 && str[i] - \\'0\\' > 7)) {\\n            if (sign == 1) return INT_MAX;\\n            else return INT_MIN;\\n        }\\n        base  = 10 * base + (str[i++] - \\'0\\');\\n    }\\n    return base * sign;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def myAtoi(self, s):\\n\\n        if s == \"\":\\n            return 0   \\n        s = s.strip()\\n        flag = 1\\n        if s and s[0] == \\'-\\':\\n            flag = -1\\n            s = s[1:]\\n        elif s and s[0] == \\'+\\':\\n            flag = 1\\n            s = s[1:]\\n        num = 0\\n        for c in s:\\n            if c.isdigit():\\n                num = (num*10)+int(c)\\n            else:\\n                break\\n                \\n        res = (num*flag)     \\n        if res>=(2**31):\\n            return (2**31)-1\\n        elif res<-(2**31):\\n            return -(2**31)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2281535,
                "title": "easy-java-solution",
                "content": "```\\nclass  Solution {\\n    public int myAtoi(String s) {\\n        if(s==null) return 0;\\n\\n        s=s.trim();   // this is used to remove whitespace in front and back of the string\\n        \\n        if(s.length()==0) return 0;\\n        \\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0) == \\'-\\') sign = -1;\\n        \\n        int MAX = Integer.MAX_VALUE, MIN = Integer.MIN_VALUE;\\n\\t\\t\\n\\t\\t// initiate the starting pointer\\n        int i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n\\t\\t\\n        while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            ans = ans * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(sign == -1 && -1*ans < MIN) return MIN;\\n            if(sign == 1 && ans > MAX) return MAX;\\n            \\n            i++;\\n        }\\n        \\n        return (int)(sign*ans);  //(int) is used for narrowcasting\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass  Solution {\\n    public int myAtoi(String s) {\\n        if(s==null) return 0;\\n\\n        s=s.trim();   // this is used to remove whitespace in front and back of the string\\n        \\n        if(s.length()==0) return 0;\\n        \\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0) == \\'-\\') sign = -1;\\n        \\n        int MAX = Integer.MAX_VALUE, MIN = Integer.MIN_VALUE;\\n\\t\\t\\n\\t\\t// initiate the starting pointer\\n        int i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n\\t\\t\\n        while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            ans = ans * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(sign == -1 && -1*ans < MIN) return MIN;\\n            if(sign == 1 && ans > MAX) return MAX;\\n            \\n            i++;\\n        }\\n        \\n        return (int)(sign*ans);  //(int) is used for narrowcasting\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1743315,
                "title": "simple-easy-approach-with-proper-comments-easy-to-understand-c",
                "content": "Implementation\\n\\n\\n**Time Complexity = O(N)\\nSpace Complexity = O(1)**\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int itr = 0, n = s.size();\\n        \\n        // skip all leading spaces\\n        while(s[itr] == \\' \\') itr++;\\n        \\n        // check whether its negative or position number\\n        int sign = 1;\\n        if(itr < n && s[itr] == \\'+\\' || s[itr] == \\'-\\'){\\n            sign = (s[itr++] == \\'+\\') ? 1 : -1;            \\n        }\\n        \\n        // read the next char\\'s until and unless the non digit char occurs or end of the string reached\\n        // if non digit char occurs just ignore the rest of the string\\n        int num = 0;\\n        while(itr < n && s[itr] >= \\'0\\' && s[itr] <= \\'9\\'){\\n            \\n            // if(num > INT_MAX/10) is true, then you should return INT_MAX, but \\n            // if they are equal(num == INT_MAX/10), then check the unit place(s[itr] - \\'0\\' > 7), now why 7? bcz\\n            // INT_MAX means this value (2147483647), its having 7 on its unit place, so suppose (2147483647/10) is equal to x(any number) value, then we need to check the unit place, right, if its more than 7, it means that is big and our condition will become true, otherwise if its small then condition will become false\\n            if(num > INT_MAX/10 || (num == INT_MAX/10 && s[itr] - \\'0\\' > 7)){\\n                return (sign == 1) ? INT_MAX : INT_MIN;\\n            }\\n            \\n            // creating the number\\n            num = num * 10 + (s[itr++] - \\'0\\');\\n        }\\n        \\n        // if sign is -1 then negative number will return, if its 1 then positive number will return\\n        return sign * num;\\n    }\\n};\\n```\\nIf you find any issue in understanding the solution then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int itr = 0, n = s.size();\\n        \\n        // skip all leading spaces\\n        while(s[itr] == \\' \\') itr++;\\n        \\n        // check whether its negative or position number\\n        int sign = 1;\\n        if(itr < n && s[itr] == \\'+\\' || s[itr] == \\'-\\'){\\n            sign = (s[itr++] == \\'+\\') ? 1 : -1;            \\n        }\\n        \\n        // read the next char\\'s until and unless the non digit char occurs or end of the string reached\\n        // if non digit char occurs just ignore the rest of the string\\n        int num = 0;\\n        while(itr < n && s[itr] >= \\'0\\' && s[itr] <= \\'9\\'){\\n            \\n            // if(num > INT_MAX/10) is true, then you should return INT_MAX, but \\n            // if they are equal(num == INT_MAX/10), then check the unit place(s[itr] - \\'0\\' > 7), now why 7? bcz\\n            // INT_MAX means this value (2147483647), its having 7 on its unit place, so suppose (2147483647/10) is equal to x(any number) value, then we need to check the unit place, right, if its more than 7, it means that is big and our condition will become true, otherwise if its small then condition will become false\\n            if(num > INT_MAX/10 || (num == INT_MAX/10 && s[itr] - \\'0\\' > 7)){\\n                return (sign == 1) ? INT_MAX : INT_MIN;\\n            }\\n            \\n            // creating the number\\n            num = num * 10 + (s[itr++] - \\'0\\');\\n        }\\n        \\n        // if sign is -1 then negative number will return, if its 1 then positive number will return\\n        return sign * num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1575202,
                "title": "java-o-n-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    \\n    // O(n) Solution. Basically just follow the given algorithm\\n    public int myAtoi(String s) {\\n        \\n        // Trim string to remove whitespace on the edges\\n        char[] charArray = s.trim().toCharArray();\\n        int length = charArray.length;\\n        boolean isNegative = false;\\n        int i = 0;\\n        \\n        // Handle first non-whitespace character. Must be a number or +/- symbol\\n        // Return if empty string\\n        if(i >= length)\\n            return 0;\\n        else if(charArray[i] == \\'-\\') {\\n            isNegative = true;\\n            i++;\\n        }\\n        else if(charArray[i] == \\'+\\') {\\n            i++;\\n        } \\n        else if(!Character.isDigit(charArray[i])) { // Not a digit or +/-\\n            return 0;\\n        }   \\n        \\n        // Add Digits from left to right until the end of string or until a non-digit character is found\\n        // return zero if sum exceeds integer bounds\\n        Long sum = new Long(0);\\n        if(isNegative) {\\n            while(i < length && Character.isDigit(charArray[i])) {\\n                sum = (sum * 10L) - new Long(Character.getNumericValue(charArray[i]));\\n\\n                // Check if integer will overflow\\n                if(sum < Integer.MIN_VALUE)\\n                    return Integer.MIN_VALUE;\\n                \\n                i++;\\n            }\\n        } \\n        else {\\n            while(i < length && Character.isDigit(charArray[i])) {\\n                sum = (sum * 10L) + new Long(Character.getNumericValue(charArray[i]));\\n\\n                // Check if integer will overflow\\n                if(sum > Integer.MAX_VALUE)\\n                    return Integer.MAX_VALUE;\\n                \\n                i++;\\n            }\\n        }\\n\\n        return sum.intValue();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    // O(n) Solution. Basically just follow the given algorithm\\n    public int myAtoi(String s) {\\n        \\n        // Trim string to remove whitespace on the edges\\n        char[] charArray = s.trim().toCharArray();\\n        int length = charArray.length;\\n        boolean isNegative = false;\\n        int i = 0;\\n        \\n        // Handle first non-whitespace character. Must be a number or +/- symbol\\n        // Return if empty string\\n        if(i >= length)\\n            return 0;\\n        else if(charArray[i] == \\'-\\') {\\n            isNegative = true;\\n            i++;\\n        }\\n        else if(charArray[i] == \\'+\\') {\\n            i++;\\n        } \\n        else if(!Character.isDigit(charArray[i])) { // Not a digit or +/-\\n            return 0;\\n        }   \\n        \\n        // Add Digits from left to right until the end of string or until a non-digit character is found\\n        // return zero if sum exceeds integer bounds\\n        Long sum = new Long(0);\\n        if(isNegative) {\\n            while(i < length && Character.isDigit(charArray[i])) {\\n                sum = (sum * 10L) - new Long(Character.getNumericValue(charArray[i]));\\n\\n                // Check if integer will overflow\\n                if(sum < Integer.MIN_VALUE)\\n                    return Integer.MIN_VALUE;\\n                \\n                i++;\\n            }\\n        } \\n        else {\\n            while(i < length && Character.isDigit(charArray[i])) {\\n                sum = (sum * 10L) + new Long(Character.getNumericValue(charArray[i]));\\n\\n                // Check if integer will overflow\\n                if(sum > Integer.MAX_VALUE)\\n                    return Integer.MAX_VALUE;\\n                \\n                i++;\\n            }\\n        }\\n\\n        return sum.intValue();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1510268,
                "title": "c-very-simple-short-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i;\\n        bool isNegative = false;\\n        \\n        for(i=0; s[i] == \\' \\'; i++);\\n        \\n        if(s[i] == \\'-\\'){\\n            isNegative = true;\\n            i++;\\n        }\\n        else if(s[i] == \\'+\\')\\n            i++;\\n        \\n        int ans = 0;\\n        \\n        for(; i<s.length() && s[i]>=48 && s[i]<=57; i++){\\n            if((ans > INT_MAX / 10 || (ans == INT_MAX / 10 && s[i] - 48 > 7)))\\n                return isNegative ? INT_MIN : INT_MAX;\\n            ans = 10*ans + (s[i]-48);\\n        }\\n        return isNegative ? (-1*ans) : ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i;\\n        bool isNegative = false;\\n        \\n        for(i=0; s[i] == \\' \\'; i++);\\n        \\n        if(s[i] == \\'-\\'){\\n            isNegative = true;\\n            i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1349120,
                "title": "simple-short-fast-python-regex-with-explanation",
                "content": "You either use try catch, or mannually deal with many nasty edge cases.\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        try:\\n            \"\"\"\\n            ^      : the pattern is at the start of string\\n            [ \\\\+\\\\-]: pattern can start with \\' \\', \\'+\\', or \\'-\\'\\n            *      : above pattern can apear 0 - many times\\n            \\\\d     : followed by an integer\\n            +      : I mean, at least 1 integer, could be more\\n            \"\"\"            \\n            match = re.search(\\'^[ \\\\+\\\\-]*\\\\d+\\', s)\\n            # restrict the value to be between -2147483648 and 2147483647\\n            return min(max(-2147483648, int(match.group())), 2147483647)\\n        except:\\n            return 0\\n```\\nLet me know if you have any question.",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        try:\\n            \"\"\"\\n            ^      : the pattern is at the start of string\\n            [ \\\\+\\\\-]: pattern can start with \\' \\', \\'+\\', or \\'-\\'\\n            *      : above pattern can apear 0 - many times\\n            \\\\d     : followed by an integer\\n            +      : I mean, at least 1 integer, could be more\\n            \"\"\"            \\n            match = re.search(\\'^[ \\\\+\\\\-]*\\\\d+\\', s)\\n            # restrict the value to be between -2147483648 and 2147483647\\n            return min(max(-2147483648, int(match.group())), 2147483647)\\n        except:\\n            return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1329983,
                "title": "python-3-solution",
                "content": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        #32 bit signed integer,\\n        INT_MIN=-(2**31)\\n        INT_MAX=(2**31)-1\\n        \\n        # First, remove white space\\n        s=s.strip()\\n        \\n        #Second,\\n        first=None\\n        for character in s:\\n            if not first:\\n                if character.isdigit() or character in [\\'-\\',\\'+\\']: \\n                    first=character # Number or \\'-\\' or \\'+\\'\\n                else: # no valid first character(not digit,not sign)\\n                    break\\n            else: \\n                if character.isdigit():\\n                    first+=character\\n                else: # not digit\\n                    break\\n        \\n        if not first or first in [\\'-\\',\\'+\\']:\\n            first=0\\n        elif int(first)<INT_MIN:\\n            first=INT_MIN\\n        elif int(first)>INT_MAX:\\n            first=INT_MAX\\n            \\n        return int(first)\\n```\\n\\n[https://velog.io/@kgh732/Python-%EC%9C%BC%EB%A1%9C-%ED%91%B8%EB%8A%94-Leetcode8.-String-to-Integer-atoi](http://)",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        #32 bit signed integer,\\n        INT_MIN=-(2**31)\\n        INT_MAX=(2**31)-1\\n        \\n        # First, remove white space\\n        s=s.strip()\\n        \\n        #Second,\\n        first=None\\n        for character in s:\\n            if not first:\\n                if character.isdigit() or character in [\\'-\\',\\'+\\']: \\n                    first=character # Number or \\'-\\' or \\'+\\'\\n                else: # no valid first character(not digit,not sign)\\n                    break\\n            else: \\n                if character.isdigit():\\n                    first+=character\\n                else: # not digit\\n                    break\\n        \\n        if not first or first in [\\'-\\',\\'+\\']:\\n            first=0\\n        elif int(first)<INT_MIN:\\n            first=INT_MIN\\n        elif int(first)>INT_MAX:\\n            first=INT_MAX\\n            \\n        return int(first)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1312377,
                "title": "very-easy-python-explanation-runtime-24-ms-faster-than-98-50-of-python3",
                "content": "we only need to handle five cases:\\n\\n1. discards all leading whitespaces\\n2. no white space occurs in between number\\n3. sign of the number\\n4. out of range [-2^31 to( 2^31)-1]\\n5. invalid inputi i.e any character\\n```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.strip()      #to remove all space in starting of array.  #case 1\\n        number=0\\n        sign,flag=1,0    #flag to specify that only 1 sign occur.   #case 3\\n        f=True             #to specify that if space occurs in b/w then next number is not included.   #case 2\\n        for i in range(len(s)):\\n            if s[i]==\\'+\\' and flag==0 and i==0: \\n                flag=1\\n                continue\\n            if s[i] ==\\'-\\' and flag==0 and i==0:\\n                flag=1\\n                sign=-1\\n                continue\\n            if s[i]==\\' \\':\\n                f=False\\n                continue\\n            if 0<=ord(s[i])-ord(\\'0\\')<=9 and f:           #means numerical digit occured\\n                number=number*10+(ord(s[i])-ord(\\'0\\'))\\n            else:                                         #i.e there is some constrant voilated either space occcured or alphapet in encountred     #case 2 and case 5\\n                return max(-2**31, min(sign * number,2**31-1))   \\n        \\n        return max(-2**31, min(sign * number,2**31-1))  #to ensure number lies between [-2**31 to 2**31-1]        #case 4\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.strip()      #to remove all space in starting of array.  #case 1\\n        number=0\\n        sign,flag=1,0    #flag to specify that only 1 sign occur.   #case 3\\n        f=True             #to specify that if space occurs in b/w then next number is not included.   #case 2\\n        for i in range(len(s)):\\n            if s[i]==\\'+\\' and flag==0 and i==0: \\n                flag=1\\n                continue\\n            if s[i] ==\\'-\\' and flag==0 and i==0:\\n                flag=1\\n                sign=-1\\n                continue\\n            if s[i]==\\' \\':\\n                f=False\\n                continue\\n            if 0<=ord(s[i])-ord(\\'0\\')<=9 and f:           #means numerical digit occured\\n                number=number*10+(ord(s[i])-ord(\\'0\\'))\\n            else:                                         #i.e there is some constrant voilated either space occcured or alphapet in encountred     #case 2 and case 5\\n                return max(-2**31, min(sign * number,2**31-1))   \\n        \\n        return max(-2**31, min(sign * number,2**31-1))  #to ensure number lies between [-2**31 to 2**31-1]        #case 4\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1263466,
                "title": "simplest-c-solution-0ms-all-edge-cases-covered",
                "content": "**Please upvote this post to motivate me in my quest of documenting leetcode solutions.**\\n```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, ans = 0;\\n        int sign = 1; \\n        \\n        // jumping over whitespaces\\n        while(s[i] == \\' \\') i++;\\n        \\n        // checking for negative numbers\\n        if(s[i] == \\'-\\' || s[i] == \\'+\\')\\n        {\\n            sign = s[i] == \\'-\\' ? -1 : 1;\\n            i++;\\n        }\\n        \\n        // checking for valid input (only numbers)\\n        while(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            if(ans > INT_MAX/10 || (ans == INT_MAX/10 && s[i] > \\'7\\')) return sign == -1 ? INT_MIN : INT_MAX;\\n            ans = 10 * ans + (s[i] - \\'0\\');\\n            i++;\\n        }\\n        return sign * ans;        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int i = 0, ans = 0;\\n        int sign = 1; \\n        \\n        // jumping over whitespaces\\n        while(s[i] == \\' \\') i++;\\n        \\n        // checking for negative numbers\\n        if(s[i] == \\'-\\' || s[i] == \\'+\\')\\n        {\\n            sign = s[i] == \\'-\\' ? -1 : 1;\\n            i++;\\n        }\\n        \\n        // checking for valid input (only numbers)\\n        while(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            if(ans > INT_MAX/10 || (ans == INT_MAX/10 && s[i] > \\'7\\')) return sign == -1 ? INT_MIN : INT_MAX;\\n            ans = 10 * ans + (s[i] - \\'0\\');\\n            i++;\\n        }\\n        return sign * ans;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1246833,
                "title": "c-simple-to-understand-solution-integer-overflow-handled-without-using-long-datatype",
                "content": "**The handling of integer overflow in this solution is handled inspired the following leetcode problem:**\\n### [7. Reverse Integer](https://leetcode.com/problems/reverse-integer/)\\n\\nRest is normal simulation of the steps given in the problem statement\\n\\n```\\nclass Solution {\\npublic:\\n    bool isDigit(char c){\\n        return (c>=\\'0\\' && c<=\\'9\\');\\n    }\\n    \\n    int myAtoi(string s) {\\n        int i=0; int n=s.length();\\n        bool neg=false;\\n        // step1 => Read in and ignore any leading whitespace.\\n        while(s[i]==\\' \\'){\\n            i++;\\n        }\\n        // step2 => Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n        // Read this character in if it is either. This determines if the final result is negative or \\n        // positive respectively. Assume the result is positive if neither is present.\\n        if(s[i]==\\'-\\'){\\n            neg=true;\\n            i++;\\n        }\\n        else if(s[i]==\\'+\\'){\\n            i++;\\n        }\\n        // step3 => Read in next the characters until the next non-digit charcter or the end of the input is reached. \\n        // The rest of the string is ignored.\\n        int num=0;\\n        while(isDigit(s[i]) && i<n){\\n            if(!neg){\\n                if(num>INT_MAX/10 || (num==INT_MAX/10 && s[i]-\\'0\\'>=7)){\\n                    return INT_MAX;\\n                }\\n            }else{\\n                if(num>INT_MAX/10 || (num==INT_MAX/10 && s[i]-\\'0\\'>=8)){\\n                    return INT_MIN;\\n                }\\n            }\\n            num=num*10+(s[i]-\\'0\\');\\n            i++;\\n        }\\n        if(neg){\\n            num=-1*num;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isDigit(char c){\\n        return (c>=\\'0\\' && c<=\\'9\\');\\n    }\\n    \\n    int myAtoi(string s) {\\n        int i=0; int n=s.length();\\n        bool neg=false;\\n        // step1 => Read in and ignore any leading whitespace.\\n        while(s[i]==\\' \\'){\\n            i++;\\n        }\\n        // step2 => Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n        // Read this character in if it is either. This determines if the final result is negative or \\n        // positive respectively. Assume the result is positive if neither is present.\\n        if(s[i]==\\'-\\'){\\n            neg=true;\\n            i++;\\n        }\\n        else if(s[i]==\\'+\\'){\\n            i++;\\n        }\\n        // step3 => Read in next the characters until the next non-digit charcter or the end of the input is reached. \\n        // The rest of the string is ignored.\\n        int num=0;\\n        while(isDigit(s[i]) && i<n){\\n            if(!neg){\\n                if(num>INT_MAX/10 || (num==INT_MAX/10 && s[i]-\\'0\\'>=7)){\\n                    return INT_MAX;\\n                }\\n            }else{\\n                if(num>INT_MAX/10 || (num==INT_MAX/10 && s[i]-\\'0\\'>=8)){\\n                    return INT_MIN;\\n                }\\n            }\\n            num=num*10+(s[i]-\\'0\\');\\n            i++;\\n        }\\n        if(neg){\\n            num=-1*num;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1179472,
                "title": "java-easy-to-understand-solution-runtime-100-memory-90-o-n",
                "content": "```\\npublic int myAtoi(String s) {\\n        long result = 0;\\n        boolean isNegative = false;\\n        int i = 0;\\n        int len = s.length();\\n        \\n\\t\\t// remove the blank space\\n        while(i < len && s.charAt(i) == \\' \\') {\\n            i++;\\n        }\\n        \\n\\t\\t// check the first operator\\n        while((i < len) && (s.charAt(i) == \\'+\\'  || s.charAt(i) == \\'-\\')) {\\n            if(s.charAt(i) == \\'-\\') {\\n              isNegative = true; \\n            } \\n            i++;\\n            break;\\n        }\\n        \\n        int prev = 0;\\n        int base = 10;\\n\\t\\t\\n\\t\\t// add the digit else break loop + if overflow then return the high value\\n        while(i < s.length()) {\\n            if(Character.isDigit(s.charAt(i))) {\\n                int add = s.charAt(i) - \\'0\\';\\n                result = (result * base) + add;\\n                \\n                if (result > Integer.MAX_VALUE) {\\n    \\t\\t\\t\\treturn isNegative ? -Integer.MAX_VALUE-1 : Integer.MAX_VALUE;\\n    \\t\\t\\t}\\n            } else {\\n                break;\\n            }\\n            i++;\\n        }\\n\\t\\t\\n        return isNegative ? (int)-result : (int)result;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int myAtoi(String s) {\\n        long result = 0;\\n        boolean isNegative = false;\\n        int i = 0;\\n        int len = s.length();\\n        \\n\\t\\t// remove the blank space\\n        while(i < len && s.charAt(i) == \\' \\') {\\n            i++;\\n        }\\n        \\n\\t\\t// check the first operator\\n        while((i < len) && (s.charAt(i) == \\'+\\'  || s.charAt(i) == \\'-\\')) {\\n            if(s.charAt(i) == \\'-\\') {\\n              isNegative = true; \\n            } \\n            i++;\\n            break;\\n        }\\n        \\n        int prev = 0;\\n        int base = 10;\\n\\t\\t\\n\\t\\t// add the digit else break loop + if overflow then return the high value\\n        while(i < s.length()) {\\n            if(Character.isDigit(s.charAt(i))) {\\n                int add = s.charAt(i) - \\'0\\';\\n                result = (result * base) + add;\\n                \\n                if (result > Integer.MAX_VALUE) {\\n    \\t\\t\\t\\treturn isNegative ? -Integer.MAX_VALUE-1 : Integer.MAX_VALUE;\\n    \\t\\t\\t}\\n            } else {\\n                break;\\n            }\\n            i++;\\n        }\\n\\t\\t\\n        return isNegative ? (int)-result : (int)result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1094713,
                "title": "python-3",
                "content": "```\\ndef myAtoi(s):\\n\\ttmp = [x for x in s.split(\" \") if x]\\n\\tif not tmp:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\tc = tmp[0]\\n\\t\\tn = len(c)\\n\\t\\tif c[0].isalpha():\\n\\t\\t\\treturn 0\\n\\t\\telif c[0].isdigit():\\n\\t\\t\\tcur = \"\"\\n\\t\\t\\tidx = 0\\n\\t\\t\\twhile idx < n and c[idx].isdigit():\\n\\t\\t\\t\\tcur += c[idx]\\n\\t\\t\\t\\tidx += 1\\n\\t\\t\\treturn min(int(cur), 2 ** 31 - 1)\\n\\t\\telif c[0] == \".\":\\n\\t\\t\\treturn 0\\n\\t\\telse:\\n\\t\\t\\tindex = 1 if c[0] == \"+\" else -1\\n\\t\\t\\tif n == 1:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telif not c[1].isdigit():\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcur = \"\"\\n\\t\\t\\t\\tidx = 1\\n\\t\\t\\t\\twhile idx < n and c[idx].isdigit():\\n\\t\\t\\t\\t\\tcur += c[idx]\\n\\t\\t\\t\\t\\tidx += 1\\n\\t\\t\\t\\tif index == 1:\\n\\t\\t\\t\\t\\treturn min(int(cur), 2 ** 31 - 1)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\treturn max(index * int(cur), - 2 ** 31)\\n```",
                "solutionTags": [],
                "code": "```\\ndef myAtoi(s):\\n\\ttmp = [x for x in s.split(\" \") if x]\\n\\tif not tmp:\\n\\t\\treturn 0\\n\\telse:\\n\\t\\tc = tmp[0]\\n\\t\\tn = len(c)\\n\\t\\tif c[0].isalpha():\\n\\t\\t\\treturn 0\\n\\t\\telif c[0].isdigit():\\n\\t\\t\\tcur = \"\"\\n\\t\\t\\tidx = 0\\n\\t\\t\\twhile idx < n and c[idx].isdigit():\\n\\t\\t\\t\\tcur += c[idx]\\n\\t\\t\\t\\tidx += 1\\n\\t\\t\\treturn min(int(cur), 2 ** 31 - 1)\\n\\t\\telif c[0] == \".\":\\n\\t\\t\\treturn 0\\n\\t\\telse:\\n\\t\\t\\tindex = 1 if c[0] == \"+\" else -1\\n\\t\\t\\tif n == 1:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telif not c[1].isdigit():\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tcur = \"\"\\n\\t\\t\\t\\tidx = 1\\n\\t\\t\\t\\twhile idx < n and c[idx].isdigit():\\n\\t\\t\\t\\t\\tcur += c[idx]\\n\\t\\t\\t\\t\\tidx += 1\\n\\t\\t\\t\\tif index == 1:\\n\\t\\t\\t\\t\\treturn min(int(cur), 2 ** 31 - 1)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\treturn max(index * int(cur), - 2 ** 31)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1000608,
                "title": "c-0-ms-faster-than-100-00-of-c-submissions-7-2-mb-less-than-99-33-of-c-submissions",
                "content": "Hi!\\n\\nPlease, do not hesitate to ask any questions you may have about this solution.\\n\\nAlso, if you like this solution, please do not forget to upvote it. Thanks!\\n\\nHope it helps!\\nMiguel\\n\\n```\\nC++: 0 ms, faster than 100.00% of C++ submissions. 7.2 MB, less than 99.33% of C++ submissions.\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        // \\'0\\' == 48\\n        // \\'9\\' == 57\\n        long result = 0;\\n        \\n        bool negative = false;\\n        char *ch = s.data();\\n        while (*ch != 0) {\\n            if (*ch == \\' \\') {\\n                ch++;\\n                continue;\\n            } else if (*ch == \\'+\\') {\\n                ch++;\\n                break;\\n            } else if (*ch == \\'-\\') {\\n                negative = true;\\n                ch++;\\n                break;\\n            } else if (*ch < 48 || *ch > 57) {\\n                return 0;\\n            } else if (*ch >= 48 && *ch <= 57) {\\n                result = *ch - 48;\\n                ch++;\\n                break;\\n            } else {\\n                ch++;\\n            }\\n        }\\n                \\n        while (*ch != 0) {\\n            if (*ch >= 48 && *ch <= 57) {\\n                if (result >= LONG_MAX / 10L) {\\n                    result = INT_MAX + 1L;\\n                    break;\\n                }\\n                result = result * 10 + (*ch++ - 48);\\n            } else {\\n                break;\\n            }\\n        }\\n        \\n        if (negative) {\\n            if (-result < INT_MIN) {\\n                return INT_MIN;\\n            }\\n            \\n            return (int) -result;\\n        }\\n        \\n        if (result > INT_MAX) {\\n            return INT_MAX;\\n        }\\n        \\n        return (int) result;\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/d5abf421-b722-40a6-b64c-ef30b601dd5b_1609709126.9201844.png)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nC++: 0 ms, faster than 100.00% of C++ submissions. 7.2 MB, less than 99.33% of C++ submissions.\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        // \\'0\\' == 48\\n        // \\'9\\' == 57\\n        long result = 0;\\n        \\n        bool negative = false;\\n        char *ch = s.data();\\n        while (*ch != 0) {\\n            if (*ch == \\' \\') {\\n                ch++;\\n                continue;\\n            } else if (*ch == \\'+\\') {\\n                ch++;\\n                break;\\n            } else if (*ch == \\'-\\') {\\n                negative = true;\\n                ch++;\\n                break;\\n            } else if (*ch < 48 || *ch > 57) {\\n                return 0;\\n            } else if (*ch >= 48 && *ch <= 57) {\\n                result = *ch - 48;\\n                ch++;\\n                break;\\n            } else {\\n                ch++;\\n            }\\n        }\\n                \\n        while (*ch != 0) {\\n            if (*ch >= 48 && *ch <= 57) {\\n                if (result >= LONG_MAX / 10L) {\\n                    result = INT_MAX + 1L;\\n                    break;\\n                }\\n                result = result * 10 + (*ch++ - 48);\\n            } else {\\n                break;\\n            }\\n        }\\n        \\n        if (negative) {\\n            if (-result < INT_MIN) {\\n                return INT_MIN;\\n            }\\n            \\n            return (int) -result;\\n        }\\n        \\n        if (result > INT_MAX) {\\n            return INT_MAX;\\n        }\\n        \\n        return (int) result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 906061,
                "title": "fasterthan93-easytounderstand",
                "content": "```\\npublic int MyAtoi(string s)\\n{\\n    s = s.TrimStart();\\n    var input = s.TrimStart(\\'-\\', \\'+\\');\\n            \\n    // Both negative and positive signs.\\n    if (s.Length - input.Length > 1) return 0;\\n            \\n    var hasNegativeSign = s.StartsWith(\\'-\\');\\n            \\n    var digits = input.TakeWhile(char.IsDigit).ToArray();\\n    if (digits.Length == 0) return 0;\\n\\n    var parsed = int.TryParse(new string(digits), out var result);\\n    if (parsed) return result * (hasNegativeSign ? -1 : 1);;\\n            \\n    return hasNegativeSign ? int.MinValue : int.MaxValue;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int MyAtoi(string s)\\n{\\n    s = s.TrimStart();\\n    var input = s.TrimStart(\\'-\\', \\'+\\');\\n            \\n    // Both negative and positive signs.\\n    if (s.Length - input.Length > 1) return 0;\\n            \\n    var hasNegativeSign = s.StartsWith(\\'-\\');\\n            \\n    var digits = input.TakeWhile(char.IsDigit).ToArray();\\n    if (digits.Length == 0) return 0;\\n\\n    var parsed = int.TryParse(new string(digits), out var result);\\n    if (parsed) return result * (hasNegativeSign ? -1 : 1);;\\n            \\n    return hasNegativeSign ? int.MinValue : int.MaxValue;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 647916,
                "title": "python-string-parsing-with-regex",
                "content": "With a naiive solution in Python, the hardest part is parsing the input.  There are so many edge cases to consider.  I don\\'t normally reach for regular expressions, but this seems like a case where regular expressions can actually make your life easier.  Once you parse the input with the regex, then the algorithm is fairly straightforward.  \\n\\nUnlike another popular regex-based solution, this code doesn\\'t just use int() to convert text to an integer.  Instead, it manually parses the sign character and each digit to calculate the correct integer.\\n\\n(I was lazy in one area, ensuring that the number falls within the range of a 32-bit signed integer.  Ideally, the function should check the digits before they are summed to make sure they don\\'t cause integer overflow, rather than checked afterwards.  I used a shortcut at the end because Python.  I would clarify this in an inteview.)\\n\\n```\\ndef myAtoi(self, str: str) -> int:\\n\\n    integer = re.compile(r\"\"\"\\n        (\\\\s*)               # Skip whitespace characters\\n        ([+-]?)             # One optional sign character\\n        (\\\\d+)               # One or more digit chars\\n    \"\"\", re.VERBOSE)\\n\\n    # Match the input string and return zero if no match\\n    match = integer.match(str)\\n    if not match:\\n        return 0\\n\\n    # Capture the sign and digit characters\\n    sign = match.group(2)\\n    digits = match.group(3)\\n\\n    # Sum the digits\\n    result = 0\\n    for ch in digits:\\n        result = result * 10 + int(ch)\\n\\n    # Make result negative if sign is negative\\n    if sign == \"-\":\\n        result *= -1\\n\\n    # Restrict result to 32-bit range\\n    return max(-2 ** 31, min(result, 2 ** 31 - 1))\\n```",
                "solutionTags": [],
                "code": "```\\ndef myAtoi(self, str: str) -> int:\\n\\n    integer = re.compile(r\"\"\"\\n        (\\\\s*)               # Skip whitespace characters\\n        ([+-]?)             # One optional sign character\\n        (\\\\d+)               # One or more digit chars\\n    \"\"\", re.VERBOSE)\\n\\n    # Match the input string and return zero if no match\\n    match = integer.match(str)\\n    if not match:\\n        return 0\\n\\n    # Capture the sign and digit characters\\n    sign = match.group(2)\\n    digits = match.group(3)\\n\\n    # Sum the digits\\n    result = 0\\n    for ch in digits:\\n        result = result * 10 + int(ch)\\n\\n    # Make result negative if sign is negative\\n    if sign == \"-\":\\n        result *= -1\\n\\n    # Restrict result to 32-bit range\\n    return max(-2 ** 31, min(result, 2 ** 31 - 1))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 618388,
                "title": "simple-rust-solution-with-a-single-loop-0ms",
                "content": "```rust\\npub fn atoi(str: String) -> i32 {\\n    use std::i32;\\n\\n    let mut s: i32 = 0;\\n    let mut negated = false;\\n    let mut started = false;\\n\\n    for c in str.chars() {\\n        match c {\\n            \\' \\' if !started => continue,\\n            \\'+\\' if !started => started = true,\\n            \\'-\\' if !started & !negated => {\\n                started = true;\\n                negated = true;\\n                s = -s\\n            }\\n            \\'0\\'..=\\'9\\' => {\\n                started = true;\\n\\n                s = match s.checked_mul(10).and_then(|s| s.checked_add(c as i32 - \\'0\\' as i32)) {\\n                    Some(v) => v,\\n                    None => return if negated { i32::MIN } else { i32::MAX },\\n                };\\n            }\\n            _ => break,\\n        }\\n    }\\n\\n    if negated {\\n        -s\\n    } else {\\n        s\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\npub fn atoi(str: String) -> i32 {\\n    use std::i32;\\n\\n    let mut s: i32 = 0;\\n    let mut negated = false;\\n    let mut started = false;\\n\\n    for c in str.chars() {\\n        match c {\\n            \\' \\' if !started => continue,\\n            \\'+\\' if !started => started = true,\\n            \\'-\\' if !started & !negated => {\\n                started = true;\\n                negated = true;\\n                s = -s\\n            }\\n            \\'0\\'..=\\'9\\' => {\\n                started = true;\\n\\n                s = match s.checked_mul(10).and_then(|s| s.checked_add(c as i32 - \\'0\\' as i32)) {\\n                    Some(v) => v,\\n                    None => return if negated { i32::MIN } else { i32::MAX },\\n                };\\n            }\\n            _ => break,\\n        }\\n    }\\n\\n    if negated {\\n        -s\\n    } else {\\n        s\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 574382,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int len = s.size();\\n        int i = 0;\\n        long num = 0;\\n        bool neg = false;\\n        \\n        //skip whitespaces\\n        while(i < len && s[i] == \\' \\' )\\n        {\\n            i++;\\n        }\\n        \\n        //find out if positive or negative number \\n        if(i < len && s[i] == \\'-\\')\\n        {\\n            neg = true;\\n            i++;\\n        } else if(i < len && s[i] == \\'+\\')\\n        {\\n            i++;\\n        }\\n        \\n        //conversion to num\\n        while(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            num = num*10 + s[i] - \\'0\\';\\n            i++;\\n            \\n            if(num > INT_MAX)\\n                break;\\n            \\n        }\\n        \\n        //check if num > INT_MAX\\n        if(num > INT_MAX)\\n        {\\n            if(neg)\\n                return INT_MIN;\\n            else\\n                return INT_MAX;\\n        }\\n        \\n        if(neg)\\n            return (num  * -1);\\n        else return num;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int len = s.size();\\n        int i = 0;\\n        long num = 0;\\n        bool neg = false;\\n        \\n        //skip whitespaces\\n        while(i < len && s[i] == \\' \\' )\\n        {\\n            i++;\\n        }\\n        \\n        //find out if positive or negative number \\n        if(i < len && s[i] == \\'-\\')\\n        {\\n            neg = true;\\n            i++;\\n        } else if(i < len && s[i] == \\'+\\')\\n        {\\n            i++;\\n        }\\n        \\n        //conversion to num\\n        while(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            num = num*10 + s[i] - \\'0\\';\\n            i++;\\n            \\n            if(num > INT_MAX)\\n                break;\\n            \\n        }\\n        \\n        //check if num > INT_MAX\\n        if(num > INT_MAX)\\n        {\\n            if(neg)\\n                return INT_MIN;\\n            else\\n                return INT_MAX;\\n        }\\n        \\n        if(neg)\\n            return (num  * -1);\\n        else return num;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 548064,
                "title": "java-simple-short-solution",
                "content": "```\\npublic int myAtoi(String str) {\\n\\tlong result =0;\\n\\tBoolean isNegative = null, hasNumberStarted = false;\\n\\tfor(char ch: str.toCharArray()) {\\n\\t\\tif(ch>=\\'0\\' && ch <=\\'9\\') {\\n\\t\\t\\thasNumberStarted = true;\\n\\t\\t\\tresult = result * 10 + ch - \\'0\\';\\n\\t\\t\\tif(result > Integer.MAX_VALUE) \\n\\t\\t\\t\\treturn isNegative !=null && isNegative?Integer.MIN_VALUE:Integer.MAX_VALUE;\\n\\t\\t} else if(!hasNumberStarted) {\\n\\t\\t\\tif((ch == \\'-\\' || ch == \\'+\\') && isNegative == null) {\\n\\t\\t\\t\\thasNumberStarted = true;\\n\\t\\t\\t\\tisNegative = ch == \\'-\\'?true:false;\\n\\t\\t\\t} else if(ch != \\' \\') {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t} else break;\\n\\t}\\n\\treturn (int)(isNegative !=null && isNegative?-result:result);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int myAtoi(String str) {\\n\\tlong result =0;\\n\\tBoolean isNegative = null, hasNumberStarted = false;\\n\\tfor(char ch: str.toCharArray()) {\\n\\t\\tif(ch>=\\'0\\' && ch <=\\'9\\') {\\n\\t\\t\\thasNumberStarted = true;\\n\\t\\t\\tresult = result * 10 + ch - \\'0\\';\\n\\t\\t\\tif(result > Integer.MAX_VALUE) \\n\\t\\t\\t\\treturn isNegative !=null && isNegative?Integer.MIN_VALUE:Integer.MAX_VALUE;\\n\\t\\t} else if(!hasNumberStarted) {\\n\\t\\t\\tif((ch == \\'-\\' || ch == \\'+\\') && isNegative == null) {\\n\\t\\t\\t\\thasNumberStarted = true;\\n\\t\\t\\t\\tisNegative = ch == \\'-\\'?true:false;\\n\\t\\t\\t} else if(ch != \\' \\') {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t} else break;\\n\\t}\\n\\treturn (int)(isNegative !=null && isNegative?-result:result);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 533851,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution(object):\\n    def myAtoi(self, str):\\n        \"\"\"\\n        :type str: str\\n        :rtype: int\\n        \"\"\"\\n        res = \\'\\'\\n\\n        for i in str:\\n            if res != \\'\\' and i in \\' +-\\':\\n                break\\n            if i in \\'1234567890+-\\':\\n                res = res + i\\n            elif i != \\' \\':\\n                break\\n\\n        if res in \\'+-\\': return 0\\n        else: return min(max(int(res),-2**31),2**31-1)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def myAtoi(self, str):\\n        \"\"\"\\n        :type str: str\\n        :rtype: int\\n        \"\"\"\\n        res = \\'\\'\\n\\n        for i in str:\\n            if res != \\'\\' and i in \\' +-\\':\\n                break\\n            if i in \\'1234567890+-\\':\\n                res = res + i\\n            elif i != \\' \\':\\n                break\\n\\n        if res in \\'+-\\': return 0\\n        else: return min(max(int(res),-2**31),2**31-1)\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1568183,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1566523,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1564982,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1576227,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1565513,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1566692,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1566831,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1565825,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1774493,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1567378,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1568183,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1566523,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1564982,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1576227,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1565513,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1566692,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1566831,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1565825,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1774493,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1567378,
                "content": [
                    {
                        "username": "lazur",
                        "content": "I mean. Like seriously.\\nSubmit...\\n: yeah need to take care of this case\\nSubmit...\\n: K got to handle this as well\\nSubmit...\\n: ...Are you kidding me?"
                    },
                    {
                        "username": "bumholio",
                        "content": "I got it on the first try. It\\'s a simple exercise of following instructions which are very simple and clearly spelled out. I have no idea why people are complaining about double signs, words inside the number etc., perhaps the description has been improved lately, it clearly says what to do in such cases."
                    },
                    {
                        "username": "Hardik_Pandey",
                        "content": "I see why the acceptance rate is so low.\\nIf not for these conditions I would have done it in like 5-10 minutes"
                    },
                    {
                        "username": "zenfred",
                        "content": "Same. Took 9 attempts to get an AC, while my overall acceptance rate is 70%"
                    },
                    {
                        "username": "gsan2049",
                        "content": "Literally me"
                    },
                    {
                        "username": "chandrashekar",
                        "content": "Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\\nExcepted answer for test case \"   -1123u3761867\" is -1123. Who in this sane world would expect such an answer. If the string contains any value other than a digit, then the entire string is supposed to be invalid. Any mindful implementation of parser written in any programming language doesn't return the above answer. Every compiler would throw an exception. Who ever came  up with the requirements. Please find a better job. This is not for you."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Maybe you should check out how the real atoi() function works"
                    },
                    {
                        "username": "katie_fed",
                        "content": "\"Who ever wrote the problem had some major problems with his wife and is trying to take out his frustration on people who are sincerely trying to prepare for interview.\" - haha this comment made my day, 100% agree"
                    },
                    {
                        "username": "bk235234",
                        "content": "c library atoi() function does that"
                    },
                    {
                        "username": "aegitarturbotelka69",
                        "content": "imagine lmao"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "top kek"
                    },
                    {
                        "username": "aeschinder",
                        "content": "Input  \"00000-42a1234\"\\nMy output -42\\nExpected output 0\\n\\nThe requirements don\\'t cover this scenario \"Ignore leading zeroes until you get a number but if you get a character next that isn\\'t a number then return zero.\"  This is a frustrating puzzle trying to guess how to interpret the requirements."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@TheCanadian1739](/TheCanadian1739) both cases that you show are the exact same scenario. You read a number until you find a non digit and you return the number that you have read until that point. In the first case, the number is 00000, then you find a non digit character, so you exit, returning 0. In the second case, the number is 4193, then you find a non digit character, so you return 4193. "
                    },
                    {
                        "username": "TheCanadian1739",
                        "content": "[@MrLambda42](/MrLambda42) For \"00000-42a1234\", the answer is 0 as after reading in 42 we reach a char and exit the loop. This means if you reach a not-digit character, you disregard what you read in. For \"4193 with words\", the answer is 4193. You read in 4193, then you reach a non-digit character but for some reason use what you read in. These seem to be conflicting to me."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@sale3054](/sale3054) Why should it be 42? 0s are digits, so the number is 00000, which translates to 0. The rest is ignored."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@lctor870303](/lctor870303) because you only care about the first number, ignoring spaces. In the first case, the first number is -0012, which translates to -12, in the second, the first number is 00000 which translates to 0."
                    },
                    {
                        "username": "rharoon315",
                        "content": "[@lctor870303](/lctor870303) From my understanding, the first one has the sign in front and then you consider until the first non-digit character \\'a\\' to get \\'0012\\', but in the second one it is assumed positive as the first character is neither + or -, and then you look until the non-digit character which is \\'-\\' and ignore the rest, hence it gives 0 "
                    },
                    {
                        "username": "JHIH-LEI",
                        "content": "[@lctor870303](/lctor870303) When you start counting number it start apply rule: face non-digit character then skip rest char"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "All that you need for this \"puzzle\" is this algorithm:\\n1. Skip whitespaces\\n2. Check sign and advance when we see \\'-\\' or \\'+\\'\\n3. Create a tight loop to skip leading zeros\\n4. Calculate the integer answer until either the answer is outside the 4 byte integer boundaries or the current character is not a digit\\n\\nThat\\'s how I interpreted the requirements and the problem seemed straightforward to me. I know it\\'s two years too late, but what exactly is/was blocking you from understanding this specific requirement list?"
                    },
                    {
                        "username": "minkowskiq",
                        "content": "Thinking of the problem as a state machine and drawing that out on paper really helps. All the edge cases pop out and make the problem easy to understand.\n\n    ┌─────────────────┬───────────────────────┐\n    │                 │                       │\n    │   space         │          0-9          │\n    │    ┌─┐         *│          ┌─┐          │\n    │ * ┌▼─┴┐ +/-   ┌─┴─┐ 0-9   ┌▼─┴┐ *     ┌─▼─┐\n    └───┤ 0 ├───────► 1 ├───────► 2 ├───────► 3 │\n        └─┬─┘       └───┘       └─▲─┘       └───┘\n          │0-9                    │\n          └───────────────────────┘"
                    },
                    {
                        "username": "lctor870303",
                        "content": "why \"  -0012a42\" expected output = -12 but \"00000-42a1234\" expected  output = 0 ?"
                    },
                    {
                        "username": "sale3054",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Except, that we are supposed to strip leading zeroes and white space. \\n\\nThis question is about trying to decipher poorly written requirements, rather than actually test any understanding of code. \\n\\nPoor question. "
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@sale3054](/sale3054) \n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\n\nReads:\n```\n'0', '0', '0', '0', '0', '-' \n 0    0    0    0    0   ^^^  \n```\n'-' is a non-digit character.\n\nThe answer must be 0."
                    },
                    {
                        "username": "sale3054",
                        "content": "\"00000-42a1234\"\\nThis test case is dumb, and violates the stated requirements. \\n\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nExpected: 0\\nOutput: -42\\n\\nThis SHOULD be -42, instead it\\'s 0...because...reasons?"
                    },
                    {
                        "username": "abhay147",
                        "content": "class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        s=s.lstrip(\" \")\\n        if s is None or len(s)==0:\\n            return 0\\n        INT_MAX=2**31-1\\n        INT_MIN=-(2**31)\\n        possign = len(s)>1 and s[0]==\"+\"\\n        negsigne = len(s)>1 and s[0]==\"-\"\\n        i = 0\\n        res = 0\\n        if s[0]==\"+\" or s[0]==\"-\":\\n            i += 1\\n        while i < len(s):\\n            if \\'0\\'<=s[i]<=\\'9\\':\\n                res = res*10 + (ord(s[i]) - ord(\\'0\\'))\\n            else:\\n                break\\n            i += 1\\n        #print(res)\\n        if possign:\\n            res*=1\\n        if negsigne:\\n            res*=-1\\n        if res>INT_MAX:\\n            return INT_MAX\\n        elif res<INT_MIN:\\n            return INT_MIN\\n        else:\\n            return res\\nThis covers the scenario."
                    },
                    {
                        "username": "siddhant_arya",
                        "content": "Can anyone please tell me that why the output of the below test case should be 0, because according to me the output should be 987\\n\"words and 987\"\\nSee the below image:\\n\\n![image](https://assets.leetcode.com/users/images/ff95ae26-1500-4c53-bb7d-be6cd33cf3bb_1642103096.036762.png)\\n"
                    },
                    {
                        "username": "doplthrowaway",
                        "content": "The only trailing non-digit, non-sign character you ignore is \\' \\' per the description."
                    },
                    {
                        "username": "the-satyajeet",
                        "content": "if any letter found then return 0, that\\'s the condition bro."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "It makes this method totally useless for me. I would like this method to return 987 e.g. parse a number that is found anywhere in the string, not only at the beginning. Otherwise why do we need to parse a string which may content words. "
                    },
                    {
                        "username": "Nune_Shashank",
                        "content": "[@jdarby](/jdarby) thank you for your explanation."
                    },
                    {
                        "username": "kamran4malik2",
                        "content": "I am getting correct answer on VS community and code::blocks but they are saying it is not correct."
                    },
                    {
                        "username": "BassinMacaron",
                        "content": "Yes I got the same bug !!"
                    },
                    {
                        "username": "jdarby",
                        "content": "Simplest explanation is probably from this sentence: \"Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.\"\\n\\nANY time a letter is encountered, it triggers the end of valid input (i.e. don\\'t ignore leading letters). The only valid starts of a string are a space, \\'+\\', \\'-\\', or a digit."
                    },
                    {
                        "username": "Dhamu_JCPPJS",
                        "content": "Yes I am also confused why it is expecting 0 even though the correct ans is 987. I guess test cases need to be corrected\\n"
                    },
                    {
                        "username": "mejoopsta",
                        "content": "From the description \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" I assume that you read digits until you get to a non-digit. Since the string begins with a letter, the whole string is therefore ignored and because your output int is empty, you have to return a 0."
                    },
                    {
                        "username": "rajnishpsinha",
                        "content": "I faced the same thing. Expected answer should be 987 , but test case shows, it should be 0. "
                    },
                    {
                        "username": "whoaniii",
                        "content": "Same here..."
                    },
                    {
                        "username": "legionxvx",
                        "content": "Same issue here, according to the description this should be 987"
                    },
                    {
                        "username": "nairsuchi",
                        "content": "same issue here, did u figure it out?"
                    },
                    {
                        "username": "CoderKorra",
                        "content": "Too many frustrating edge cases\\nToo irrelevant and useless\\nabsolutely senseless question \\nit will add absolutely no value at all to your skills\\nyou could utilise the time in doing 2-3 real questions instead\\nthere\\'s a reason this question is so down voted, it sucks, skip it."
                    },
                    {
                        "username": "Sh_Singh",
                        "content": "Ok, Will do. Thanks for saving my time."
                    },
                    {
                        "username": "mikessthreat",
                        "content": "While the question is contrived, I think it\\'s a great exercise in how to manage a state machine."
                    },
                    {
                        "username": "cotabas",
                        "content": "I wish I would\\'ve seen your comment before I started this stupid problem, what a waste of time"
                    },
                    {
                        "username": "barbroklintworth895",
                        "content": "I really really agree with you! fuck this shit question"
                    },
                    {
                        "username": "mrn_cp",
                        "content": "So many edge cases (feel like stupid).....should have avoid this....."
                    },
                    {
                        "username": "karimo94",
                        "content": "I don\\'t understand the expected return of this test case. I even tried it on the C atoi() function and it returned the correct ouput I had. My solution matches the C atoi() functionality and returns the same value. Anyone else have this issue?\\n\\nInput: \"-91283472332\"\\nOutput: -1089159116\\nExpected: -2147483648"
                    },
                    {
                        "username": "FelixLin99",
                        "content": "Same issue but I resolved. This is because of the overflow. You should use int64 to store the number. This is my code:\\n\\nclass Solution {\\nprivate:\\n    bool isOverflow(char op, int64_t num){\\n        if (op == \\'+\\'){\\n            return num > INT32_MAX;\\n        } else {\\n            return num -1 > INT32_MAX;\\n        }\\n    }\\n\\n    int clamp(char op){\\n        if (op == \\'+\\'){\\n            return INT_MAX;\\n        }\\n        return INT_MIN;\\n    }\\n\\npublic:\\n    int myAtoi(string s) {\\n        int64_t num = 0;\\n\\n        // remove heading whitespace\\n        s.erase(0, s.find_first_not_of(\" \"));\\n\\n        // symbol + or -\\n        int startIdx = 0;\\n        char op;\\n        if(isdigit(s[0])){\\n            op = \\'+\\';\\n        }\\n        if (s[0] == \\'+\\' || s[0] == \\'-\\') {\\n            startIdx = 1;\\n            op = s[0];\\n        }\\n\\n\\n        // read untilthe end or any non-numeric char \\n        for(int i = startIdx; i < s.length(); i++){\\n            if (!isdigit(s[i])){\\n                break;\\n            }\\n            num = num*10 + s[i] - \\'0\\';\\n\\n            if(isOverflow(op, num)){\\n                return clamp(op);\\n            }\\n        }\\n        \\n        if (op == \\'-\\') num = num * (-1);\\n        return num;\\n    }\\n};"
                    },
                    {
                        "username": "shib0041u",
                        "content": "[@OlegTar](/OlegTar) how ?\\n"
                    },
                    {
                        "username": "OlegTar",
                        "content": "according to task, you must return number from -2147483648 to -2147483647."
                    },
                    {
                        "username": "panhejia",
                        "content": "I was quite surprises to see this test case:\\n\\n> Input:\\t\"   -115579378e25\"\\n\\n> Output:\\t-2147483648\\n\\n> Expected:\\t-115579378\\n\\nsince -115579378*10^25 definitely caused underflow. I tried `atoi(\"1e3\")` which gives me 1. Based on those test cases, I believe 'e' is invalid. \\n\\nIt would be very helpful to let the user know 'e' is invalid since in problem \"Valid Number\", 'e' is totally acceptable."
                    },
                    {
                        "username": "rayidahmed111",
                        "content": "e is not a character there in the string but its a exponent "
                    },
                    {
                        "username": "ieschall",
                        "content": "\\u0414\\u0435\\u043B\\u043E \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E \\u043A\\u043E\\u0433\\u0434\\u0430-\\u0442\\u043E \\u0434\\u0430\\u0432\\u043D\\u043E \\u043F\\u0438\\u0441\\u0430\\u043B \\u0440\\u0435\\u0430\\u043B\\u0438\\u0437\\u0430\\u0446\\u0438\\u044E atoi \\u0438 itoa \\u043D\\u0430 \\u0421 (\\u0431\\u0435\\u0437 \\u043F\\u043B\\u044E\\u0441\\u043E\\u0432). \\u0417\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0431\\u044B\\u043B\\u0430 \\u043E\\u0442 Ecole 42. \\u041F\\u043E\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043A\\u0430 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u0431\\u044B\\u043B\\u0438 \\u0430\\u0434\\u0435\\u043A\\u0432\\u0430\\u0442\\u043D\\u044B\\u043C\\u0438, \\u0432 \\u0441\\u0432\\u044F\\u0437\\u0438 \\u0441 \\u0447\\u0435\\u043C \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u0434\\u0430\\u043B \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u0435. \\u0412\\u043E\\u043F\\u0440\\u043E\\u0441 - \\u0447\\u0442\\u043E \\u0437\\u0430 \\u0434\\u043E\\u043B\\u0431\\u0430\\u0451\\u0431 \\u043D\\u0430\\u043F\\u0438\\u0441\\u0430\\u043B \\u044D\\u0442\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443 \\u0438 \\u0442\\u0435\\u0441\\u0442\\u044B \\u043A \\u043D\\u0435\\u0439? \\u0422\\u0430\\u043C \\u0447\\u0443\\u0432\\u0430\\u043A \\u0438\\u043B\\u0438 \\u0447\\u0443\\u0432\\u0430\\u043A\\u0438 \\u0435\\u0431\\u0430\\u043D\\u0443\\u043B\\u0438\\u0441\\u044C \\u043A \\u0445\\u0443\\u044F\\u043C \\u0438\\u043B\\u0438 \\u0447\\u0442\\u043E? \\u042F \\u043F\\u043E\\u043D\\u044F\\u0442\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0433\\u0443. \\u041E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u0442\\u0435\\u0441\\u0442 \\u043A\\u0435\\u0439\\u0441\\u043E\\u0432 \"-000000000000000000000000000001\". \\u0421\\u043E\\u0432\\u0441\\u0435\\u043C \\u0451\\u0431\\u0443 \\u0434\\u0430\\u043B\\u0438? \\u041C\\u0443\\u0434\\u0438\\u043B\\u044B \\u0431\\u043B\\u044F\\u0442\\u044C."
                    },
                    {
                        "username": "gorelov",
                        "content": "test case: \"+-2\"\\nI return -2.\\nExpected answer is 0.\\n????\\nLets check description of a problem:\\nThe function first discards as many **whitespace characters** as necessary **until the first non-whitespace character** is found. Then, starting from this character, takes an optional initial plus or minus sign **followed by** as many **numerical** digits as possible, and interprets them as a numerical value.\\n\\nThe string can contain additional characters **after** those that form the integral number, which are ignored and have no effect on the behavior of this function."
                    },
                    {
                        "username": "inveniereL",
                        "content": "\"a 1\" => 0 \n(\"a 1\"==\"- 1\") => 0\nbecause first ( unwanted grup[a, alone -] ) have come;\n\n                            wanted :\n*numbers\n*spaces\n*minus than nums\n*plus than nums\n\n                           unwanted:\n*characters\n*alone minus and plus\n*second time seen spaces\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "You just answered your own question with the description. There\\'s an optional plus OR minus. Since there\\'s a plus and then a minus, the minus is considered not numeric and therefore means the rest of the string should be ignored. Return 0."
                    },
                    {
                        "username": "christopherblodgett",
                        "content": "haha same issues it wants `s=\"-+12\"` to be 12, but then wants \"+-12\" to be 0. WTH?!"
                    }
                ]
            },
            {
                "id": 1567793,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1568818,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1568250,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1719314,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1566373,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1566696,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1701900,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1568742,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1570108,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1568810,
                "content": [
                    {
                        "username": "projjal1611",
                        "content": "atoi(\"2147483648\") should return -2147483648 not 2147483647\\n\\nBut the expected output is being shown as 2147483647"
                    },
                    {
                        "username": "TrustKibou",
                        "content": "Why would 2147483648 return a negative when it falls on int\\'s max pos range? It should return 21474483647"
                    },
                    {
                        "username": "MrLambda42",
                        "content": "Just one of the MANY weird edge cases that prevents people from just using the builtin atoi function and is a weird way of LeetCode to ask its questions.\\n\\nIf you see that kind of weird specification, remember to calculate the answer as an 8 byte integer and perform boundary checks before returning either the answer as a 4 byte integer or the max/min 4 byte values in the requirements."
                    },
                    {
                        "username": "matthewcsimpson",
                        "content": "Came here to ask about this. \\n"
                    },
                    {
                        "username": "Gladius1218",
                        "content": "My code can not pass this test case:\\nInput:\\t\"+-2\"\\nOutput:\\t-2\\nExpected:\\t0\\n\\ncan anybody explain to me why +-2 should be zero?"
                    },
                    {
                        "username": "JOON1234",
                        "content": "Because, for that input, you encounter sign character \"+\" indicating number is positive. Then, from next character, you keep reading as long as it is a valid \"digit\". However, you encounter another sign character \"-\". So, you should stop and since no digits are read in, you return default value 0! "
                    },
                    {
                        "username": "ClarkSIms",
                        "content": "This has to be the worst online problem I have ever seen. The only reason it is hard, is because of all the edge cases in the unit test. Is is just unfair, wrong, and sadistic, to have edge cases like \\'   +0 123\\'.  There is nothing in the statement of the problem, that one is supposed to end parsing at the \\' \\'. It says to ignore the white space. I wish there was a way to downvote this problem."
                    },
                    {
                        "username": "devansh_0",
                        "content": "This might help someone if you are facing issues with the given testcases or just trying to solve this question. In this problem there are multiple edge cases (which tbh are annoying) and the only way to learn about all the edges cases is by trial and error only because the requirements are not specified, or to be more accurate 'they are not specified properly'. I submitted code countless times and only then was able to figure out all the edgecases.\n\nLet's talk about a few i remember (there might be more than this, you can refer to [my solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest) for that) :-\n\n1) Only ignore leading whitespaces when there is no '+' or '-' sign received.\n2) Only ignore the other characters when they are present after the number in the given String. If present before a number, then return 0.\n3) If received 2 signs continuosly or without a number in between then return 0.\n4) If characters other than whitespace are present before the number in the String then return 0.\n5) If number is strictly greater than ((2 to the power 31) - 1), return ((2 to the power 31) - 1).\n6) If number is strictly less than (-2 to the power 31), return (-2 to the power 31).\n7) If input is something like (sign) number (sign) or (sign) number (sign) number, return the first sign and number. Here sign is either '+' or '-'.\n8) If the number present is decimal, i.e, there is point in it, just return the Integer Value.\n\nFor the solution covering all the edge cases, refer to: [My solution](https://leetcode.com/problems/string-to-integer-atoi/solutions/2915211/simple-0ms-cpp-solution-beats-100/?orderBy=newest_to_oldest)\n\nIf I forgot to mention any edge case or if you have any Doubt, you can ask me in the Reply Section.\n\nDon't forget to upVote if it helped you :)"
                    },
                    {
                        "username": "DannyMerkx",
                        "content": "I\\'ve been on leetcode for about 2 weeks now doing a problem or so a day. A recurring requirement in many problems seems to be that you work with 32 bit ints and handle overflow properly. Working in Python, I get no complaints if I simply create the required answer and only then check if its larger (or smaller) than (-)2^31 and cap it.\\n\\nI see many other Python programmers use this as well in their posted solutions. With the String to Int problem I finally started doing thing differently as I realise that using a 64 bit int and only then checking if it fits a 32 bit int is kind of besides the point. 2^31 is not some arbitrary limit, the question states your environment can only handle 32 bit ints so even if Python allows us to be lazy an interviewer would be right to mention that you didn\\'t read the question right and your code would cause errors. \\n\\nJust a tip to other Python programmers, I think it\\'s better to get used to properly checking for overflow even if it isn\\'t strictly required. It\\'s not that hard the method can be applied to any of these types of problems once you know it."
                    },
                    {
                        "username": "Leetcode_Solutions",
                        "content": "Kindly upvote if this helps you. Thank You\\n\\nEasy to understand, detailed solution with step by step explanation and code:\\n\\nhttps://www.code-recipe.com/post/string_to_integer\\n\\nLet me know in comments section if you have any doubts. I will be more than happy to answer."
                    },
                    {
                        "username": "shakeels",
                        "content": "I can see why so many hate this problem and that it has more dislikes than likes. I hate to disagree though - it is not a bad problem. Nor a difficult one. It is just plain outright irritating - like many real life problems. You write input field validators for every possible use-case and the the code passes QA and goes to production and (guess what?) the user enters a values that no sane or sober person would ever do.\\nThis has everything from a real job - unrealistic requirements from product owners, over the top expectations from the management and a fat-fingering user (possibly fat). If you are looking for a real job then better get used to solving such problems without getting frustrated (and taking it out on your family).\\nThere is a sado-masochistic side of me that likes this problem and the Deterministic Finite Automaton approach to solve such problems was a cherry on top."
                    },
                    {
                        "username": "raaj-s",
                        "content": "For the users who \"enters a values that no sane or sober person would ever do\" , why can't you just write \"invalid input\" and give them certain requirements to satisfy the invalid input? It's not that hard to prove invalidity through regular expressions. The question here wants us to make changes to the invalid input provided, should the input provided by the users be changed according to the wish of a particular software, I don't know."
                    },
                    {
                        "username": "jonahsaltzman",
                        "content": "All of the top problems have been interesting until this one. Any problem where you have to spend 10 minutes after having solved the problem addressing edge cases that have nothing to do with the concepts supposedly being addressed by the problem is busywork. If I was given this problem during an interview and they threw all those edge cases at me one after another, I\\'d tell them thanks but no thanks."
                    },
                    {
                        "username": "morkaa",
                        "content": "![image](https://assets.leetcode.com/users/images/3df3e78d-98ec-4d70-bf2a-c199de146d74_1596983697.7624686.png)\\nIt marked my correct output as wrong. The reference expected value is rather wrong."
                    },
                    {
                        "username": "SpifficusMaximus",
                        "content": "I had the same problem.  You need to apply your sign to your result before clamping the range.  My clamp section was only checking against positive values."
                    },
                    {
                        "username": "rowdy0401",
                        "content": "The integer below 2^-31 should be clamped to 2^-31"
                    },
                    {
                        "username": "ChenyuPu",
                        "content": "I just don't understand why they expect 4500 for \"       +004500\" while expecting 0 for \" +  0 123\". I think the second testcase should be interpreted to 123 just fine."
                    }
                ]
            },
            {
                "id": 1568812,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1568816,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1567650,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1730448,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1576997,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1570391,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1570235,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1569757,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1569536,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1568147,
                "content": [
                    {
                        "username": "pako",
                        "content": "I noticed that many Python solutions use the int() function, but I thought the whole point was to avoid using the int() function.  What am I missing?"
                    },
                    {
                        "username": "yuk",
                        "content": "+-2 is a valid number in c/c++, as is any string with sequence of '-' and '+' that doesn't contain two consecutive of the same sign followed by digits."
                    },
                    {
                        "username": "AshwathSpark",
                        "content": "This question doesn\\'t have clear explanation for the provided test cases, \\nso this isn\\'t worth your time,\\nmoreover you don\\'t even learn anything new (new techniques or methods) from this question,\\nso please go ahead and solve some other question.\\n\\nThank you."
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 922 is failing?\\nInput\\ns =\\n\"words and 987\"\\n922 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a valid digit, a space or plus or minus sign, therefore the result is 0. "
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue"
                    },
                    {
                        "username": "kogoel",
                        "content": "When the input string is \"words and 987\" the answer should be 987 as it is valid number, While expected is shown as 0?\\nCan you suggest where this condition is assumed."
                    },
                    {
                        "username": "user5581kp",
                        "content": "I guess the leading character must be in [0,1,2,3,..9, +,-, \\' \\']"
                    },
                    {
                        "username": "whaleshark",
                        "content": "Step 3 in the instructions say: \"Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\"\\n\\nInput: \"00000-42a1234\"\\nOutput: -42\\nExpected: 0\\n\\nBased on instruction step 3, this should be -42 and not 0.\\n\\n"
                    },
                    {
                        "username": "fomachka93",
                        "content": "You read the characters 00000 and then you met non-digit \\'-\\'. That\\'s why the rest is ignored after \\'-\\' and the answer is 0."
                    },
                    {
                        "username": "StephenLalor",
                        "content": "Stop. It\\'s not worth wasting your time on. You could answer 2-4 real questions instead. It\\'s the most downvoted question ever for a reason. Skip it."
                    },
                    {
                        "username": "Ezequias",
                        "content": "The statement is not so clear.\\n\\nWhen we have \\'  +0 123\\' the expected output is 0 whe we have \\'123 some word\\' the expected value is 123.\\n\\nI actually doesn\\'t know how many rules are on those tests.\\n\\nCould someone tell me the basic rule on this problem?\\n\\nBest regards\\nEzequias"
                    },
                    {
                        "username": "srivastavaanshuman33",
                        "content": "my code runtime shows 0 ms i want to know what it means !\\ndo i need to improve the time complexity?"
                    },
                    {
                        "username": "mustafakhan62608",
                        "content": "its awesome!!\\n"
                    },
                    {
                        "username": "horus",
                        "content": "0-1 should return 0, but -1- should succeed?\\n\\nTest cases do not make snese."
                    }
                ]
            },
            {
                "id": 1569352,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1567794,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1567795,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1567797,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1565921,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1958052,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1956709,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1956707,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1939647,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1711811,
                "content": [
                    {
                        "username": "AlgoGuy",
                        "content": "Worst problem. But I solved it anyway."
                    },
                    {
                        "username": "JavaXu",
                        "content": "As we can see, `\"123,456\"` is a valid integer number in our normal life. I guess it should return the number **123456** rather than **123**.\\n\\nAnd so does the scientific notation. For example, the output of `\"9.2e+5\"` should be **920000** rather than **9**."
                    },
                    {
                        "username": "front2",
                        "content": "I think '-+-+-3' should be -3,maybe this is more better.Rather than 0"
                    },
                    {
                        "username": "MonsterHunter",
                        "content": "I tried atoi in c++ with 2147483648 and the output is -2147483648,\\nbut here the output is expected to be 2147483647. \\n\\nDoes anyone know why?\\n\\nThanks"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/string-to-integer-atoi/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Follow the Rules\n\n  \n**Approach 2:** Deterministic Finite Automaton (DFA)\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "samdecook",
                        "content": "Inconsistent. In the problem, it tells us to clamp numbers outside of [-2^31, 2^31-1]. The input for this test case is 2^31, which is outside the range. So I clamp it, and get marked wrong for it. I\\'m passing 1079/1084 testcases.\\n\\nInput: s = \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input number is positive and your output is negative. You are clamping it to the wrong limit. "
                    },
                    {
                        "username": "oguntosee",
                        "content": "Input is greater than 2^31-1. The problem asks you to lower the value to upper limit. (2^31-1)"
                    },
                    {
                        "username": "spookie886",
                        "content": "what a stupid and unneccesary question. i have never downvoted a problem this is the first question i wish i could downvote 10000 times. literal garbage"
                    },
                    {
                        "username": "spookie886",
                        "content": "F*CK THIS QUESTION. WASTED AN HOUR AND STILL NOT ABLE TO PASS THE TEST CASES. "
                    },
                    {
                        "username": "Maqcel",
                        "content": "Just don\\'t. this is why you will stop your progress on here"
                    },
                    {
                        "username": "blank_1729",
                        "content": "true"
                    },
                    {
                        "username": "Glavvredina",
                        "content": "s = \"00000-42a1234\"\\nOutput 0\\nExpected 0\\n\\ns = \"-0012a42\"\\nOutput 0\\nExpected -12\\n\\nHow can I understand this? What is the key difference???"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You cannot put a minus sign in the middle of a number. You cannot write 000-42 the same way that you cannot write 0004-2. If the number was -42 it would be written like \"-0000042\". The string \"00000-42\" is a 0 with some leading zeros plus extra characters at the end that should be ignored, so same result as \"0000ABC\""
                    }
                ]
            },
            {
                "id": 1574263,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1569924,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1569421,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1572001,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1568815,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1568814,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1568817,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1571005,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1568811,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1567798,
                "content": [
                    {
                        "username": "chris_chu_7",
                        "content": "They have led me to write a bunch of redundant code!!!!"
                    },
                    {
                        "username": "suchit_nandal",
                        "content": "Fuck this guys. System.exit(1);"
                    },
                    {
                        "username": "abdulhye",
                        "content": "annoying as \"F\" !"
                    },
                    {
                        "username": "sanmobapps",
                        "content": "Input: \"2147483648\"\\nOutput: -2147483648\\nExpected: 2147483647\\n\\\\*\\\\*\\\\*\\\\*\\\\*\\nStdout:\\nINT_MAX = 2147483647\\natoi(2147483648) = -2147483648 ====> atoi itself gives the output which is not as expected output\\n\\\\*\\\\*\\\\*\\\\*\\\\*"
                    },
                    {
                        "username": "abhijeet21",
                        "content": "I was trying this question using python. \\nAbove test case is wrong, even python int(\"  -0012a42\") gives error on this,(in our case this should return 0)\\nPLEASE CORRECT TEST CASES OR GIVE PROPER EXPLAINATION!"
                    },
                    {
                        "username": "shogunsea",
                        "content": "For input `\"2147483648\"` it's within Javascript number range, so expecting it to return `2147483647` makes no sense."
                    },
                    {
                        "username": "dong12",
                        "content": "why +-2 the expected value is 0 instead of -2"
                    },
                    {
                        "username": "mingyuan",
                        "content": "I don't even know what does \"+-2\" mean, and I supposed the result should be -2 but the expected value is \"0\", why is that?"
                    },
                    {
                        "username": "dins",
                        "content": "One of the test case is wrong:\\n![0_1506208606827_Screen Shot 2017-09-23 at 4.14.45 PM.png](/assets/uploads/files/1506208607175-screen-shot-2017-09-23-at-4.14.45-pm-resized.png)"
                    },
                    {
                        "username": "bengol",
                        "content": "should consider the base of 2, 8, and 16 , etc\\nlike \"0xff\" ---> 255, and \"0xx\"---> invalid , \"b101\" -> 5 \"b123\"-> 1 (2, 3 is invalid character here)"
                    }
                ]
            },
            {
                "id": 1567796,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1569959,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 2027879,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 2027065,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 2019242,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1987904,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1985841,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1972258,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1909087,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1896429,
                "content": [
                    {
                        "username": "wshaoxuan",
                        "content": "For instance, \"1234567890123456789012345678901234567890\". This is because some problem designs may not check the value of concurrent number to break the while loop search."
                    },
                    {
                        "username": "Jammooly",
                        "content": "+1 should return 1\\n\\nbut \\n\\n+-2 should not return -2 but 0!!!\\n\\nThis is dumb"
                    },
                    {
                        "username": "jaydvd99",
                        "content": "It\\'s like the worst question I\\'ve ever seen"
                    },
                    {
                        "username": "jlalbuquerque",
                        "content": "So many unnecessary test cases, this is getting annoying fr"
                    },
                    {
                        "username": "1mizou1",
                        "content": "I wasted my time on this $hit. I may quit leetcode  in one go. :< "
                    },
                    {
                        "username": "peterfarrell66",
                        "content": "This was a needlessly complicated and badly explained problem. What a waste of time."
                    },
                    {
                        "username": "RandGor",
                        "content": "Why \"words and 987\" should return 0 but not 987?\\nI was thinking hard to make good and lite parser with respect to multiple ints, but why don\\'t you just show this rule at least in description?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@RandGor](/RandGor) I understand what you mean, but this problem is more about having the ability to understand and following some specific requirements more than actually implementing a good parser. A lot of people complain that there are a lot of edge cases, but the truth is that if you follow the requirements as they are explained it\\'ll just work. For example, in the cases you show you could reason about what could be the best behaviour, and at your job you should do that, but here you just have to follow the rules, so you parse the first sign simbol and afterwards you expect a digit, if there is something else than a digit, you should return zero. In my case, I misunderstood what it meant by \"clamp\" initially, but overall I got it working in about 15 minutes. "
                    },
                    {
                        "username": "RandGor",
                        "content": "[@FXCastells](/FXCastells) Thanks! May be yes, but it is confusing if you take something like \"-+12\" or \"+-12\" or \"+12\". It\\'s kinda offensive misleading result you can \"case-pick\" in your solution... For me it is not clear if we should reinforce good solution of parsing numbers or create unpredictable solution based on this case logic. By the way, how are you? I mean, did you have any doubts when creating your own solution?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Rule number 3 says \"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\". In the example that you show, the first character is \"w\", which is a non-digit, so ignore the rest of the string and return what you have, which is 0 in this case."
                    },
                    {
                        "username": "faruk_shihab",
                        "content": "can someone explain this testcase to me? \\ninput: \"-91283472332\"\\nexpected: -2147483648\\n\\nbut isn\\'t it supposed to be -91283472332?"
                    },
                    {
                        "username": "sajidrec",
                        "content": "If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range.\n-91283472332 is lesser than -2^31 so you need to print -2^31 which is -2147483648\n[@faruk_shihab](/faruk_shihab) hope this make sense to you 😊"
                    },
                    {
                        "username": "shweta3101",
                        "content": "\"words and 987\" why this input ans is 0 instead of 987?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because \"w\" is not a space, a plus or minus sign or a digit, therefore you stop parsing and return 0. "
                    },
                    {
                        "username": "Blatogh",
                        "content": "Go fuck this goddamn shit, fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off fuck off "
                    }
                ]
            },
            {
                "id": 1868580,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1865725,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1791143,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1785023,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1771610,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1735601,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1732148,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1714688,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1714554,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1714188,
                "content": [
                    {
                        "username": "DevyDhanish",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-2147483647\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Return INT_MAX or INT_MIN depending on the sign (note that MIN is not the same as the MAX with a negative sign)."
                    },
                    {
                        "username": "inception_007",
                        "content": "I think the one who has set this problem he might  have used his 100% of his brain..  And now he has left with 0% brain"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Seems like a good exercise at reading, which many fail."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, and people complaining that the instructions are not clear have probably never seen real life requirements. "
                    },
                    {
                        "username": "anokrid",
                        "content": "Well, in this case criteria are strange as hell:\\n\"00000-42a1234\" - it\\'s bad and should return 0, but\\n\"  -0012a42\" - it\\'s ok and should return -12\\n\\n\"   -42\" - it\\'s ok and should return -42, but\\n\"  +  413\" - it\\'s bad and should return 0\\n\\n\"21474836++\" - it\\'s ok and should return 21474836, but\\n\" ++1\"  - it\\'s bad and should return 0\\n\\nSeriously?? How should I guess this kind of logic for the first attemption?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "\"00000-42a1234\" -> 1. No leading + or - therefore positive -> read all digits until next none digit \"-\" -> \"00000\" -> convert to int -> 0\\n\" -0012a42\" -> Leading - therefor negative -> read all digits until next none digit \"a\" -> \"-0012\" -> convert -> -12\\n\"+ 413\" -> Leading +, therefore positive -> read all digits until next none digit \" \" -> \"\" -> no digits read, therefore 0 (yes that\\'s in the spec)\\n\"21474836++\" -> No leading +/- therefore positive ->  read all digits until next none digit \"+\" -> \"21474836\" -> 21474836\\n\" ++1\" -> Leading + therefor positive -> read all digits until next none digit \"+\" -> \"\" -> no digits read, therefore 0\\n\\nThere is no guessing here."
                    },
                    {
                        "username": "sandagolcea",
                        "content": "Thanks for all the comments guys. as someone said: we're really here to learn /prep & not get frustrated by made up niche edge cases. Skipping this ftw."
                    },
                    {
                        "username": "aakash1608",
                        "content": "Total time waste problem, nothing conceptual except for how to convert string to integer, mixing numbers and words makes no conceptual sense other than you want someone to handle too many edge cases unnecessarily.\\nI have literally wasted my precious day on this problem and only ended up handling edge cases. \\nA big RED FLAG!!"
                    },
                    {
                        "username": "ashish7612",
                        "content": " `class Solution {\\n    public int myAtoi(String s) {\\n        String arr[] = s.split(\" \");\\n        int result = 0;\\n        int i =0;\\n        while(i<arr.length){\\n            try{\\n                result = Integer.parseInt(arr[i]);\\n                break;\\n            }catch(Exception e){\\n                i++;\\n            }\\n        }\\n        return result;\\n    }\\n}`\\n\\ncan someone explain why this is not working on testcase: s= \"words and 987\" but working fine in my IDE?"
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@ahmust9515](/ahmust9515) Don\\'t try to use a built in integer parser. The problem description doesn\\'t match how most parsers work. Write your own instead."
                    },
                    {
                        "username": "ahmust",
                        "content": "same issue with me"
                    },
                    {
                        "username": "TheOneHundredMan",
                        "content": "Genuinely stupid question, thank you for wasting my time. "
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        // string.replace(\" \", \"\")\\n        s = s.trim();\\n        if(s.isEmpty() )    return 0;\\n        System.out.println(s);\\n        int numeric =0;\\n        int start=0;\\n        int pcount = 0;\\n        int ncount= 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            int Ascii = (int) ch;\\n            if(numeric >= 1 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(start >=2 || ncount >=2 || pcount>=2 || Ascii == 46)\\n            {\\n                break;\\n            }\\n            if(Ascii !=45  && Ascii !=43 && Ascii!=46 && (Ascii <48 || Ascii >57))\\n            {\\n                break;\\n            }\\n            if(Ascii ==45 || Ascii ==43 )\\n            {\\n                start++;\\n                if(Ascii==45)\\n                {\\n                    ncount++;\\n                }\\n                else\\n                {\\n                    pcount++;\\n                }\\n            }\\n            if(Ascii >=48 && Ascii<=57)\\n            {\\n                numeric++;\\n                list.add(Ascii-48);\\n            }\\n        }\\n        long value=0;\\n        String str = \"\";\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            int index = list.get(i);\\n            if(index == 0)\\n            {\\n                list.remove(i);\\n                i--;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        if(list.size() > 10)\\n        {\\n            if(ncount ==1)   return Integer.MIN_VALUE;\\n            else return Integer.MAX_VALUE; \\n        }\\n        for(int i=0;i<list.size();i++)\\n        {\\n\\n            str = str + list.get(i);\\n            \\n        }\\n        \\n        if(str.isEmpty())   return 0;\\n        value = Long.valueOf(str);\\n        if(ncount == 1)\\n        {\\n        value = value *(-1);\\n        }\\n        if(Integer.MIN_VALUE > value && ncount ==1 )\\n        {\\n            return Integer.MIN_VALUE;\\n\\n        }\\n        else if(Integer.MAX_VALUE < value  )\\n        {\\n            return Integer.MAX_VALUE;\\n\\n        }\\n    return (int) value;        \\n    }\\n}\\n"
                    },
                    {
                        "username": "kfu0115",
                        "content": "I got a wrong answer for s =\\n\"words and 987\". My answer is 987 but the expected answer is 0. Can anyone explain why? isn\\'t this function supposed to isolate a substring of digits into an integer? \\nThank you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The character \"w\" is not a digit, a space, a minus sign, or a plus sign. Which are the only acceptable characters, therefore you exit the algorithm straight away, returning 0. "
                    }
                ]
            },
            {
                "id": 1576852,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1576832,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1576824,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1576646,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1575530,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1575081,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1574671,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1573635,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1573499,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1573376,
                "content": [
                    {
                        "username": "Pengwu550",
                        "content": "Anyone can explain this: \"clamp the integer so that it remains in the range\"?"
                    },
                    {
                        "username": "xingyulan",
                        "content": "It seems like it just transfer the worda in to computer language."
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/"
                    },
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/string-to-integer-atoi-leetcode-solutions/\\n"
                    },
                    {
                        "username": "geetcode",
                        "content": "The basic idea is to understand the question thoroughly, then cover all the edge cases. A detailed explanation is provided in the video.\\n\\nTime Complexity: O(n)\\xA0 // where n is the length of string\\n\\nSpace Complexity: O(1) // we don\\'t require any extra space.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/9E2eOz9oHsQ\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "trannguyen",
                        "content": "Now I knew why this problem had to be classified as \"**Medium**\" problem. \\nIt seemed to be simple at first, but you need to go through various testcases to satisfy the condition. \\n\\nHere are some useful testcases:\\n- **Invalid entry/ Entry that would return to 0**: \\n\".1\",   \"0.1\",   \"  -+12\",   \"00000-42a1234\", \"   -0 498\".\\n- **Valid entry**:  \"  -0012a42\" is valid, while \"00-12a42\" is not.  \"  0000000000012345678\" is also valid.\\n- **Check if the integer is out of the 32-bit signed integer range:** \"-2147483649\", \"  + 2147483648\"\\n\\nHowever, I consider this problem as a really good question to practice communication skill with your interviewers/ future collegues: You need to communicate a lot to fully understand what the valid entries are."
                    },
                    {
                        "username": "scratchy_beard",
                        "content": "\\'If the first sequence of non-whitespace characters in str is not a valid integral number\\'\\nThis is misleading because test case expects:\\n\\ninput \"  0000000000012345678\"\\noutput 12345678\\n\\nDo we define 00000000000 to be a valid Integer?\\nThere should be an example here"
                    },
                    {
                        "username": "jyh824658571",
                        "content": "\\'\\'\\'return max(min(int(*re.findall(\\'^[\\\\+\\\\-]?\\\\d+\\', str.lstrip())), 2**31 - 1), -2**31)"
                    },
                    {
                        "username": "sean-free",
                        "content": "Input\\n\"2147483648\"\\nOutput\\n2147483648\\nExpected\\n2147483647\\n\\nUnless I am mistaken, the description reads as follows:\\n\\nIf the input is greater than or equal to the signed int max, return max.\\nOR\\nIf the input is less than or equal to the signed int min, return min.\\n\\nWhy is the expected value in my test case INT_MAX - 1 if the input is INT_MAX?"
                    },
                    {
                        "username": "ProstoTyoma",
                        "content": "According to \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range\" I think it\\'s not fair to use long to store result."
                    }
                ]
            },
            {
                "id": 1573283,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1572971,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1572826,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1572634,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1572511,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1572469,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1571929,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1570992,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1570993,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1570994,
                "content": [
                    {
                        "username": "toast12",
                        "content": "![image](https://assets.leetcode.com/users/toast12/image_1577313395.png)\\n\\n ok, so I don\\'t understand why so much variation for the same code within like seconds? Wondering if I should even rely on the statistics I get here at leetcode?"
                    },
                    {
                        "username": "ChiragGardhariya",
                        "content": "if +1 should result 1 then why +-2 should result 0. It should be -2."
                    },
                    {
                        "username": "gmsyon",
                        "content": "my return value = \\'+-2\\'\\nanswer is \"+-2\".\\nbut fail"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "\"21474836++\", \"0-1\", \"3.14159\", \"+-2\"\\n\\nFuck it."
                    },
                    {
                        "username": "Skirkyn",
                        "content": "Just anying, not algorythmic at all that\\'s why it has >5K dislikes"
                    },
                    {
                        "username": "Dsignmind",
                        "content": "I am writing in python 3 and encountering a strange situation.\\nPlease can someone help me understand why the test case \"  0000000000012345678\" returns 12345678 but the test case \" +0123\" is supposed to return 0.\\nWhen you enter int(\" +0123\") into the python interpreter it returns 123.\\nSo what makes this invalid as a result?\\nAm I misunderstanding the problem definition?"
                    },
                    {
                        "username": "acky",
                        "content": "Input:\\n\" - 0012a42\"\\nExpected:\\n-12\\n\\nInput:\\n\"   - 321\"\\nExpected:\\n0\\n\\nAnother testcase is wrong.\\n\\n"
                    },
                    {
                        "username": "zun_yuan",
                        "content": " Why is \"2147483648\" even a valid input? and the expected output is 2147483647? how does this make sense?"
                    },
                    {
                        "username": "zhaocheng",
                        "content": "I have to ask...why this happen? or I miss something?\\nI believe answer should be 0.\\n\\n![0_1479370523800_2016-11-17 16:15:06\\u5c4f\\u5e55\\u622a\\u56fe.png](/uploads/files/1479370525552-2016-11-17-16-15-06\\u5c4f\\u5e55\\u622a\\u56fe.png)"
                    },
                    {
                        "username": "kingname",
                        "content": "I think the expected output is -2, but leetcode said it should be 0....."
                    }
                ]
            },
            {
                "id": 1570995,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1570997,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1570999,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1570998,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571000,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571002,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571003,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571004,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571007,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571008,
                "content": [
                    {
                        "username": "icyroderick8848@hotmail.com",
                        "content": "why \"1+111\" is expected to have result of 1 instead of 112?"
                    },
                    {
                        "username": "reboot329",
                        "content": "I can understand a \"user\" may type anything as inputs.\\n\\nBut it's such a shame that a programmer call atoi() with input  \"  -0012a42\"  and hope a return value of -12."
                    },
                    {
                        "username": "Ftk",
                        "content": "\"0 2116546521684456\"\\nI used this string as my input. Although my program was giving the wrong answer for the above string but it was still accepted in the submission process.\\n\\nFarah."
                    },
                    {
                        "username": "tjuli",
                        "content": "Why there is the test case like +-2? It is meaningless."
                    },
                    {
                        "username": "lianyl",
                        "content": "Completed my Golang code and found this upon submission:\\n\\nInput:\\n\"2147483648\"\\n\\nOutput:\\n2147483648\\n\\nExpected:\\n2147483647\\n\\nAlso, the test cases are somewhat ambiguous\\nFor example,\\n\"+-12\" -> 0\\nbecause presumably it's an invalid integer representation\\n\\n\"   -1231213abc\" -> -1231213\\nbut for some reason I need to support an invalid representation here \\n\\n[Edit] Removed snarky remark. Sorry about that, heat of the moment."
                    },
                    {
                        "username": "apepkuss",
                        "content": "Hi guys,\\n\\nWho can explain why the expected answer is 0 when the input is \"-+2\"? Many thanks!"
                    },
                    {
                        "username": "sqandr",
                        "content": "Example:\\n\\nInput: \"2147483648\"\\n\\nOutput: -2147483648\\n\\nExpected: 2147483647\\n\\n********\\nAnother example:\\n\\nInput: \"     +123a654\"\\n\\nOutput: 0\\n\\nExpected: 123"
                    },
                    {
                        "username": "buggiant",
                        "content": "It says \"**+-2**\" should get **0** while I can get 2;\\n\\nit says \"**2147483648**\" should get **2147483647** while I can get 0 for overflow.\\n\\nSERIOUSLLY?? \\n\\nIt even syas \"**-11919730356x**\" should get \"**-2147483648**\" while I also get 0 for overflow...\\n\\nSERIOUSLLY??\\n\\nIs it just me ore all these test cases don't make sense....."
                    },
                    {
                        "username": "areshand",
                        "content": "My code got the following test case\\n\\nInput: 2147483648\\noutput: 0\\nexpect: 2147483647\\n\\nI think this is an error."
                    },
                    {
                        "username": "xiaohui7",
                        "content": "Other characters such as '\\\\t' and '\\\\n' are also regarded as whitespaces according to [1][1] and [2][2]. Many examples here, including mine, only consider ' ' as whitespace and are accepted. Why? Test cases do not contain these characters? If yes, should they?\\n\\n\\n  [1]: http://www.cplusplus.com/reference/cctype/isspace/\\n  [2]: http://www.gnu.org/software/libc/manual/html_node/Classification-of-Characters.html"
                    }
                ]
            },
            {
                "id": 1571006,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1571009,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1571010,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1569619,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1568813,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1576557,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1576321,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1576297,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1576228,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1575732,
                "content": [
                    {
                        "username": "leowang79",
                        "content": "this problem should add this kind of scientific notation case: \"-1000e2\" or \"1000e-2\", and cannot treat these cases as bad case.\\n\\nthis is one test case from this problem, it is not right.\\nInput:\\t\"   -115579378e25\"\\nExpected:\\t-115579378"
                    },
                    {
                        "username": "monaziyi",
                        "content": "I think it's important and difficult. Anyone have some ideas?"
                    },
                    {
                        "username": "ulyx",
                        "content": "The below numbers are not form Java, but it is used in the test cases, so my solution always failed when return Integer.MAX_VALUE and Integer.MIN_VALUE\\nINT_MAX (2147483647) or INT_MIN (-2147483648) \\n\\nCan you use another value for Java language?"
                    },
                    {
                        "username": "Jacob97",
                        "content": "I\\'m getting so many compile errors on here, but works on my machine?"
                    },
                    {
                        "username": "yaojiayi",
                        "content": "If you didnt clear your input rule, the function should regard any unrecognized input as exception.\\n\\nI don't think \"+1-200\" is a number and should throw an something like NumberFormatException, MORE IMPOSSIBLE it would be regard as 1."
                    },
                    {
                        "username": "leeh8911",
                        "content": "I dont understand that 39-th test case \"words and 987\" return 0."
                    },
                    {
                        "username": "shawnxiangyu",
                        "content": "I have a question about one test case: \\nThe input is :\\n\" b11228552307\"\\n\\nMy output is :\\n2147483647\\n\\nBut the expected output is :\\n0\\n\\nwhy? I thought when the numbe is over 2 ** 31 -1, it is capped as 2 ** 31-1. Something wrong with this test case?"
                    },
                    {
                        "username": "sachinlodhi",
                        "content": "Can Anyone tell that why Input : \"words and 987\" must  produce 0 as ouput and not 987? I\\'m stuck. Plaese help me"
                    },
                    {
                        "username": "soumit915",
                        "content": "Many of the things explained in the solution is not even told in the question. \\n\\n`However, if whitespace occurs anywhere else in the input, then we stop and discard the rest of the input.`\\n\\nThe above was mentioned in the solution, but nowhere in the question.\\nAdmins should take care of the question and should be more clarifying"
                    },
                    {
                        "username": "WizTheProgrammer",
                        "content": "title says it all nerds"
                    }
                ]
            },
            {
                "id": 1575295,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 1572902,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 1571001,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 1571011,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2076844,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2076802,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2076264,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2073599,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2072002,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2070770,
                "content": [
                    {
                        "username": "coder303",
                        "content": "The question\\'s test cases are wrong at multiple level. the requirements and constraints are not define clearly and doign a mind reading. some inexperienced engineer designed it. clear the expectation is to use another data type to store results and that loses the whole point of atoi."
                    },
                    {
                        "username": "newbornking999",
                        "content": "why \"words and 987\" expect output is 0?"
                    },
                    {
                        "username": "Yuan__Yuan",
                        "content": "I'm so confused. Why the character 'a' is valid?"
                    },
                    {
                        "username": "ymyfish",
                        "content": "Integer.parseInt(\"  -0012a42\") throws an NumberFormatException."
                    },
                    {
                        "username": "user4083M",
                        "content": "why \"  -0 451\" output -451 and \"   +0 123\" output 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Are you sure there is a space after the 0 in \" -0 451\" ?"
                    },
                    {
                        "username": "user4083M",
                        "content": "\"   +0 123\" how ?\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) i get it, thak you"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user4083M](/user4083M) because you need to follow the given algorithm. What is requested is:\\n1. ignore spaces\\n2. parse the sign symbol (or assume +)\\n3. parse the digits\\n4. the moment you find a non digit character or end of string, exit (and clamp the number)\\n\\nIn this case, as I said, you do: ignore space, parse the symbol +, parse the digit 0, find a non digit character (a space), and exit. \\nBut you have done something different and it doesn\\'t comply with the requirements. "
                    },
                    {
                        "username": "user4083M",
                        "content": "[@FXCastells](/FXCastells) why output is not 123\\n"
                    },
                    {
                        "username": "user4083M",
                        "content": "stuck at 1079\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function (s) {\\n  const space = s.replace(/\\\\s+/g, \\'\\')\\n  const res = parseInt(space)\\n  if (res > 2 ** 31 - 1) {\\n    return 2147483647\\n  } else if (res < -(2 ** 31)) {\\n    return -2147483648\\n  }\\n  else {\\n    return !isNaN(res) ? res : 0\\n  }\\n};"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Ignore the space, parse the +, parse the 0, find a non digit character and exit. Result 0."
                    },
                    {
                        "username": "gursimran1906",
                        "content": "I believe output to this input \"words and 987\", should 987.\\n\\nBut for my solution below it says wrong answer expected output is 0\\n\\nCan someone please explain?\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        int_str = \"\"\\n        i = 0\\n        while i < len(s):\\n            if (s[i] == \\' \\' or s[i] == \\'-\\' or s[i] == \\'+\\' or s[i].isalpha() or s[i] == \\'.\\') and int_str != \"\":\\n                break\\n            if s[i] == \\' \\' or s[i].isalpha() or s[i] == \\'.\\':\\n                pass\\n            elif s[i] == \\'-\\' or s[i] == \\'+\\':\\n                int_str += s[i]\\n            elif s[i].isdigit():\\n                int_str += s[i]\\n            i += 1\\n\\n        if int(int_str) > (2 ** 31 -1):\\n            return int(2 ** 31 -1)\\n        elif int(int_str) < (-2**31):\\n            return int(-2**31)\\n        else:\\n            return int(int_str)\\n        \\n               \\n  "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\nW is not a digit. Ignore the rest, return 0."
                    },
                    {
                        "username": "mike_mcg",
                        "content": "Explanation is very poor.\\n\"Read in next the characters until the next non-digit character...\"\\nNo."
                    },
                    {
                        "username": "michael452",
                        "content": "this problem is an ultimate waste of time\\n"
                    },
                    {
                        "username": "TUHLOPUZ",
                        "content": "Input\\ns =\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwtf"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This is from rule number 5. \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    }
                ]
            },
            {
                "id": 2069418,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2068459,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2067099,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2066565,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2064636,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2063727,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2062236,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2058550,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2056462,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2051095,
                "content": [
                    {
                        "username": "salah99",
                        "content": "Seriously, what the hell is this test case: \"+-12\" ?! "
                    },
                    {
                        "username": "FXCastells",
                        "content": "I guess it\\'s to make sure you don\\'t do weird stuff with the signs. For some reason a lot of people see this as some sort of a special case... Just follow the rules, first parse the sign character (only one) and then exit the moment you find a non digit character. "
                    },
                    {
                        "username": "Kenzie7",
                        "content": " `for i in range(len(s)):\\n            if s[i] != \\' \\':\\n                s = s[i:]\\n                break\\n        \\n        for j in range(len(s)):\\n            if s[j] == \\'+\\' or s[j] == \\'-\\':\\n                continue\\n            if s[j].isnumeric() == False:\\n                s = s[:j+1]\\n                break\\n        \\n        if int(s) < -2**31:\\n            return -2**31\\n        elif int(s) > 2**31-1:\\n            return 2**31-1\\n        \\n        return int(s)`\\n\\nim wondering why there is an error of int(s) saying that invalid literal for int() with base 10: \\'w\\'"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "You will spend eternity and not solve the problem because of the completely wrong task! Skip it )"
                    },
                    {
                        "username": "medvezhonok_umka",
                        "content": "[@FXCastells](/FXCastells) Ok buddy. It seems you\\'re right )"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Or just implement the algorithm exactly as it\\'s given and you are done in 15 minutes :)"
                    },
                    {
                        "username": "DEADDOOMER",
                        "content": "What should be the solution for this testcase :\\n\\n\"words and 987\"\\n\\naccording to my understanding, it should be 987,\\n\\nbut the expected output is 0."
                    },
                    {
                        "username": "FXCastells",
                        "content": "If you follow the given algorithm, when you find a non digit character you exit and return the number you have parsed so far. So, here, you fin \\'w\\' and return 0"
                    },
                    {
                        "username": "ankit_sharmao_o",
                        "content": "I was asked this in interview today and i had skipped it. "
                    },
                    {
                        "username": "user9432j",
                        "content": "The examples are total rubbish given the test cases. "
                    },
                    {
                        "username": "faiz9431966404",
                        "content": "nice"
                    },
                    {
                        "username": "fkie4",
                        "content": "\"words and 987\" is expected to be 0 !!?? WTF!!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\\'w\\' is not a digit, so exit and return 0."
                    },
                    {
                        "username": "yashwantraokoyeri",
                        "content": "I solved it in two attempts but I used the re module which I think I shouldnot have used.\\uD83D\\uDE05"
                    },
                    {
                        "username": "nodirbekrejabaliyev",
                        "content": "\"-91283472332\"\\n\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648\\n\\nwrong test case"
                    },
                    {
                        "username": "hail-cali",
                        "content": "there is integer max bound  [-2^31 ~ 2^31 -1]"
                    }
                ]
            },
            {
                "id": 2046912,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2038209,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2037436,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2036692,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2034396,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2033964,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2028744,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2023779,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2023431,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2019925,
                "content": [
                    {
                        "username": "priyanshu_2384",
                        "content": " NEED TO READ THE QUESTION CAREFULLY , THEY HAVE ALREADY GIVEN AN ALGORITHM"
                    },
                    {
                        "username": "shreyanshverma15",
                        "content": "worst coding question i ever solved"
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "if an interviewer ask this type of question he surely going to hell ."
                    },
                    {
                        "username": "jsuuronen9",
                        "content": "Painful amount of edge cases. This is not something I enjoy or really learn from. Just pure frustration."
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "i don\\'t understand why 0000-42a1234 is 0 and  -000012a42 is -12 \\nit should be either both in negative or 0. "
                    },
                    {
                        "username": "Pr1yankar",
                        "content": "[@janis__](/janis__)  Thanks "
                    },
                    {
                        "username": "janis__",
                        "content": "The function myAtoi converts strings to integers by skipping leading spaces and determining the sign. For \"0000-42a1234\", it reads the initial zeros and stops at \\'-\\', interpreting the value as 0. In contrast, for \"-000012a42\", it recognizes the negative sign and reads the number as -12, stopping at the character \\'a\\'."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The description specifies that as soon as you find a non digit, you exit. So, in the first case you have several zeros, then you find a non character (the minus sign) and you exit with 0. In the second case, you parse the minus sign, then you parse the digits until  you find an \"a\", so you exit with a -12. "
                    },
                    {
                        "username": "tsemashko",
                        "content": "The most freaking weird convertor with tons of hidden rakes. It\\'s not atoi at all. It\\'s a bullshit."
                    },
                    {
                        "username": "janis__",
                        "content": "[@tsemashko](/tsemashko) The myAtoi function in Python converts a string to an integer. It skips leading whitespaces, determines sign, accumulates integer value until a non-digit is found, and ensures the result stays within the 32-bit integer bounds. It gracefully handles unconventional inputs by stopping at non-digits."
                    },
                    {
                        "username": "tsemashko",
                        "content": "[@janis__](/janis__) Thank you I solved it. But it\\'s not \"atoi\" from other languages (golang for example). It mustrequires to parse positively extremely weird cases such as \"-5-\", \"     -42 wagag wag waga\" and so on. And to the addition, the description is not covering all the possible acceptance criterias, and the requirements are extremely weird."
                    },
                    {
                        "username": "janis__",
                        "content": "Solution and idea. Start by skipping white spaces. Check for a \\'+\\' or \\'-\\' to determine the sign. Convert digits to numbers while looping through, multiplying the current result by 10 for each new digit. Lastly, ensure the result is within the 32-bit integer range. Voil\\xE0, you\\'ve got your quirky integer!"
                    },
                    {
                        "username": "janis__",
                        "content": "I like to solve such a task."
                    },
                    {
                        "username": "ranjithnani1299",
                        "content": "s=\"-91283472332\"\\nmy output = 0\\nexpected =-2147483648"
                    },
                    {
                        "username": "fwfisher",
                        "content": "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1."
                    },
                    {
                        "username": "rothergaar",
                        "content": "its pretty annoying test-cases, but it's still a simple task compared to atof()"
                    },
                    {
                        "username": "flamendless",
                        "content": "Whoever wrote this needs to seriously redo this. The problem statement does not match with the test cases"
                    },
                    {
                        "username": "fwfisher",
                        "content": "Please share a test case that you don\\'t think matches the description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "They actually do, but it\\'s easy to misread it."
                    },
                    {
                        "username": "matishen7",
                        "content": "I could not understand why?\\ns =\"words and 987\"\\n\\nUse Testcase\\nOutput\\n987\\nExpected\\n0"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\"\\n\\n\"If no digits were read, then the integer is 0.\"\\n\\nYou read the w, ignore everything else, and return 0."
                    }
                ]
            },
            {
                "id": 2019719,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 2016521,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 2009508,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 2009450,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 2005755,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 2001072,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 2000030,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 1998602,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 1995878,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 1995685,
                "content": [
                    {
                        "username": "chaitanya312",
                        "content": "Input :\"9223372036854775808\"\\nOutput: Integer.MAX_VALUE\\nMyOutput: Integer.MIN_VALUE\\nIt happened because I stored the above string in \"long \" num which is causing my long num to become -ve.\\nInstead use \" double \" num to store this value."
                    },
                    {
                        "username": "kayedo",
                        "content": "Oh i solved it on 12th try of AC in maybe 30 minutes, just because the explanation of this stupid question doesn\\'t cover all exceptions that caused me a lot of trouble with AC. I could solve it in 10 -15 minutes, but the reason I explained earlier."
                    },
                    {
                        "username": "user7739i",
                        "content": "For me it\\'s not clear why my code doesn\\'t pass this test case. Who can explain it to me? \\n\\nvar myAtoi = function(s) {\\n    const regex = /-?\\\\b\\\\d+\\\\b/g;\\n    const matches = s.match(regex)\\n    const val = parseInt(matches.join(\"\"))\\n  \\n    return  val >= -Math.pow(2, 31) && val <= Math.pow(2, 31) - 1 ? val : 0\\n};\\n\\nInput s = \"words and 987\"\\nMy output = 987 \\nExpected = 0"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "According to the specifications, you should return the boundaries themselves (2 ** 31) if exceeded. But here you returned 0... I recommend you use a min or max function to clamp the result."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The specs don\\'t allow you to ignore characters before the digits, only spaces."
                    },
                    {
                        "username": "Davidch4r",
                        "content": "The question could have been way easier if the author just wrote it more clearly. For those of you still struggling, the question is to write an atoi function that ignores leading while space. The sign is determined by either -, +, or positive by default. Once you reach a letter, the program should finish calculating. That is all"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "Yeah. the problem description is really frustrating"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "Does anyone have explanation for this?\\n\\n\\n\\n\\n`s` = \"-91283472332\"\\n`Output` = -91283472332\\n`Expected` = -2147483648"
                    },
                    {
                        "username": "mohiwalla",
                        "content": "[@FXCastells](/FXCastells) Thanks bro!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You are parsing a 32bit signed integer. Your output is larger than the larger negative number that you can encode with 32 bits. The specification tells you to clamp the number in this scenario."
                    },
                    {
                        "username": "dhruv8088",
                        "content": "Testcases are very unclear. The one logic gives right answer to a testcase fails to give the answer correct to another test case.\\nlet\\'s take this-\\nExcepted answer for test case \" -1123u3761867\" is -1123.\\nbut Excepted answer for test case \"00000-42a1234\" is 0.\\nMy output -42\\n\\nI fail to understand how!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You can\\'t put a minus sign in the middle of a number. That minus sign is just an invalid character (not a digit), therefore you stop parsing and return what you have parsed so far, which is 0."
                    },
                    {
                        "username": "2020ec0044",
                        "content": "phooo pissed with the clamp operation :(\\nInput\\ns =\"-91283472332\"\\n\\nExpected=-2147483648\\n\\n\\n"
                    },
                    {
                        "username": "underpaid_engineer",
                        "content": "FU**ING hell problem \\nWorst problem ever"
                    },
                    {
                        "username": "okoyecharles",
                        "content": "True"
                    },
                    {
                        "username": "jincanchamber",
                        "content": "stupid edge cases, whoever wrote this should stub their toes x2^31 - 1 times."
                    },
                    {
                        "username": "okoyecharles",
                        "content": "\\uD83D\\uDE02 "
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "For C#\\npublic class Solution {\\n    public int MyAtoi(string s) {\\n        int i = 0;\\n        while (i < s.Length && s[i] == \\' \\')\\n        {\\n            i++;\\n        }\\n\\n        // Check if the next character is \\'-\\' or \\'+\\'\\n        int sign = 1;\\n        if (i < s.Length && (s[i] == \\'-\\' || s[i] == \\'+\\'))\\n        {\\n            sign = (s[i++] == \\'-\\') ? -1 : 1;\\n        }\\n\\n        // Read in the digits\\n        int result = 0;\\n        while (i < s.Length && s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n        {\\n            result = result * 10 + (s[i++] - \\'0\\');\\n        }\\n\\n        // Clamp the integer\\n        if (result < -2147483648)\\n        {\\n            result = -2147483648;\\n        }\\n        else if (result > 2147483647)\\n        {\\n            result = 2147483647;\\n        }\\n\\n        return result * sign;\\n    }\\n}"
                    },
                    {
                        "username": "RandGor",
                        "content": "1. No solutions here...\\n2. No it will not work in case your int cannot be less than minimum int, You don\\'t even work with overfilling\\n3. I don\\'t even tell something you can get two ints in one input, your code will not work."
                    }
                ]
            },
            {
                "id": 1994788,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1994352,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1985912,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1985746,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1982628,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1981533,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1970759,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1969606,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1968458,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1965478,
                "content": [
                    {
                        "username": "chetan00111",
                        "content": "For test case \"  0000000000012345678\" the output is 12345678.\nThen for test case \"00000-42a1234\" output should be -42 for sure... But here expected output is 0... \nThis is beyond rationality and if such edge case is there then there is an obvious lack of information in question that leading 0's should be accepted but not when -ve integer is there.\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "You process digits until you reach a non-digit character and stop. \"-\" is not a digit, so you stop processing and return 0. It\\'s in the description."
                    },
                    {
                        "username": "dvakar",
                        "content": "1. `\"words and 987\"`\n2. `\" +0 123\"`\n3. `\"4193 with words\"`\n4. `\"00000-42a1234\"`\n5. `\" -115579378e25\"`\n6. `\"-91283472332`\n7. `\"+-2\"`\n8. `\"2147483648\"`\n9. `0-1`\n10. `\" +004500\"`\n11. `-+-+-3`\n12. `\"-0012a42\"`\n13.  `\"   321\"`\n14. `\" 0000000000012345678\"`"
                    },
                    {
                        "username": "FXCastells",
                        "content": "I\\'ll play:\\n\\n1. 0\\n2. 0\\n3. 4193\\n4. 0\\n5. -115579378\\n6. -2147483648\\n7. 0\\n8. 2147483647\\n9. 0\\n10. 4500\\n11. 0\\n12. -12\\n13. 321\\n14. 12345678"
                    },
                    {
                        "username": "cMardc",
                        "content": "Anyone Explain This Please ? : Input\\ns =\\n\"   +0 123\"\\nUse Testcase\\nOutput\\n123\\nExpected\\n0                                                                       \\ni Know There\\'s Whitespace ,But  Program Didn\\'t Say Ignore Whitespace When Number Not Found So?"
                    },
                    {
                        "username": "cMardc",
                        "content": "[@FXCastells](/FXCastells) Thanks\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Point number 1 says \"Read in and ignore any leading whitespace.\". This does not allow to ignore spaces in between the digits, only leading spaces."
                    },
                    {
                        "username": "ajtazer",
                        "content": "i am failing at \\n`Wrong Answer\\n39 / 1086 testcases passed\\nInput s =\"-91283472332\"\\nOutput = -91283472332\\nExpected = -2147483648`\\n\\nMY CODE IS.. \\n\\n`class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        ans = 0\\n        sign = 1\\n        for i in s:\\n            if i.isdigit():\\n                ans = ans * 10 + int(i)\\n            elif i == \\'-\\':\\n                sign = -1\\n            elif i == \\'+\\':\\n                pass\\n            elif i == \\' \\':\\n                pass\\n            else:\\n                break\\n        return ans * sign\\n`\\n\\nik the question says to clamp the answer but how do i do it"
                    },
                    {
                        "username": "FXCastells",
                        "content": "If the parsed value is greater than 32 bit max positive integer, then return the max positive integer and if it\\'s lower than the 32 bit min integer (smallest negative number), return min integer. In the case that you show, the result is smaller than the smallest 32 bit integer, so you need to clamp it to that. If the language you use doesn\\'t define these values already, just declare the constants/variables yourself."
                    },
                    {
                        "username": "mirzonabot",
                        "content": "If my input is \"00000-42a1234\":\\naccording to the algorithm once a is met I break the iteration and return -42.\\nBut expected output for this is 0, why? Anyone can explain this to me?\\n\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The algorithm tells you to stop parsing once you find an invalid character. Here you have parsed number 0, then you find a non digit, so you stop parsing and return what you have parsed, so 0"
                    },
                    {
                        "username": "vishalbramhankar18",
                        "content": "input = \"words and 987\"\\noutput = 0\\nmy output is 987\\n why output is o ??"
                    },
                    {
                        "username": "FXCastells",
                        "content": "W is not a valid character, so you stop parsing and return what you have parsed so far, 0 in this case"
                    },
                    {
                        "username": "sajidrec",
                        "content": "AC after 7 WA And 2 RE \\uD83D\\uDE25"
                    },
                    {
                        "username": "krhemant172003",
                        "content": "what is wrong with this question? it sounds so simple but when submit it gets edge cases ruining your submission."
                    },
                    {
                        "username": "FXCastells",
                        "content": "From what I see from people\\'s comments, the issue is that a lot of people implement what they assume it should do instead of what the problem description says, for example, some people ignore letters before the numbers, or if there is a plus and a minus sign, they ignore the plus sign. These things are not allowed according to the problem description. Other issues are just misreading things, like it says to ignore leading whitespaces, but people ignore all whitespaces (a whitespace after a plus sign or between digits is not a leading whitespace and should not be ignored). Basically, there are no edge cases, just implement exactly what the problem says and it will work."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "[the comment is deleted for containing bad language]"
                    },
                    {
                        "username": "Aum-2003",
                        "content": "why my code is returning -1776258 for testcase 2  \"      -42\"??\\nplease help."
                    }
                ]
            },
            {
                "id": 1964260,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1951452,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1950627,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1949317,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1948449,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1948302,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1938802,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1938292,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1935337,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1922448,
                "content": [
                    {
                        "username": "NonnoPinto",
                        "content": "In test case\\n\"   +0 123\"\\nI suppose output should be 123, since it\\'s wirtten to ignore whitespaces. But it asks for 0 as output.\\nAm i missing something?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@NonnoPinto](/NonnoPinto) Yeah, many comments say that, but I disagree with this view tbh. To me there are no edge cases if you follow the instructions correctly. For example, you said \"it\\'s written to ignore whitespaces\", but what it actually says is \"ignore any leading whitespace\". It is not the same. My suggestion, read the description again and do exactly what it says and it the specific order that it says it. For example, some people ignore a whitespace after the plus/minus sign, but the instructions clearly say to first ignore the whitespaces and then process the plus/minus sign. You can\\'t process the sign and then ignore the spaces. "
                    },
                    {
                        "username": "NonnoPinto",
                        "content": "[@FXCastells](/FXCastells) k, thanks. As i read in many comments, its just a matter of edge cases."
                    },
                    {
                        "username": "FXCastells",
                        "content": "You only ignore leading whitespaces, whicespaces between the digits are not correct. So, in this case, you parse +0 and then exit."
                    },
                    {
                        "username": "0x6B0",
                        "content": "This should be one of the hard ones haha"
                    },
                    {
                        "username": "Subhajit_Lai",
                        "content": "this input \\ns = \"420000\"\\nis giving a output 420\\nI mean why the f ? no ai tool can solve this"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Not for me:\\ns =\\n\"420000\"\\nOutput\\n420000\\nExpected\\n420000"
                    },
                    {
                        "username": "prakhar_3011",
                        "content": "One day i will solve this question,just not today!!!!!!!!"
                    },
                    {
                        "username": "leetcodecontest2023",
                        "content": "Who the hell puts whitespace in a string of numbers bruh.\\nWhoever made this question get a life.\\n\\n"
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in and ignore any leading whitespace.\" is clearly stated in the problem. It\\'s a good test of your ability to carefully read and implement a specification.\\n\\nBesides, if you were using this to parse a user input field, you\\'d need to handle whatever nonsense a user could potentially enter."
                    },
                    {
                        "username": "slade13",
                        "content": "Too many test cases which were not mentioned in the description. You might be good at writing algorithms but I assume that nobody will found what an author had in mind and it was not included inside the content of the task. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "All the tests cases are covered by carefully reading the description."
                    },
                    {
                        "username": "satyam47",
                        "content": "Tired of **Wrong Answer** "
                    },
                    {
                        "username": "1q0918567mmm",
                        "content": "s = \"+-12\" \\nAAAAAAAAAAA  OMG WHYYY"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules from the problem as they are explained and everything works. This case is very simple, after the + you expect a digit, but you have a non digit character, so you exit and return 0."
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "don\\'t return stoi(s) it will give runtime error"
                    },
                    {
                        "username": "BrandanGG",
                        "content": "What a terrible problem.  How does this make any sense? not worth doing.\\nWrong Answer\\n\\n4 / 1084 testcases passed\\nInput\\ns =\\n\"-91283472332\"\\nUse Testcase\\nOutput\\n-91283472332\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "This problem makes you parse 32 bit integers. \"-91283472332\" is not a 32 bit integer. The expected behaviour is described in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\""
                    }
                ]
            },
            {
                "id": 1922378,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1919557,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1919123,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1910226,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1904845,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1900188,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1899959,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1898442,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1889972,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1888554,
                "content": [
                    {
                        "username": "brenscrazy",
                        "content": "Solved it in one try. Thanks to my university where I implemented math exceptions parser with about 5 or 6 programming languages"
                    },
                    {
                        "username": "anyvchyk",
                        "content": "Did it in 20 minutes after studies in a school 42 lol"
                    },
                    {
                        "username": "vo1d007",
                        "content": "I don\\'t understand why when input is +-12 the answer is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "After parsing the + sign, you should have a digit, but instead you have an invalid character (any non digit character), therefore you stop parsing and return 0."
                    },
                    {
                        "username": "biteeunkillable",
                        "content": "s = \"words and 987\"\\noutput : 987\\nexpected value  : 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "As expected according to the problem description."
                    },
                    {
                        "username": "Bold_Bruiser",
                        "content": "how come this question is so asked in interviews, such stupid Question? may be it would be something different??"
                    },
                    {
                        "username": "fwfisher",
                        "content": "It tests your ability to property read and follow the directions in the problem description."
                    },
                    {
                        "username": "antonybstack",
                        "content": " ```\\npublic int MyAtoi(string s) {\\n        s = s.Trim();\\n        if(s.Length==0 || (s.Length==1 && !Char.IsDigit(s[0])))\\n            return 0;\\n\\n        int i = s[0]==\\'-\\' || s[0]==\\'+\\'\\n                ? 1 // index skips sign if present\\n                : 0;\\n        bool isNeg = s[0]==\\'-\\'; // determine sign\\n        long curr = 0;\\n        while(i<s.Length) {\\n            if(!Char.IsDigit(s[i])) break; // rest of the string is ignored\\n            curr *= 10;\\n            curr = isNeg ? curr - (s[i++]-\\'0\\') : curr + (s[i++]-\\'0\\');\\n            if(curr>int.MaxValue || curr<int.MinValue) // stop early optimization\\n                return curr < 0 ? int.MinValue : int.MaxValue;\\n        }\\n        return (int)curr;\\n    }\\n```"
                    },
                    {
                        "username": "quangtruongcmb",
                        "content": "can anyone explain to me why input is \"  +  413\" and expected is 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There\\'s a space after the plus sign. You stop parsing the moment you find an invalid character. In this case, you didn\\'t parse any digit yet, so the result is 0."
                    },
                    {
                        "username": "BradenEverson",
                        "content": "Edge cases man. \\n\\nEdge. Cases.\\n\\nI was through 957 of the tests and everything was reasonable so far. But the fact that \"+-12\" is supposed to be returned as 0 instead of -12 is just nonsense bro. Like mathematically evaluating this  would mean we\\'re adding a negative 12, THEREFORE -12.\\n\\nSmh man, smh"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@BradenEverson](/BradenEverson) yeah, you could be right that maybe +-12 should return -12, but that\\'s not how the problem is stated. In a real scenario, you could suggest the change in the specifications, but here you just have to do what they say. I find that the difficulties most people find with this problem are because they implement what they think should be, not what it\\'s being asked. "
                    },
                    {
                        "username": "BradenEverson",
                        "content": "[@FXCastells](/FXCastells) Ay man that\\'s valid, I think I just reacted the way I did because I was working from the end of the string out, and to be honest I feel like if a string to int converter does have logical operation such as +-N interpreting that nobody will really complain. I get that it\\'s outside the constraints of the actual problem though :)"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"adding a negative 12, THEREFORE -12\"...you are not building a calculator, but a parser. There are no edge cases really, just implement the rules as stated in the problem description and it will just work. Ignore the spaces, parse a plus or a minus (not both!) then parse the digits until you find a non-digit (or the end of the string). The \"+-12\" is very simple: there are no spaces, then there\\'s a plus, then there is a non-digit, so you stop parsing and return zero. Handle also the optional plus sign and the int min and max and that\\'s it. "
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "The question is completely silly, I am unable to understand what the \"with words 4139\" and \"words and 987\" mean in here because in one case the answer is 4139 and in other case it is 0. If this type of things is to be tackled, then it should be mentioned in the problem statement itself but is not mentioned.\\nMy conclusion is that the problem statement is not up to the mark."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Two points from your comment:\\n1. Are you sure the test cases that you mention are exactly as you say? I would bet that the one with expected result 4139 is something like \"4139 with words\" and not \"with words 4139\", which would then be incorrect. \\n2. I disagree with your conclusion that this problem statement is not up to the mark. Every single criticism I\\'ve seen for this problem boiled down to the person not having paid enough attention while reading the problem. Being able to understand the requirements is a fundamental part of software development. I encourange you to read the problem again and follow what it says, instead of making assumptions of how it should work (one assumption that a lot of people do is that you should just ignore all non digit characters, and that is not the case). "
                    },
                    {
                        "username": "tanishq1204",
                        "content": "input  =  \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nis this correct?\\n"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Yeah, \"w\" is not a valid character, so you exit and return the number you have parsed so far. In this case, you haven't parsed anything, therefore 0. "
                    }
                ]
            },
            {
                "id": 1886567,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1882188,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1882147,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1872856,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1865567,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1863016,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1862873,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1859409,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1857718,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1857577,
                "content": [
                    {
                        "username": "blank_1729",
                        "content": "What the heck is wrong with these people?\n\n\"18446744073709551617\"\n\nWhy is this a testcase??\n\n184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617184467440737095516171844674407370955161718446744073709551617 - add this to the test cases please\n\nLets spend our whole live on this stupid test cases"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "```\nclass Solution {\npublic:\n    int myAtoi(string s) {\n        int n = s.length();\n        double res=0;\n        int i=0;\n        int sign = 1;\n\n        while(i<n and s[i] == ' '){\n            i++;\n        }\n        if(s[i] == '+'){\n            sign = 1; i++;\n        }\n        if(s[i] == '-'){\n            sign = -1; i++;\n        }\n        \n\n        while(i<n and s[i] >= '0' and s[i] <='9'){\n            int check = s[i] - '0';\n            res = res*10 + check;\n            i++;\n        }\n\n        if(sign == -1){\n            res = -res;\n        }\n        res = (res > INT_MAX) ? INT_MAX : res;\n        res = (res < INT_MIN) ? (INT_MIN) : res;\n\n        return (int)res;\n\n    }\n};\n```\n\nMy code is getting wrong on T.C = \"+-12\", can any1 tell me the problem?\nIt is giving me -12, but the real o/p is 0, how???"
                    },
                    {
                        "username": "yoursbhavishyah098",
                        "content": "[@FXCastells](/FXCastells) Thank you so much, now it is working!!"
                    },
                    {
                        "username": "FXCastells",
                        "content": "You allow to parse a \"-\" sign after parsing a \"+\" sign and this is not allowed. You should have either one or the other (or none, and then you assume a positive number), but not both. "
                    },
                    {
                        "username": "Sicx0",
                        "content": "With \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\" it means that if I have a value that is greater than INT_MAX I should return INT_MAX?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Correct"
                    },
                    {
                        "username": "sciguy09",
                        "content": "The following testcase is incorrect:\\n\\nInput\\n>s = \"-91283472332\" \\n\\nExpected output\\n>-2147483648"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It is not incorrect. Read this part in the problem description \"If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range\""
                    },
                    {
                        "username": "chungwailok",
                        "content": "Okay so why +-12 should return 0?\\nadding -12 = minus 12 = -12, right?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "There is no reason or rule to ignore the plus sign. You parse a + or a - sign and then parse the digits until the digits are over. In this case, you parse a plus sign and then there are no valid digits, therefore the result is 0. "
                    },
                    {
                        "username": "Naumel",
                        "content": "Why is \"4193 with words\" parsable but \"words and 987\" expects 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the rules in order: ignore leading spaces, find + or - (assume + if not found), ignore leading zeros, parse the digits until there are no more digits. Return 0 if you can\\'t parse any digit.\\nIn the first case, there are no spaces, you assume +, there are no zeros, then you parse 4193. In the second case, there are no spaces, you assume +, no zeros, then instead of a digit you find a \\'w\\' so you stop parsing and return 0."
                    },
                    {
                        "username": "Vikraman6000",
                        "content": "This is really a headache.\\nNot because the problem stated is too hard, but they haven\\'s stated in clearly enough to implement it.\\nTestCase : \"     +    413\";\\nOutput : 0 ;\\nMany more like this will come!\\n\\nRead the problem twice or thrice before coding, or you\\'ll be frustrated."
                    },
                    {
                        "username": "FXCastells",
                        "content": "The rules are very clear. The problem is that people mix them up and you can\\'t, you need to follow them as they are explained. In your scenario, you ignore the leading spaces, then you find a + sign and then you have to parse the number. You can\\'t start ignoring spaces again. Therefore, as you have an invalid character after the + sign, you return 0."
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "\"-91283472332\"\\nhow the heck this input got \\n-2147483648 this answer........."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@FXCastells](/FXCastells) the quote in my answer lost the correct formatting, please check the quote in the problem description."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@tarsame_singh](/tarsame_singh) it\\'s a negative integer outside the integer bounds. It\\'s clearly explained in the problem description here:\\n\\n\"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\""
                    },
                    {
                        "username": "tarsame_singh",
                        "content": "please someone explain how this happend.\\n"
                    },
                    {
                        "username": "PAIN_an_c",
                        "content": "why same code but space compelxity is optimized gives one 100 % submission while which is more optimize in space and same as time gives 70% submission with 3ms\\n\\nthe code with space optimization:\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        long long sum=0;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\'){\\n                sum=1;\\n                i++;\\n            }\\n            else if(s[i]==\\'-\\'){\\n                sum=-1;\\n                i++;\\n            }\\n            if(sum==-1){\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(-2147483648+(s[i]-\\'0\\')>=sum*10) return -2147483648;\\n                    else sum=sum*10-(s[i]-\\'0\\'); \\n                    i++;\\n                }\\n            }\\n            else{\\n                sum=0;\\n                while(i<s.length() && s[i]<=\\'9\\' && s[i]>=\\'0\\'){\\n                    if(2147483647-(s[i]-\\'0\\')<=sum*10) return 2147483647;\\n                    else sum=sum*10+(s[i]-\\'0\\');\\n                    i++; \\n                }\\n            }\\n            break;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nthe code with 100 %submission but using extra memory :\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans=1;\\n        string a;\\n        for(int i=0;i<s.length();i++){\\n            while(i<s.length() && s[i]==\\' \\') i++;\\n            if(s[i]==\\'+\\') i++;\\n            else if(s[i]==\\'-\\'){\\n                ans=-1;\\n                i++;\\n            }\\n            while(i<s.length() && (s[i]<=\\'9\\' && s[i]>=\\'0\\')) a.push_back(s[i++]);\\n            break;\\n        }\\n        long long sum=0;\\n        if(ans==-1){\\n            for(int i=0;i<a.length();i++){\\n                if(-2147483648+(a[i]-\\'0\\')>=sum*10) return -2147483648;\\n                else sum=sum*10-(a[i]-\\'0\\'); \\n            }\\n        }\\n        else{\\n            for(int i=0;i<a.length();i++){\\n                if(2147483647-(a[i]-\\'0\\')<=sum*10) return 2147483647;\\n                else sum=sum*10+(a[i]-\\'0\\'); \\n            }\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "Lider1611",
                        "content": " Men dart tilida try-catch dan foydalandim sababi bunda yuzga keladigan xatolarni ushlab, undan shunchaki sakrab o\\'tish uchun. Satrni raqamga aylantirish uchun esa tryParse dan foydalandim. Bu esa yuqorida keltirilgan muammolarni hal qilishda yordam beradi. Masalan: \\nInput: \"+-2\"\\nOutput: -2\\nExpected: 0"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Don\\'t ignore the plus sign. You have a plus sign followed by an invalid digit, therefore the result is 0"
                    }
                ]
            },
            {
                "id": 1852912,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1850755,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1849413,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1843107,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1840488,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1840456,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1837499,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1835098,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1834195,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1833745,
                "content": [
                    {
                        "username": "Hamood-Habib",
                        "content": "\"  0000000000012345678\" is expected to give 12345678\\nwhile\\n\"00000-42a1234\" is expected to return 0.\\n\\n Just a waste of time."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Those are the expected results if you follow what you are being asked. It is also logical, zeros in front of a number don\\'t do anything and you can\\'t just put a minus sign in the middle of a number. So, as specified: ignore the trailing spaces. Find an optional minus or plus sign (if it\\'s not there, assume it\\'s a positive), then parse the number until there are no more digits. \\nIn the first case, you ignore a space and then parse the number 12345678 (with some trailing zeros, which obviously don\\'t change the result). In the second case, you parse number 00000 (when you find an invalid character you stop parsing), so the result is 0."
                    },
                    {
                        "username": "umbc1ok",
                        "content": "It's absurd. The test cases are basically contradictory:\n\"  -0012a42\" expects -12 while:\n\"00000-42a1234\" expects 0\n\nThe problem itself is fine, but the test cases are contradictory, illogical. The description also contradicts the test cases.\n\nEDIT:\nI'm a dumbass and can't read."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@umbc1ok](/umbc1ok) No problem. Happy that my comment helped. "
                    },
                    {
                        "username": "umbc1ok",
                        "content": "[@FXCastells](/FXCastells) Yep, my bad. It\\'s just a frustrating problem and it\\'s easy to get confused.  It only looks illogical, but in fact it makes sense. Thanks for pointing it out. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "The two test cases that you show are not contradictory and perfectly match what the problem says. I would encourange you to read the problem again and think it through a bit so you can see where your mistake is. Apparently a lot of people have trouble with this problem, but I don\\'t think LeetCode should change it. If anything it highlights that no matter how good at programming you are, if you are not able to understand the requirements, you won\\'t succeed. "
                    },
                    {
                        "username": "rhydimgoel2",
                        "content": "\"words and 987\"\\nwhy is expected output 0 here when it should be 987"
                    },
                    {
                        "username": "Bhashkar_3241",
                        "content": "why  too much hatred for this question?"
                    },
                    {
                        "username": "user3909M",
                        "content": "Freak!! Describe the rules for this:\"    +0 123\"; \"00000-42a1234\"; \"\"-+12\"; \"\"++++12\"\"; \"4193 with words\" !!!! where is the author?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@fwfisher](/fwfisher) that is right. I don\\'t know if you mention it because I just said \"Ignore spaces\" and not \"Ignore leading spaces\", but I want to clarify that the rules I mentioned are meant to be executed in that order (starting at the beginning of the string), so ignore spaces, then process the plus or minus signs, then process the digits until there are no more digits. You can\\'t, for example, process the digits and then ignore the spaces. "
                    },
                    {
                        "username": "fwfisher",
                        "content": "The directions say only to ignore LEADING space characters. If you encounter a space after you\\'ve started to parse the number, it\\'s treated like any other invalid character (i.e. you stop parsing and return whatever number you\\'ve read in so far)."
                    },
                    {
                        "username": "FXCastells",
                        "content": "[@user3909M](/user3909M) I understand there must be some reason for the low acceptance, but I don\\'t know what it is. Maybe people assume this is a lot more difficult than it really is? What rules are not in the description? I just rephrased them, but they appear in the same order I mentioned them: ignore spaces, process plus or minus, parse the digits until there are no more digits. There\\'s the extra rule about the min/max integer too. There are no more rules to consider as far as I remember."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) Acceptance of this task is very low - I\\'m not alone so tormented... sadly..."
                    },
                    {
                        "username": "user3909M",
                        "content": "[@FXCastells](/FXCastells) that\\'s understandable. but, why aren\\'t all the rules in the task description? i.e. many rules appear at the moment of running tests... why?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"+0\" is 0, \"00000\" is 0, \"-\" is 0, \"+\" is 0, \"4193\" is 4193. The rule is basically, ignore spaces until you find a digit, a + or a -. Then parse the number until you find a non digit or the end of the string. What would you do instead?"
                    },
                    {
                        "username": "user3909M",
                        "content": "this GAVNYUK wrote a random function and pulled 1000 solutions out of it... in the description of the task - there is no complete overlap of the problem - DISMISS!!"
                    },
                    {
                        "username": "alvinwilta",
                        "content": "yeah, just too many edge cases. It\\'s really absurd. My solution can detect any number inside a word and stops when it is necessary to stop. But it just wont accept it."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"detect any number inside a word\" is not what it\\'s asking though. You need to parse an integer in the beginning of the string and ignore the rest. "
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "input : \"words and 987\"\\n\\nCan anyone explain this test case ? why it is giving  output : 0\\nmy output: 987\\n"
                    },
                    {
                        "username": "rahulforcoding4",
                        "content": "[@FXCastells](/FXCastells) Thanks!! it clears my concept."
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a space, a digit, a plus or a minus sign, therefore, the result is 0. "
                    },
                    {
                        "username": "Almazino",
                        "content": "Input\\n\"-91283472332\"\\nOutput\\n-91283472332\\nExpected\\n-2147483648 what?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "That\\'s this case \"If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.\""
                    },
                    {
                        "username": "quanghoang2023",
                        "content": "This problem is just waste of time. Test for too detailed cases and the description doesn\\'t mention those cases at all. "
                    },
                    {
                        "username": "FXCastells",
                        "content": "Out of curiosity, what cases are not mentioned in the description?"
                    }
                ]
            },
            {
                "id": 1827600,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1824374,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1822706,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1818666,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1817627,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1815859,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1814223,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1812456,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1812240,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1811088,
                "content": [
                    {
                        "username": "yungxslavy",
                        "content": "If Else stocks rn \\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\uD83D\\uDCC8\\n"
                    },
                    {
                        "username": "UUC110",
                        "content": "Can anyone help me why is this wrong?\\n\\nand failing this case? \"words with 987\"\\n\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        int ans = 0;\\n        int sign = 1;\\n        for(char i: s){\\n            if((i >= \\'0\\' && i <= \\'9\\') || i == \\'+\\' || i == \\'-\\'){\\n                if(i == \\'-\\'){\\n                    sign = -1;\\n                }else{\\n                    ans = ans*10 + (int)i-48;\\n                    if (ans > INT_MAX / 10 || (ans == INT_MAX / 10 && i > INT_MAX % 10)) {\\n                        return sign == -1 ? INT_MIN : INT_MAX;\\n                    }\\n                }\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n    return sign*ans;\\n        }\\n}; "
                    },
                    {
                        "username": "fwfisher",
                        "content": "\"Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\" from the problem description.\\n\\nYou need to stop reading the input when you see an invalid character - not just skip over that character."
                    },
                    {
                        "username": "king_angry",
                        "content": "So many edge cases that its annoying"
                    },
                    {
                        "username": "cheesebread",
                        "content": "Proud to be part of the 16.6%......but at what cost\n\n(That was awful)"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Approach:-\\n\\nRemove leading and trailing white spaces from the given string using the trim() method.\\n\\nCheck if the first character is a sign (+/-) or a digit. If it is a sign, remember the sign and remove it from the string. If it is a digit, assume it is positive.\\n\\nIterate over the remaining characters of the string until a non-digit character is encountered. While iterating, build the integer by multiplying the current value by 10 and adding the value of the current digit. If a non-digit character is encountered, break out of the loop.\\n\\nApply the sign (remembered in step 2) to the integer calculated in step 3.\\n\\nCheck if the final integer is within the range of a 32-bit signed integer, and clamp it if it is not.\\n\\nReturn the final integer."
                    },
                    {
                        "username": "AjayNaik",
                        "content": "why \"words and 987\" should return 0? \\n\\nmine returns 987 which is wrong? not sure why?"
                    },
                    {
                        "username": "mdmasidulhasan27",
                        "content": "we have to find the integer number from a string what I understand after reading the problem.\ninput: \"words and 987\"\noutput: 0\nas where my output is 987\nwhat is the logic behind this ! why the output is 0."
                    },
                    {
                        "username": "zenverak",
                        "content": "This feels like a problem with so many edge cases that it starts to defeat the task at hand\\'s purpose and instead becomes an exercise in edge cases, which I feel most of the time should be avoided in these cases so that we can focus on the key portion instead of the extraneous details."
                    },
                    {
                        "username": "FXCastells",
                        "content": "Just follow the instructions. There aren\\'t so many cases... find the beginning of the number, parse the number and exit when the string ends or there\\'s a non digit character. "
                    },
                    {
                        "username": "mohasinpatel313",
                        "content": "What type question is this almost solved but then, for number \\n\"9223372036854775808\" it stuck if changed then also there some errors frusted solving this question.\\nWrong Answer\\n\\nWrong Answer           1078 / 1084 testcases passed\\n\\nInput\\ns =\\n\"9223372036854775808\"\\n\\nOutput\\n-2147483648\\nExpected\\n2147483647"
                    },
                    {
                        "username": "FXCastells",
                        "content": "The input is positive, but your output is negative... "
                    },
                    {
                        "username": "MishkatIT",
                        "content": "Worst problem ever \\uD83D\\uDE2A"
                    }
                ]
            },
            {
                "id": 1809559,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1808065,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1807530,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1807505,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1804476,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1804267,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1803119,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1801029,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1800938,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1800860,
                "content": [
                    {
                        "username": "abhishek_rocks333",
                        "content": "\"+-12\" is this a valid test case.\n\nExpected Output should -12 or 12 or 0 \nThis is confusing"
                    },
                    {
                        "username": "FXCastells",
                        "content": "It\\'s quite simple actually. You find a plus sign, then you expect a digit, but there\\'s an invalid character instead, therefore, the result is 0."
                    },
                    {
                        "username": "leet_alok",
                        "content": "Do not waste your time solving this question. "
                    },
                    {
                        "username": "madpoly",
                        "content": "100% speed and space, may good have mercy on the soul of whoever came up with the edge cases."
                    },
                    {
                        "username": "madpoly",
                        "content": "extremely annoying, the test cases. I feel like my algo is a bit better as it checks for better cases. For instance \"00000-42a1234\" mine picks up -42 which I think is way more elegant..."
                    },
                    {
                        "username": "fwfisher",
                        "content": "[@madpoly](/madpoly) The directions don\\'t allow for this. After skipping the leading spaces, you check for a single, optional + or - to set the sign. After this, all subsequent characters must be digits. When you see that - after the +, you should be expecting a digit, and therefore terminate and return 0 (since no number has been read in yet)."
                    },
                    {
                        "username": "madpoly",
                        "content": "[@fwfisher](/fwfisher) solved it but it was painful. I feel like +-12 should be -12 for instance which my initial things did. After a while my string clean up method morhped into a frustrated mess of if statements. Works now with 100% and 92% so I am out of this dumpster fire. Maybe just skill issue idk."
                    },
                    {
                        "username": "FXCastells",
                        "content": "A lot of people have problems with this case, but I can\\'t understand why? Why would \"0000-42\" be translated to -42? I just don\\'t get it. You can\\'t just put a minus sign in the middle of a number. This is just zero and the rest of the characters are discarded."
                    },
                    {
                        "username": "fwfisher",
                        "content": "That doesn\\'t meet the requirements in the problem description. Only leading space characters can be ignored, not leading 0s."
                    },
                    {
                        "username": "gadzbi123",
                        "content": "for input \"-91283472332\" the minimal int is -2147483647 but -2147483648 is expected"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "-2147483648 is correct\\nhttps://stackoverflow.com/questions/19084227/what-is-the-minimum-value-of-a-32-bit-signed-integer"
                    },
                    {
                        "username": "Dikshika_12",
                        "content": "firstly store the sign in a character and add a checkpoint so that you can view it only once\\nafter this now check the same for whitespace characters and ignore it until you have not encountered any other character (you need to use flags for this)\\n\\nafter this run a while loop and check if s[i]>=48 && s[i]<=57\\nthen you will add this to yuor number but while doing this take care that you will not excedd 2^31 range and once your integer becomes greater than this come out from the loop \\n\\nnow check the sign and returns the answer\\n\\n"
                    },
                    {
                        "username": "imleet",
                        "content": "Please guys help me understand why \"words and 987\" case should return 0 "
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character **( \\'w\\' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "ayushi_0401",
                        "content": "Simple solution in C++ by string stream\\nclass Solution {\\npublic:\\n    int myAtoi(string s) {\\n        if(s.length()==0)\\n        return 0;\\n        int c=0;// c for counting space \\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\' \\')\\n            c++;\\n        }\\n        if(c==s.length())\\n        return 0;\\n        int x;\\n        stringstream s1;\\n        s1<<s;\\n        s1>>x;\\n        return x;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "user9691JH",
                        "content": "Test case crashed, input:  \"-91283472332\", expected:  -2147483648  != -2147483647 (defined INT_MAX in limits.h)"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Because you are supposed to cap it at INT_MIN not -1 * INT_MAX"
                    },
                    {
                        "username": "boulissh",
                        "content": "Hello there ! I don\\'t understand why for the test \"+-12\" you should get 0 in output. To me it should be -12....\\n\\nBy the way, here is my code, I hope you can guide me !\\n\\nint myAtoi(char * s){\\n    if (s==NULL || isalpha(s[0])) return 0;\\n    int i, sign=1,d=0;\\n    int64_t number=0;\\n    int n = strlen(s);\\n\\n    for(i=0; i<n; i++) {\\n        if(number > INT_MAX/10 ||(number == INT_MAX/10 && d > 7)) return INT_MAX;\\n        else if(number<INT_MIN/10 || (number==INT_MIN/10 && d<-8)) return INT_MIN;\\n\\n        else if (\\'-\\'==s[i]) {\\n                sign=-sign;\\n            }\\n        else if (\\'.\\'==s[i]) return number;\\n        else if (isdigit(s[i])) {\\n            d = sign*(s[i] - \\'0\\');\\n            number = number*10 + d; //ASCII VALUES\\n        }\\n    }\\n    return number;\\n}"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character **( '-' in this case)** or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0.\n"
                    }
                ]
            },
            {
                "id": 1799483,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1797663,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1794930,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1794606,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1792064,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1787806,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1785905,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1785899,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1785230,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1783442,
                "content": [
                    {
                        "username": "Sushanth_S_Rao",
                        "content": "If the string is \"+-12\", the expected output is 0\\nLike bruh seriously?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character ( \\'-\\' in this case) or the end of the input is reached. The rest of the string is ignored.... If no digits were read, then the integer is 0."
                    },
                    {
                        "username": "juansymontano",
                        "content": "This is one of the most fun codes I've done. A bit pissed at the edge cases, but fun.\n\nNow for the people in the future trying to solve this:\nif you encounter a string, return immediately\nyou only get one + or -, if you get both, return immediately\nleading whitespace to be ignored, following whitespace treated as string (see above)"
                    },
                    {
                        "username": "JediRhymeTrix",
                        "content": "This one question tanked my AC ration. smh"
                    },
                    {
                        "username": "driftingaway",
                        "content": "Just skip this one unless you are passionate about gaining first hand experience on why atoi is awful and you should never use it."
                    },
                    {
                        "username": "Jayanthsomuri",
                        "content": "1071/1084 cases passed\\nStuck with this test case \"00000-42a1234\"\\nmy op:-42;\\nexpected:-0"
                    },
                    {
                        "username": "anokrid",
                        "content": "String starts with \"0\" and after that it found symbol \"-\", so it count numbers befor this symbol, and the only numbers, which are before it are zeros, so answer is 0"
                    },
                    {
                        "username": "MichiganAgain",
                        "content": "If I wanted to play edge case simulator, I wouldn\\'t be doing it on LeetCode"
                    },
                    {
                        "username": "bessadam",
                        "content": "For all those who have the courage to solve it - just check these test cases before submitting:\\n1) \"00000-42a1234\"  ---> 0\\n2) \" -1123u3761867\" ---> -1123\\n3) \"-91283472332\"    ---> -2147483648\\n4) \"21474836460\"      ---> 2147483647\\n5) \".1\"                            ---> 0\\n6) \"+2\"                          ---> 2\\n7) \"   +0 123\"               ---> 0\\n8) \"   a44\"                     ---> 0"
                    },
                    {
                        "username": "ijazx1",
                        "content": "I thought the low acceptance was because of difficulty, little did I know about the edge cases. \\uD83D\\uDE35\\u200D\\uD83D\\uDCAB"
                    },
                    {
                        "username": "user6708hp",
                        "content": "Input:\\ns = \"   +0 123\"\\n\\nOutput:\\n123\\n\\nExpected:\\n0\\n\\n\\uD83E\\uDD26\\u200D\\u2642\\uFE0F Where is the logic?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "What\\'s the issue? \"+0\" is 0. Why do you skip the +0?"
                    },
                    {
                        "username": "RiumEqua",
                        "content": "within the description of the required algorithm"
                    },
                    {
                        "username": "ritu7999",
                        "content": "class Solution {\\n    public int myAtoi(String s) {\\n        s=s.trim();\\n        long  x=0;\\n        boolean b= true;\\n        if(s.length()==0) return 0;\\n        if(s.charAt(0) == \\'-\\') b = false;\\n        int MIN=Integer.MIN_VALUE;\\n        int MAX=Integer.MAX_VALUE;\\nint i = (s.charAt(0) == \\'+\\' || s.charAt(0) == \\'-\\') ? 1 : 0;\\n       while(i < s.length()) {\\n            if(s.charAt(i) == \\' \\' || !Character.isDigit(s.charAt(i))) break;\\n            x = x * 10 + s.charAt(i)-\\'0\\';\\n            // check the conditions\\n            if(b == false && -1*x < MIN) return MIN;\\n            if(b == true && x > MAX) return MAX;\\n            \\n            i++;\\n        }\\n       if(!b){\\n           return (int)(x*-1);\\n       } \\n      \\n       \\n      \\n       return (int)x;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1783359,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1783341,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1781912,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1781683,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1780674,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1780217,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1777323,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1776520,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1775642,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1774998,
                "content": [
                    {
                        "username": "d4m4s74",
                        "content": "Am I the only one who didn\\'t have problems with edge cases?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "My main problem was that I didn\\'t understand what \"clamp the integer\" meant :D. I think it is ok to miss some edge cases in the code, but from what I see, most people have more problems understanding the required algorithm than handling the edge cases.  "
                    },
                    {
                        "username": "haneeshsolasa",
                        "content": "There is seriously something wrong with the person who wrote the test cases for this question. So many edge cases that are not relevant. Waste of time."
                    },
                    {
                        "username": "d4m4s74",
                        "content": "Lots of people seem to just use the original atoi or scanf in their code, which feels like cheating."
                    },
                    {
                        "username": "ck1910",
                        "content": "Input: \"+-12\"\\nOutput: -12\\nBut Expected: 0\\n\\nHow is it even possible?"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ck1910](/ck1910) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "jdarby",
                        "content": "Once you see the +, the only valid characters afterwards should be digits. Once you see something that isn\\'t a digit, you stop reading in characters. Since the character following the + is a -, you haven\\'t read any digits, so return 0."
                    },
                    {
                        "username": "NishantKende",
                        "content": "What can I do here ?\\nInput\\ns =\\n\"-91283472332\"\\n650 / 1084 testcases passed\\nOutput\\n-1089159116\\nExpected\\n-2147483648"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You\\'re almost there! \\n\\nClamp your output to a 32 bit unsigned integer.\\n\\n`-2147483648` should have been a hint to that."
                    },
                    {
                        "username": "Rakesh_Indupuri",
                        "content": "Easy Java solution .\\n\\n## JAVA EASY SOLUTION\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)Starting we are checking whether the string is null or not.\\n2)Then to remove the leading white spaces we are using the trim function.\\n3)Then we are checking the sign of the string . Initially we have taken the sign as +1.if it is negative then we are changing it to\\n-1.\\n4)Then we are initialising the index . if there is any sign we will start traversing from 1 else 0 .\\n5) Now we will traverse till index is less than the length of the string . During the traversing if there is white space or any words we are breaking the loop.\\n6)now we are converting the ans to the long by ans = ans*10+s.charAt(index)-\\'0\\'.\\n7)Finally checking whether our ans is in the given range or not\\n8)Finally we typecasting our long ans to int and returning it.\\n\\nclass Solution {\\n    public int myAtoi(String s) {\\n        if(s==null)\\n        {\\n            return 0;\\n        }\\n\\n        s=s.trim();\\n        if(s.length()==0)\\n        {\\n            return 0;\\n        }\\n        int sign = +1;\\n        long ans = 0;\\n        if(s.charAt(0)==\\'-\\')\\n        {\\n            sign = -1;\\n        }\\n        int MAX = Integer.MAX_VALUE;\\n        int MIN = Integer.MIN_VALUE ;\\n        int index = (s.charAt(0)==\\'+\\'||s.charAt(0)==\\'-\\')?1:0;\\n        while(index<s.length())\\n        {\\n            if(s.charAt(index)==\\' \\'||!Character.isDigit(s.charAt(index)))\\n            {\\n                break;\\n            }\\n            ans = ans*10+s.charAt(index)-\\'0\\';\\n            if(sign==-1&&-1*ans<MIN)\\n            {\\n                return MIN;\\n            }\\n            if(sign==1 && ans>MAX)\\n            {\\n                return MAX;\\n            }\\n            index ++;\\n        }\\n        return (int)(sign*ans);\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "jdarby",
                        "content": "Please don\\'t post solutions in this section."
                    },
                    {
                        "username": "SubhamKrGuptaDev",
                        "content": "Hello Guys.\ni have one solution for this question and when i run in leetcode test case number 3 are not passing but when i run same code in my eclipse this test case work i dont know why this happen can anyone help me ?? please ??\n\n*** Code ***\n'''\n     public int myAtoi(String s) {\n        String str = \"\";\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) == ' ') continue;\n            if(s.charAt(i) >= '0' && s.charAt(i) <= '9' || s.charAt(i) == '-') {\n                str += s.charAt(i);\n            }\n        }\n        int n = Integer.parseInt(str);\n\n        return n;\n    }\n'''\n\n*** Test Case ***\n\"words and 987\"\n\nits showing me 0 in leetcode but in eclipse it showing correct 987 output."
                    },
                    {
                        "username": "Mirro0w0",
                        "content": "My god i failed 5 times to get this done correctly.\\nNow I know why there are so many dislikes cuz there are way too many edge cases!!"
                    },
                    {
                        "username": "SeanDrozd",
                        "content": "I chose this question because of the incredibly low acceptance rate for what seemed to be the recreation of a simple C function. I then failed multiple times due to unclear requirements and invisible test cases. I spent way too much time sussing out these hidden edge cases that only become apparent after submission. I can\\'t fault the question too much, though, since the atoi function is almost prehistoric, written at a time when memory capacity was measured in kilobytes instead of gigabytes. It\\'s a nice reminder that the incredible libraries we have available to us today were built on the foundations laid by those old school computer scientists, writing functions against memory and processing power restrictions that would make me cry. So what if my solution is O(n\\xB3), just throw another 64 cores at it!"
                    },
                    {
                        "username": "Ashish_4k",
                        "content": "What is wrong with this question everytime I submit some new test case pops up telling do this do that etc worst leetcode question!!."
                    }
                ]
            },
            {
                "id": 1772904,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1772366,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1771335,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1766310,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1765289,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1760492,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1756275,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1751109,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1749423,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1749397,
                "content": [
                    {
                        "username": "angeldimitrov",
                        "content": "Why is this question up when the negative ratings for it far outweigh the positives? Waste of time..."
                    },
                    {
                        "username": "taichi_tiger",
                        "content": "input s = \"-91283472332\"\\nmy output is 0,\\nbut expected is -2147483648\\nwhy? How to explain the expected output?"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because it is out of Integer bounds, your output must be  - (2^31).  (which is the lowerBound of Integer range)"
                    },
                    {
                        "username": "user0586c",
                        "content": "The description is very ambiguous and too long for what it should say. A lot of stuff are unclear and I had to reverse engineer your solution before getting started on it. And even so, I\\'m not 100% sure I got it right.\\n\\nWhat does the 2nd bullet from the Note section even means? To parse the string until the end even if you found your answer? For me, in english, it makes no sense.\\n\\nBased on what I know so far for this exercise and written in hopefully a good english grammar, the following is, in my opinion, a shorter, concise and much better description:\\n\\nImplement a function that receives a string of characters as an input. You\\'re checking if the very first prefix of the very first group of characters (aka s.split()[0]) has an integer in it. Ignore any leading whitespaces from the start of the string. Check if the first character is either \"-\" or \"+\" to know the sign of the integer you\\'re about to read. Consider that \"+\" is implied even if it\\'s not read. The next characters should be the integer you need to clamp inside a 32bit signed integer and return to the output. If you read any other character than a digit, the processing should end and you should return the integer you processed so far.\\n\\nOther examples:\\n\"      -a 42\" -> 0\\n\"      -42a 41\" -> -42\\n\" +42 55\" -> 42\\n\\n[Constraints here]\\n\\nA problem shouldn\\'t be difficult because it\\'s written in a poor form. Please work on making yourself understood in a much cleaner and concise form. And also, to make sure I\\'m not misunderstood, never make your description so short under the guidance of Kevin\\'s \"Why waste time say lot word when few word do trick\". Find a balance."
                    },
                    {
                        "username": "hail-cali",
                        "content": "I strongly recommended change this problem\\'s name and category\\nand not solve this one\\n\\nthis questions is for rule basic"
                    },
                    {
                        "username": "shalingupta",
                        "content": "Why \"+-12\" is 0 and not -12"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@ogun14](/ogun14) \"+\" or \"-\" should be first character\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "oguntosee",
                        "content": "Because when you get sign character ( \\'-\\' or \\'+\\') , you will break the loop (reading characters of given string) when you read a non-digit character."
                    },
                    {
                        "username": "Yunfei_Z",
                        "content": "s =\"words and 987\"\\nOutput=987\\nExpected=0\\nwhy?\\n"
                    },
                    {
                        "username": "matlau",
                        "content": "Input \"+-12\"\\nMy output -12\\nExpected output 0\\n\\nRequirement:\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. \\n\\nThis type of edge case where sign cannot be repeated should be declare clearly\\n\\n"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "[@matlau](/matlau) \"+\" or \"-\" should be first character\\nIn your case, \"-\" is at 2nd position so its invalid and the Loop end with \"+\" therefore it returns 0"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "\"Check if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'.\"\\n\\nThat is *one* character.\\n\\nNext:\\n\"Read in next the characters until the next non-digit character or the end of the input is reached. \"\\n\\n\\nYou already read in \"+\". The next character is \"-\", a non-digit character.\\n\\nNo further explanation should have been needed. You simply misunderstood the instructions."
                    },
                    {
                        "username": "Envoy49",
                        "content": "Too many stupid  requirements like \"+-12\", who the hell wrote this test???\\nI am honestly sick of considering all edge cases and adding more and more ugly code.\\nEnough"
                    },
                    {
                        "username": "patilgaurir",
                        "content": "It is not passing testcase although the condition is met . The answer should be 987.\\n\\nInput\\ns =\\n\"words and 987\"\\n136 / 1083 testcases passed\\nOutput\\n987\\nExpected\\n0\\n"
                    },
                    {
                        "username": "muhammadmoiz0087",
                        "content": "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nMeans, if you got a non-digit in the starting return 0"
                    },
                    {
                        "username": "mikelai0981",
                        "content": "\"words and 987\"\\nmy outout: 987\\nExpected: 0\\n???????????????????? WTF???????\\nhow the frick its wrong"
                    },
                    {
                        "username": "FXCastells",
                        "content": "\"w\" is not a digit, a space, a minus or plus sign, therefore the result is 0. It is quite clear in the problem that the number cannot start with any other than those characters. "
                    }
                ]
            },
            {
                "id": 1748026,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1745650,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1743524,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1740634,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1739379,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1739251,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1738486,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1737705,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1734582,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1734579,
                "content": [
                    {
                        "username": "Dilipkumar_1",
                        "content": "what is wrong with my  code ? i am getting number format exception.\n\nclass Solution {\n    public int myAtoi(String s){\n        String s1;\n        s.replaceAll(\"\\\\s\",\"\");\n        int i;\n        for(i=0;i<s.length();i++){\n            if(s.charAt(i)=='-' || s.charAt(i)=='+' ) continue;\n            else if(Character.isDigit(s.charAt(i))) continue;\n            else break;\n        }\n        s1=s.substring(0,i);\n        int n=Integer.parseInt(s1); //number format exception\n        return n \n    }\n}"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "To ensure better replies, format your code."
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I am glad i am not the only one who is angry at this problem.\\n\\n"
                    },
                    {
                        "username": "kunal-gohrani",
                        "content": "too too many edge cases are there and its really frustrating solving one after the other"
                    },
                    {
                        "username": "TamiraaS",
                        "content": "Input \"words and 987\" \\nMy output is 987 \\nExpected output 0\\nwhy why why am i missing something."
                    },
                    {
                        "username": "CodeMarik",
                        "content": "That was one of the nastiest questions I have ever had. I have looked up on the solutions and yes, there are nice answers for this question. The core problem is that there are hundreds of edge cases that were not clear in the description, so this led to lot's reworks to shape the solution for every edge case, which resulted in long code that became inefficient. If I have had similar question on an interview I would consider jumping from the window."
                    },
                    {
                        "username": "ahmust",
                        "content": "s = \"words and 987\"\\noutput = 987\\nexpected = 0\\n\\nHow ?"
                    },
                    {
                        "username": "amanchavhan7",
                        "content": "what we basically need to do is convert the given algorithm(ques) into code.\\nso just read the question again carefully . "
                    },
                    {
                        "username": "derec0614",
                        "content": "I must say, these test cases are a little misleading"
                    },
                    {
                        "username": "dasher57",
                        "content": "\n\nint myAtoi(string s) {\n     int num=0;\n    stringstream dool(s);\n      dool>>num;\n     return num;\n }"
                    },
                    {
                        "username": "dasher57",
                        "content": "just two lines of code with inbuilt function.\nint myAtoi(string s) {\n     int num=stoi(s);\n return num;\n     }"
                    }
                ]
            },
            {
                "id": 1733839,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1733497,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1733093,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1731872,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1727181,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1725897,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1725289,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1723812,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1723587,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1722862,
                "content": [
                    {
                        "username": "sandip1805",
                        "content": "Description is not given in proper language which is easy to understand. but what I figured out is, we need 3 steps\\n1) Iterate on string and remove white leading space\\n2) check with if condition about + or - sign, no iteration, just one character check after 1\\'st iteration of whitespace removal\\n3) again iterate on remaining character till it\\'s non digit & finally compare result with Integer 32 bit range and return."
                    },
                    {
                        "username": "Swas_",
                        "content": "Easy way of thinking (Python): Ignore the leading white spaces and check white spaces are in the beginning len(text) == 0. Next check for the sign \\'+\\' or \\'-\\', if the sign once assigned cannot be reassigned i.e counter == 0, and also the len(text) == 0 (no signs in between is considered), if the element is a number append it to the text to make the number, else break from the loop.\\n\\n#code\\n\\nclass Solution:\\n    def myAtoi(self, s: str) -> int:\\n\\n        text = \\'\\'\\n        sign = 1\\n        counter = 0\\n\\n        for i in s:\\n            # check blank spaces at the beginning or not\\n            if i == \\' \\' and len(text) == 0 and counter == 0:\\n                pass\\n\\n            # If - minus comes first then ignore + and future\\n            # occurences of -\\n            elif i == \\'-\\' and len(text) == 0 and counter == 0 :\\n                sign = -1\\n                counter = counter + 1\\n\\n            # if + comes first consider it ignore the - and future     \\n            # occurences of +\\n            elif i == \\'+\\' and len(text) == 0  and counter == 0 :\\n                counter = counter + 1\\n                \\n            # make the text if it is a number\\n            elif ord(i) in range(48,58):\\n                text = text + i\\n\\n            else:\\n                break\\n\\n        # check the range of the integer before returning\\n        if len(text) != 0:\\n\\n            if int(text)*sign <= -2**31:\\n                return -2**31\\n\\n            elif int(text)*sign >= 2**31 -1:\\n                return  2**31 -1\\n\\n            else:\\n                return int(text)*sign\\n        else:\\n            return 0\\n"
                    },
                    {
                        "username": "ashleysu859",
                        "content": "I\\'m incredibly confused by the expected output... why is \"-91283472332\" expected to output -2147483648 as opposed to just -91283472332...?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Because that number is bigger than 32 bits. As it\\'s a negative number, the expected result is the largest negative number that a 32-bit integer can hold, which is the given expected output. "
                    },
                    {
                        "username": "kunalpy3",
                        "content": "\"+-12\"  --> 0\\nThis test case is not covered"
                    },
                    {
                        "username": "MichaelSel",
                        "content": "Not a medium. It\\'s a fussy, and has lots of edge cases to take care of, but it\\'s definitely an easy question.  "
                    },
                    {
                        "username": "VictorKoch",
                        "content": "This \"simple\" task is torture. But for some reason, I felt happy after completing this problem."
                    },
                    {
                        "username": "Anmol_1710",
                        "content": "That\\'s hands down the most poorly made question with test cases. I mean like seriously my code fails at this test case INPUT = \"words and 987\" my output = 987 expected output = 0 . WTF?????"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "I've posted my own revised the instructions here:\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/\n\nyou failed at step three:—\n1. Read in and ignore any leading whitespace.\n2. Check if the next character is '-' or '+'.\n3. Read in next the characters until the next non-digit character or the end of the input is reached.\n\nAs soon as you get to step 3, with your given input:—\n\n INPUT = \"words and 987\" \n\n— the char \"w\" is a non-digit character and thus fails that step.\n\n1. No leading whitespace — DONE\n2. No +/- char — DONE\n3. Read in the next chars until a non-digit char… — FAILED.\n\n\n\n"
                    },
                    {
                        "username": "tareqcse12",
                        "content": "One case that I have failed \\n\"+0 123\""
                    },
                    {
                        "username": "openXource",
                        "content": "var myAtoi = function(s) {\\n    if(s.length >= 0 && s.length <= 200){ \\n    let s_splitted = s.match(/^[\\\\s+\\\\d-\\\\s]+/);\\n    return s_splitted * 1;    \\n    }\\n};\\n\\nI tried to solve this problem by using regex to eliminate all chars which don\\'t belong to numeric string.\\nBut somehow my algorithm got stuck at testcase 850.\\nThe console shows wrong answer: \\n\\nInput:\\ns =\\n\"-91283472332\"\\n\\nOutput:\\n-91283472332\\n\\nExpected:\\n-2147483648\\n\\nAnyone understand why does the console\\'s showing this problem? \\nAny help will be appreciated"
                    },
                    {
                        "username": "openXource",
                        "content": "Thanks [@Garrett Smith](/dhtmlkitchen) for pointing out the flaw. gonna be working on it ASAP :)"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "[@dhtmlkitchen](/dhtmlkitchen) Also, that regexp will match on \" 3- \", which is not a valid number for this requirement."
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "You need to 32-bit clamp the input.\\n\\nhttps://leetcode.com/problems/string-to-integer-atoi/solutions/2908697/instructions-explained-fast-javascript-with-closure-regexp-video/"
                    },
                    {
                        "username": "sinaezaar",
                        "content": "this one was one the most annoying question that I\\'ve ever seen just because the test cases "
                    }
                ]
            },
            {
                "id": 1722003,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1719512,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1719430,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1718749,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1718366,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1717388,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1715879,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1714673,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1708043,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1706945,
                "content": [
                    {
                        "username": "Zelda_Galadriel",
                        "content": "Edge cases drove me nuts and bloated my code."
                    },
                    {
                        "username": "sonulohani",
                        "content": "finally able to pass all the test cases after submitting so many times.\\nProblem statement should have been clearer."
                    },
                    {
                        "username": "mejoopsta",
                        "content": "input: \"-91283472332\"\\n\\nWhen I run my code in leetcode, I get output -91283472332\\nIn pycharm the same code returns -2147483648\\nWhat am I doing wrong?\\n\\n `class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        accepted = \"-0123456789\"\\n        newstr = \"\"\\n        for letter in s:\\n            if letter in accepted or letter.isspace():\\n                newstr =  newstr + letter\\n            elif newstr != \\'\\': \\n                if int(newstr) > (pow(2,31)-1):\\n                    return pow(2,31)-1\\n                elif int(newstr) < ((-1)*pow(2,31)):\\n                    return (-1)*pow(2,31)\\n                else: return int(newstr)\\n            else: return 0\\n        return int(newstr)`\\n"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "this is not a good problem, a ton of edge cases whose qualifications aren\\'t listed at all, I just had to figure it out and guess what the creator meant. 95% of my issues with this problem could be solved  by just. explaining what we\\'re supposed to do better."
                    },
                    {
                        "username": "mr_satyendra_mishra",
                        "content": "[@LeetCode](/LeetCode)\\nplease check your testcases "
                    },
                    {
                        "username": "user0327pw",
                        "content": "Might be the first problem on Leetcode that I complain about. There are a bunch of edge cases that don\\'t really make sense. For example, how does this equal 0?\\n\\n```\\ns =\\n\"+-12\"\\n```\\n\\n"
                    },
                    {
                        "username": "dhtmlkitchen",
                        "content": "After reading in +, read in characters until you encounter the first non-digit character.\\n\\nThe first non-digit character is the -."
                    },
                    {
                        "username": "kfu0115",
                        "content": "There is so many thing wrong about the description and the solution. Based on the problem description, the answer for this \\n\"\"00000-42a1234\" should be -42 instead of 0 isn\\'t it?\\nWe get rid of the leading 0s. Then we read a sign, and after the sign we have two digits of non character. So We get -42. Why would the expected answer be 0?"
                    },
                    {
                        "username": "FXCastells",
                        "content": "Your logic doesn\\'t make a lot of sense... since when can you put a minus sign in between the leading zeros and the other digits? If these were leading zeros of 42, it would be written like \"-0000042\", but this is not the case. This is number 0 with some leading zeros \"00000\" and then extra characters that have to be discarded. In any case, if you follow the description correctly, you get 0, not -42. "
                    },
                    {
                        "username": "Thomae",
                        "content": "\"words and 987\"\\nexpected output = 0\\n\\nme: ...hmm."
                    },
                    {
                        "username": "randomxmove",
                        "content": "Convert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\n\\nthis is meh. Expected output contradicts documentation :v"
                    },
                    {
                        "username": "bhanureddy2010",
                        "content": "\"00000-42a1234\" should return 0? NOT -42? WHY?????"
                    },
                    {
                        "username": "rushill2",
                        "content": "Bug in leetcode server. Ran this code for the test case \"-91283472332\". When I step through I get the right answer, when I submit I get -2147483648\n\ncode \n```\n class Solution:\n    def myAtoi(self, s: str) -> int:\n        negative = False\n        res = \"\"\n        for c in s:\n            if c == ' ':\n                continue\n\n            if c.isalpha():\n                break\n\n            if c == '-':\n                negative = True\n\n            if c.isnumeric():\n                res += c\n        if len(res)!= 0:\n            if negative:\n                return int('-'+res)\n            else:\n                return int(res)\n\n        return 0\n```\n\n"
                    }
                ]
            },
            {
                "id": 1703058,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1702987,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1702370,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1698743,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1698018,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1695991,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1688464,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1686170,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1679537,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            },
            {
                "id": 1671235,
                "content": [
                    {
                        "username": "tree4553",
                        "content": "Input\\ns = \"words and 987\"\\nOutput\\n987\\nExpected\\n0\\n\\nStdout\\n[\\'words\\', \\'and\\', \\'987\\']\\n987\\n\\nWhy i have to return 0 rather 987 ???"
                    },
                    {
                        "username": "mobileben",
                        "content": "When ingesting characters, characters permissible before digits are \\' \\'(whitespace) and \\'-\\' or \\'+\\'. Once whitespace is trimmed and a single sign character is ingested (not mandatory to have), then it must be digits. In this case, there is no whitespace, there isn\\'t a sign, so there must be digits. But when it is expecting digits, it will read \\'w\\' and return 0"
                    },
                    {
                        "username": "kailasrathod",
                        "content": "Error \\njava.lang.StringIndexOutOfBoundsException: String index out of range: 0\\n  at line 48, java.base/java.lang.StringLatin1.charAt\\n  at line 1512, java.base/java.lang.String.charAt\\n  at line 5, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main"
                    },
                    {
                        "username": "Henrique_Lima",
                        "content": "Hey guys someone can help from this problem.\\nthe testcase input `\"words and 987\"` but output expected is `0`\\n  how it\\'s work if  the values expected would are `987`. right?\\nbecause in practice there is `int` value exists!."
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0 because of the rules."
                    },
                    {
                        "username": "luongchithanh21",
                        "content": "over 1k test cases, this is not for human :)"
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "What should happen when having such a String `\"with words -1000001\" ` ?\\nshould the code suppose to break or ignore the letters like it does for the whitespaces?"
                    },
                    {
                        "username": "mobileben",
                        "content": "I answered this above. It should return 0."
                    },
                    {
                        "username": "juniorwagueu",
                        "content": "Hello can someone tells me why I get this runtime error?\\nUsing my IDE when testing my code everything works fine. But on LeetCode compiler no.\\nBelow are the steps I used to implement my code:\\n- I count the characters ignoring the whitespaces\\n- Then create a new String object storing those characters\\n- After that I check if there is any leading zeros if yes I remove them and create a new String object to save the new substring\\n- And at the end I check if there is any whitespaces or non number within that substring\\nLike I said earlier this work with IDE. \\nI guess my algorithm is really slow and might use a lot of memory.\\n\\nI would like to have any tips/hints from you guys to have a better code.\\n\\n```\\njava.lang.NumberFormatException: For input string: \"\"\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 678, java.base/java.lang.Integer.parseInt\\n  at line 786, java.base/java.lang.Integer.parseInt\\n  at line 53, Solution.myAtoi\\n  at line 54, __DriverSolution__.__helper__\\n  at line 84, __Driver__.main\\n```\\r"
                    },
                    {
                        "username": "mlmsamliew",
                        "content": "This is a horrible question because of the sheer number of edge cases. The description gave 3 sample inputs, but I found there are additionally another FOUR different edge cases! \\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Odiann",
                        "content": "Bruce Lee attacked himself after attempting this question!!!!"
                    },
                    {
                        "username": "shamanthshetty51",
                        "content": "for \"words and 987\" expected answer 0. its ok, problem is good but test cases are not solvable."
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-string-to-integer-problem-solution.html)"
                    }
                ]
            }
        ]
    },
    {
        "title": "Convert Sorted Array to Binary Search Tree",
        "question_content": "<p>Given an integer array <code>nums</code> where the elements are sorted in <strong>ascending order</strong>, convert <em>it to a </em><span data-keyword=\"height-balanced\"><strong><em>height-balanced</em></strong></span> <em>binary search tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg\" style=\"width: 302px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> nums = [-10,-3,0,5,9]\n<strong>Output:</strong> [0,-3,9,-10,null,5]\n<strong>Explanation:</strong> [0,-10,5,null,-3,null,9] is also accepted:\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg\" style=\"width: 302px; height: 222px;\" />\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/18/btree.jpg\" style=\"width: 342px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> nums = [1,3]\n<strong>Output:</strong> [3,1]\n<strong>Explanation:</strong> [1,null,3] and [3,1] are both height-balanced BSTs.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in a <strong>strictly increasing</strong> order.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 2406277,
                "title": "python-easily-understood-faster-than-86-less-than-83-recursion",
                "content": "**Appreciate if you could upvote this solution**\\n\\nMethod: `recursion`\\n\\nSince `nums` is a sorted list, the middle element `nums[len(nums)//2]` must be the root node of `nums`.\\nThus, after setting the middle element be the root, finding the middle element in the left subarry `nums[:len(nums)//2]` and right subarry `nums[len(nums)//2 + 1 : ]`\\n\\nFor example, `nums = [0, 1, 2, 3, 4, 5, 6, 7]`\\n\\n![image](https://assets.leetcode.com/users/images/9b668608-b437-47d4-8816-8dfe9dbdd318_1660126464.7137046.png)\\n\\n\\n\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        total_nums = len(nums)\\n        if not total_nums:\\n            return None\\n\\n        mid_node = total_nums // 2\\n        return TreeNode(\\n            nums[mid_node], \\n            self.sortedArrayToBST(nums[:mid_node]), self.sortedArrayToBST(nums[mid_node + 1 :])\\n        )\\n```\\n\\nTime Complexity: `O(n log n)`\\nSpace Complexity: `O(n)`\\n<br/>",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        total_nums = len(nums)\\n        if not total_nums:\\n            return None\\n\\n        mid_node = total_nums // 2\\n        return TreeNode(\\n            nums[mid_node], \\n            self.sortedArrayToBST(nums[:mid_node]), self.sortedArrayToBST(nums[mid_node + 1 :])\\n        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35220,
                "title": "my-accepted-java-solution",
                "content": "Hi everyone, this is my accepted recursive Java solution. I get overflow problems at first because I didn't use mid - 1 and mid + 1 as the bound. Hope this helps :)\\n\\n    public TreeNode sortedArrayToBST(int[] num) {\\n        if (num.length == 0) {\\n            return null;\\n        }\\n        TreeNode head = helper(num, 0, num.length - 1);\\n        return head;\\n    }\\n    \\n    public TreeNode helper(int[] num, int low, int high) {\\n        if (low > high) { // Done\\n            return null;\\n        }\\n        int mid = (low + high) / 2;\\n        TreeNode node = new TreeNode(num[mid]);\\n        node.left = helper(num, low, mid - 1);\\n        node.right = helper(num, mid + 1, high);\\n        return node;\\n    }",
                "solutionTags": [],
                "code": "Hi everyone, this is my accepted recursive Java solution. I get overflow problems at first because I didn't use mid - 1 and mid + 1 as the bound. Hope this helps :)\\n\\n    public TreeNode sortedArrayToBST(int[] num) {\\n        if (num.length == 0) {\\n            return null;\\n        }\\n        TreeNode head = helper(num, 0, num.length - 1);\\n        return head;\\n    }\\n    \\n    public TreeNode helper(int[] num, int low, int high) {\\n        if (low > high) { // Done\\n            return null;\\n        }\\n        int mid = (low + high) / 2;\\n        TreeNode node = new TreeNode(num[mid]);\\n        node.left = helper(num, low, mid - 1);\\n        node.right = helper(num, mid + 1, high);\\n        return node;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 35223,
                "title": "an-easy-python-solution",
                "content": "The idea is to find the root first, then recursively build each left and right subtree\\n\\n    # Definition for a  binary tree node\\n    # class TreeNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    class Solution:\\n        # @param num, a list of integers\\n        # @return a tree node\\n        # 12:37\\n        def sortedArrayToBST(self, num):\\n            if not num:\\n                return None\\n    \\n            mid = len(num) // 2\\n    \\n            root = TreeNode(num[mid])\\n            root.left = self.sortedArrayToBST(num[:mid])\\n            root.right = self.sortedArrayToBST(num[mid+1:])\\n    \\n            return root",
                "solutionTags": [
                    "Python"
                ],
                "code": "The idea is to find the root first, then recursively build each left and right subtree\\n\\n    # Definition for a  binary tree node\\n    # class TreeNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    class Solution:\\n        # @param num, a list of integers\\n        # @return a tree node\\n        # 12:37\\n        def sortedArrayToBST(self, num):\\n            if not num:\\n                return None\\n    \\n            mid = len(num) // 2\\n    \\n            root = TreeNode(num[mid])\\n            root.left = self.sortedArrayToBST(num[:mid])\\n            root.right = self.sortedArrayToBST(num[mid+1:])\\n    \\n            return root",
                "codeTag": "Java"
            },
            {
                "id": 35246,
                "title": "accepted-c-recursive-solution-within-a-single-method",
                "content": "Recursively call the **sortedArrayToBST()** method providing new vector for each call to construct left and right children: \\n\\n    class Solution {\\n    public:\\n        TreeNode *sortedArrayToBST(vector<int> &num) {\\n            if(num.size() == 0) return NULL;\\n            if(num.size() == 1)\\n            {\\n                return new TreeNode(num[0]);\\n            }\\n            \\n            int middle = num.size()/2;\\n            TreeNode* root = new TreeNode(num[middle]);\\n            \\n            vector<int> leftInts(num.begin(), num.begin()+middle);\\n            vector<int> rightInts(num.begin()+middle+1, num.end());\\n            \\n            root->left = sortedArrayToBST(leftInts);\\n            root->right = sortedArrayToBST(rightInts);\\n            \\n            return root;\\n        }\\n    };",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "class Solution {\\n    public:\\n        TreeNode *sortedArrayToBST(vector<int> &num) {\\n            if(num.size() == 0) return NULL;\\n            if(num.size() == 1)\\n            {\\n                return new TreeNode(num[0]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 35224,
                "title": "python-optimal-solution",
                "content": "For a sorted array, the left half will be in the left subtree, middle value as the root, right half in the right subtree. This holds true for every node:\\n\\n`[1, 2, 3, 4, 5, 6, 7]` -> left: `[1, 2, 3]`, root: `4`, right: `[5, 6, 7]`\\n`[1, 2, 3]` -> left: `[1]`, root: `2`, right: `[3]`\\n`[5, 6, 7]` -> left: `[5]`, root: `6`, right: `[7]`\\n\\nMany of the approaches here suggest slicing an array recursively and passing them. However, slicing the array is expensive. It is better to pass the left and right bounds into recursive calls instead.\\n\\n**\\uD83D\\uDCAF Check out https://www.techinterviewhandbook.org for more tips and tricks by me to ace your coding interview \\uD83D\\uDCAF**\\n\\n```\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        # Time: O(n)\\n        # Space: O(n) in the case of skewed binary tree.\\n        def convert(left, right):\\n            if left > right:\\n                return None\\n            mid = (left + right) // 2\\n            node = TreeNode(nums[mid])\\n            node.left = convert(left, mid - 1)\\n            node.right = convert(mid + 1, right)\\n            return node\\n        return convert(0, len(nums) - 1)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        # Time: O(n)\\n        # Space: O(n) in the case of skewed binary tree.\\n        def convert(left, right):\\n            if left > right:\\n                return None\\n            mid = (left + right) // 2\\n            node = TreeNode(nums[mid])\\n            node.left = convert(left, mid - 1)\\n            node.right = convert(mid + 1, right)\\n            return node\\n        return convert(0, len(nums) - 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2404676,
                "title": "java-solution-recursion-0ms-100-faster-beginner-friendly",
                "content": "**If you really found my solution helpful please upvote it, as it motivates me to post such kind of codes and help the coding community, if you have some queries or some improvements please feel free to comment and share your views.**\\n```\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateBST(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode CreateBST(int nums[], int l, int r) {\\n        if (l > r) { // Base Condition or Recursion Stoping Condition\\n            return null;\\n        }\\n        // so basically in this question we have to convert sorted array to height\\n        // balanced tree\\n        // so if we directly create tree in given sorted order it will become linked\\n        // list\\n        // so we have to take middle element as head value such it will become height\\n        // balanced tree\\n        int mid = l + (r - l) / 2; // this is the formula to find mid value\\n        TreeNode root = new TreeNode(nums[mid]); // mid value or median\\n        root.left = CreateBST(nums, l, mid - 1); // assign the value for left of subtree that is l to mid -1 for given\\n                                                 // array\\n        root.right = CreateBST(nums, mid + 1, r); // assign the value for right go subtree that is mid+1 to r for given\\n                                                  // array\\n        return root;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateBST(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode CreateBST(int nums[], int l, int r) {\\n        if (l > r) { // Base Condition or Recursion Stoping Condition\\n            return null;\\n        }\\n        // so basically in this question we have to convert sorted array to height\\n        // balanced tree\\n        // so if we directly create tree in given sorted order it will become linked\\n        // list\\n        // so we have to take middle element as head value such it will become height\\n        // balanced tree\\n        int mid = l + (r - l) / 2; // this is the formula to find mid value\\n        TreeNode root = new TreeNode(nums[mid]); // mid value or median\\n        root.left = CreateBST(nums, l, mid - 1); // assign the value for left of subtree that is l to mid -1 for given\\n                                                 // array\\n        root.right = CreateBST(nums, mid + 1, r); // assign the value for right go subtree that is mid+1 to r for given\\n                                                  // array\\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35218,
                "title": "java-iterative-solution",
                "content": "I came up with the recursion solution first and tried to translate it into an iterative solution. It is very similar to doing a tree inorder traversal, I use three stacks -  nodeStack stores the node I am going to process next, and  **leftIndexStack** and **rightIndexStack** store the range where this node need to read from the **nums**.\\n\\n    public class Solution {\\n        \\n        public TreeNode sortedArrayToBST(int[] nums) {\\n            \\n            int len = nums.length;\\n            if ( len == 0 ) { return null; }\\n            \\n            // 0 as a placeholder\\n            TreeNode head = new TreeNode(0); \\n            \\n            Deque<TreeNode> nodeStack       = new LinkedList<TreeNode>() {{ push(head);  }};\\n            Deque<Integer>  leftIndexStack  = new LinkedList<Integer>()  {{ push(0);     }};\\n            Deque<Integer>  rightIndexStack = new LinkedList<Integer>()  {{ push(len-1); }};\\n            \\n            while ( !nodeStack.isEmpty() ) {\\n                TreeNode currNode = nodeStack.pop();\\n                int left  = leftIndexStack.pop();\\n                int right = rightIndexStack.pop();\\n                int mid   = left + (right-left)/2; // avoid overflow\\n                currNode.val = nums[mid];\\n                if ( left <= mid-1 ) {\\n                    currNode.left = new TreeNode(0);  \\n                    nodeStack.push(currNode.left);\\n                    leftIndexStack.push(left);\\n                    rightIndexStack.push(mid-1);\\n                }\\n                if ( mid+1 <= right ) {\\n                    currNode.right = new TreeNode(0);\\n                    nodeStack.push(currNode.right);\\n                    leftIndexStack.push(mid+1);\\n                    rightIndexStack.push(right);\\n                }\\n            }\\n            return head;\\n        }\\n    \\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        \\n        public TreeNode sortedArrayToBST(int[] nums) {\\n            \\n            int len = nums.length;\\n            if ( len == 0 ) { return null; }",
                "codeTag": "Java"
            },
            {
                "id": 35242,
                "title": "16-ms-c-solution",
                "content": "\\n    class Solution {\\n        TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end){\\n            if(end<=start) return NULL; \\n            int midIdx=(end+start)/2;\\n            TreeNode* root=new TreeNode(nums[midIdx]);\\n            root->left=sortedArrayToBST(nums, start, midIdx);\\n            root->right=sortedArrayToBST(nums, midIdx+1,end);\\n            return root;\\n        }\\n    public:\\n        TreeNode* sortedArrayToBST(vector<int>& nums) {\\n            return sortedArrayToBST(nums, 0,nums.size());\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n        TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end){\\n            if(end<=start) return NULL; \\n            int midIdx=(end+start)/2;\\n            TreeNode* root=new TreeNode(nums[midIdx]);\\n            root->left=sortedArrayToBST(nums, start, midIdx);\\n            root->right=sortedArrayToBST(nums, midIdx+1,end);\\n            return root;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1363430,
                "title": "python-easy-dfs-clear-explain-clean-concise",
                "content": "**Idea**\\n- In a **height-balanced BST**:\\n\\t- All elements in the left subtree are less than `root.val`.\\n\\t- All elements in the right subtree are greater than `root.val`.\\n\\t- The left subtree is a height-balanced BST.\\n\\t- The right subtree is a height-balanced BST.\\n\\t- The difference between the height of the left subtree and the height of the right subtree is at most 1.\\n- We need to build BST so that it\\'s a **height balanced BST**:\\n\\t- So we choose `nums[mid]` as the value for our `root`\\n\\t- Then divide arrays into 2 halfs:\\n\\t\\t- One half from `[left..mid-1]` for building the left subtree.\\n\\t\\t- Other half from `[mid+1..right]` for building the right subtree. \\n\\t- Repeat the recursion util we\\'ve completed build BST from all elements in `nums` array.\\n- Since this problem is quite easy, now **I challenge you to solve this problem** instead [109. Convert Sorted List to Binary Search Tree](https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/)\\n\\n```python\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def dfs(left, right):\\n            if left > right: return None\\n            mid = (left + right) // 2\\n            root = TreeNode(nums[mid])\\n            root.left = dfs(left, mid - 1)\\n            root.right = dfs(mid+1, right)\\n            return root\\n        \\n        return dfs(0, len(nums) - 1)\\n```\\n\\n**Complexity**\\n- Time: `O(N)`\\n- Extra Space (without counting output as space): `O(logN)`",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def dfs(left, right):\\n            if left > right: return None\\n            mid = (left + right) // 2\\n            root = TreeNode(nums[mid])\\n            root.left = dfs(left, mid - 1)\\n            root.right = dfs(mid+1, right)\\n            return root\\n        \\n        return dfs(0, len(nums) - 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 264853,
                "title": "python-3-recursive-o-n-solution-beats-82",
                "content": "A lot of the Python solutions use slices to split the array; however, it takes O(n) to slice, making the entire algorithm O(n logn). Therefore, we create a helper function to pass in the bounds of the array instead, making it O(n):\\n```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n\\treturn self.helper(nums, 0, len(nums))\\n\\ndef helper(self, nums, lower, upper):\\n\\tif lower == upper:\\n\\t\\treturn None\\n\\n\\tmid = (lower + upper) // 2\\n\\tnode = TreeNode(nums[mid])\\n\\tnode.left = self.helper(nums, lower, mid)\\n\\tnode.right = self.helper(nums, mid+1, upper)\\n\\n\\treturn node\\n```\\n\\nPlease note the `if lower == upper: return None` statement -- since we are passing in bounds, `nums` will never be `None`. Therefore, we check if the lower and upper bounds are the same for our base case.",
                "solutionTags": [],
                "code": "```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n\\treturn self.helper(nums, 0, len(nums))\\n\\ndef helper(self, nums, lower, upper):\\n\\tif lower == upper:\\n\\t\\treturn None\\n\\n\\tmid = (lower + upper) // 2\\n\\tnode = TreeNode(nums[mid])\\n\\tnode.left = self.helper(nums, lower, mid)\\n\\tnode.right = self.helper(nums, mid+1, upper)\\n\\n\\treturn node\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 605644,
                "title": "easy-to-understand-faster-than-98-recursive-simple-python-solution",
                "content": "```\\n    def recursive(self, nums):\\n        def rec(nums, start, end):\\n            if start <= end:\\n                mid = (start + end) // 2\\n                node = TreeNode(nums[mid])\\n                node.left = rec(nums, start, mid - 1)\\n                node.right = rec(nums, mid + 1, end)\\n                return node\\n        return rec(nums, 0, len(nums) - 1)\\n```\\n\\n**I hope that you\\'ve found the solution useful.**\\n*In that case, please do upvote and encourage me to on my quest to document all leetcode problems\\uD83D\\uDE03*\\nPS: Search for **mrmagician** tag in the discussion, if I have solved it, You will find it there\\uD83D\\uDE38",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n    def recursive(self, nums):\\n        def rec(nums, start, end):\\n            if start <= end:\\n                mid = (start + end) // 2\\n                node = TreeNode(nums[mid])\\n                node.left = rec(nums, start, mid - 1)\\n                node.right = rec(nums, mid + 1, end)\\n                return node\\n        return rec(nums, 0, len(nums) - 1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 35252,
                "title": "intuitive-javascript-solution",
                "content": "```\\nvar sortedArrayToBST = function(nums) {\\n    if (!nums.length) return null;\\n    \\n    const mid = Math.floor(nums.length / 2);\\n    const root = new TreeNode(nums[mid]);\\n    \\n    // subtrees are BSTs as well\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid + 1));\\n    \\n    return root;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n    if (!nums.length) return null;\\n    \\n    const mid = Math.floor(nums.length / 2);\\n    const root = new TreeNode(nums[mid]);\\n    \\n    // subtrees are BSTs as well\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid + 1));\\n    \\n    return root;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2428167,
                "title": "easy-0-ms-100-fully-explained-java-c-python-js-c-python3",
                "content": "We need to keep track of two things:\\n\\t**1. Any node should have smaller elements as left children and vice versa for right children... \\n\\t2. The BST should be Height Balanced...**\\nNote, A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one...\\n# **Java Solution:**\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Convert Sorted Array to Binary Search Tree.\\nMemory Usage: 43 MB, less than 82.54% of Java online submissions for Convert Sorted Array to Binary Search Tree.\\n```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        // Base condition...\\n        if (nums.length == 0)\\n\\t\\t\\treturn null;\\n        // Call the function recursively...\\n\\t\\treturn sortedArrayToBST(nums, 0, nums.length - 1);\\n\\t}\\n    // Create another function which will convert any particular range of given nums array...\\n    // & return its corresponding BST root node....\\n\\tpublic TreeNode sortedArrayToBST(int[] nums, int beg, int end) {\\n        // If beg > end, return NULL, as we receive a wrong range...\\n\\t\\tif (beg > end)\\n\\t\\t\\treturn null;\\n        // set the middle node...\\n\\t\\tint mid = (beg + end) / 2;\\n        // Initialise root node with value same as nums[mid]...\\n\\t\\tTreeNode root = new TreeNode(nums[mid]);\\n        // Assign left subtrees as the same function called on left subranges...\\n\\t\\troot.left = sortedArrayToBST(nums, beg, mid - 1);\\n        // Assign right subtrees as the same function called on right subranges...\\n\\t\\troot.right = sortedArrayToBST(nums, mid + 1, end);\\n        // Return the root node...\\n\\t\\treturn root;\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\nRuntime: 5 ms, faster than 89.56% of C++ online submissions for Convert Sorted Array to Binary Search Tree.\\nMemory Usage: 13.1 MB, less than 87.25% of C++ online submissions for Convert Sorted Array to Binary Search Tree.\\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        // Base condition...\\n        if (nums.size() == 0)\\n\\t\\t\\treturn NULL;\\n        // Call the function recursively...\\n\\t\\treturn sortedArrayToBST(nums, 0, nums.size() - 1);\\n    }\\n    // Create another function which will convert any particular range of given nums array...\\n    // & return its corresponding BST root node....\\n\\tTreeNode* sortedArrayToBST(vector<int>& nums, int beg, int end) {\\n        // If beg > end, return NULL, as we receive a wrong range...\\n\\t\\tif (beg > end)\\n\\t\\t\\treturn NULL;\\n        // If beg == end, return a new node having value same as nums[beg]... \\n        if(beg == end)\\n            return new TreeNode(nums[beg]);\\n        // set the middle node...\\n\\t\\tint mid = (beg + end) / 2;\\n        // Initialise root node with value same as nums[mid]\\n\\t\\tTreeNode* root = new TreeNode(nums[mid]);\\n        // Assign left subtrees as the same function called on left subranges...\\n\\t\\troot->left = sortedArrayToBST(nums, beg, mid - 1);\\n        // Assign right subtrees as the same function called on right subranges...\\n\\t\\troot->right = sortedArrayToBST(nums, mid + 1, end);\\n        // Return the root node\\n\\t\\treturn root;\\n    }\\n};\\n```\\n\\n# **Python Solution:**\\n```\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        # Base condition...\\n        if len(nums) == 0:\\n            return None\\n        # set the middle node...\\n        mid = len(nums)//2\\n        # Initialise root node with value same as nums[mid]\\n        root = TreeNode(nums[mid])\\n        # Assign left subtrees as the same function called on left subranges...\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        # Assign right subtrees as the same function called on right subranges...\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        # Return the root node...\\n        return root\\n```\\n        \\n# **JavaScript Solution:**\\n```\\nvar sortedArrayToBST = function(nums) {\\n    // Call the function recursively...\\n\\treturn ConvToBST(nums, 0, nums.length - 1);\\n}\\n// Create a function which will convert any particular range of given nums array...\\n// & return its corresponding BST root node....\\nvar ConvToBST = function(nums, beg, end) {\\n    // If beg > end, return NULL, as we receive a wrong range...\\n\\tif (beg > end)\\n\\t\\treturn null;\\n    // set the middle node...\\n\\tvar mid = Math.ceil((beg + end) / 2);\\n    // Initialise root node with value same as nums[mid]...\\n\\tvar root = new TreeNode(nums[mid]);\\n    // Assign left subtrees as the same function called on left subranges...\\n\\troot.left = ConvToBST(nums, beg, mid - 1);\\n    // Assign right subtrees as the same function called on right subranges...\\n\\troot.right = ConvToBST(nums, mid + 1, end);\\n    // Return the root node...\\n\\treturn root;\\n};\\n```\\n\\n# **C Language:**\\n```\\nstruct TreeNode* ConvToBST(int *nums, int beg, int end){\\n    if(end < beg)\\n        return NULL ;\\n    int mid = (beg + end)/2 ;\\n    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n    root->val = nums[mid];\\n    root->left = ConvToBST(nums, beg, mid-1);\\n    root->right = ConvToBST(nums, mid+1, end);\\n    return root;\\n}\\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\\n    if(numsSize <= 0)\\n        return NULL;\\n    else\\n        return ConvToBST(nums, 0, numsSize-1);\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        # Base condition...\\n        if len(nums) == 0:\\n            return None\\n        # set the middle node...\\n        mid = len(nums)//2\\n        # Initialise root node with value same as nums[mid]\\n        root = TreeNode(nums[mid])\\n        # Assign left subtrees as the same function called on left subranges...\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        # Assign right subtrees as the same function called on right subranges...\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        # Return the root node...\\n        return root\\n```\\n**I am working hard for you guys...\\nPlease upvote if you find any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        // Base condition...\\n        if (nums.length == 0)\\n\\t\\t\\treturn null;\\n        // Call the function recursively...\\n\\t\\treturn sortedArrayToBST(nums, 0, nums.length - 1);\\n\\t}\\n    // Create another function which will convert any particular range of given nums array...\\n    // & return its corresponding BST root node....\\n\\tpublic TreeNode sortedArrayToBST(int[] nums, int beg, int end) {\\n        // If beg > end, return NULL, as we receive a wrong range...\\n\\t\\tif (beg > end)\\n\\t\\t\\treturn null;\\n        // set the middle node...\\n\\t\\tint mid = (beg + end) / 2;\\n        // Initialise root node with value same as nums[mid]...\\n\\t\\tTreeNode root = new TreeNode(nums[mid]);\\n        // Assign left subtrees as the same function called on left subranges...\\n\\t\\troot.left = sortedArrayToBST(nums, beg, mid - 1);\\n        // Assign right subtrees as the same function called on right subranges...\\n\\t\\troot.right = sortedArrayToBST(nums, mid + 1, end);\\n        // Return the root node...\\n\\t\\treturn root;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        // Base condition...\\n        if (nums.size() == 0)\\n\\t\\t\\treturn NULL;\\n        // Call the function recursively...\\n\\t\\treturn sortedArrayToBST(nums, 0, nums.size() - 1);\\n    }\\n    // Create another function which will convert any particular range of given nums array...\\n    // & return its corresponding BST root node....\\n\\tTreeNode* sortedArrayToBST(vector<int>& nums, int beg, int end) {\\n        // If beg > end, return NULL, as we receive a wrong range...\\n\\t\\tif (beg > end)\\n\\t\\t\\treturn NULL;\\n        // If beg == end, return a new node having value same as nums[beg]... \\n        if(beg == end)\\n            return new TreeNode(nums[beg]);\\n        // set the middle node...\\n\\t\\tint mid = (beg + end) / 2;\\n        // Initialise root node with value same as nums[mid]\\n\\t\\tTreeNode* root = new TreeNode(nums[mid]);\\n        // Assign left subtrees as the same function called on left subranges...\\n\\t\\troot->left = sortedArrayToBST(nums, beg, mid - 1);\\n        // Assign right subtrees as the same function called on right subranges...\\n\\t\\troot->right = sortedArrayToBST(nums, mid + 1, end);\\n        // Return the root node\\n\\t\\treturn root;\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        # Base condition...\\n        if len(nums) == 0:\\n            return None\\n        # set the middle node...\\n        mid = len(nums)//2\\n        # Initialise root node with value same as nums[mid]\\n        root = TreeNode(nums[mid])\\n        # Assign left subtrees as the same function called on left subranges...\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        # Assign right subtrees as the same function called on right subranges...\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        # Return the root node...\\n        return root\\n```\n```\\nvar sortedArrayToBST = function(nums) {\\n    // Call the function recursively...\\n\\treturn ConvToBST(nums, 0, nums.length - 1);\\n}\\n// Create a function which will convert any particular range of given nums array...\\n// & return its corresponding BST root node....\\nvar ConvToBST = function(nums, beg, end) {\\n    // If beg > end, return NULL, as we receive a wrong range...\\n\\tif (beg > end)\\n\\t\\treturn null;\\n    // set the middle node...\\n\\tvar mid = Math.ceil((beg + end) / 2);\\n    // Initialise root node with value same as nums[mid]...\\n\\tvar root = new TreeNode(nums[mid]);\\n    // Assign left subtrees as the same function called on left subranges...\\n\\troot.left = ConvToBST(nums, beg, mid - 1);\\n    // Assign right subtrees as the same function called on right subranges...\\n\\troot.right = ConvToBST(nums, mid + 1, end);\\n    // Return the root node...\\n\\treturn root;\\n};\\n```\n```\\nstruct TreeNode* ConvToBST(int *nums, int beg, int end){\\n    if(end < beg)\\n        return NULL ;\\n    int mid = (beg + end)/2 ;\\n    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n    root->val = nums[mid];\\n    root->left = ConvToBST(nums, beg, mid-1);\\n    root->right = ConvToBST(nums, mid+1, end);\\n    return root;\\n}\\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\\n    if(numsSize <= 0)\\n        return NULL;\\n    else\\n        return ConvToBST(nums, 0, numsSize-1);\\n}\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        # Base condition...\\n        if len(nums) == 0:\\n            return None\\n        # set the middle node...\\n        mid = len(nums)//2\\n        # Initialise root node with value same as nums[mid]\\n        root = TreeNode(nums[mid])\\n        # Assign left subtrees as the same function called on left subranges...\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        # Assign right subtrees as the same function called on right subranges...\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        # Return the root node...\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 724002,
                "title": "c-nice-solution-binary-search",
                "content": "***Runtime: 12 ms, faster than 97.09% of C++ online submissions for Convert Sorted Array to Binary Search Tree.\\nMemory Usage: 20.6 MB, less than 60.89% of C++ online submissions for Convert Sorted Array to Binary Search Tree.***\\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return helper(nums, 0, nums.size()-1);\\n    }\\n    TreeNode* helper(vector<int>& nums, int low,int high){\\n        if(low<=high){\\n            int mid = low + (high-low)/2;\\n            TreeNode* root = new TreeNode(nums[mid]);\\n            root->left = helper(nums, low, mid-1);\\n            root->right = helper(nums, mid+1, high);\\n            return root;\\n        }\\n        return NULL;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return helper(nums, 0, nums.size()-1);\\n    }\\n    TreeNode* helper(vector<int>& nums, int low,int high){\\n        if(low<=high){\\n            int mid = low + (high-low)/2;\\n            TreeNode* root = new TreeNode(nums[mid]);\\n            root->left = helper(nums, low, mid-1);\\n            root->right = helper(nums, mid+1, high);\\n            return root;\\n        }\\n        return NULL;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35440,
                "title": "iterative-java-solution-using-stack",
                "content": "Try to solve it iteratively, need an extra class to store:\\n\\n1. current TreeNode's coverage [low, up]\\n\\n2. current TreeNode entity\\n\\n()\\n\\n    public class Solution {\\n        class Node{ // need another class to store multi information\\n            int low, up; // means the TreeNode covers [low, up], low and up are all index\\n            TreeNode t;\\n            Node(int l, int p, TreeNode node){\\n                low = l;\\n                up = p;\\n                t = node;\\n            }\\n        }\\n        public TreeNode sortedArrayToBST(int[] num) {\\n            if(num == null || num.length == 0) return null;\\n            Stack<Node> stack = new Stack<Node>();\\n            // initialize\\n            TreeNode root = new TreeNode(num[(num.length-1)/2]);\\n            Node rootNode = new Node(0,num.length-1,root);\\n            stack.push(rootNode);\\n            // iteration\\n            while(!stack.isEmpty()){\\n                Node node = stack.pop();\\n                int middle = (node.low+node.up)/2; // cut half for [low, up]\\n                \\n                // [low, middle-1]\\n                if(middle-1 >= node.low){\\n                    TreeNode leftnode = new TreeNode(num[(middle-1+node.low)/2]);\\n                    node.t.left = leftnode;\\n                    Node left = new Node(node.low, middle-1, leftnode);\\n                    stack.push(left);\\n                }\\n                // [middle+1, up]\\n                if(middle+1 <= node.up){\\n                    TreeNode rightnode = new TreeNode(num[(middle+1+node.up)/2]);\\n                    node.t.right = rightnode;\\n                    Node right = new Node(middle+1, node.up, rightnode);\\n                    stack.push(right);\\n                }\\n            }\\n            return root;\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "class Solution {\\n        class Node{ // need another class to store multi information\\n            int low, up; // means the TreeNode covers [low, up], low and up are all index\\n            TreeNode t;\\n            Node(int l, int p, TreeNode node){\\n                low = l;\\n                up = p;\\n                t = node;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 35388,
                "title": "very-simple-java-solution",
                "content": "    public class Solution {\\n      public TreeNode sortedArrayToBST(int[] nums) {\\n        return helper(nums, 0, nums.length-1);\\n      }\\n    \\n      private TreeNode helper(int[] nums, int l, int r){\\n        if (l>r) return null;\\n        if (l==r) return new TreeNode(nums[l]);\\n        int mid = (l+r)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = helper(nums, l, mid-1);\\n        root.right = helper(nums, mid+1, r);\\n        return root;\\n      }\\n    }",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n      public TreeNode sortedArrayToBST(int[] nums) {\\n        return helper(nums, 0, nums.length-1);\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 301769,
                "title": "iterative-and-recursive-python-solutions-with-detailed-explanations",
                "content": "### Summary\\nWe know that the input list is sorted.  At a high level, we know the root of our binary search tree will be the center value in that sorted list, so the left and right subtrees will have the same number of nodes (within 1 node).  Then, we somehow want the left branch to be properly composed with the values to the left of the center value, and the right branch properly composed with values to the right of the center value; this ensures that we have a root, and the left and right branches will be evenly sized from the sorted property.\\n\\n### Recursive\\nThe recursive solution to this problem is essentially direct translation of the aforementioned \"definition\" of the root and the left and right branches.  The base case would be no values in nums, so the function implicitly returns None.  With 2-3 nodes, the root is set, then the left and right children would be either a node or None (the result of the recursive call with one or zero values in nums).  Then, the recursive call on a non-None child would then have no more values in nums, because the children of the original root used up the remaining values in the original nums, so their children would be None.\\n\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        # continue while this branch has values to process\\n        if len(nums) > 0:\\n            # create node from center point of nums\\n            i = len(nums) // 2\\n            root = TreeNode(nums[i])\\n            \\n            # the left node becomes the recursive sorted BST of the items\\n            # to the left of the center point, and the right node becomes\\n            # the recursive sorted BST of the items to right of center point\\n            root.left = self.sortedArrayToBST(nums[:i])\\n            root.right = self.sortedArrayToBST(nums[i+1:])\\n            \\n            # return the root, whose children will be properly set\\n            return root\\n        \\n        # notice that Python functions implicitly return None, so children\\n        # that call sortedArrayToBST recursively but with no values remaining\\n        # will be set to None, as desired\\n\\'\\'\\'\\'\\'\\'\\n```\\n\\n### Iterative\\nThe recursive solution is very natural.  To reformat it as iterative, the overall idea is to create a stack that keeps track of tuples of information of child nodes we need to create, and each tuple keeps track of the childs parent and the side of the parent that the child will become.  Because we only push child tuples to the stack after their parents are created, the process will create the children until we reach the base case, whereby that branch has exhausted its corresponding chunk of the original nums.\\n\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        # ensure we have at least the root\\n        if not nums: return None\\n        \\n        # we will be creating a stack where each element is the following tuple:\\n        # (left index of nums, right index of nums, parent node, child side),\\n        # where the left and right indices set the bounds of the values in\\n        # nums the current node considers, and child side refers to which side\\n        # of the parent node that the current node will be set to (more clear below)\\n        \\n        # create the root, which is the \"first parent\"\\n        l, r = 0, len(nums) - 1  # initial left and right bounds of nums\\n        i = (l + r) // 2         # center of the bounds of nums we view\\n        root = TreeNode(nums[i]) \\n        \\n        # create a stack of the first two children values; split bounds of\\n        # parent\\'s left and right bounds in half using the center position,\\n        # then remember the side of the parent (root) to set that child to\\n        stack = [(l, i-1, root, \\'l\\'),\\n                 (i+1, r, root, \\'r\\')]\\n        \\n        # while there are more children to create\\n        while stack:\\n            # extract the information for a child\\n            l, r, parent, side = stack.pop()\\n            \\n            # only create the child if it looks at a valid left and right bound\\n            # in nums, so the left index <= right index; this ensures we stop\\n            # adding children after we\\'ve exhausted the valid positions in nums\\n            if l <= r:\\n                i = (l + r) // 2 # center position of bounds\\n                \\n                # create the child node from the center position,\\n                # and set the corresponding child side in the parent\\n                child = TreeNode(nums[i])\\n                if side == \\'l\\': parent.left = child\\n                else:           parent.right = child\\n                    \\n                # add the information for the two children of the current child,\\n                # splitting the left and right bounds of the current child in half\\n                # using the center position, then remember the side of the child\\n                # (which becomes the parent for its children) to set next children\\n                stack.append((l, i - 1, child, \\'l\\'))\\n                stack.append((i + 1, r, child, \\'r\\'))\\n        \\n        return root\\n```\\n\\nThe iterative solution is a bit more convoluted than the natural recursive solution, but I think it\\'s a great exercise to write your solutions both iteratively and recursively.",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        # continue while this branch has values to process\\n        if len(nums) > 0:\\n            # create node from center point of nums\\n            i = len(nums) // 2\\n            root = TreeNode(nums[i])\\n            \\n            # the left node becomes the recursive sorted BST of the items\\n            # to the left of the center point, and the right node becomes\\n            # the recursive sorted BST of the items to right of center point\\n            root.left = self.sortedArrayToBST(nums[:i])\\n            root.right = self.sortedArrayToBST(nums[i+1:])\\n            \\n            # return the root, whose children will be properly set\\n            return root\\n        \\n        # notice that Python functions implicitly return None, so children\\n        # that call sortedArrayToBST recursively but with no values remaining\\n        # will be set to None, as desired\\n\\'\\'\\'\\'\\'\\'\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        # ensure we have at least the root\\n        if not nums: return None\\n        \\n        # we will be creating a stack where each element is the following tuple:\\n        # (left index of nums, right index of nums, parent node, child side),\\n        # where the left and right indices set the bounds of the values in\\n        # nums the current node considers, and child side refers to which side\\n        # of the parent node that the current node will be set to (more clear below)\\n        \\n        # create the root, which is the \"first parent\"\\n        l, r = 0, len(nums) - 1  # initial left and right bounds of nums\\n        i = (l + r) // 2         # center of the bounds of nums we view\\n        root = TreeNode(nums[i]) \\n        \\n        # create a stack of the first two children values; split bounds of\\n        # parent\\'s left and right bounds in half using the center position,\\n        # then remember the side of the parent (root) to set that child to\\n        stack = [(l, i-1, root, \\'l\\'),\\n                 (i+1, r, root, \\'r\\')]\\n        \\n        # while there are more children to create\\n        while stack:\\n            # extract the information for a child\\n            l, r, parent, side = stack.pop()\\n            \\n            # only create the child if it looks at a valid left and right bound\\n            # in nums, so the left index <= right index; this ensures we stop\\n            # adding children after we\\'ve exhausted the valid positions in nums\\n            if l <= r:\\n                i = (l + r) // 2 # center position of bounds\\n                \\n                # create the child node from the center position,\\n                # and set the corresponding child side in the parent\\n                child = TreeNode(nums[i])\\n                if side == \\'l\\': parent.left = child\\n                else:           parent.right = child\\n                    \\n                # add the information for the two children of the current child,\\n                # splitting the left and right bounds of the current child in half\\n                # using the center position, then remember the side of the child\\n                # (which becomes the parent for its children) to set next children\\n                stack.append((l, i - 1, child, \\'l\\'))\\n                stack.append((i + 1, r, child, \\'r\\'))\\n        \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2404555,
                "title": "java-easy-solution-with-explanation-100-faster-code",
                "content": "\\tPLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n    //Runtime: 0 ms, faster than 100.00% of Java online submissions for Convert Sorted Array to Binary Search Tree.\\n    //Memory Usage: 43.8 MB, less than 47.11% of Java online submissions for Convert Sorted Array to Binary Search Tree.\\n    //recursive solution\\n    //DFS: pre-order\\n    //Time: O(N) ; Space:  O(logN)\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return helper_binaryBuilder(nums,0, nums.length-1) ;\\n    }\\n\\n    private TreeNode helper_binaryBuilder(int[] nums, int left, int right){\\n        if (left > right) return null;\\n        int m = (right + left) / 2;\\n        TreeNode root = new TreeNode(nums[m]);\\n        root.left = helper_binaryBuilder(nums, left, m - 1);\\n        root.right = helper_binaryBuilder(nums, m + 1, right);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    //Runtime: 0 ms, faster than 100.00% of Java online submissions for Convert Sorted Array to Binary Search Tree.\\n    //Memory Usage: 43.8 MB, less than 47.11% of Java online submissions for Convert Sorted Array to Binary Search Tree.\\n    //recursive solution\\n    //DFS: pre-order\\n    //Time: O(N) ; Space:  O(logN)\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return helper_binaryBuilder(nums,0, nums.length-1) ;\\n    }\\n\\n    private TreeNode helper_binaryBuilder(int[] nums, int left, int right){\\n        if (left > right) return null;\\n        int m = (right + left) / 2;\\n        TreeNode root = new TreeNode(nums[m]);\\n        root.left = helper_binaryBuilder(nums, left, m - 1);\\n        root.right = helper_binaryBuilder(nums, m + 1, right);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1646394,
                "title": "c-binary-search-tree-nice-simple-solution",
                "content": "# Simple recursion soluton \\n-----------------------------------------------\\n**As the question already stated that we have sorted array to form the binary-search-tree**\\n\\n```\\nclass Solution {\\npublic:\\n    TreeNode* convertBST(int left,int right,vector<int>&arr){\\n        if(left>right) return nullptr;\\n        int mid = left+((right-left)/2);\\n        TreeNode * root = new TreeNode(arr[mid]);\\n        root->left = convertBST(left,mid-1,arr);\\n        root->right = convertBST(mid+1,right,arr);\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return convertBST(0,nums.size()-1,nums);\\n    }\\n};\\n```\\n\\n**TC : O(N)**\\n**SC : O(1)**\\n\\n*If you loved this solution then please up vote to motivate me \\uD83D\\uDE00*\\n**:) happy coding**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search",
                    "Tree",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* convertBST(int left,int right,vector<int>&arr){\\n        if(left>right) return nullptr;\\n        int mid = left+((right-left)/2);\\n        TreeNode * root = new TreeNode(arr[mid]);\\n        root->left = convertBST(left,mid-1,arr);\\n        root->right = convertBST(mid+1,right,arr);\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return convertBST(0,nums.size()-1,nums);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 421038,
                "title": "recursive-simple-fast-javascript-solution",
                "content": "```\\nvar sortedArrayToBST = function(nums, start=0, end = nums.length-1) {\\n    if(start<=end){\\n        let mid = Math.floor((start+end)/2);\\n        // console.log(mid, end)\\n        let root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums, start, mid-1);\\n        root.right = sortedArrayToBST(nums, mid+1, end);\\n        return root;\\n    }\\n    return null;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums, start=0, end = nums.length-1) {\\n    if(start<=end){\\n        let mid = Math.floor((start+end)/2);\\n        // console.log(mid, end)\\n        let root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums, start, mid-1);\\n        root.right = sortedArrayToBST(nums, mid+1, end);\\n        return root;\\n    }\\n    return null;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2408062,
                "title": "javascript-simple-recursive",
                "content": "```\\nvar sortedArrayToBST = function(nums) {\\n    if(!nums.length) return null;\\n    let mid = Math.floor(nums.length/2);\\n    let node = new TreeNode(nums[mid]);\\n    node.left = sortedArrayToBST(nums.slice(0,mid));\\n    node.right = sortedArrayToBST(nums.slice(mid+1));\\n    return node;\\n};\\n```\\nConsider upvote if you find it helpful",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n    if(!nums.length) return null;\\n    let mid = Math.floor(nums.length/2);\\n    let node = new TreeNode(nums[mid]);\\n    node.left = sortedArrayToBST(nums.slice(0,mid));\\n    node.right = sortedArrayToBST(nums.slice(mid+1));\\n    return node;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35236,
                "title": "java-recursive-solution",
                "content": "    public class Solution {\\n        public TreeNode sortedArrayToBST(int[] nums) {\\n            if (nums == null || nums.length ==0){\\n                return null;\\n            }\\n            return getTreeNode(nums, 0, nums.length-1);\\n        }\\n        \\n        private TreeNode getTreeNode(int[] nums, int start, int end){\\n            if (start > end){\\n                return null;\\n            }\\n            int middle = start + (end-start)/2;\\n            TreeNode n = new TreeNode(nums[middle]);\\n            n.left = getTreeNode(nums, start, middle-1);\\n            n.right = getTreeNode(nums, middle+1, end);\\n            return n;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public TreeNode sortedArrayToBST(int[] nums) {\\n            if (nums == null || nums.length ==0){\\n                return null;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2404502,
                "title": "python3-3-lines-recursion-w-explanation-t-m-99-83",
                "content": "```\\nclass Solution:         # Here\\'s the plan: \\n                        #   \\u2022 Because it\\'s a sorted array, we can assign the middle element \\n                        #     as the root. (Middle here is index len(nums//2)); the elements \\n                        #     to the left of the root element comprise the left subtree,\\n                        #     and the elements to its right comprise the right\\n                        #     subtree. For example, let:\\n                        #  \\n                        #           nums = [1,4,5,6, _8_, 9,10,11,14] ; len(nums) == 9\\n                        #  \\n                        #     Tthe middle element is nums[9//2] = nums[4]= 8, so the left \\n                        #      subtree is [1,4,5 6] and the right subtree is [9,10,11,14] \\n                        #                         \\n                        #                       ____8____\\n                        #                      /         \\\\\\n                        #             [1,4,_5_,6]        [9,10,_11_,14]\\n                        #  \\n                        #   \\u2022 Next we repeat the process for the subtree of the left and\\n\\t\\t\\t\\t\\t\\t#.    right subtrees:\\n\\n                        #                        ______8______             \\n                        #                     /                \\\\\\n                        #                    5                  11\\n                        #                   / \\\\                /   \\\\\\n                        #      [1,_4_, None]  [6]  [9,_10_, None]   [14]\\n\\n                        #   \\u2022 We continue on recursively until the subtrees are completed.\\n                        #\\n                        #                              __8_____\\n                        #                             /        \\\\\\n                        #                            5         _11\\n                        #                           / \\\\       /   \\\\\\n                        #                          4   6     10    14\\n                        #                         /         /\\n                        #                        1         9\\n\\n    def sortedArrayToBST(self, n: list[int]) -> TreeNode:\\n        if not n: return None                                           # <-- base case: leaf\\n        m = len(n)//2\\n        return TreeNode(n[m],self.sortedArrayToBST(n[:m]),              # <-- left  subtree\\n                             self.sortedArrayToBST(n[m+1:]))            # <-- right subtree",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:         # Here\\'s the plan: \\n                        #   \\u2022 Because it\\'s a sorted array, we can assign the middle element \\n                        #     as the root. (Middle here is index len(nums//2)); the elements \\n                        #     to the left of the root element comprise the left subtree,\\n                        #     and the elements to its right comprise the right\\n                        #     subtree. For example, let:\\n                        #  \\n                        #           nums = [1,4,5,6, _8_, 9,10,11,14] ; len(nums) == 9\\n                        #  \\n                        #     Tthe middle element is nums[9//2] = nums[4]= 8, so the left \\n                        #      subtree is [1,4,5 6] and the right subtree is [9,10,11,14] \\n                        #                         \\n                        #                       ____8____\\n                        #                      /         \\\\\\n                        #             [1,4,_5_,6]        [9,10,_11_,14]\\n                        #  \\n                        #   \\u2022 Next we repeat the process for the subtree of the left and\\n\\t\\t\\t\\t\\t\\t#.    right subtrees:\\n\\n                        #                        ______8______             \\n                        #                     /                \\\\\\n                        #                    5                  11\\n                        #                   / \\\\                /   \\\\\\n                        #      [1,_4_, None]  [6]  [9,_10_, None]   [14]\\n\\n                        #   \\u2022 We continue on recursively until the subtrees are completed.\\n                        #\\n                        #                              __8_____\\n                        #                             /        \\\\\\n                        #                            5         _11\\n                        #                           / \\\\       /   \\\\\\n                        #                          4   6     10    14\\n                        #                         /         /\\n                        #                        1         9\\n\\n    def sortedArrayToBST(self, n: list[int]) -> TreeNode:\\n        if not n: return None                                           # <-- base case: leaf\\n        m = len(n)//2\\n        return TreeNode(n[m],self.sortedArrayToBST(n[:m]),              # <-- left  subtree\\n                             self.sortedArrayToBST(n[m+1:]))            # <-- right subtree",
                "codeTag": "Java"
            },
            {
                "id": 1363450,
                "title": "c-super-simple-recursive-solution-very-short",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* rec(vector<int>& nums, int start, int end) {\\n        if (start >= end) return NULL;\\n        int mid = (start + end) / 2;\\n        TreeNode* node = new TreeNode(nums[mid]);\\n        node->left = rec(nums, start, mid);\\n        node->right = rec(nums, mid+1, end);\\n        return node;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return rec(nums, 0, nums.size());\\n    }\\n};\\n```\\n****\\n**Shorter version - Only 3 Lines!**\\n```\\nclass Solution {\\npublic:\\n    TreeNode* rec(vector<int>& nums, int start, int end) {\\n        if (start >= end) return NULL;\\n        int mid = (start + end) / 2;\\n        return new TreeNode(nums[mid], rec(nums, start, mid), rec(nums, mid+1, end));\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return rec(nums, 0, nums.size());\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* rec(vector<int>& nums, int start, int end) {\\n        if (start >= end) return NULL;\\n        int mid = (start + end) / 2;\\n        TreeNode* node = new TreeNode(nums[mid]);\\n        node->left = rec(nums, start, mid);\\n        node->right = rec(nums, mid+1, end);\\n        return node;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return rec(nums, 0, nums.size());\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* rec(vector<int>& nums, int start, int end) {\\n        if (start >= end) return NULL;\\n        int mid = (start + end) / 2;\\n        return new TreeNode(nums[mid], rec(nums, start, mid), rec(nums, mid+1, end));\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return rec(nums, 0, nums.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 570178,
                "title": "python3-recursive-and-iterative-solution-one-stack-with-detailed-explanations",
                "content": "Please upvote this because I think my iterative solution is much better than what I saw in the top comments.\\n\\n**Recursive solution:** \\nThis is basically the same as the other 200 answers so I won\\'t comment much about it:\\n\\n```\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        return self.sortedArrayToBSTHelper(nums, 0, len(nums) - 1)\\n    def sortedArrayToBSTHelper(self, nums, floor, ceiling):\\n        if floor > ceiling: return None\\n        middleIndex = (floor + ceiling) // 2\\n        n = TreeNode(nums[middleIndex])\\n        n.left = self.sortedArrayToBSTHelper(nums, floor, middleIndex - 1)\\n        n.right = self.sortedArrayToBSTHelper(nums, middleIndex + 1, ceiling)\\n        return n\\n```\\n\\n**Iterative Solution:**\\n\\n```\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums: return None\\n        \\n        # Each item in the stack holds: floor, ceiling, parent and parent\\'s direction.\\n        stack = [(0, len(nums) - 1, None, None)]\\n        root = None\\n        while stack:\\n            floor, ceiling, parent, direction = stack.pop()\\n            middleIndex = (floor + ceiling) // 2\\n            n = TreeNode(nums[middleIndex])\\n            \\n            # Add the root node. parent should only ever be null in this one case.\\n            if not parent:\\n                root = n\\n            else:\\n                if direction == \\'l\\':\\n                    parent.left = n\\n                elif direction == \\'r\\':\\n                    parent.right = n\\n            \\n            # Add the next items to the stack, as necessary. Add right first.\\n\\t\\t\\t# Similar to the recursive approach, both floor and ceiling should never cross.\\n            if middleIndex + 1 <= ceiling:\\n                stack.append((middleIndex + 1, ceiling, n, \\'r\\'))\\n            if floor <= middleIndex - 1:\\n                stack.append((floor, middleIndex - 1, n, \\'l\\'))\\n        return root\\n```\\n\\nHere\\'s how I approached this.\\n\\nFirst, let\\'s talk about the stack. Each item in the stack is to hold four items.\\na) b) The floor and ceiling: exact same functionaliy to the recursive approach above. They\\'re used as array indices to get the middle value.\\nc) The parent node\\nd) The \\'direction\\'. Two options here: either \\'l\\' to indicate left or \\'r\\' to mean right. These are just arbitrary letters I chose.\\n\\nSo the first item in the stack is the root node. The floor and ceiling will be the first and last index in the list respectively, and its parent and direction are None since the root can\\'t have a parent.\\n\\nNow let\\'s talk about the loop.\\n\\n1) I pop the item at the top of the stack. Using the floor and ceiling indices, I get the middleIndex and make a new node of nums[middleIndex]. \\n2) If the item I just popped doesn\\'t have a parent, that means this is a root. This should only ever happen once and that\\'s at the very beginning when the loop pops the first item out. For all other cases, it have a parent.\\n3) If a parent exists, then a direction should be provided. The direction basically says, \\'Ok so I just made a new node n from 1) above and I have a reference to a parent node. Is n the left or right child of the parent node\\'? If the direction is \\'l\\' it\\'s the left, otherwise it\\'s the right.\\n4) Now, we need to add items to the stack. We have two if statements here that check if a left or right child is even possible. If so, add to the stack a new item with the appropriate indices for floor and ceiling, the parent will be the node we made from 1) so n, and the direction will be either \\'l\\' or \\'r\\' depending on the indices provided for the floor and ceiling. Please note that I added right first then left. I did that on purpose because this is a stack, so by adding right then left, the left is what will be at the top. Really it doesn\\'t matter here for this question, but the goal is to mimick DFS pre-order traversal, and that means current, left then right.\\n\\nI hope this helps.\\n\\nIf you have questions about the code, comment or dm me. If you have questions about life, idk.\\n\\n",
                "solutionTags": [
                    "Python3",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        return self.sortedArrayToBSTHelper(nums, 0, len(nums) - 1)\\n    def sortedArrayToBSTHelper(self, nums, floor, ceiling):\\n        if floor > ceiling: return None\\n        middleIndex = (floor + ceiling) // 2\\n        n = TreeNode(nums[middleIndex])\\n        n.left = self.sortedArrayToBSTHelper(nums, floor, middleIndex - 1)\\n        n.right = self.sortedArrayToBSTHelper(nums, middleIndex + 1, ceiling)\\n        return n\\n```\n```\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums: return None\\n        \\n        # Each item in the stack holds: floor, ceiling, parent and parent\\'s direction.\\n        stack = [(0, len(nums) - 1, None, None)]\\n        root = None\\n        while stack:\\n            floor, ceiling, parent, direction = stack.pop()\\n            middleIndex = (floor + ceiling) // 2\\n            n = TreeNode(nums[middleIndex])\\n            \\n            # Add the root node. parent should only ever be null in this one case.\\n            if not parent:\\n                root = n\\n            else:\\n                if direction == \\'l\\':\\n                    parent.left = n\\n                elif direction == \\'r\\':\\n                    parent.right = n\\n            \\n            # Add the next items to the stack, as necessary. Add right first.\\n\\t\\t\\t# Similar to the recursive approach, both floor and ceiling should never cross.\\n            if middleIndex + 1 <= ceiling:\\n                stack.append((middleIndex + 1, ceiling, n, \\'r\\'))\\n            if floor <= middleIndex - 1:\\n                stack.append((floor, middleIndex - 1, n, \\'l\\'))\\n        return root\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 381574,
                "title": "javascript",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {number[]} nums\\n * @return {TreeNode}\\n */\\nvar sortedArrayToBST = function(nums) {\\n    if (nums == null || !nums.length) {\\n        return null;\\n    }\\n    \\n    let mid = Math.floor(nums.length / 2);\\n    const node = new TreeNode(nums[mid]);\\n    node.left = sortedArrayToBST(nums.slice(0, mid));\\n    node.right = sortedArrayToBST(nums.slice(mid + 1, nums.length))\\n    return node;        \\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {number[]} nums\\n * @return {TreeNode}\\n */\\nvar sortedArrayToBST = function(nums) {\\n    if (nums == null || !nums.length) {\\n        return null;\\n    }\\n    \\n    let mid = Math.floor(nums.length / 2);\\n    const node = new TreeNode(nums[mid]);\\n    node.left = sortedArrayToBST(nums.slice(0, mid));\\n    node.right = sortedArrayToBST(nums.slice(mid + 1, nums.length))\\n    return node;        \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 35427,
                "title": "my-c-solution-with-recursion-7ms",
                "content": "    struct TreeNode* convert(int* nums,int start,int end)\\n    {\\n         if(start > end)\\n              return NULL;\\n         else{\\n             int mid = (start+end)/2;\\n             struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n             node->val = nums[mid];\\n             node->left = convert(nums,start,mid-1);\\n             node->right = convert(nums,mid+1,end);\\n             return node;\\n         }\\n    }\\n \\n\\n    struct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\\n            return convert(nums,0,numsSize-1);\\n    }",
                "solutionTags": [],
                "code": "    struct TreeNode* convert(int* nums,int start,int end)\\n    {\\n         if(start > end)\\n              return NULL;\\n         else{\\n             int mid = (start+end)/2;\\n             struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n             node->val = nums[mid];\\n             node->left = convert(nums,start,mid-1);\\n             node->right = convert(nums,mid+1,end);\\n             return node;\\n         }\\n    }\\n \\n\\n    struct TreeNode* sortedArrayToBST(int* nums, int numsSize) {\\n            return convert(nums,0,numsSize-1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2779783,
                "title": "c-solutions-east-to-solve-0ms-100",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return helper(nums, 0, nums.size()-1);\\n    }\\n    TreeNode* helper(vector<int>& nums, int low,int high){\\n        if(low<=high){\\n            int mid = low + (high-low)/2;\\n            TreeNode* root = new TreeNode(nums[mid]);\\n            root->left = helper(nums, low, mid-1);\\n            root->right = helper(nums, mid+1, high);\\n            return root;\\n        }\\n        return NULL;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return helper(nums, 0, nums.size()-1);\\n    }\\n    TreeNode* helper(vector<int>& nums, int low,int high){\\n        if(low<=high){\\n            int mid = low + (high-low)/2;\\n            TreeNode* root = new TreeNode(nums[mid]);\\n            root->left = helper(nums, low, mid-1);\\n            root->right = helper(nums, mid+1, high);\\n            return root;\\n        }\\n        return NULL;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1363480,
                "title": "python-short-recursion-solution-explained",
                "content": "This problem is the simple version of problem **109**. Convert Sorted List to Binary Search Tree: here what is given not sorted linked list, but sorted array, so we can have access to any element of this array in `O(1)`. So, the idea is straightforward: just divide our array into two almost equal halves on each iteration and attach recursive run for the left part as left subtree and recursive run for the right part as right subtree.\\n\\n#### Complexity\\nTime complexity is `O(n)` time and `O(log n)` memory because of implicit stack of recursion.\\n\\n#### Code\\n```python\\nclass Solution:\\n    def sortedArrayToBST(self, nums):\\n        def helper(beg, end):\\n            if beg > end: return None\\n            mid = (beg + end)//2\\n            root = TreeNode(nums[mid])\\n            root.left = helper(beg, mid - 1)\\n            root.right = helper(mid + 1, end)\\n            return root\\n        \\n        return helper(0, len(nums) - 1)\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```python\\nclass Solution:\\n    def sortedArrayToBST(self, nums):\\n        def helper(beg, end):\\n            if beg > end: return None\\n            mid = (beg + end)//2\\n            root = TreeNode(nums[mid])\\n            root.left = helper(beg, mid - 1)\\n            root.right = helper(mid + 1, end)\\n            return root\\n        \\n        return helper(0, len(nums) - 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 861811,
                "title": "easy-explained-c-solution",
                "content": "**STEP - 1  :** Get the Middle of the sorted array and make it root node.\\n\\n**STEP - 2 :** Recursively do same for left half and right half of the array.\\n* \\t Get the middle of left half array and make it left child of the root created in step 1.\\n*    Get the middle of right half and make it right child of the root created in step 1\\n\\n![image](https://assets.leetcode.com/users/images/bf1b0ab6-d417-4a89-87b6-cbc664b90975_1600930783.3803284.png)\\n\\n\\n\\n```\\nTreeNode* sortedArrayToBST(vector<int>& nums) \\n    {\\n        return buildBST(nums, 0, nums.size()-1);        \\n    }\\n    TreeNode* buildBST(vector<int> &nums, int l,int r)\\n    {\\n        if(l > r)\\n            return NULL;\\n        int mid = (l + r)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left  = buildBST(nums, l, mid-1);\\n        root->right = buildBST(nums, mid+1, r);        \\n        return root;\\n    }\\n```\\t\\n\\n**If you like, please upvote it.**",
                "solutionTags": [],
                "code": "```\\nTreeNode* sortedArrayToBST(vector<int>& nums) \\n    {\\n        return buildBST(nums, 0, nums.size()-1);        \\n    }\\n    TreeNode* buildBST(vector<int> &nums, int l,int r)\\n    {\\n        if(l > r)\\n            return NULL;\\n        int mid = (l + r)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left  = buildBST(nums, l, mid-1);\\n        root->right = buildBST(nums, mid+1, r);        \\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1363643,
                "title": "python3-two-solutions-explained-with-diagrams",
                "content": "## 0. Understanding the Problem\\nWe are given a sorted array, with elements in ascending order.\\n\\nThe goal is to create a height balanced binary search tree. This tree follows the following properties:\\n- The right sub-tree itself is height balanced BST.\\n- The left sub-tree is also height balanced BST.\\n- The heights of right and left trees only differ by 1 **atmost**.\\n\\n![height balanced BST](https://i.imgur.com/yL7hlko.png)\\n\\n*To find if right sub-tree is balanced, we assume the `root.right` node is `root` and check its own sub-trees. We do this recursively. Similarly for the left node to the root.*\\n\\nLet\\'s look at a couple of examples to find some patterns.\\n\\n## 1. Examples\\n![examples](https://i.imgur.com/gx9dJBY.png)\\n\\n**Observation: The middle element is always the root. In case there are two middle elements, either can be the root.**\\n\\n![more complicated example](https://i.imgur.com/y6UHwNx.png)\\n\\n**Observation: After we find the middle element, we can split the tree into two parts, and then solve the problem recursively, for each of the sub-tree.**\\n\\n*Note that this approach works because we always keep the constraint of height-balanced tree in place!*\\n\\n## 2. Code (inefficient)\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        # base case\\n        if not nums: return None\\n        \\n        # getting the mid\\n        mid = len(nums)//2\\n        node = TreeNode(nums[mid])\\n        \\n        # left node is given the responsibility till mid, \\n        # but not including mid\\n        node.left = self.sortedArrayToBST(nums[:mid])\\n        # right node is given the responsibility from mid+1 \\n        # till the end\\n        node.right = self.sortedArrayToBST(nums[mid+1:])\\n        return node\\n```\\n\\nThe space and time complexities are `O(N)` both. However, the above can be made a bit more efficient - by not passing copies of `nums[:mid]` or `nums[mid+1:]`. Instead, we can pass the indices. This will reduce the space complexity.\\n\\n## 3. Code (efficient)\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def recurse(l, r):\\n            # base case, l must always be <= r\\n            # l == r is the case of a leaf node.\\n            if l > r: return None\\n            mid = (l+r)//2\\n            node = TreeNode(nums[mid])\\n            node.left = recurse(l, mid-1)\\n            node.right = recurse(mid+1, r)\\n            return node\\n        # both the indices are inclusive,\\n        # mathematically given by: [0, len(nums)-1]\\n        return recurse(0, len(nums)-1)\\n```\\n\\nIn this case the time complexity is the same, `O(N)`, but the space complexity is now `O(log(N))`. We just need to consider the maximum height of the stack while recursion. This is `log(N)` becasue we are dealing with height-balanced BST!\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        # base case\\n        if not nums: return None\\n        \\n        # getting the mid\\n        mid = len(nums)//2\\n        node = TreeNode(nums[mid])\\n        \\n        # left node is given the responsibility till mid, \\n        # but not including mid\\n        node.left = self.sortedArrayToBST(nums[:mid])\\n        # right node is given the responsibility from mid+1 \\n        # till the end\\n        node.right = self.sortedArrayToBST(nums[mid+1:])\\n        return node\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def recurse(l, r):\\n            # base case, l must always be <= r\\n            # l == r is the case of a leaf node.\\n            if l > r: return None\\n            mid = (l+r)//2\\n            node = TreeNode(nums[mid])\\n            node.left = recurse(l, mid-1)\\n            node.right = recurse(mid+1, r)\\n            return node\\n        # both the indices are inclusive,\\n        # mathematically given by: [0, len(nums)-1]\\n        return recurse(0, len(nums)-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1363462,
                "title": "convert-sorted-array-to-binary-search-tree-easy-recursion",
                "content": "# **APPROACH:**\\nConstructing from sorted array in O(n) time is simpler as we can get the middle element in O(1) time. Following is a simple algorithm where we first find the middle node of list and make it root of the tree to be constructed. .\\n\\n**ALGORITHM:**\\n1) Get the Middle of the array and make it root.\\n2) Recursively do same for left half and right half.\\n\\t\\t  a) Get the middle of left half and make it left child of the root created in step 1.\\n\\t\\t  b) Get the middle of right half and make it right child of the root created in step 1.\\n\\n# **SOLUTION:**\\n`In C++`\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    using it = vector<int>::const_iterator;\\n    TreeNode* convert(it beg, it end) {\\n        if (beg >= end) return nullptr;\\n        \\n        const auto mid = beg + (end - beg)/2;\\n        return new TreeNode(*mid, convert(beg, mid), convert(mid+1, end));\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return convert(nums.cbegin(), nums.cend());\\n    }\\n};\\n```\\n`In Java`\\n```\\npublic TreeNode sortedArrayToBST(int[] nums, int si, int ei) {\\n    if(si > ei)\\n        return null;\\n    int mid = (si + ei + 1) / 2;\\n    TreeNode root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums, si, mid - 1);\\n    root.right = sortedArrayToBST(nums, mid + 1, ei);\\n    return root;\\n}\\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n    return sortedArrayToBST(nums, 0, nums.length - 1);\\n}\\n```\\n**TIME COMPLEXITY: O(N)**",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    using it = vector<int>::const_iterator;\\n    TreeNode* convert(it beg, it end) {\\n        if (beg >= end) return nullptr;\\n        \\n        const auto mid = beg + (end - beg)/2;\\n        return new TreeNode(*mid, convert(beg, mid), convert(mid+1, end));\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return convert(nums.cbegin(), nums.cend());\\n    }\\n};\\n```\n```\\npublic TreeNode sortedArrayToBST(int[] nums, int si, int ei) {\\n    if(si > ei)\\n        return null;\\n    int mid = (si + ei + 1) / 2;\\n    TreeNode root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums, si, mid - 1);\\n    root.right = sortedArrayToBST(nums, mid + 1, ei);\\n    return root;\\n}\\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n    return sortedArrayToBST(nums, 0, nums.length - 1);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3796818,
                "title": "recursion-c-clean-simple-code-explanation",
                "content": "\\n# Method 1\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n class Solution {\\n public:\\n     TreeNode* sortedArrayToBST(vector<int>& nums) {\\n         // We have to create a hight balanced BST\\n         // elements are strictly increasing\\n         if(nums.size()==0)return NULL;\\n         if(nums.size()==1) return new TreeNode(nums[0]);\\n         int middle = nums.size()/2;\\n         TreeNode* root = new TreeNode(nums[middle]);\\n         vector<int> leftsub(nums.begin(), nums.begin()+middle);\\n         vector<int> rightsub(nums.begin()+ middle+1, nums.end());\\n         root->left = sortedArrayToBST(leftsub);\\n         root->right = sortedArrayToBST(rightsub);\\n         return root;\\n     }\\n };\\n```\\n\\n# METHOD 2\\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        // Base condition...\\n        if (nums.size() == 0)\\n\\t\\t\\treturn NULL;\\n        // Call the function recursively...\\n\\t\\treturn sortedArrayToBST(nums, 0, nums.size() - 1);\\n    }\\n    // Create another function which will convert any particular range of given nums array...\\n    // & return its corresponding BST root node....\\n\\tTreeNode* sortedArrayToBST(vector<int>& nums, int beg, int end) {\\n        // If beg > end, return NULL, as we receive a wrong range...\\n\\t\\tif (beg > end)\\n\\t\\t\\treturn NULL;\\n        // If beg == end, return a new node having value same as nums[beg]... \\n        if(beg == end)\\n            return new TreeNode(nums[beg]);\\n        // set the middle node...\\n\\t\\tint mid = (beg + end) / 2;\\n        // Initialise root node with value same as nums[mid]\\n\\t\\tTreeNode* root = new TreeNode(nums[mid]);\\n        // Assign left subtrees as the same function called on left subranges...\\n\\t\\troot->left = sortedArrayToBST(nums, beg, mid - 1);\\n        // Assign right subtrees as the same function called on right subranges...\\n\\t\\troot->right = sortedArrayToBST(nums, mid + 1, end);\\n        // Return the root node\\n\\t\\treturn root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Divide and Conquer",
                    "Tree",
                    "Binary Search Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n class Solution {\\n public:\\n     TreeNode* sortedArrayToBST(vector<int>& nums) {\\n         // We have to create a hight balanced BST\\n         // elements are strictly increasing\\n         if(nums.size()==0)return NULL;\\n         if(nums.size()==1) return new TreeNode(nums[0]);\\n         int middle = nums.size()/2;\\n         TreeNode* root = new TreeNode(nums[middle]);\\n         vector<int> leftsub(nums.begin(), nums.begin()+middle);\\n         vector<int> rightsub(nums.begin()+ middle+1, nums.end());\\n         root->left = sortedArrayToBST(leftsub);\\n         root->right = sortedArrayToBST(rightsub);\\n         return root;\\n     }\\n };\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        // Base condition...\\n        if (nums.size() == 0)\\n\\t\\t\\treturn NULL;\\n        // Call the function recursively...\\n\\t\\treturn sortedArrayToBST(nums, 0, nums.size() - 1);\\n    }\\n    // Create another function which will convert any particular range of given nums array...\\n    // & return its corresponding BST root node....\\n\\tTreeNode* sortedArrayToBST(vector<int>& nums, int beg, int end) {\\n        // If beg > end, return NULL, as we receive a wrong range...\\n\\t\\tif (beg > end)\\n\\t\\t\\treturn NULL;\\n        // If beg == end, return a new node having value same as nums[beg]... \\n        if(beg == end)\\n            return new TreeNode(nums[beg]);\\n        // set the middle node...\\n\\t\\tint mid = (beg + end) / 2;\\n        // Initialise root node with value same as nums[mid]\\n\\t\\tTreeNode* root = new TreeNode(nums[mid]);\\n        // Assign left subtrees as the same function called on left subranges...\\n\\t\\troot->left = sortedArrayToBST(nums, beg, mid - 1);\\n        // Assign right subtrees as the same function called on right subranges...\\n\\t\\troot->right = sortedArrayToBST(nums, mid + 1, end);\\n        // Return the root node\\n\\t\\treturn root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3604958,
                "title": "simple-standard-c-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the approach is to construct a BST by recursively dividing the sorted array into halves. The middle element of each subarray is chosen as the root of the corresponding subtree, ensuring that the left subtree contains smaller elements and the right subtree contains larger elements.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n           return build(nums,0,nums.size()-1);\\n    }\\n     TreeNode* build(vector<int>& nums,int left, int right) {\\n            if(left>right)\\n            return NULL;\\n        int mid = (left+right)/2;\\n        TreeNode* NewNode = new TreeNode(nums[mid]);\\n        NewNode->left = build(nums,left,mid-1);\\n        NewNode->right = build(nums,mid+1,right);\\n        return NewNode;\\n    }\\n};\\n```\\n**Please Upvote if it helped**",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n           return build(nums,0,nums.size()-1);\\n    }\\n     TreeNode* build(vector<int>& nums,int left, int right) {\\n            if(left>right)\\n            return NULL;\\n        int mid = (left+right)/2;\\n        TreeNode* NewNode = new TreeNode(nums[mid]);\\n        NewNode->left = build(nums,left,mid-1);\\n        NewNode->right = build(nums,mid+1,right);\\n        return NewNode;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1928042,
                "title": "100-fastest-swift-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of nums.\\n    //   - space: O(n), where n is the length of nums.\\n\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        helper(nums, 0, nums.count - 1)\\n    }\\n\\n    \\n    private func helper(_ nums: [Int], _ lo: Int, _ hi: Int) -> TreeNode? {\\n        guard lo <= hi else { return nil }\\n\\n        let mid = lo + (hi - lo) / 2\\n\\n        let root = TreeNode(nums[mid])\\n        root.left = helper(nums, lo, mid - 1)\\n        root.right = helper(nums, mid + 1, hi)\\n\\n        return root\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of nums.\\n    //   - space: O(n), where n is the length of nums.\\n\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        helper(nums, 0, nums.count - 1)\\n    }\\n\\n    \\n    private func helper(_ nums: [Int], _ lo: Int, _ hi: Int) -> TreeNode? {\\n        guard lo <= hi else { return nil }\\n\\n        let mid = lo + (hi - lo) / 2\\n\\n        let root = TreeNode(nums[mid])\\n        root.left = helper(nums, lo, mid - 1)\\n        root.right = helper(nums, mid + 1, hi)\\n\\n        return root\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 146204,
                "title": "javascript-accepted-solution",
                "content": "```\\nvar sortedArrayToBST = function(nums) {\\n    if(!nums.length) return null;   \\n    var mid = Math.floor((nums.length)/2);\\n    var root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid+1));\\n    return root;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n    if(!nums.length) return null;   \\n    var mid = Math.floor((nums.length)/2);\\n    var root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid+1));\\n    return root;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1543852,
                "title": "beats-100-easy-clean-code-with-comments",
                "content": "**Please Upvote,it helps a lot**\\n\\n```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return findans(nums,0,nums.length - 1);\\n    }\\n    \\n    private TreeNode findans(int [] nums,int left,int right){\\n        if(right < left ) return null; //base case\\n  \\n        int mid = (left + right) /2;\\n        TreeNode root = new TreeNode(nums[mid]); //make a node and call recursion\\n        \\n       \\n        TreeNode leftSubtree = findans(nums,left,mid - 1);\\n        \\n        TreeNode rightSubtree = findans(nums,mid + 1,right);\\n //after recursion we expect that we have left and right subtree so now join them       \\n         root.left = leftSubtree;\\n         root.right = rightSubtree;\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return findans(nums,0,nums.length - 1);\\n    }\\n    \\n    private TreeNode findans(int [] nums,int left,int right){\\n        if(right < left ) return null; //base case\\n  \\n        int mid = (left + right) /2;\\n        TreeNode root = new TreeNode(nums[mid]); //make a node and call recursion\\n        \\n       \\n        TreeNode leftSubtree = findans(nums,left,mid - 1);\\n        \\n        TreeNode rightSubtree = findans(nums,mid + 1,right);\\n //after recursion we expect that we have left and right subtree so now join them       \\n         root.left = leftSubtree;\\n         root.right = rightSubtree;\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35448,
                "title": "smallest-and-fastest-python-solution-147-ms",
                "content": "    class Solution:\\n\\n        def sortedArrayToBST(self, num):\\n\\n            if not num:\\n                return None\\n\\n            median  = len(num)/2\\n            new_node = TreeNode(num[median])\\n    \\n            new_node.left = self.sortedArrayToBST(num[:median])\\n            new_node.right = self.sortedArrayToBST(num[median+1:])\\n            \\n            return new_node",
                "solutionTags": [],
                "code": "    class Solution:\\n\\n        def sortedArrayToBST(self, num):\\n\\n            if not num:\\n                return None\\n\\n            median  = len(num)/2\\n            new_node = TreeNode(num[median])\\n    \\n            new_node.left = self.sortedArrayToBST(num[:median])\\n            new_node.right = self.sortedArrayToBST(num[median+1:])\\n            \\n            return new_node",
                "codeTag": "Java"
            },
            {
                "id": 2404416,
                "title": "daily-leetcoding-challenge-august-day-10",
                "content": "This problem is the Daily LeetCoding Challenge for August, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 3 approaches in the official solution</summary>\n\n  \n**Approach 1:** Preorder Traversal: Always Choose Left Middle Node as a Root\n\n  \n**Approach 2:** Preorder Traversal: Always Choose Right Middle Node as a Root\n\n  \n**Approach 3:** Preorder Traversal: Choose Random Middle Node as a Root\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 783013,
                "title": "python3-simple-recursive-97-w-explanation",
                "content": "- create a new node with the middle value of the array\\n- for the left child, call the function again - passing the the left half of the array\\n- for the right child, call the function again - passing the right half of the array\\n- important to not include the middle value when passing in these new subarrays\\n- this continues until the subarrays are 0, where we can no longer create any new nodes\\n- once all the children are filled we can return the node\\n```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def traverse(arr):\\n            if not arr: return\\n            m = (len(arr) - 1)//2\\n            node = TreeNode(arr[m])\\n            node.left = traverse(arr[:m])\\n            node.right = traverse(arr[m+1:])\\n            return node\\n        return traverse(nums)\\n```\\n\\nUpdated Solution\\n* Previously, we would splice the array into halves and pass them into the function. However this process is O(k) time to make the subarray and will occupy O(k) time of each stack call - k being the length of the subarray, thus making the algorithm less efficent than it could potentially be. \\n* A solution is to have a left and right pointer that will keep track of the beginning and end of the subarray. This way do not take any additonal time splicing the subarray.\\n* Thanks to akashgkrishnan for pointing out the problem with the previous code.\\n```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def traverse(l, r):\\n            if l > r: return\\n            m = (r + l)//2\\n            node = TreeNode(nums[m])\\n            node.left = traverse(l, m - 1)\\n            node.right = traverse(m + 1, r)\\n            return node\\n        return traverse(0, len(nums) - 1)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def traverse(arr):\\n            if not arr: return\\n            m = (len(arr) - 1)//2\\n            node = TreeNode(arr[m])\\n            node.left = traverse(arr[:m])\\n            node.right = traverse(arr[m+1:])\\n            return node\\n        return traverse(nums)\\n```\n```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def traverse(l, r):\\n            if l > r: return\\n            m = (r + l)//2\\n            node = TreeNode(nums[m])\\n            node.left = traverse(l, m - 1)\\n            node.right = traverse(m + 1, r)\\n            return node\\n        return traverse(0, len(nums) - 1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 616527,
                "title": "c-solution",
                "content": "```\\nDivide and Conquer:-\\n\\nAs the tree is heightbalanced the root will be present at the n/2 location of the nums array where n is the size of the array.\\nSo we can use this base case to build our tree\\n[-10,-3,0,5,9]\\n\\n0 will be the root.\\nThen we pass the left part of the array to root->left and right part of the array to root right and repeat the same procedure.\\n\\n\\n1.    0\\n\\n\\nroot->left = build(nums,l,m-1)\\n\\n|      |\\n|  -10 |\\n|  -3  |\\n|______|\\n\\n2.   0\\n    /\\n  -10\\n    \\\\\\n    -3\\n\\nand we repeat this procedure to get the answer\\n\\n\\n    {\\n        if(l>r)return NULL;\\n        int m=(l+r)/2;\\n        TreeNode* newnode=new TreeNode(nums[m]);\\n        newnode->left=makeBST(nums,l,m-1);\\n        newnode->right=makeBST(nums,m+1,r);\\n        return newnode;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return makeBST(nums,0,nums.size()-1);\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nDivide and Conquer:-\\n\\nAs the tree is heightbalanced the root will be present at the n/2 location of the nums array where n is the size of the array.\\nSo we can use this base case to build our tree\\n[-10,-3,0,5,9]\\n\\n0 will be the root.\\nThen we pass the left part of the array to root->left and right part of the array to root right and repeat the same procedure.\\n\\n\\n1.    0\\n\\n\\nroot->left = build(nums,l,m-1)\\n\\n|      |\\n|  -10 |\\n|  -3  |\\n|______|\\n\\n2.   0\\n    /\\n  -10\\n    \\\\\\n    -3\\n\\nand we repeat this procedure to get the answer\\n\\n\\n    {\\n        if(l>r)return NULL;\\n        int m=(l+r)/2;\\n        TreeNode* newnode=new TreeNode(nums[m]);\\n        newnode->left=makeBST(nums,l,m-1);\\n        newnode->right=makeBST(nums,m+1,r);\\n        return newnode;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return makeBST(nums,0,nums.size()-1);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 344138,
                "title": "go-recursive-solution",
                "content": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\tmedian := len(nums) / 2\\n\\treturn &TreeNode{\\n\\t\\tVal:   nums[median],\\n\\t\\tLeft:  sortedArrayToBST(nums[:median]),\\n\\t\\tRight: sortedArrayToBST(nums[median+1:]),\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\tmedian := len(nums) / 2\\n\\treturn &TreeNode{\\n\\t\\tVal:   nums[median],\\n\\t\\tLeft:  sortedArrayToBST(nums[:median]),\\n\\t\\tRight: sortedArrayToBST(nums[median+1:]),\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 35293,
                "title": "javascript-beats-88-recursive-without-slicing-array",
                "content": "```\\nvar sortedArrayToBST = function(nums) {\\n    if (!nums) {\\n        return null;\\n    }\\n    return helper(nums, 0, nums.length - 1);\\n}\\n\\nvar helper = function(nums, low, high) {\\n    if (low > high) { // Done\\n        return null;\\n    }\\n    var mid = (low + (high - low) / 2)>>0;\\n    var node = new TreeNode(nums[mid]);\\n    node.left = helper(nums, low, mid - 1);\\n    node.right = helper(nums, mid + 1, high);\\n    return node;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n    if (!nums) {\\n        return null;\\n    }\\n    return helper(nums, 0, nums.length - 1);\\n}\\n\\nvar helper = function(nums, low, high) {\\n    if (low > high) { // Done\\n        return null;\\n    }\\n    var mid = (low + (high - low) / 2)>>0;\\n    var node = new TreeNode(nums[mid]);\\n    node.left = helper(nums, low, mid - 1);\\n    node.right = helper(nums, mid + 1, high);\\n    return node;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2406623,
                "title": "c-straightforward-iterative-bfs-and-dfs-and-recursive-solution",
                "content": "**TODO(heder): Insert cute cat meme to ask for up-votes. ;)**\\n\\nUsing a pointer to a ```TreeNode*``` leads to a straight forward iterative solution. These pointers to pointers are later \"patched\" as the sub trees are being consructed.\\n\\n**iterative BFS version**:\\n\\n```\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        typedef vector<int>::const_iterator Iter;\\n        queue<tuple<TreeNode**, Iter, Iter>> q;\\n\\n        TreeNode* ans = nullptr;\\n        q.push({&ans, cbegin(nums), cend(nums)});\\n\\n        while (!empty(q)) {\\n            auto [nptr, b, e] = q.front(); q.pop();\\n\\n            if (b == e) continue;\\n\\n            Iter mid = next(b, distance(b, e) / 2);\\n            *nptr = new TreeNode(*mid);\\n\\n            q.push({&(*nptr)->left, b, mid});\\n            q.push({&(*nptr)->right, mid + 1, e});\\n        }\\n\\n        return ans;\\n    }\\n```\\n\\n**iterative DFS Version**\\n\\nIt doesn\\'t really matter in which order we create the tree, so we can use a ```stack<>``` as well.\\n\\n```\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        typedef vector<int>::const_iterator Iter;\\n        stack<tuple<TreeNode**, Iter, Iter>> st;\\n\\n        TreeNode* ans = nullptr;\\n        st.push({&ans, cbegin(nums), cend(nums)});\\n\\n        while (!empty(st)) {\\n            auto [nptr, b, e] = st.top(); st.pop();\\n\\n            if (b == e) continue;\\n\\n            Iter mid = next(b, distance(b, e) / 2);\\n            *nptr = new TreeNode(*mid);\\n\\n            st.push({&(*nptr)->left, b, mid});\\n            st.push({&(*nptr)->right, mid + 1, e});\\n        }\\n\\n        return ans;\\n    }\\n```\\n\\n**recursive**\\n\\nPersonally I find the recursive version clearer and easier to understand:\\n\\n```\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return sortedArrayToBST(cbegin(nums), cend(nums));\\n    }\\n\\n    template <typename iterator>\\n    TreeNode* sortedArrayToBST(iterator b, iterator e) {\\n        if (b == e) return nullptr;\\n\\n        iterator mid = next(b, distance(b, e) / 2);\\n        return\\n            new TreeNode(\\n                *mid,\\n                sortedArrayToBST(b, mid),\\n                sortedArrayToBST(mid + 1, e));\\n    }\\n```\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**\\n",
                "solutionTags": [
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```TreeNode*```\n```\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        typedef vector<int>::const_iterator Iter;\\n        queue<tuple<TreeNode**, Iter, Iter>> q;\\n\\n        TreeNode* ans = nullptr;\\n        q.push({&ans, cbegin(nums), cend(nums)});\\n\\n        while (!empty(q)) {\\n            auto [nptr, b, e] = q.front(); q.pop();\\n\\n            if (b == e) continue;\\n\\n            Iter mid = next(b, distance(b, e) / 2);\\n            *nptr = new TreeNode(*mid);\\n\\n            q.push({&(*nptr)->left, b, mid});\\n            q.push({&(*nptr)->right, mid + 1, e});\\n        }\\n\\n        return ans;\\n    }\\n```\n```stack<>```\n```\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        typedef vector<int>::const_iterator Iter;\\n        stack<tuple<TreeNode**, Iter, Iter>> st;\\n\\n        TreeNode* ans = nullptr;\\n        st.push({&ans, cbegin(nums), cend(nums)});\\n\\n        while (!empty(st)) {\\n            auto [nptr, b, e] = st.top(); st.pop();\\n\\n            if (b == e) continue;\\n\\n            Iter mid = next(b, distance(b, e) / 2);\\n            *nptr = new TreeNode(*mid);\\n\\n            st.push({&(*nptr)->left, b, mid});\\n            st.push({&(*nptr)->right, mid + 1, e});\\n        }\\n\\n        return ans;\\n    }\\n```\n```\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return sortedArrayToBST(cbegin(nums), cend(nums));\\n    }\\n\\n    template <typename iterator>\\n    TreeNode* sortedArrayToBST(iterator b, iterator e) {\\n        if (b == e) return nullptr;\\n\\n        iterator mid = next(b, distance(b, e) / 2);\\n        return\\n            new TreeNode(\\n                *mid,\\n                sortedArrayToBST(b, mid),\\n                sortedArrayToBST(mid + 1, e));\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2203558,
                "title": "python-easy-and-fast-solution",
                "content": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n \\n        def solve(left, right):\\n            if left > right: return None\\n            m = (left + right)//2\\n            return TreeNode(nums[m], solve(left,m-1), solve(m+1,right))\\n        return solve(0, len(nums)-1)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n \\n        def solve(left, right):\\n            if left > right: return None\\n            m = (left + right)//2\\n            return TreeNode(nums[m], solve(left,m-1), solve(m+1,right))\\n        return solve(0, len(nums)-1)",
                "codeTag": "Java"
            },
            {
                "id": 884471,
                "title": "python-3-recursive-solution-98-faster-66-less-space",
                "content": "If you understand recursion, this solution is not difficult to figure out. I\\'d like to input one thing. Do not worry that `nums[:mid]` or `nums[mid+1:]` might report error as if they are out of the range of a list. They will return an empty list `[]`. But `nums[len(nums)]` will return error if you want to access to an element which is out of the range. Hope this will help Python beginners like myself.\\n\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        \\n        if not nums:\\n            return None\\n        \\n        mid = len(nums)//2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        \\n        if not nums:\\n            return None\\n        \\n        mid = len(nums)//2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35395,
                "title": "iterative-solution-in-python",
                "content": "In case anyone was wondering what an iterative solution looks like in python, here is one. Around 100ms, so apparently not any faster than a recursive solution - probably due to the extra if's needed to make it work. No pointers or references make this somewhat tricky and less efficient than it could be with them.\\n\\n    class Solution(object):    \\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not nums:\\n            return None\\n        lb=0\\n        ub=len(nums)\\n        middle = ub>>1\\n        root = TreeNode(nums[middle])\\n        walker = root\\n        if ub - middle > 1:\\n            rights = [(root,middle+1,ub)]\\n        else:\\n            rights = []\\n        ub=middle\\n        while 1:\\n            diff = ub-lb\\n            if diff:\\n                middle = lb+(diff>>1)\\n                walker.left = TreeNode(nums[middle])\\n                walker = walker.left\\n            elif rights:\\n                walker,lb,ub = rights.pop()\\n                diff = ub-lb\\n                middle = lb+(diff>>1)\\n                walker.right = TreeNode(nums[middle])\\n                walker = walker.right\\n            else:\\n                break\\n            if ub - middle > 1:\\n                rights.append((walker,middle+1,ub))\\n            ub=middle\\n            \\n        return root",
                "solutionTags": [
                    "Python",
                    "Iterator"
                ],
                "code": "In case anyone was wondering what an iterative solution looks like in python, here is one. Around 100ms, so apparently not any faster than a recursive solution - probably due to the extra if's needed to make it work. No pointers or references make this somewhat tricky and less efficient than it could be with them.\\n\\n    class Solution(object):    \\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not nums:\\n            return None\\n        lb=0\\n        ub=len(nums)\\n        middle = ub>>1\\n        root = TreeNode(nums[middle])\\n        walker = root\\n        if ub - middle > 1:\\n            rights = [(root,middle+1,ub)]\\n        else:\\n            rights = []\\n        ub=middle\\n        while 1:\\n            diff = ub-lb\\n            if diff:\\n                middle = lb+(diff>>1)\\n                walker.left = TreeNode(nums[middle])\\n                walker = walker.left\\n            elif rights:\\n                walker,lb,ub = rights.pop()\\n                diff = ub-lb\\n                middle = lb+(diff>>1)\\n                walker.right = TreeNode(nums[middle])\\n                walker = walker.right\\n            else:\\n                break\\n            if ub - middle > 1:\\n                rights.append((walker,middle+1,ub))\\n            ub=middle\\n            \\n        return root",
                "codeTag": "Java"
            },
            {
                "id": 35394,
                "title": "6-lines-java-accepted-solution",
                "content": "\\nThe idea is making the middle element as root and recursively calling the method until the length of the array is zero.\\n\\n    \\n    public class Solution {\\n            public TreeNode sortedArrayToBST(int[] nums) {\\n                if(nums.length==0)return null;\\n                int ptr=nums.length/2;\\n                TreeNode root=new TreeNode(nums[ptr]);\\n                root.left=sortedArrayToBST(Arrays.copyOfRange(nums,0,ptr));\\n                root.right=sortedArrayToBST(Arrays.copyOfRange(nums,ptr+1,nums.length));\\n                return root;\\n            }\\n        }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n            public TreeNode sortedArrayToBST(int[] nums) {\\n                if(nums.length==0)return null;\\n                int ptr=nums.length/2;\\n                TreeNode root=new TreeNode(nums[ptr]);\\n                root.left=sortedArrayToBST(Arrays.copyOfRange(nums,0,ptr));\\n                root.right=sortedArrayToBST(Arrays.copyOfRange(nums,ptr+1,nums.length));\\n                return root;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2406370,
                "title": "rust-efficient-with-comments",
                "content": "Looking at other (some top-voted) Rust solutions here, it seems necessary to say a few words about efficiency. Using `to_vec()` to create new vectors in order to satisfy the given function signature is wasteful, so we should delegate the recursion to a helper function that has a more efficient signature. But we should not take a `&Vec<i32>` in that signature, since this needs an additional pointer lookup compared to `&[i32]`. This is BTW one of the optimizations that `cargo clippy` would suggest if we would try to use the former argument type.\\n\\nAlso, it\\'s quite unnecessary to first construct an empty node in an `Rc`, and then borrowing it to add the children. I instead construct the node, including the children, as an owned variable, and then move it into the wrapping `RefCell` etc in a single expression.\\n\\nMore a matter of style maybe, but I also prefer avoiding manual indexing when I can, and rather lean back on functions like `split_at(...)`. Less reinvention of the wheel, less error prone.\\n\\n```\\nuse std::cell::RefCell;\\nuse std::rc::Rc;\\nimpl Solution {\\n    fn recurse(nums: &[i32]) -> Option<Rc<RefCell<TreeNode>>> {\\n        if nums.is_empty() {\\n            None\\n        } else {\\n            let (left, rest) = nums.split_at(nums.len() / 2);\\n            let (curr, right) = rest.split_first().unwrap();\\n            Some(Rc::new(RefCell::new(TreeNode {\\n                val: *curr,\\n                left: Self::recurse(left),\\n                right: Self::recurse(right),\\n            })))\\n        }\\n    }\\n\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        Self::recurse(&nums)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::cell::RefCell;\\nuse std::rc::Rc;\\nimpl Solution {\\n    fn recurse(nums: &[i32]) -> Option<Rc<RefCell<TreeNode>>> {\\n        if nums.is_empty() {\\n            None\\n        } else {\\n            let (left, rest) = nums.split_at(nums.len() / 2);\\n            let (curr, right) = rest.split_first().unwrap();\\n            Some(Rc::new(RefCell::new(TreeNode {\\n                val: *curr,\\n                left: Self::recurse(left),\\n                right: Self::recurse(right),\\n            })))\\n        }\\n    }\\n\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        Self::recurse(&nums)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2404474,
                "title": "c-easy-two-codes-binary-searching",
                "content": "\\n\\n\\n\\n\\n\\n\\n\\n**Using recursion and binray Searching**\\n\\n        TreeNode* convertintoBST(vector<int> nums,int left,int right)\\n    {\\n\\t   //Base Case\\n        if(left > right) return NULL;\\n\\t\\t//find mid\\n        int mid = left+(right-left)/2;\\n\\t\\t//create Node\\n        TreeNode *node = new TreeNode(nums[mid]);\\n\\t\\t//Set tree using recursion\\n        node->left = convertintoBST(nums,left,mid-1);\\n\\t\\t\\n        node->right = convertintoBST(nums,mid+1,right);\\n\\t\\t\\n        return node;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        if(nums.size() == 0) return NULL;\\n        return convertintoBST(nums,0,nums.size()-1);\\n    }\\n\\t\\n\\t\\n\\t\\n**Also use this**\\n\\n      // return NULL TreeNode if num is empty\\n        if(!nums.size()) return NULL;\\n\\n        int mid = nums.size()/2;\\n        TreeNode* head = new TreeNode(nums[mid]);\\n        \\n        // subvector left and right\\n        vector<int> l(nums.begin(), nums.begin()+mid);\\n        vector<int> r(nums.begin()+mid+1, nums.end());\\n        \\n        // set tree (using recursive)\\n        head->left  = sortedArrayToBST(l);\\n        head->right = sortedArrayToBST(r);\\n        \\n        return head;",
                "solutionTags": [
                    "C",
                    "Binary Search Tree"
                ],
                "code": "\\n\\n\\n\\n\\n\\n\\n\\n**Using recursion and binray Searching**\\n\\n        TreeNode* convertintoBST(vector<int> nums,int left,int right)\\n    {\\n\\t   //Base Case\\n        if(left > right) return NULL;\\n\\t\\t//find mid\\n        int mid = left+(right-left)/2;\\n\\t\\t//create Node\\n        TreeNode *node = new TreeNode(nums[mid]);\\n\\t\\t//Set tree using recursion\\n        node->left = convertintoBST(nums,left,mid-1);\\n\\t\\t\\n        node->right = convertintoBST(nums,mid+1,right);\\n\\t\\t\\n        return node;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        if(nums.size() == 0) return NULL;\\n        return convertintoBST(nums,0,nums.size()-1);\\n    }\\n\\t\\n\\t\\n\\t\\n**Also use this**\\n\\n      // return NULL TreeNode if num is empty\\n        if(!nums.size()) return NULL;\\n\\n        int mid = nums.size()/2;\\n        TreeNode* head = new TreeNode(nums[mid]);\\n        \\n        // subvector left and right\\n        vector<int> l(nums.begin(), nums.begin()+mid);\\n        vector<int> r(nums.begin()+mid+1, nums.end());\\n        \\n        // set tree (using recursive)\\n        head->left  = sortedArrayToBST(l);\\n        head->right = sortedArrayToBST(r);\\n        \\n        return head;",
                "codeTag": "Unknown"
            },
            {
                "id": 1639969,
                "title": "2-beginner-friendly-js-solutions-with-inorder-and-preorder-traversal",
                "content": "**Approach 1:**\\n\\nPreOrder:\\nTC:O(n)\\nSC: O(log n)\\n\\n```\\nvar sortedArrayToBST = function(nums) {\\n\\t    const helper = (nums, start, end) => {\\n        if(end < start) \\n            return null;\\n        \\n        let mid = start + Math.floor((end - start) / 2);\\n        \\n        let node = new TreeNode(nums[mid]);\\n        node.left = helper(nums, start, mid - 1);\\n        node.right = helper(nums, mid+1, end);\\n        \\n        return node;\\n    }\\n    \\n    return helper(nums, 0, nums.length - 1);\\n}\\n```\\n\\n**Approach 2:**\\n\\nInOrder:\\nSC and TC same as Above:\\n\\n```\\nvar sortedArrayToBST = function(nums) {\\n\\tconst helper = (nums, start, end) => {\\n        if(end < start)\\n            return null;\\n        \\n        let mid = start + Math.floor((end - start) / 2);\\n        \\n        let left = helper(nums, start, mid - 1);\\n        \\n        let treeNode = new TreeNode(nums[mid]);\\n        treeNode.left = left;\\n        \\n        let right = helper(nums, mid+1, end);\\n        treeNode.right = right;\\n        \\n        return treeNode;\\n    }\\n    \\n    return helper(nums, 0, nums.length - 1);\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n\\t    const helper = (nums, start, end) => {\\n        if(end < start) \\n            return null;\\n        \\n        let mid = start + Math.floor((end - start) / 2);\\n        \\n        let node = new TreeNode(nums[mid]);\\n        node.left = helper(nums, start, mid - 1);\\n        node.right = helper(nums, mid+1, end);\\n        \\n        return node;\\n    }\\n    \\n    return helper(nums, 0, nums.length - 1);\\n}\\n```\n```\\nvar sortedArrayToBST = function(nums) {\\n\\tconst helper = (nums, start, end) => {\\n        if(end < start)\\n            return null;\\n        \\n        let mid = start + Math.floor((end - start) / 2);\\n        \\n        let left = helper(nums, start, mid - 1);\\n        \\n        let treeNode = new TreeNode(nums[mid]);\\n        treeNode.left = left;\\n        \\n        let right = helper(nums, mid+1, end);\\n        treeNode.right = right;\\n        \\n        return treeNode;\\n    }\\n    \\n    return helper(nums, 0, nums.length - 1);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 599688,
                "title": "c-short-solution",
                "content": "```\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        return ToBst(0, nums.Length - 1);\\n\\n        TreeNode ToBst(int left, int right) {\\n            if (left > right) return null;\\n\\n            var middle = left + (right - left) / 2;\\n            return new TreeNode(nums[middle]) {\\n                left = ToBst(left, middle - 1),\\n                right = ToBst(middle + 1, right)\\n            };\\n        }\\n    }\\n```",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        return ToBst(0, nums.Length - 1);\\n\\n        TreeNode ToBst(int left, int right) {\\n            if (left > right) return null;\\n\\n            var middle = left + (right - left) / 2;\\n            return new TreeNode(nums[middle]) {\\n                left = ToBst(left, middle - 1),\\n                right = ToBst(middle + 1, right)\\n            };\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 343133,
                "title": "rust-solution",
                "content": "```Rust\\n// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\n\\n\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        if nums.is_empty() {\\n            return None;\\n        }\\n        let mid = nums.len() / 2;\\n        let mut root = Rc::new(RefCell::new(TreeNode::new(nums[mid])));\\n        root.borrow_mut().left = Self::sorted_array_to_bst(nums[..mid].to_vec());\\n        root.borrow_mut().right = Self::sorted_array_to_bst(nums[mid+1..].to_vec());\\n        Some(root)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Rust\\n// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\n\\n\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        if nums.is_empty() {\\n            return None;\\n        }\\n        let mid = nums.len() / 2;\\n        let mut root = Rc::new(RefCell::new(TreeNode::new(nums[mid])));\\n        root.borrow_mut().left = Self::sorted_array_to_bst(nums[..mid].to_vec());\\n        root.borrow_mut().right = Self::sorted_array_to_bst(nums[mid+1..].to_vec());\\n        Some(root)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 258063,
                "title": "python-fast",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not nums:\\n            return None\\n        \\n        mid = len(nums) // 2\\n        \\n        root = TreeNode(nums[mid])\\n        \\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.saortedArrayToBST(nums[mid+1:])\\n        \\n        return root\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not nums:\\n            return None\\n        \\n        mid = len(nums) // 2\\n        \\n        root = TreeNode(nums[mid])\\n        \\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.saortedArrayToBST(nums[mid+1:])\\n        \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35263,
                "title": "python-preorder-iterative",
                "content": "```\\n\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \\n        \"\"\"\\n        if not nums: return None\\n        \\n        l = 0\\n        r = len(nums)\\n        m = (l+r)/2\\n        root = TreeNode(nums[m])\\n        stack = [(root,l,m,r)]\\n        while stack:\\n            node, l, m, r = stack.pop()\\n            if r!=m+1:\\n                node.right = TreeNode(nums[(r+m+1)/2])\\n                stack.append((node.right,m+1,(r+m+1)/2,r))\\n            if l!=m:\\n                node.left = TreeNode(nums[(l+m)/2])\\n                stack.append((node.left,l,(l+m)/2,m))\\n                \\n        return root\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \\n        \"\"\"\\n        if not nums: return None\\n        \\n        l = 0\\n        r = len(nums)\\n        m = (l+r)/2\\n        root = TreeNode(nums[m])\\n        stack = [(root,l,m,r)]\\n        while stack:\\n            node, l, m, r = stack.pop()\\n            if r!=m+1:\\n                node.right = TreeNode(nums[(r+m+1)/2])\\n                stack.append((node.right,m+1,(r+m+1)/2,r))\\n            if l!=m:\\n                node.left = TreeNode(nums[(l+m)/2])\\n                stack.append((node.left,l,(l+m)/2,m))\\n                \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3377127,
                "title": "easy-clear-solution-python-3",
                "content": "\\n\\n# Code\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def cv(node,vals)->TreeNode:\\n            if vals:\\n                mid=len(vals)//2\\n                node.val,node.left,node.right=vals[mid],cv(TreeNode(),vals[:mid]),cv(TreeNode(),vals[mid+1:])\\n                return node\\n            else:\\n                return None\\n        return cv(TreeNode(),nums)\\n```",
                "solutionTags": [
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        def cv(node,vals)->TreeNode:\\n            if vals:\\n                mid=len(vals)//2\\n                node.val,node.left,node.right=vals[mid],cv(TreeNode(),vals[:mid]),cv(TreeNode(),vals[mid+1:])\\n                return node\\n            else:\\n                return None\\n        return cv(TreeNode(),nums)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2568135,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=cIaijn-ovLE&t=353s\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n**C++**\\n```\\nTreeNode* convertintoBST(vector nums,int left,int right)\\n{\\n\\n//Base Case\\nif(left > right) return NULL;\\n//find mid\\nint mid = left+(right-left)/2;\\n//create Node\\nTreeNode node = new TreeNode(nums[mid]);\\n//create LEFT CHILD\\n node->left = convertintoBST(nums,left,mid-1);\\n//create LEFT CHILD\\nnode->right = convertintoBST(nums,mid+1,right);\\n\\nreturn node;}\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\nif(nums.size() == 0) return NULL;\\nreturn convertintoBST(nums,0,nums.size()-1);\\n}\\n\\nJAVA\\nclass Solution {\\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n    return helper_binaryBuilder(nums,0, nums.length-1) ;\\n}\\n\\nprivate TreeNode helper_binaryBuilder(int[] nums, int left, int right){\\n    if (left > right) return null;\\n    int m = (right + left) / 2;\\n    TreeNode root = new TreeNode(nums[m]);\\n    root.left = helper_binaryBuilder(nums, left, m - 1);\\n    root.right = helper_binaryBuilder(nums, m + 1, right);\\n    return root;\\n}\\n}\\n```\\n**PYTHON**\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        total_nums = len(nums)\\n        if not total_nums:\\n            return None\\n\\n        mid_node = total_nums // 2\\n        return TreeNode(\\n            nums[mid_node], \\n            self.sortedArrayToBST(nums[:mid_node]), self.sortedArrayToBST(nums[mid_node + 1 :])\\n        )\\n```\\n**Please do UPVOTE to motivate me to solve more daily challenges like this !!**",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nTreeNode* convertintoBST(vector nums,int left,int right)\\n{\\n\\n//Base Case\\nif(left > right) return NULL;\\n//find mid\\nint mid = left+(right-left)/2;\\n//create Node\\nTreeNode node = new TreeNode(nums[mid]);\\n//create LEFT CHILD\\n node->left = convertintoBST(nums,left,mid-1);\\n//create LEFT CHILD\\nnode->right = convertintoBST(nums,mid+1,right);\\n\\nreturn node;}\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\nif(nums.size() == 0) return NULL;\\nreturn convertintoBST(nums,0,nums.size()-1);\\n}\\n\\nJAVA\\nclass Solution {\\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n    return helper_binaryBuilder(nums,0, nums.length-1) ;\\n}\\n\\nprivate TreeNode helper_binaryBuilder(int[] nums, int left, int right){\\n    if (left > right) return null;\\n    int m = (right + left) / 2;\\n    TreeNode root = new TreeNode(nums[m]);\\n    root.left = helper_binaryBuilder(nums, left, m - 1);\\n    root.right = helper_binaryBuilder(nums, m + 1, right);\\n    return root;\\n}\\n}\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        total_nums = len(nums)\\n        if not total_nums:\\n            return None\\n\\n        mid_node = total_nums // 2\\n        return TreeNode(\\n            nums[mid_node], \\n            self.sortedArrayToBST(nums[:mid_node]), self.sortedArrayToBST(nums[mid_node + 1 :])\\n        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1282453,
                "title": "beginner-friendly-c-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums)\\n    {\\n        int left = 0;\\n        int right = nums.size()-1;\\n        return createBST(nums,left,right);\\n    }\\n    \\n    TreeNode* createBST(vector<int> nums,int left,int right)\\n    {\\n        TreeNode* newroot;\\n        if(left <= right)\\n        {\\n            int mid = (left+right) / 2;\\n            newroot = new TreeNode(nums[mid]);\\n            newroot->left = createBST(nums,left,mid-1);\\n            newroot->right = createBST(nums,mid+1,right);\\n            return newroot;\\n        }\\n        return NULL;\\n    }\\n};\\n```\\n**Like the solution?\\nPlease upvote \\u30C4**\\n\\nIf you can\\'t understand any step/point, feel free to comment.\\nHappy to help.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums)\\n    {\\n        int left = 0;\\n        int right = nums.size()-1;\\n        return createBST(nums,left,right);\\n    }\\n    \\n    TreeNode* createBST(vector<int> nums,int left,int right)\\n    {\\n        TreeNode* newroot;\\n        if(left <= right)\\n        {\\n            int mid = (left+right) / 2;\\n            newroot = new TreeNode(nums[mid]);\\n            newroot->left = createBST(nums,left,mid-1);\\n            newroot->right = createBST(nums,mid+1,right);\\n            return newroot;\\n        }\\n        return NULL;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 825457,
                "title": "easy-to-understand-binary-search-c",
                "content": "\\n\\n        class Solution {\\n        public:\\n            TreeNode* sortedArrayToBST(int start,int end,vector<int>& nums) {\\n                if(start>end) return nullptr;\\n                int mid=start + (end-start)/2;\\n                TreeNode* root=new TreeNode(nums[mid]);\\n                root->left=sortedArrayToBST(start,mid-1,nums);\\n                root->right=sortedArrayToBST(mid+1,end,nums);\\n                return root;\\n            }\\n            TreeNode* sortedArrayToBST(vector<int>& nums) {\\n               return sortedArrayToBST(0,nums.size()-1,nums);\\n            }\\n    \\n        };\\n\\t\\t\\n**Feel free to ask any question in the comment section.\\nIf you like this solution, do UPVOTE.\\nHappy Coding :)**\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n        public:\\n            TreeNode* sortedArrayToBST(int start,int end,vector<int>& nums) {\\n                if(start>end) return nullptr;\\n                int mid=start + (end-start)/2;\\n                TreeNode* root=new TreeNode(nums[mid]);\\n                root->left=sortedArrayToBST(start,mid-1,nums);\\n                root->right=sortedArrayToBST(mid+1,end,nums);\\n                return root;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 550423,
                "title": "my-c",
                "content": "```\\n\\nstruct TreeNode* newNode(int val){\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    new->val = val;\\n    new->left = NULL;\\n    new->right = NULL;\\n    return new;\\n}\\n\\nstruct TreeNode* ArrayToBST(int* nums, int start, int end){\\n    if(start>end)\\n        return NULL;\\n    \\n    int mid = (start+end)/2;\\n    struct TreeNode* root = newNode(nums[mid]);\\n    \\n    root->left = ArrayToBST(nums,start,mid-1);\\n    \\n    root->right = ArrayToBST(nums,mid+1,end);\\n    \\n    return root;\\n}\\n\\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\\n    return ArrayToBST(nums, 0, numsSize-1);\\n}\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\n\\nstruct TreeNode* newNode(int val){\\n    struct TreeNode* new = malloc(sizeof(struct TreeNode));\\n    new->val = val;\\n    new->left = NULL;\\n    new->right = NULL;\\n    return new;\\n}\\n\\nstruct TreeNode* ArrayToBST(int* nums, int start, int end){\\n    if(start>end)\\n        return NULL;\\n    \\n    int mid = (start+end)/2;\\n    struct TreeNode* root = newNode(nums[mid]);\\n    \\n    root->left = ArrayToBST(nums,start,mid-1);\\n    \\n    root->right = ArrayToBST(nums,mid+1,end);\\n    \\n    return root;\\n}\\n\\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\\n    return ArrayToBST(nums, 0, numsSize-1);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 518256,
                "title": "go-recursive",
                "content": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n    if len(nums) == 0 {\\n        return nil\\n    }\\n    return &TreeNode{\\n        Val: nums[len(nums)/2],\\n        Left: sortedArrayToBST(nums[:len(nums)/2]),\\n        Right: sortedArrayToBST(nums[len(nums)/2 + 1:]),\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n    if len(nums) == 0 {\\n        return nil\\n    }\\n    return &TreeNode{\\n        Val: nums[len(nums)/2],\\n        Left: sortedArrayToBST(nums[:len(nums)/2]),\\n        Right: sortedArrayToBST(nums[len(nums)/2 + 1:]),\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 470265,
                "title": "neat-kotlin-solution",
                "content": "```\\n    fun sortedArrayToBST(nums: IntArray, low: Int = 0, high: Int = nums.size - 1): TreeNode? {\\n        if (low > high) return null\\n\\n        val mid = (high + low) / 2\\n        return TreeNode(nums[mid]).apply{\\n            left = sortedArrayToBST(nums, low, mid - 1)\\n            right = sortedArrayToBST(nums, mid + 1, high)\\n        }\\n    }\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Kotlin"
                ],
                "code": "```\\n    fun sortedArrayToBST(nums: IntArray, low: Int = 0, high: Int = nums.size - 1): TreeNode? {\\n        if (low > high) return null\\n\\n        val mid = (high + low) / 2\\n        return TreeNode(nums[mid]).apply{\\n            left = sortedArrayToBST(nums, low, mid - 1)\\n            right = sortedArrayToBST(nums, mid + 1, high)\\n        }\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 403455,
                "title": "python-simple-solution-beats-100",
                "content": "\\tdef helper(treelist):\\n\\t\\tif len(treelist)==0:\\n\\t\\t\\treturn None\\n\\t\\tif len(treelist)==1:\\n\\t\\t\\treturn TreeNode(treelist[0])\\n\\t\\tmid = len(treelist)//2\\n\\t\\ttreelist[mid] = TreeNode(treelist[mid])\\n\\t\\ttreelist[mid].left = helper(treelist[:mid])\\n\\t\\ttreelist[mid].right = helper(treelist[mid+1:])\\n\\t\\treturn treelist[mid]\\n\\n\\tclass Solution:\\n\\t\\tdef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n\\t\\t\\tif nums==[]:\\n\\t\\t\\t\\treturn None\\n\\n\\t\\t\\treturn helper(nums)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tdef helper(treelist):\\n\\t\\tif len(treelist)==0:\\n\\t\\t\\treturn None\\n\\t\\tif len(treelist)==1:\\n\\t\\t\\treturn TreeNode(treelist[0])\\n\\t\\tmid = len(treelist)//2\\n\\t\\ttreelist[mid] = TreeNode(treelist[mid])\\n\\t\\ttreelist[mid].left = helper(treelist[:mid])\\n\\t\\ttreelist[mid].right = helper(treelist[mid+1:])\\n\\t\\treturn treelist[mid]\\n\\n\\tclass Solution:\\n\\t\\tdef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n\\t\\t\\tif nums==[]:\\n\\t\\t\\t\\treturn None\\n\\n\\t\\t\\treturn helper(nums)\\n",
                "codeTag": "Java"
            },
            {
                "id": 3459891,
                "title": "beats-94-4-15-145-top-interview-question",
                "content": "# Intuition\\n*find the mid, and add it as the root node, continue...*\\n\\n# Approach\\n*Two approaches recursive and iterative both have same time and space complexity*\\n\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        \\n        n = len(nums)\\n        root = TreeNode()\\n        stack = [(0, n, root)]\\n        \\n        while stack:\\n            i, j, node = stack.pop()\\n            mid = (i + j) // 2\\n            node.val = nums[mid]\\n            \\n            if mid > i:\\n                node.left = TreeNode()\\n                stack.append((i, mid, node.left))\\n            if mid+1 < j:\\n                node.right = TreeNode()\\n                stack.append((mid+1, j, node.right))\\n                \\n        return root\\n\\n```\\n# Iterative Approach\\nThe code above  defines a binary tree structure and a function to create a binary search tree from a sorted array of integers.\\n\\nIn the TreeNode class, there are three instance variables:\\n- `val`: represents the value stored in the node.\\n- `left`: represents the left child node of the current node.\\n- `right`: represents the right child node of the current node.\\n\\nThe `__init__` method initializes these three instance variables with default values of `0`, `None`, and `None`.\\n\\nThe Solution class contains a single method, `sortedArrayToBST`, which takes a list of integers `nums` as input and returns a TreeNode object that represents a balanced binary search tree.\\n\\nIf `nums` is an empty list, the function returns `None`.\\n\\nOtherwise, it initializes a variable `n` with the length of `nums`, and creates a new TreeNode object called `root` without any value.\\n\\nIt initializes a stack of tuples containing three values:\\n- `i`: represents the starting index of the range of indices to consider.\\n- `j`: represents the ending index of the range of indices to consider.\\n- `node`: represents the current node.\\n\\nThe `while` loop runs as long as the `stack` is not empty. In each iteration, it pops the last tuple from the stack, and assigns its values to the variables `i`, `j`, and `node`.\\n\\nIt calculates the middle index of the range as `(i + j) // 2`, and assigns it to the variable `mid`.\\n\\nIt assigns the value `nums[mid]` to the `val` instance variable of the `node`.\\n\\nIf the middle index `mid` is greater than the starting index `i`, it creates a new TreeNode object for the left child of the `node`, assigns it to the `left` instance variable of the `node`, and appends a tuple containing the indices `i`, `mid`, and the new left node to the `stack`.\\n\\nSimilarly, if the middle index plus one `mid+1` is less than the ending index `j`, it creates a new TreeNode object for the right child of the `node`, assigns it to the `right` instance variable of the `node`, and appends a tuple containing the indices `mid+1`, `j`, and the new right node to the `stack`.\\n\\nFinally, the function returns the `root` node of the binary search tree.\\n\\n\\n# Code\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        if not nums:return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n```\\n# Recursive Approach\\nThis is another implementation of the `sortedArrayToBST` function to create a binary search tree from a sorted array of integers.\\n\\nThis implementation is using `recursion`, but it creates a sub-tree for each half of the array, and sets it as the left and right child nodes of the root. The advantage of this implementation is that it is more concise and easier to understand than the `previous implementation that used a stack-based approach`.\\n\\nThe function takes a list of integers `nums` as input and returns a TreeNode object that represents a balanced binary search tree.\\n\\nIf `nums` is an empty list, the function returns `None`.\\n\\nOtherwise, it calculates the middle index of the array `nums` as `mid = len(nums) // 2`.\\n\\nIt creates a new TreeNode object called `root` with the value `nums[mid]`.\\n\\nIt recursively calls the `sortedArrayToBST` function to create the left and right sub-trees of the `root`.\\n\\nFor the left sub-tree, it passes the slice of the `nums` list from the beginning up to but not including the `mid` index.\\n\\nFor the right sub-tree, it passes the slice of the `nums` list from the `mid+1` index up to the end of the list.\\n\\nFinally, the function returns the `root` node of the binary search tree.\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        \\n        n = len(nums)\\n        root = TreeNode()\\n        stack = [(0, n, root)]\\n        \\n        while stack:\\n            i, j, node = stack.pop()\\n            mid = (i + j) // 2\\n            node.val = nums[mid]\\n            \\n            if mid > i:\\n                node.left = TreeNode()\\n                stack.append((i, mid, node.left))\\n            if mid+1 < j:\\n                node.right = TreeNode()\\n                stack.append((mid+1, j, node.right))\\n                \\n        return root\\n\\n```\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        if not nums:return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3191901,
                "title": "convert-sorted-array-to-binary-search-tree-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe idea here is to recursively split the input array in half and use the middle element as the root of the current subtree. We do this until there are no more elements left in the array, in which case we return None. We then build up the tree by recursively calling the function on the left and right halves of the array and setting the resulting trees as the left and right children of the current root node. Finally, we return the root node of the completed tree.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Divide and Conquer",
                    "Tree"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431006,
                "title": "short-c-java-python-explained-solution-beginner-friendly-by-mr-coder",
                "content": "**Please UPVOTE if you LIKE!!**\\n**Watch this video \\uD83E\\uDC83 for the better explanation of the code.**\\n\\nhttps://www.youtube.com/watch?v=cIaijn-ovLE&t=353s\\n\\n\\n**Also you can SUBSCRIBE  \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.**\\n**C++**\\n```\\nTreeNode* convertintoBST(vector nums,int left,int right)\\n{\\n\\n//Base Case\\nif(left > right) return NULL;\\n//find mid\\nint mid = left+(right-left)/2;\\n//create Node\\nTreeNode node = new TreeNode(nums[mid]);\\n//create LEFT CHILD\\n node->left = convertintoBST(nums,left,mid-1);\\n//create LEFT CHILD\\nnode->right = convertintoBST(nums,mid+1,right);\\n\\nreturn node;}\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\nif(nums.size() == 0) return NULL;\\nreturn convertintoBST(nums,0,nums.size()-1);\\n}\\n\\nJAVA\\nclass Solution {\\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n    return helper_binaryBuilder(nums,0, nums.length-1) ;\\n}\\n\\nprivate TreeNode helper_binaryBuilder(int[] nums, int left, int right){\\n    if (left > right) return null;\\n    int m = (right + left) / 2;\\n    TreeNode root = new TreeNode(nums[m]);\\n    root.left = helper_binaryBuilder(nums, left, m - 1);\\n    root.right = helper_binaryBuilder(nums, m + 1, right);\\n    return root;\\n}\\n}\\n```\\n**PYTHON**\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        total_nums = len(nums)\\n        if not total_nums:\\n            return None\\n\\n        mid_node = total_nums // 2\\n        return TreeNode(\\n            nums[mid_node], \\n            self.sortedArrayToBST(nums[:mid_node]), self.sortedArrayToBST(nums[mid_node + 1 :])\\n        )\\n```\\n**Please do UPVOTE to motivate me to solve more daily challenges like this !!**",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nTreeNode* convertintoBST(vector nums,int left,int right)\\n{\\n\\n//Base Case\\nif(left > right) return NULL;\\n//find mid\\nint mid = left+(right-left)/2;\\n//create Node\\nTreeNode node = new TreeNode(nums[mid]);\\n//create LEFT CHILD\\n node->left = convertintoBST(nums,left,mid-1);\\n//create LEFT CHILD\\nnode->right = convertintoBST(nums,mid+1,right);\\n\\nreturn node;}\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\nif(nums.size() == 0) return NULL;\\nreturn convertintoBST(nums,0,nums.size()-1);\\n}\\n\\nJAVA\\nclass Solution {\\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n    return helper_binaryBuilder(nums,0, nums.length-1) ;\\n}\\n\\nprivate TreeNode helper_binaryBuilder(int[] nums, int left, int right){\\n    if (left > right) return null;\\n    int m = (right + left) / 2;\\n    TreeNode root = new TreeNode(nums[m]);\\n    root.left = helper_binaryBuilder(nums, left, m - 1);\\n    root.right = helper_binaryBuilder(nums, m + 1, right);\\n    return root;\\n}\\n}\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        total_nums = len(nums)\\n        if not total_nums:\\n            return None\\n\\n        mid_node = total_nums // 2\\n        return TreeNode(\\n            nums[mid_node], \\n            self.sortedArrayToBST(nums[:mid_node]), self.sortedArrayToBST(nums[mid_node + 1 :])\\n        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2408042,
                "title": "0-ms-easy-java-solution",
                "content": "```\\nclass TreeNode {\\n\\tint val;\\n\\tTreeNode left;\\n\\tTreeNode right;\\n \\n\\tTreeNode(int x) {\\n\\t\\tval = x;\\n\\t}\\n}\\n \\npublic class Solution {\\n\\tpublic TreeNode sortedArrayToBST(int[] num) {\\n\\t\\tif (num.length == 0)\\n\\t\\t\\treturn null;\\n \\n\\t\\treturn sortedArrayToBST(num, 0, num.length - 1);\\n\\t}\\n \\n\\tpublic TreeNode sortedArrayToBST(int[] num, int start, int end) {\\n\\t\\tif (start > end)\\n\\t\\t\\treturn null;\\n \\n\\t\\tint mid = (start + end) / 2;\\n\\t\\tTreeNode root = new TreeNode(num[mid]);\\n\\t\\troot.left = sortedArrayToBST(num, start, mid - 1);\\n\\t\\troot.right = sortedArrayToBST(num, mid + 1, end);\\n \\n\\t\\treturn root;\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass TreeNode {\\n\\tint val;\\n\\tTreeNode left;\\n\\tTreeNode right;\\n \\n\\tTreeNode(int x) {\\n\\t\\tval = x;\\n\\t}\\n}\\n \\npublic class Solution {\\n\\tpublic TreeNode sortedArrayToBST(int[] num) {\\n\\t\\tif (num.length == 0)\\n\\t\\t\\treturn null;\\n \\n\\t\\treturn sortedArrayToBST(num, 0, num.length - 1);\\n\\t}\\n \\n\\tpublic TreeNode sortedArrayToBST(int[] num, int start, int end) {\\n\\t\\tif (start > end)\\n\\t\\t\\treturn null;\\n \\n\\t\\tint mid = (start + end) / 2;\\n\\t\\tTreeNode root = new TreeNode(num[mid]);\\n\\t\\troot.left = sortedArrayToBST(num, start, mid - 1);\\n\\t\\troot.right = sortedArrayToBST(num, mid + 1, end);\\n \\n\\t\\treturn root;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2404521,
                "title": "easy-explanation-beats-95-w-images",
                "content": "A **height-balanced** binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one\\n\\nIf we have a **strictly increasing** sorted array, The **root** node value is the value in the middle, because that\\'s the value that has a number of left and right values that never differ by more than one.\\n\\n**Example:** [1,2,3,4,5,6,7,8,9,10]\\nIf the root is `5` left subtree has the following values  `left=[1,2,34]` and right subtree has the following values `right=[6,7,8,9,10]`.\\nWith the same approach we used to get the root for the complete array, we can find the root value for the subtree by choosing the middle value and so on.\\n\\n![image](https://assets.leetcode.com/users/images/fbee35d9-58d6-4066-84dc-7f81b5a25334_1660092718.6277065.png)\\n\\n```python\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        def traversal(left, right):\\n            if left > right: # If left greater than right, it means that added all subtree values\\n                return\\n            index = (left + right) // 2 # Getting the middle value for the subtree root value\\n            node = TreeNode(nums[index])\\n            node.left = traversal(left, index-1)\\n            node.right = traversal(index+1, right)\\n            return node\\n        return traversal(0, len(nums) - 1)\\n```\\n\\n![image](https://assets.leetcode.com/users/images/c8ce8f16-a78d-4ea1-a66a-e0dc5fdd9645_1660093787.6140652.png)\\n\\n**Time Complexity:** `O(N)` We only do the recursion `N` times where `N` is the number of elements in the array\\n**Space Complexity:** `O(N`)\\n\\n___\\nIf there are any suggestions/questions/mistakes please comment below\\n___\\n\\n",
                "solutionTags": [
                    "Python",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```python\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        def traversal(left, right):\\n            if left > right: # If left greater than right, it means that added all subtree values\\n                return\\n            index = (left + right) // 2 # Getting the middle value for the subtree root value\\n            node = TreeNode(nums[index])\\n            node.left = traversal(left, index-1)\\n            node.right = traversal(index+1, right)\\n            return node\\n        return traversal(0, len(nums) - 1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2010981,
                "title": "o-n-time-beats-99-97-memory-speed-0ms-may-2022",
                "content": "```\\n```\\n\\n(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 38.2MB*** (beats 92.04% / 24.00%).\\n* ***Java***\\n```\\npublic TreeNode sortedArrayToBST(int[] num) {\\n    if (num.length == 0) {\\n        return null;\\n    }\\n    TreeNode head = helper(num, 0, num.length - 1);\\n    return head;\\n}\\n\\npublic TreeNode helper(int[] num, int low, int high) {\\n    if (low > high) { // Done\\n        return null;\\n    }\\n    int mid = (low + high) / 2;\\n    TreeNode node = new TreeNode(num[mid]);\\n    node.left = helper(num, low, mid - 1);\\n    node.right = helper(num, mid + 1, high);\\n    return node;\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 7.0MB*** (beats 100.00% / 100.00%).\\n* ***C++***\\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return helper(nums, 0, nums.size()-1);\\n    }\\n    TreeNode* helper(vector<int>& nums, int low,int high){\\n        if(low<=high){\\n            int mid = low + (high-low)/2;\\n            TreeNode* root = new TreeNode(nums[mid]);\\n            root->left = helper(nums, low, mid-1);\\n            root->right = helper(nums, mid+1, high);\\n            return root;\\n        }\\n        return NULL;\\n    }\\n};\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n\\nThe best result for the code below is ***26ms / 12.2MB*** (beats 95.42% / 82.32%).\\n* ***Python***\\n```\\n# Definition for a  binary tree node\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    # @param num, a list of integers\\n    # @return a tree node\\n    # 12:37\\n    def sortedArrayToBST(self, num):\\n        if not num:\\n            return None\\n\\n        mid = len(num) // 2\\n\\n        root = TreeNode(num[mid])\\n        root.left = self.sortedArrayToBST(num[:mid])\\n        root.right = self.sortedArrayToBST(num[mid+1:])\\n\\n        return root\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***51ms / 34.2MB*** (beats 100.00% / 84.12%).\\n* ***JavaScript***\\n```\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number[]} nums\\n * @return {TreeNode}\\n */\\nvar sortedArrayToBST = function(nums) {\\n    if(nums.length === 0 || null === nums){\\n        return null;\\n    }\\n    let mid = Math.floor(nums.length/2);\\n    let root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid+1, nums.length));\\n    return root;\\n};\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***68ms / 44.2MB*** (beats 100.00% / 45.25%).\\n* ***Kotlin***\\n```\\nfun main() {\\n  val node = sortedArrayToBST(intArrayOf(-10,-3,0,5,9))\\n}\\n\\nfun sortedArrayToBST(nums: IntArray): TreeNode? {\\n  return buildTree(nums,0,nums.size-1)\\n}\\nfun buildTree(nums: IntArray,start:Int,end:Int):TreeNode?{\\n\\n    if(start>end) return null\\n    val mid = (start+end)/2\\n    val node = TreeNode(nums[mid])\\n    node.left = buildTree(nums,start,mid-1)\\n    node.right = buildTree(nums,mid+1,end)\\n    return node\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\nThe best result for the code below is ***12ms / 32.2MB*** (beats 95% / 84%).\\n* ***Swift***\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\n\\n// Strategy:\\n// * probably some form of recursion\\n// * recursion returns the head\\n// * base case: \\n// * if array only has one value, return that value\\n// * if array is empty, return nil\\n\\nclass Solution {\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        func createBSTRecursive(_ leftIdx: Int, _ rightIdx: Int) -> TreeNode? {\\n            if leftIdx > rightIdx {\\n                return nil\\n            }\\n            if leftIdx == rightIdx {\\n                return TreeNode(nums[leftIdx])\\n            }\\n            \\n            let middleIdx = (leftIdx + rightIdx) / 2\\n            let val = nums[middleIdx]\\n            \\n            let tree = TreeNode(val)\\n            tree.left = createBSTRecursive(leftIdx, middleIdx - 1)\\n            tree.right = createBSTRecursive(middleIdx + 1, rightIdx)\\n            \\n            return tree\\n        }\\n        \\n        return createBSTRecursive(0, nums.count - 1)\\n    }\\n}\\n```\\n\\n```\\n```\\n\\n```\\n```\\n\\n***\"Open your eyes. Expect us.\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Swift",
                    "Kotlin",
                    "PHP",
                    "Recursion"
                ],
                "code": "```\\n```\n```\\n```\n```\\n```\n```\\n```\n```\\npublic TreeNode sortedArrayToBST(int[] num) {\\n    if (num.length == 0) {\\n        return null;\\n    }\\n    TreeNode head = helper(num, 0, num.length - 1);\\n    return head;\\n}\\n\\npublic TreeNode helper(int[] num, int low, int high) {\\n    if (low > high) { // Done\\n        return null;\\n    }\\n    int mid = (low + high) / 2;\\n    TreeNode node = new TreeNode(num[mid]);\\n    node.left = helper(num, low, mid - 1);\\n    node.right = helper(num, mid + 1, high);\\n    return node;\\n}\\n```\n```\\n```\n```\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return helper(nums, 0, nums.size()-1);\\n    }\\n    TreeNode* helper(vector<int>& nums, int low,int high){\\n        if(low<=high){\\n            int mid = low + (high-low)/2;\\n            TreeNode* root = new TreeNode(nums[mid]);\\n            root->left = helper(nums, low, mid-1);\\n            root->right = helper(nums, mid+1, high);\\n            return root;\\n        }\\n        return NULL;\\n    }\\n};\\n```\n```\\n```\n```\\n```\n```\\n# Definition for a  binary tree node\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    # @param num, a list of integers\\n    # @return a tree node\\n    # 12:37\\n    def sortedArrayToBST(self, num):\\n        if not num:\\n            return None\\n\\n        mid = len(num) // 2\\n\\n        root = TreeNode(num[mid])\\n        root.left = self.sortedArrayToBST(num[:mid])\\n        root.right = self.sortedArrayToBST(num[mid+1:])\\n\\n        return root\\n```\n```\\n```\n```\\n```\n```\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number[]} nums\\n * @return {TreeNode}\\n */\\nvar sortedArrayToBST = function(nums) {\\n    if(nums.length === 0 || null === nums){\\n        return null;\\n    }\\n    let mid = Math.floor(nums.length/2);\\n    let root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid+1, nums.length));\\n    return root;\\n};\\n```\n```\\n```\n```\\n```\n```\\nfun main() {\\n  val node = sortedArrayToBST(intArrayOf(-10,-3,0,5,9))\\n}\\n\\nfun sortedArrayToBST(nums: IntArray): TreeNode? {\\n  return buildTree(nums,0,nums.size-1)\\n}\\nfun buildTree(nums: IntArray,start:Int,end:Int):TreeNode?{\\n\\n    if(start>end) return null\\n    val mid = (start+end)/2\\n    val node = TreeNode(nums[mid])\\n    node.left = buildTree(nums,start,mid-1)\\n    node.right = buildTree(nums,mid+1,end)\\n    return node\\n}\\n```\n```\\n```\n```\\n```\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\n\\n// Strategy:\\n// * probably some form of recursion\\n// * recursion returns the head\\n// * base case: \\n// * if array only has one value, return that value\\n// * if array is empty, return nil\\n\\nclass Solution {\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        func createBSTRecursive(_ leftIdx: Int, _ rightIdx: Int) -> TreeNode? {\\n            if leftIdx > rightIdx {\\n                return nil\\n            }\\n            if leftIdx == rightIdx {\\n                return TreeNode(nums[leftIdx])\\n            }\\n            \\n            let middleIdx = (leftIdx + rightIdx) / 2\\n            let val = nums[middleIdx]\\n            \\n            let tree = TreeNode(val)\\n            tree.left = createBSTRecursive(leftIdx, middleIdx - 1)\\n            tree.right = createBSTRecursive(middleIdx + 1, rightIdx)\\n            \\n            return tree\\n        }\\n        \\n        return createBSTRecursive(0, nums.count - 1)\\n    }\\n}\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1521368,
                "title": "c-o-n-recursive-solution-easy-to-understand",
                "content": "```\\nTreeNode *BST(vector<int> &ans, int s, int e){\\n    if (s > e) return NULL;\\n    if (e == s){\\n        TreeNode *root = new TreeNode(ans[e]);\\n        return root;\\n    }\\n    else{\\n        int i = s + (e - s) / 2;\\n        TreeNode *root = new TreeNode(ans[i]);\\n        root->left = BST(ans, s, i - 1);\\n        root->right = BST(ans, i + 1, e);\\n        return root;\\n    }\\n}\\nTreeNode *sortedArrayToBST(vector<int> &nums){\\n    TreeNode *newroot = BST(nums, 0, nums.size() - 1);\\n    return newroot;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nTreeNode *BST(vector<int> &ans, int s, int e){\\n    if (s > e) return NULL;\\n    if (e == s){\\n        TreeNode *root = new TreeNode(ans[e]);\\n        return root;\\n    }\\n    else{\\n        int i = s + (e - s) / 2;\\n        TreeNode *root = new TreeNode(ans[i]);\\n        root->left = BST(ans, s, i - 1);\\n        root->right = BST(ans, i + 1, e);\\n        return root;\\n    }\\n}\\nTreeNode *sortedArrayToBST(vector<int> &nums){\\n    TreeNode *newroot = BST(nums, 0, nums.size() - 1);\\n    return newroot;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 695842,
                "title": "solutions-in-recursive-dfs-iterative-dfs-and-bfs",
                "content": "Solutions using 3 popular tamplates: recursive DFS, iterative DFS, and BFS.\\n\\n*Searching boundaries in these solutions are python-style: [lower, upper), left inclusive, right exclusive.*\\n```\\n\\t#################\\n\\t# recursive dfs #\\n\\t#################\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n\\t\\t\\n\\t#################\\n\\t# iterative dfs #\\n\\t#################\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n\\n        root = TreeNode()\\n        # (node, lower, upper) with [lower, upper)\\n        stack = [(root, 0, len(nums))]\\n        \\n        while stack:\\n            node, lower, upper = stack.pop()\\n            mid = (lower + upper) // 2\\n            node.val = nums[mid]\\n            node.left = TreeNode() if mid > lower else None\\n            node.right = TreeNode() if upper > mid + 1 else None\\n            if node.right: stack.append((node.right, mid+1, upper))\\n            if node.left: stack.append((node.left, lower, mid))\\n                \\n        return root\\n\\t\\t\\n\\t#######\\n\\t# bfs #\\n\\t#######\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n\\n        root = TreeNode()\\n        # (node, lower, upper) with [lower, upper)\\n        q = collections.deque([(root, 0, len(nums))])\\n        \\n        while q:\\n            size = len(q)\\n            for _ in range(size):\\n                node, lower, upper = q.popleft()\\n                mid = (lower + upper) // 2\\n                node.val = nums[mid]\\n                node.left = TreeNode() if lower < mid else None\\n                node.right = TreeNode() if mid + 1 < upper else None\\n                if node.left: q.append((node.left, lower, mid))\\n                if node.right: q.append((node.right, mid + 1, upper))\\n                    \\n        return root\\n```",
                "solutionTags": [
                    "Stack",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Recursion",
                    "Queue",
                    "Iterator"
                ],
                "code": "```\\n\\t#################\\n\\t# recursive dfs #\\n\\t#################\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n\\t\\t\\n\\t#################\\n\\t# iterative dfs #\\n\\t#################\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n\\n        root = TreeNode()\\n        # (node, lower, upper) with [lower, upper)\\n        stack = [(root, 0, len(nums))]\\n        \\n        while stack:\\n            node, lower, upper = stack.pop()\\n            mid = (lower + upper) // 2\\n            node.val = nums[mid]\\n            node.left = TreeNode() if mid > lower else None\\n            node.right = TreeNode() if upper > mid + 1 else None\\n            if node.right: stack.append((node.right, mid+1, upper))\\n            if node.left: stack.append((node.left, lower, mid))\\n                \\n        return root\\n\\t\\t\\n\\t#######\\n\\t# bfs #\\n\\t#######\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n\\n        root = TreeNode()\\n        # (node, lower, upper) with [lower, upper)\\n        q = collections.deque([(root, 0, len(nums))])\\n        \\n        while q:\\n            size = len(q)\\n            for _ in range(size):\\n                node, lower, upper = q.popleft()\\n                mid = (lower + upper) // 2\\n                node.val = nums[mid]\\n                node.left = TreeNode() if lower < mid else None\\n                node.right = TreeNode() if mid + 1 < upper else None\\n                if node.left: q.append((node.left, lower, mid))\\n                if node.right: q.append((node.right, mid + 1, upper))\\n                    \\n        return root\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 625518,
                "title": "python-iterative-with-queue",
                "content": "\\n```python \\n#Recursive\\ndef sortedArrayToBST(self, nums):\\n    if not nums:\\n        return None\\n    center=len(nums)//2\\n    node=TreeNode(nums[center])\\n    node.left=self.sortedArrayToBST(nums[:center])\\n    node.right=self.sortedArrayToBST(nums[center+1:])\\n    return node\\n```    \\n```python\\n# Iterative\\n def sortedArrayToBST(self, nums):\\n     if not nums:\\n         return None\\n     center=len(nums)//2\\n     head=TreeNode(nums[center])\\n     queue=[(head,nums[:center],nums[center+1:])]\\n     while queue:\\n         node,L,R=queue.pop(0)\\n         if L:\\n             center=len(L)//2\\n             l_node=TreeNode(L[center])\\n             node.left=l_node\\n             queue.append((node.left,L[:center],L[center+1:]))\\n         if R:\\n             center=len(R)//2\\n             r_node=TreeNode(R[center])\\n             node.right=r_node\\n             queue.append((node.right,R[:center],R[center+1:]))\\n     return head\\n    \\n\\n```",
                "solutionTags": [],
                "code": "```python \\n#Recursive\\ndef sortedArrayToBST(self, nums):\\n    if not nums:\\n        return None\\n    center=len(nums)//2\\n    node=TreeNode(nums[center])\\n    node.left=self.sortedArrayToBST(nums[:center])\\n    node.right=self.sortedArrayToBST(nums[center+1:])\\n    return node\\n```\n```python\\n# Iterative\\n def sortedArrayToBST(self, nums):\\n     if not nums:\\n         return None\\n     center=len(nums)//2\\n     head=TreeNode(nums[center])\\n     queue=[(head,nums[:center],nums[center+1:])]\\n     while queue:\\n         node,L,R=queue.pop(0)\\n         if L:\\n             center=len(L)//2\\n             l_node=TreeNode(L[center])\\n             node.left=l_node\\n             queue.append((node.left,L[:center],L[center+1:]))\\n         if R:\\n             center=len(R)//2\\n             r_node=TreeNode(R[center])\\n             node.right=r_node\\n             queue.append((node.right,R[:center],R[center+1:]))\\n     return head\\n    \\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 257323,
                "title": "a-c-solution-and-its-formal-proof",
                "content": "Here is my solution. I think many people used the same solution, but have you considered how to prove it? Do you really understand why this algorithm never produces a node with two subtrees whose sizes differ by more than one? The algorithm is relatively simple and easy to understand, but I believe that the correctness of it is not obvious and we should try to understand the details.\\n\\n```\\nclass Solution {\\n    TreeNode* construct(vector<int>& nums, int begin, int end)\\n    {\\n        if (begin == end) {\\n            return nullptr;\\n        }\\n        int mid = (begin + end) / 2;\\n        auto root = new TreeNode(nums[mid]);\\n        root->left = construct(nums, begin, mid);\\n        root->right = construct(nums, mid + 1, end);\\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return construct(nums, 0, nums.size());\\n    }\\n};\\n```\\n\\nDuring one recursion, if (end - begin) is an odd number, the left part and the right part will have the same number of elements. Since the same function is applied to the left part and the right part, it is obvious that the left tree and the right tree will have the same height. In fact, they will have exactly the same structure!\\n\\nBut, if (end - begin) is an even number, can this algorithm produce two subtrees with the same height? If we consider two arbitrary trees whose sizes differ by one, the heights of them may differ by more than one! So, how could we guarantee that this algorithm never produces this kind of results? Actually, each subtree will also be almost evenly divided, but this is still not a proof. Let me try to give a formal proof. The following proposition is what I want to prove.\\n\\nIf (end - begin) is an even number, this algorithm can still produce two subtrees whose sizes differ by at most one.\\n\\nProof:\\n\\n(1) If (end - begin) == 0, the problem is trivial, because we even don\\'t have the root.\\n(2) If (end - begin) == 2, the problem is trivial, because the size of the left subtree is zero and the size of the right subtree is one.\\n(3) If (end - begin) >= 4, let N = (end - begin). We know that the size of the left subtree is N/2 - 1 and the size of the right subtree is N/2. Now we have two cases.\\n(3.1) If N/2 - 1 is an even number, N/2 is odd. If we further divide the left subtree L and the right subtree R, we will have four subtrees LL, LR, RL, RR with sizes M - 1, M, M, M, where M = (N/2 - 1)/2. According to induction, we know that the heights of LL and LR differ by at most one. We also know that the heights of LR, RL, RR are equal. Thus, we know that the height of L and the height of R differ by at most one.\\n(3.2) If N/2 - 1 is an odd number, N/2 is even. According to the induction hypothesis, the heights of RL and RR differ by at most one. We also know that the heights of LL, LR, RL are equal. Thus, we know that the heights of L and R differ by at most one.\\n\\nQ.E.D.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    TreeNode* construct(vector<int>& nums, int begin, int end)\\n    {\\n        if (begin == end) {\\n            return nullptr;\\n        }\\n        int mid = (begin + end) / 2;\\n        auto root = new TreeNode(nums[mid]);\\n        root->left = construct(nums, begin, mid);\\n        root->right = construct(nums, mid + 1, end);\\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return construct(nums, 0, nums.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 158589,
                "title": "python-dfs",
                "content": "### 96. Unique Binary Search Trees\\n```\\n> \\u7C7B\\u578B\\uFF1A\\n> Time Complexity O(N)\\n> Space Complexity O(N)\\n```\\n\\n\\u8FD9\\u9898\\u5F88\\u5DE7\\u5999\\u7684\\u8FD0\\u7528\\u4E86Binary Search\\u7684\\u4E00\\u4E9B\\u6027\\u8D28\\uFF0C\\u7136\\u540E\\u914D\\u5408Binary Search Tree\\u7684\\u7279\\u5F81\\u3002\\n\\u6BCF\\u6B21\\u627E\\u5BFB\\u4E2D\\u95F4\\u70B9\\uFF0C\\u7136\\u540E\\u5DE6\\u53F3\\u5206\\u914D\\u3002\\n\\u4F18\\u5316\\u90E8\\u5206\\u89E3\\u51B3\\u4E86\\u6BCF\\u6B21Slicing\\u591A\\u4ED8\\u51FA\\u7684\\u65F6\\u95F4\\u590D\\u6742\\u5EA6\\u3002\\n\\n\\n#### DFS\\n```python\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        if not nums: return None\\n        l, r = 0, len(nums) - 1\\n        mid = (l + (r - l)) // 2\\n        node = TreeNode(nums[mid])\\n        node.left = self.sortedArrayToBST(nums[:mid])\\n        node.right = self.sortedArrayToBST(nums[mid+1:])\\n        return node\\n```\\n\\n#### DFS\\u4F18\\u5316\\n\\n```python     \\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        self.nums = nums\\n        return self.dfs(0, len(nums) - 1)\\n    \\n    def dfs(self, l, r):\\n        if l > r: return None\\n        mid = (l + r) // 2\\n        node = TreeNode(self.nums[mid])\\n        node.left = self.dfs(l, mid - 1)\\n        node.right = self.dfs(mid + 1, r)\\n        return node\\n```",
                "solutionTags": [],
                "code": "```\\n> \\u7C7B\\u578B\\uFF1A\\n> Time Complexity O(N)\\n> Space Complexity O(N)\\n```\n```python\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        if not nums: return None\\n        l, r = 0, len(nums) - 1\\n        mid = (l + (r - l)) // 2\\n        node = TreeNode(nums[mid])\\n        node.left = self.sortedArrayToBST(nums[:mid])\\n        node.right = self.sortedArrayToBST(nums[mid+1:])\\n        return node\\n```\n```python     \\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        self.nums = nums\\n        return self.dfs(0, len(nums) - 1)\\n    \\n    def dfs(self, l, r):\\n        if l > r: return None\\n        mid = (l + r) // 2\\n        node = TreeNode(self.nums[mid])\\n        node.left = self.dfs(l, mid - 1)\\n        node.right = self.dfs(mid + 1, r)\\n        return node\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35352,
                "title": "simple-swift-solution",
                "content": "    class Solution {\\n      func sortedArrayToBST(nums: [Int]) -> TreeNode? {\\n        \\n        guard !nums.isEmpty else { return nil }\\n        \\n        let mid = nums.count / 2\\n        \\n        let treeNode = TreeNode(nums[mid])\\n        \\n        treeNode.left = sortedArrayToBST(Array(nums[0..<mid]))\\n        treeNode.right = sortedArrayToBST(Array(nums[mid + 1..<nums.count]))\\n    \\n        return treeNode\\n      }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n      func sortedArrayToBST(nums: [Int]) -> TreeNode? {\\n        \\n        guard !nums.isEmpty else { return nil }",
                "codeTag": "Java"
            },
            {
                "id": 35414,
                "title": "python-simple-recursive-solution",
                "content": "\\n\\tdef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n\\t\\t\\n    def sortedArrayToBST1(self, nums):\\n        l, r = 0, len(nums)-1\\n        if l <= r:\\n            mid = l + (r-l)//2\\n            root = TreeNode(nums[mid])\\n            root.left = self.sortedArrayToBST(nums[:mid])\\n            root.right = self.sortedArrayToBST(nums[mid+1:])\\n            return root\\n            \\n    def sortedArrayToBST(self, nums):\\n        return self.helper(nums, 0, len(nums)-1)\\n    \\n    def helper(self, nums, l, r):\\n        if l <= r:\\n            mid = l + (r-l)//2\\n            root = TreeNode(nums[mid])\\n            root.left = self.helper(nums, l, mid-1)\\n            root.right = self.helper(nums, mid+1, r )\\n            return root",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "\\n\\tdef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None\\n        mid = len(nums) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n\\t\\t\\n    def sortedArrayToBST1(self, nums):\\n        l, r = 0, len(nums)-1\\n        if l <= r:\\n            mid = l + (r-l)//2\\n            root = TreeNode(nums[mid])\\n            root.left = self.sortedArrayToBST(nums[:mid])\\n            root.right = self.sortedArrayToBST(nums[mid+1:])\\n            return root\\n            \\n    def sortedArrayToBST(self, nums):\\n        return self.helper(nums, 0, len(nums)-1)\\n    \\n    def helper(self, nums, l, r):\\n        if l <= r:\\n            mid = l + (r-l)//2\\n            root = TreeNode(nums[mid])\\n            root.left = self.helper(nums, l, mid-1)\\n            root.right = self.helper(nums, mid+1, r )\\n            return root",
                "codeTag": "Python3"
            },
            {
                "id": 35428,
                "title": "accepted-c-solution-w-o-constructing-new-vectors",
                "content": "As far as I know, construction of \"subvectors\" could be expensive ( O(n) operation). So I tried to avoid creating new vectors for performance. Here's my solution.\\n\\n\\n    class Solution {\\n        TreeNode *dfs(vector<int> &num, int start, int end) {\\n            int idx = start + (end-start)/2;\\n            TreeNode *node = new TreeNode(num[idx]);\\n            \\n            //Base case\\n            if(end == start) \\n                return node;  \\n                \\n            //recurse if valid\\n            if(start <= idx-1)\\n                node->left = dfs(num, start, idx-1);\\n            if(idx+1 <= end)\\n                node->right = dfs(num, idx+1, end);\\n            \\n            return node;\\n        }\\n    public:\\n        TreeNode *sortedArrayToBST(vector<int> &num) {\\n            if(num.empty()) return nullptr;    //check empty case\\n            \\n            return dfs(num, 0, num.size()-1);\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n        TreeNode *dfs(vector<int> &num, int start, int end) {\\n            int idx = start + (end-start)/2;\\n            TreeNode *node = new TreeNode(num[idx]);\\n            \\n            //Base case\\n            if(end == start) \\n                return node;  \\n                \\n            //recurse if valid\\n            if(start <= idx-1)\\n                node->left = dfs(num, start, idx-1);\\n            if(idx+1 <= end)\\n                node->right = dfs(num, idx+1, end);\\n            \\n            return node;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2405204,
                "title": "c-better-than-98-30-8ms-comments-easy-recursion",
                "content": "You can find other recursion solutions too, but the reason it beat 98.3% because I also took the consideration of base case, and secondly, I join the left and right node with roots after calculating them, which heavily reduces the tc.\\nKeep coding.\\n```\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\n\\treturn makeBST(nums, 0, nums.size() - 1);\\n}\\n\\nTreeNode* makeBST(vector<int>& nums, int start, int end) { \\n\\t// if end > start, no elements left to makeBST\\n\\tif (start > end) { return nullptr; }\\n\\t\\n\\t// if start==end, we are left at the last element\\n\\tif (start == end) {\\n\\t\\tTreeNode* newNode = new TreeNode(nums[start]);\\n\\t\\treturn newNode;\\n\\t}\\n\\t\\n\\t// calc mid\\n\\tint mid = (start + end) / 2;\\n\\tint val = nums[mid];\\n\\tTreeNode* left = makeBST(nums, start, mid - 1);\\n\\tTreeNode* right = makeBST(nums, mid + 1, end);\\n\\t\\n\\t// joining left and right node to the root.\\n\\tTreeNode* newNode = new TreeNode(val, left, right);\\n\\n\\treturn newNode;\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/612392dc-7b27-4742-b864-467ae5e2662a_1660109548.08483.png)\\n\\n",
                "solutionTags": [],
                "code": "```\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\n\\treturn makeBST(nums, 0, nums.size() - 1);\\n}\\n\\nTreeNode* makeBST(vector<int>& nums, int start, int end) { \\n\\t// if end > start, no elements left to makeBST\\n\\tif (start > end) { return nullptr; }\\n\\t\\n\\t// if start==end, we are left at the last element\\n\\tif (start == end) {\\n\\t\\tTreeNode* newNode = new TreeNode(nums[start]);\\n\\t\\treturn newNode;\\n\\t}\\n\\t\\n\\t// calc mid\\n\\tint mid = (start + end) / 2;\\n\\tint val = nums[mid];\\n\\tTreeNode* left = makeBST(nums, start, mid - 1);\\n\\tTreeNode* right = makeBST(nums, mid + 1, end);\\n\\t\\n\\t// joining left and right node to the root.\\n\\tTreeNode* newNode = new TreeNode(val, left, right);\\n\\n\\treturn newNode;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1881949,
                "title": "easy-java-solution-0ms-43-1mb",
                "content": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n       return arrToBST(nums, 0, nums.length-1); \\n    }\\n    public TreeNode arrToBST(int[] nums, int left, int right)\\n    {\\n        if(left > right)\\n        {\\n            return null;\\n        }\\n        int mid = (left + right) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        node.left = arrToBST(nums, left, mid-1);\\n        node.right = arrToBST(nums, mid+1, right);\\n        return node;\\n    }\\n}\\n```\\nIf my solution helped you please **UPVOTE**",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n       return arrToBST(nums, 0, nums.length-1); \\n    }\\n    public TreeNode arrToBST(int[] nums, int left, int right)\\n    {\\n        if(left > right)\\n        {\\n            return null;\\n        }\\n        int mid = (left + right) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        node.left = arrToBST(nums, left, mid-1);\\n        node.right = arrToBST(nums, mid+1, right);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1684339,
                "title": "golang-solution-beat-100-cpu-memory",
                "content": "Pretty solution:\\n```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\ti := len(nums) / 2\\n\\troot := &TreeNode{Val: nums[i]}\\n\\troot.Left = sortedArrayToBST(nums[:i])\\n\\troot.Right = sortedArrayToBST(nums[i+1:])\\n\\treturn root\\n}\\n```\\n\\nbeat 100% cpu&mem:\\n```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\ti := len(nums) / 2\\n\\troot := &TreeNode{Val: nums[i]}\\n\\tif i != 0 {\\n\\t\\troot.Left = sortedArrayToBST(nums[:i])\\n\\t}\\n\\tif i != len(nums)-1 {\\n\\t\\troot.Right = sortedArrayToBST(nums[i+1:])\\n\\t}\\n\\treturn root\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\ti := len(nums) / 2\\n\\troot := &TreeNode{Val: nums[i]}\\n\\troot.Left = sortedArrayToBST(nums[:i])\\n\\troot.Right = sortedArrayToBST(nums[i+1:])\\n\\treturn root\\n}\\n```\n```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\ti := len(nums) / 2\\n\\troot := &TreeNode{Val: nums[i]}\\n\\tif i != 0 {\\n\\t\\troot.Left = sortedArrayToBST(nums[:i])\\n\\t}\\n\\tif i != len(nums)-1 {\\n\\t\\troot.Right = sortedArrayToBST(nums[i+1:])\\n\\t}\\n\\treturn root\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1681534,
                "title": "python-intuitive-o-n-explained-approach-and-big-o-analysis",
                "content": "\\n**Approach**\\nTo start populating the binary search tree, we must find the root node first. As the list is already sorted, the root of the tree will reside in the middle of the list. Then we must set the left and right node by, again, finding the root node which is the middle of the sub array. This is a recursive pattern. We could do this by literally slicing the array and passing it to the recursive function but this leads to a O(n) runtime. Instead, we can keep a pointer of the edges of each subtree that we are trying to convert to a BST, this will allow us to find the middle and call the next recursive function. We must stop (the base case) when the left pointer is greater than the right pointer because we know that this is not a valid subtree. We cannot stop when they are equal because a node with no children is a valid tree (like in the example).\\n\\n\\n**Big O Break Down**\\nThe time complexity of this solution is O(n). this is because every value in the list must be visited which is and different values. \\n\\nLeave a like if this helped! Let me know if you have any questions down below.\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        def recursiveToBST(left, right):\\n            if left > right:\\n                return\\n            middle = (left + right)//2\\n            root = TreeNode(nums[middle])\\n            root.left = recursiveToBST(left, middle - 1)\\n            root.right = recursiveToBST(middle + 1, right)\\n            return root\\n        return recursiveToBST(0, len(nums) - 1)\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        def recursiveToBST(left, right):\\n            if left > right:\\n                return\\n            middle = (left + right)//2\\n            root = TreeNode(nums[middle])\\n            root.left = recursiveToBST(left, middle - 1)\\n            root.right = recursiveToBST(middle + 1, right)\\n            return root\\n        return recursiveToBST(0, len(nums) - 1)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1679823,
                "title": "c-binary-divide-conquer-1-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n       TreeNode* res(vector<int>& nums, int start, int end) {\\n        return start>=end ? NULL : new TreeNode(nums[(start + end) / 2], res(nums, start, (start + end) / 2), res(nums, (start + end) / 2 + 1, end));\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return res(nums, 0, nums.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n       TreeNode* res(vector<int>& nums, int start, int end) {\\n        return start>=end ? NULL : new TreeNode(nums[(start + end) / 2], res(nums, start, (start + end) / 2), res(nums, (start + end) / 2 + 1, end));\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return res(nums, 0, nums.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1565395,
                "title": "python-simple-and-short-recursive-solution",
                "content": "**Python :**\\n\\n```\\ndef sortedArrayToBSTRec(self, nums: List[int], start, end) -> Optional[TreeNode]:\\n\\tif start >= end:\\n\\t\\treturn None\\n\\n\\tmid = (start + end) // 2\\n\\n\\tnewNode = TreeNode(nums[mid])\\n\\tnewNode.left = self.sortedArrayToBSTRec(nums, start, mid)\\n\\tnewNode.right = self.sortedArrayToBSTRec(nums, mid + 1, end)\\n\\n\\treturn newNode\\n\\n\\ndef sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n\\treturn self.sortedArrayToBSTRec(nums, 0, len(nums))\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\ndef sortedArrayToBSTRec(self, nums: List[int], start, end) -> Optional[TreeNode]:\\n\\tif start >= end:\\n\\t\\treturn None\\n\\n\\tmid = (start + end) // 2\\n\\n\\tnewNode = TreeNode(nums[mid])\\n\\tnewNode.left = self.sortedArrayToBSTRec(nums, start, mid)\\n\\tnewNode.right = self.sortedArrayToBSTRec(nums, mid + 1, end)\\n\\n\\treturn newNode\\n\\n\\ndef sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n\\treturn self.sortedArrayToBSTRec(nums, 0, len(nums))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1456347,
                "title": "faster-than-100",
                "content": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        if(nums==null) {\\n            return null;\\n        }\\n        return dfs(nums, 0, nums.length-1);\\n    }\\n    \\n    public TreeNode dfs(int[] nums, int start, int end) {\\n        if(start > end) {\\n            return null;\\n        }\\n        int mid = start + (end-start)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = dfs(nums, start, mid-1);\\n        root.right = dfs(nums, mid+1, end);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        if(nums==null) {\\n            return null;\\n        }\\n        return dfs(nums, 0, nums.length-1);\\n    }\\n    \\n    public TreeNode dfs(int[] nums, int start, int end) {\\n        if(start > end) {\\n            return null;\\n        }\\n        int mid = start + (end-start)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = dfs(nums, start, mid-1);\\n        root.right = dfs(nums, mid+1, end);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1132872,
                "title": "4ms-solution-in-c-language-with-comments-for-easy-understanding",
                "content": "```\\nstruct TreeNode* bst(int *nums, int start, int end)\\n{\\n    // when no more elements left from array to add to BST\\n    if(end < start)\\n        return NULL ;\\n    \\n    //Using the binary search algorithm to add elements to the BST\\n    int mid = (start + end)/2 ;\\n    \\n    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n    \\n    root->val = nums[mid];\\n    root->left = bst(nums, start, mid-1);\\n    root->right = bst(nums,mid+1, end);\\n    \\n    return root;\\n}\\n\\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\\n    \\n    //When array is empty\\n    if(numsSize <= 0)\\n        return NULL;\\n    else\\n        return bst(nums, 0, numsSize-1);\\n    \\n    \\n}\\n```",
                "solutionTags": [
                    "C",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\nstruct TreeNode* bst(int *nums, int start, int end)\\n{\\n    // when no more elements left from array to add to BST\\n    if(end < start)\\n        return NULL ;\\n    \\n    //Using the binary search algorithm to add elements to the BST\\n    int mid = (start + end)/2 ;\\n    \\n    struct TreeNode* root = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n    \\n    root->val = nums[mid];\\n    root->left = bst(nums, start, mid-1);\\n    root->right = bst(nums,mid+1, end);\\n    \\n    return root;\\n}\\n\\nstruct TreeNode* sortedArrayToBST(int* nums, int numsSize){\\n    \\n    //When array is empty\\n    if(numsSize <= 0)\\n        return NULL;\\n    else\\n        return bst(nums, 0, numsSize-1);\\n    \\n    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1085110,
                "title": "solution-in-java-100-faster",
                "content": "```\\nclass Solution {\\n    public TreeNode helper(int[] nums,int l,int r){\\n        if(l>r)\\n            return null;\\n        \\n        int mid=(r+l)/2;\\n        \\n        TreeNode root=new TreeNode(nums[mid]);\\n        root.left=helper(nums,l,mid-1);\\n        root.right=helper(nums,mid+1,r);\\n        \\n        return root;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        int l=0,r=nums.length-1;\\n        return helper(nums,l,r);\\n    }\\n}\\n```\\nPlease **upvote**, if you like the solution:)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public TreeNode helper(int[] nums,int l,int r){\\n        if(l>r)\\n            return null;\\n        \\n        int mid=(r+l)/2;\\n        \\n        TreeNode root=new TreeNode(nums[mid]);\\n        root.left=helper(nums,l,mid-1);\\n        root.right=helper(nums,mid+1,r);\\n        \\n        return root;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        int l=0,r=nums.length-1;\\n        return helper(nums,l,r);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 513742,
                "title": "two-python-sol-by-divide-and-conquer-80-with-hint-and-comment",
                "content": "Two Python sol. by divide and conquer.\\n\\n---\\n\\nFirst one is **out-of-place** implementation, using the **list slicing syntax** to copy and pass subarray to next level.\\n\\nSecond one is **in-place** implementation, using the **list index** to pass subarray range to next level.\\n\\n---\\n\\n**Hint**:\\n\\nBuild balanced BST by **divide-and-conquer**.\\n\\nIn addition, choose the **midpoint value as root node**, in order to **keep each subtree balanced with size O( n / 2 )** on each dividing process.\\n\\n---\\n\\n**Implementation**:\\n\\n---\\nMethod_#1\\nBy out-of-place passing of sub-array\\n\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        \\n        if len(nums) == 0:\\n\\t\\t\\t# Base case: ( also known as stop condtion )\\n            return None\\n        \\n        else:\\n            # General case:\\n\\t\\t\\t# Solve by divide-and-conquer\\n\\t\\t\\t\\n\\t\\t\\t# conquer\\n            mid = len(nums)//2\\n            root = TreeNode(  nums[ mid ] )\\n\\n\\t\\t\\t# divide\\n            root.left = self.sortedArrayToBST( nums[:mid] )\\n            root.right = self.sortedArrayToBST( nums[mid+1:])\\n\\n            return root\\n```\\n\\n---\\n\\nMethod_#2\\nBy in-place passing of sub-array\\n\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        \\n\\n        def helper( left, right):\\n\\n            if left > right:\\n                # Base case: ( also known as stop condtion )\\n                return None\\n            \\n            else:\\n                # General case:\\n                # Solve by divide-and-conquer\\n                \\n                # conquer\\n                mid = left + (right-left)//2\\n                root = TreeNode(  nums[ mid ] )\\n\\n                # divide\\n                root.left = helper( left, mid-1 )\\n                root.right = helper( mid+1, right )\\n\\n                return root\\n\\n        # ----------------------\\n        return helper( 0, len(nums)-1 )\\n```\\n\\n---\\nRelated leetcode challenge:\\n\\n[Leetcode #109 Convert Sorted List to Binary Search Tree](https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/)",
                "solutionTags": [
                    "Python",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        \\n        if len(nums) == 0:\\n\\t\\t\\t# Base case: ( also known as stop condtion )\\n            return None\\n        \\n        else:\\n            # General case:\\n\\t\\t\\t# Solve by divide-and-conquer\\n\\t\\t\\t\\n\\t\\t\\t# conquer\\n            mid = len(nums)//2\\n            root = TreeNode(  nums[ mid ] )\\n\\n\\t\\t\\t# divide\\n            root.left = self.sortedArrayToBST( nums[:mid] )\\n            root.right = self.sortedArrayToBST( nums[mid+1:])\\n\\n            return root\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        \\n\\n        def helper( left, right):\\n\\n            if left > right:\\n                # Base case: ( also known as stop condtion )\\n                return None\\n            \\n            else:\\n                # General case:\\n                # Solve by divide-and-conquer\\n                \\n                # conquer\\n                mid = left + (right-left)//2\\n                root = TreeNode(  nums[ mid ] )\\n\\n                # divide\\n                root.left = helper( left, mid-1 )\\n                root.right = helper( mid+1, right )\\n\\n                return root\\n\\n        # ----------------------\\n        return helper( 0, len(nums)-1 )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 480573,
                "title": "divide-and-conquer-dfs-bfs-recursive-in-order-iterative-in-order",
                "content": "````\\n\\tpublic TreeNode sortedArrayToBST(int[] nums) {\\n        int n = nums.length;\\n//        return divide_and_conquer(nums, 0, n-1);\\n//        return dfs_iterative(nums);\\n//        return bfs_iterative(nums);\\n//        return recursive_in_order(nums, 0, n-1);\\n        return iterative_in_order(nums);\\n    }\\n\\n    private TreeNode divide_and_conquer(int[] nums, int lo, int hi) {\\n        if (lo > hi) return null;\\n        int mi = lo + (hi-lo) / 2;\\n        TreeNode root = new TreeNode(nums[mi]);\\n        root.left = divide_and_conquer(nums, lo, mi-1);\\n        root.right = divide_and_conquer(nums, mi+1, hi);\\n        return root;\\n    }\\n\\n    /**\\n     *  Interesting : Assume that we have a root, then root.val will be assign later.\\n     */\\n    private TreeNode dfs_iterative(int[] nums) {\\n        if (nums == null || nums.length == 0) return null;\\n        Stack<TreeNode> st = new Stack<>();\\n        TreeNode root = new TreeNode(0), cur;\\n        st.push(root);\\n\\n        Stack<Integer> inds = new Stack<>();\\n        int lo = 0, hi = nums.length-1, mid;\\n        inds.push(hi);\\n        inds.push(lo);\\n\\n        while (!st.isEmpty()) {\\n            cur = st.pop();\\n            lo = inds.pop();\\n            hi = inds.pop();\\n            mid = lo + (hi-lo)/2;\\n            cur.val = nums[mid];\\n\\n            if (lo < mid) {\\n                cur.left = new TreeNode(0);\\n                st.push(cur.left);\\n                inds.push(mid-1);\\n                inds.push(lo);\\n            }\\n\\n            if (hi > mid) {\\n                cur.right = new TreeNode(0);\\n                st.push(cur.right);\\n                inds.push(hi);\\n                inds.push(mid+1);\\n            }\\n        }\\n        return root;\\n    }\\n\\n    private TreeNode bfs_iterative(int[] nums) {\\n        if (nums == null || nums.length == 0) return null;\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        TreeNode root = new TreeNode(0), cur;\\n        queue.offer(root);\\n\\n        Queue<Integer> inds = new LinkedList<>();\\n        int lo = 0, hi = nums.length-1, mid;\\n        inds.offer(lo);\\n        inds.offer(hi);\\n\\n        while (!queue.isEmpty()) {\\n            int size = queue.size();\\n            for (int i = 0; i < size; i++) {\\n                cur = queue.poll();\\n                lo = inds.poll();\\n                hi = inds.poll();\\n                mid = lo + (hi-lo)/2;\\n                cur.val = nums[mid];\\n\\n                if (lo < mid) {\\n                    cur.left = new TreeNode(0);\\n                    queue.offer(cur.left);\\n                    inds.offer(lo);\\n                    inds.offer(mid-1);\\n                }\\n\\n                if (hi > mid) {\\n                    cur.right = new TreeNode(0);\\n                    queue.offer(cur.right);\\n                    inds.offer(mid+1);\\n                    inds.offer(hi);\\n                }\\n            }\\n        }\\n        return root;\\n    }\\n\\n    int index = 0;\\n    private TreeNode recursive_in_order(int[] nums, int lo, int hi) {\\n        if (lo > hi) return null;\\n        int mid = lo + (hi-lo) / 2;\\n        TreeNode left = recursive_in_order(nums, lo, mid-1);\\n        TreeNode root = new TreeNode(nums[index++]);\\n        root.left = left;\\n        root.right = recursive_in_order(nums, mid+1, hi);\\n        return root;\\n    }\\n\\n    private TreeNode iterative_in_order(int[] nums) {\\n        if (nums.length == 0) return null;\\n        Stack<TreeNode> st = new Stack<>();\\n        Stack<Integer> inds = new Stack<>();\\n        TreeNode root = pushAllLeft(1, nums.length, st, inds);\\n        int i = 0;\\n        while (!st.isEmpty()) {\\n            int lo = inds.pop(), hi = inds.pop();\\n            int mid = lo + (hi-lo) / 2;\\n            lo = mid+1;\\n            TreeNode node = st.pop();\\n            node.val = nums[i++];\\n            node.right = pushAllLeft(mid+1, hi, st, inds);            \\n        }\\n        return root;\\n    }\\n    \\n    private TreeNode pushAllLeft(int lo, int hi, Stack<TreeNode> st, Stack<Integer> inds) {\\n        TreeNode root = null;\\n        while (lo <= hi) {\\n            TreeNode node = new TreeNode(0);            \\n            if (root == null) root = node;\\n            else if (!st.isEmpty()) st.peek().left = node;\\n            st.push(node);\\n            inds.push(hi);\\n            inds.push(lo);\\n            int mid = lo + (hi-lo) / 2;\\n            hi = mid-1;                      \\n        }\\n        return root;\\n    }\\n````",
                "solutionTags": [],
                "code": "````\\n\\tpublic TreeNode sortedArrayToBST(int[] nums) {\\n        int n = nums.length;\\n//        return divide_and_conquer(nums, 0, n-1);\\n//        return dfs_iterative(nums);\\n//        return bfs_iterative(nums);\\n//        return recursive_in_order(nums, 0, n-1);\\n        return iterative_in_order(nums);\\n    }\\n\\n    private TreeNode divide_and_conquer(int[] nums, int lo, int hi) {\\n        if (lo > hi) return null;\\n        int mi = lo + (hi-lo) / 2;\\n        TreeNode root = new TreeNode(nums[mi]);\\n        root.left = divide_and_conquer(nums, lo, mi-1);\\n        root.right = divide_and_conquer(nums, mi+1, hi);\\n        return root;\\n    }\\n\\n    /**\\n     *  Interesting : Assume that we have a root, then root.val will be assign later.\\n     */\\n    private TreeNode dfs_iterative(int[] nums) {\\n        if (nums == null || nums.length == 0) return null;\\n        Stack<TreeNode> st = new Stack<>();\\n        TreeNode root = new TreeNode(0), cur;\\n        st.push(root);\\n\\n        Stack<Integer> inds = new Stack<>();\\n        int lo = 0, hi = nums.length-1, mid;\\n        inds.push(hi);\\n        inds.push(lo);\\n\\n        while (!st.isEmpty()) {\\n            cur = st.pop();\\n            lo = inds.pop();\\n            hi = inds.pop();\\n            mid = lo + (hi-lo)/2;\\n            cur.val = nums[mid];\\n\\n            if (lo < mid) {\\n                cur.left = new TreeNode(0);\\n                st.push(cur.left);\\n                inds.push(mid-1);\\n                inds.push(lo);\\n            }\\n\\n            if (hi > mid) {\\n                cur.right = new TreeNode(0);\\n                st.push(cur.right);\\n                inds.push(hi);\\n                inds.push(mid+1);\\n            }\\n        }\\n        return root;\\n    }\\n\\n    private TreeNode bfs_iterative(int[] nums) {\\n        if (nums == null || nums.length == 0) return null;\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        TreeNode root = new TreeNode(0), cur;\\n        queue.offer(root);\\n\\n        Queue<Integer> inds = new LinkedList<>();\\n        int lo = 0, hi = nums.length-1, mid;\\n        inds.offer(lo);\\n        inds.offer(hi);\\n\\n        while (!queue.isEmpty()) {\\n            int size = queue.size();\\n            for (int i = 0; i < size; i++) {\\n                cur = queue.poll();\\n                lo = inds.poll();\\n                hi = inds.poll();\\n                mid = lo + (hi-lo)/2;\\n                cur.val = nums[mid];\\n\\n                if (lo < mid) {\\n                    cur.left = new TreeNode(0);\\n                    queue.offer(cur.left);\\n                    inds.offer(lo);\\n                    inds.offer(mid-1);\\n                }\\n\\n                if (hi > mid) {\\n                    cur.right = new TreeNode(0);\\n                    queue.offer(cur.right);\\n                    inds.offer(mid+1);\\n                    inds.offer(hi);\\n                }\\n            }\\n        }\\n        return root;\\n    }\\n\\n    int index = 0;\\n    private TreeNode recursive_in_order(int[] nums, int lo, int hi) {\\n        if (lo > hi) return null;\\n        int mid = lo + (hi-lo) / 2;\\n        TreeNode left = recursive_in_order(nums, lo, mid-1);\\n        TreeNode root = new TreeNode(nums[index++]);\\n        root.left = left;\\n        root.right = recursive_in_order(nums, mid+1, hi);\\n        return root;\\n    }\\n\\n    private TreeNode iterative_in_order(int[] nums) {\\n        if (nums.length == 0) return null;\\n        Stack<TreeNode> st = new Stack<>();\\n        Stack<Integer> inds = new Stack<>();\\n        TreeNode root = pushAllLeft(1, nums.length, st, inds);\\n        int i = 0;\\n        while (!st.isEmpty()) {\\n            int lo = inds.pop(), hi = inds.pop();\\n            int mid = lo + (hi-lo) / 2;\\n            lo = mid+1;\\n            TreeNode node = st.pop();\\n            node.val = nums[i++];\\n            node.right = pushAllLeft(mid+1, hi, st, inds);            \\n        }\\n        return root;\\n    }\\n    \\n    private TreeNode pushAllLeft(int lo, int hi, Stack<TreeNode> st, Stack<Integer> inds) {\\n        TreeNode root = null;\\n        while (lo <= hi) {\\n            TreeNode node = new TreeNode(0);            \\n            if (root == null) root = node;\\n            else if (!st.isEmpty()) st.peek().left = node;\\n            st.push(node);\\n            inds.push(hi);\\n            inds.push(lo);\\n            int mid = lo + (hi-lo) / 2;\\n            hi = mid-1;                      \\n        }\\n        return root;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 420904,
                "title": "a-really-easy-python-solution",
                "content": "This solution takes O(n) runtime and O(log n) space complexity\\n```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        return self.helper(nums, 0, len(nums) - 1)\\n    def helper(self, nums, low, high):\\n        if low > high:\\n            return None\\n        mid = (low + high) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.helper(nums, low, mid - 1)\\n        root.right = self.helper(nums, mid + 1, high)\\n        \\n        return root\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        return self.helper(nums, 0, len(nums) - 1)\\n    def helper(self, nums, low, high):\\n        if low > high:\\n            return None\\n        mid = (low + high) // 2\\n        root = TreeNode(nums[mid])\\n        root.left = self.helper(nums, low, mid - 1)\\n        root.right = self.helper(nums, mid + 1, high)\\n        \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 347511,
                "title": "cpp-with-explanation-20ms",
                "content": "There\\'s a few key observations to be made: \\n(0) BST printed with Inorder traversal will yield a sorted sequence. \\n(1) Find the middle of the sorted array --> that\\'s the root\\n>> Hence everything to its left is the left subtree and everything to its right is the right subtree \\nNote a side effect of this is the middle is always right biased making our lives easier because we just have to divide by 2. \\n\\n(2) Repeat until we finish going through the entire sorted array\\n>> How do we repeat? By recurring (use recursion) only on a subset of nums, as mentioned before everything to the left of the middle index is the left subtree [so you just defined you\\'re subproblem there]\\n>> What does it mean to have gone through the entire sorted array? *When the nums we\\'re passing is in empty*\\n   \\n ```\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\n        // HEIGHT BALANCed!\\n        \\n        if (nums.size() == 0)\\n            return NULL;\\n        int mid = nums.size() / 2;\\n        TreeNode * newNode = new TreeNode(nums[mid]); // create a new node with the value of the middle of sorted array\\n        \\n        if (mid -1 >= 0){\\n            vector<int> left(nums.begin(), nums.begin() + mid);\\n            newNode->left = sortedArrayToBST(left); // to the left of this node is the sub-vector from 0 to mid (hence the end condition is when nums is empty)\\n        }\\n        \\n        if (mid + 1 < nums.size()){\\n            vector<int> right(nums.begin() + mid + 1, nums.end());\\n            newNode->right = sortedArrayToBST(right);\\n        }\\n        return newNode;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nTreeNode* sortedArrayToBST(vector<int>& nums) {\\n        // HEIGHT BALANCed!\\n        \\n        if (nums.size() == 0)\\n            return NULL;\\n        int mid = nums.size() / 2;\\n        TreeNode * newNode = new TreeNode(nums[mid]); // create a new node with the value of the middle of sorted array\\n        \\n        if (mid -1 >= 0){\\n            vector<int> left(nums.begin(), nums.begin() + mid);\\n            newNode->left = sortedArrayToBST(left); // to the left of this node is the sub-vector from 0 to mid (hence the end condition is when nums is empty)\\n        }\\n        \\n        if (mid + 1 < nums.size()){\\n            vector<int> right(nums.begin() + mid + 1, nums.end());\\n            newNode->right = sortedArrayToBST(right);\\n        }\\n        return newNode;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 182076,
                "title": "easy-to-understand-c",
                "content": "\\n```\\nclass Solution {\\n    TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end)\\n    {\\n        if (start > end) \\n            return NULL; \\n  \\n        //Get the middle element and make it root \\n        int mid = (start + end)/2; \\n        TreeNode *root = new TreeNode(nums[mid]); \\n\\n        //Recursively construct the left subtree and make it left child of root \\n        root->left =  sortedArrayToBST(nums, start, mid-1); \\n\\n        //Recursively construct the right subtree and make it right child of root \\n        root->right = sortedArrayToBST(nums, mid+1, end); \\n\\n        return root; \\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return sortedArrayToBST(nums, 0, nums.size()-1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    TreeNode* sortedArrayToBST(vector<int>& nums, int start, int end)\\n    {\\n        if (start > end) \\n            return NULL; \\n  \\n        //Get the middle element and make it root \\n        int mid = (start + end)/2; \\n        TreeNode *root = new TreeNode(nums[mid]); \\n\\n        //Recursively construct the left subtree and make it left child of root \\n        root->left =  sortedArrayToBST(nums, start, mid-1); \\n\\n        //Recursively construct the right subtree and make it right child of root \\n        root->right = sortedArrayToBST(nums, mid+1, end); \\n\\n        return root; \\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return sortedArrayToBST(nums, 0, nums.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 169112,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not nums:\\n            return\\n        n = len(nums)\\n        if n == 1:\\n            return TreeNode(nums[0])\\n        elif n == 2:\\n            root = TreeNode(nums[0])\\n            right = TreeNode(nums[1])\\n            root.right = right\\n            return root\\n        mid = n / 2\\n        root = TreeNode(nums[mid])\\n        left = self.sortedArrayToBST(nums[:mid])\\n        right = self.sortedArrayToBST(nums[mid+1:])\\n        root.left = left\\n        root.right = right\\n        return root\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def sortedArrayToBST(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not nums:\\n            return\\n        n = len(nums)\\n        if n == 1:\\n            return TreeNode(nums[0])\\n        elif n == 2:\\n            root = TreeNode(nums[0])\\n            right = TreeNode(nums[1])\\n            root.right = right\\n            return root\\n        mid = n / 2\\n        root = TreeNode(nums[mid])\\n        left = self.sortedArrayToBST(nums[:mid])\\n        right = self.sortedArrayToBST(nums[mid+1:])\\n        root.left = left\\n        root.right = right\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35259,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        if nums.count == 0 {\\n            return nil\\n        }\\n        \\n        return helper(nums, 0, nums.count - 1)\\n    }\\n    \\n    func helper(_ nums: [Int], _ low: Int, _ high: Int) -> TreeNode? {\\n        if low > high {\\n            return nil\\n        }\\n        \\n        let middle = (low + high) / 2\\n        let node = TreeNode(nums[middle])\\n        node.left = helper(nums, low, middle - 1)\\n        node.right = helper(nums, middle + 1, high)\\n        \\n        return node\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        if nums.count == 0 {\\n            return nil\\n        }\\n        \\n        return helper(nums, 0, nums.count - 1)\\n    }\\n    \\n    func helper(_ nums: [Int], _ low: Int, _ high: Int) -> TreeNode? {\\n        if low > high {\\n            return nil\\n        }\\n        \\n        let middle = (low + high) / 2\\n        let node = TreeNode(nums[middle])\\n        node.left = helper(nums, low, middle - 1)\\n        node.right = helper(nums, middle + 1, high)\\n        \\n        return node\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980564,
                "title": "best-o-n-solution",
                "content": "# Approach\\nOptimal\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* build(int start, int end, vector<int>& nums) {\\n        if (start > end)\\n            return NULL;\\n        int ind = (start + end) / 2;\\n        TreeNode* root = new TreeNode(nums[ind]);\\n        root->left = build(start, ind-1, nums);\\n        root->right = build(ind+1, end, nums);\\n\\n        return root;    \\n    }\\n\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return build(0, nums.size() - 1, nums);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* build(int start, int end, vector<int>& nums) {\\n        if (start > end)\\n            return NULL;\\n        int ind = (start + end) / 2;\\n        TreeNode* root = new TreeNode(nums[ind]);\\n        root->left = build(start, ind-1, nums);\\n        root->right = build(ind+1, end, nums);\\n\\n        return root;    \\n    }\\n\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return build(0, nums.size() - 1, nums);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3360413,
                "title": "java-very-easy-solution-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhere i have used concept of BST\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode createBST(int arr[],int st,int end){\\n        int mid=(st+end)/2;\\n        if(st>end) return null;\\n        TreeNode root=new TreeNode(arr[mid]);\\n        root.left=createBST(arr,st,mid-1);\\n        root.right=createBST(arr,mid+1,end);\\n        return root;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        int n=nums.length;\\n        TreeNode root=createBST(nums,0,n-1);\\n        return root;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode createBST(int arr[],int st,int end){\\n        int mid=(st+end)/2;\\n        if(st>end) return null;\\n        TreeNode root=new TreeNode(arr[mid]);\\n        root.left=createBST(arr,st,mid-1);\\n        root.right=createBST(arr,mid+1,end);\\n        return root;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        int n=nums.length;\\n        TreeNode root=createBST(nums,0,n-1);\\n        return root;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297101,
                "title": "why-time-complexity-is-o-n-and-not-o-nlogn",
                "content": "I read a lot of threads, and there is a lot of confusion regarding the time complexity of the solution. Below is a recursive solution for the problem, and its time complexity is O(n). It is so because We are Doing a Constant amount of operations inside each function call. \\n\\nIf you recall the Merge sort, where we do O(n) number of comparisons at each level, and the number of comparisons in each recursion is equal to the size of the lists, the recursion depth is O(logn); therefore, the time complexity is O(nlogn).\\n\\nOn the other hand, the Total number of recursive function calls here is O(n), and each call does a constant number of operations. \\n\\n# Code\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        def genTree(i,j):\\n            if( i > j ): return None;\\n            elif( i ==j ): return TreeNode(nums[i]);\\n            mid = (i+j)//2;\\n            return TreeNode(nums[mid],genTree(i,mid-1),genTree(mid+1,j) );\\n        return genTree(0,len(nums)-1);\\n\\n```\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "I read a lot of threads, and there is a lot of confusion regarding the time complexity of the solution. Below is a recursive solution for the problem, and its time complexity is O(n). It is so because We are Doing a Constant amount of operations inside each function call. \\n\\nIf you recall the Merge sort, where we do O(n) number of comparisons at each level, and the number of comparisons in each recursion is equal to the size of the lists, the recursion depth is O(logn); therefore, the time complexity is O(nlogn).\\n\\nOn the other hand, the Total number of recursive function calls here is O(n), and each call does a constant number of operations. \\n\\n# Code\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        def genTree(i,j):\\n            if( i > j ): return None;\\n            elif( i ==j ): return TreeNode(nums[i]);\\n            mid = (i+j)//2;\\n            return TreeNode(nums[mid],genTree(i,mid-1),genTree(mid+1,j) );\\n        return genTree(0,len(nums)-1);\\n\\n```\\n\\n",
                "codeTag": "Python3"
            },
            {
                "id": 3258746,
                "title": "java-using-recursion-100-faster-with-simple-steps",
                "content": "# Approach:-\\n\\n1. We pick the middle element to make a root and create a root node\\n2. Take left side of middle array pass them recursively to get left sub tree\\n3. use right side element to get right sub tree\\n4. Connect these sub tree with root node and simply return root node\\n   -->**Inorder traversal of binary search tree outputs the value in sorted order**\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateBST(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode CreateBST(int nums[], int left, int right) {\\n        if (left > right) return null;\\n        int m = (right + left) / 2;\\n        TreeNode root = new TreeNode(nums[m]);\\n        root.left = CreateBST(nums, left, m - 1);\\n        root.right = CreateBST(nums, m+ 1, right);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateBST(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode CreateBST(int nums[], int left, int right) {\\n        if (left > right) return null;\\n        int m = (right + left) / 2;\\n        TreeNode root = new TreeNode(nums[m]);\\n        root.left = CreateBST(nums, left, m - 1);\\n        root.right = CreateBST(nums, m+ 1, right);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3161897,
                "title": "easiest-recursive-solution-helper-method",
                "content": "# Code\\n```\\n/*\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n*/\\n\\nclass Solution {\\n    public TreeNode helper(int[] arr, int start, int end){\\n        if(start > end) return null;\\n        int mid = start + (end-start)/2;\\n        TreeNode midNode = new TreeNode(arr[mid]);\\n        midNode.left = helper(arr, start, mid-1);\\n        midNode.right = helper(arr, mid+1, end);\\n        return midNode;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {        \\n        return helper(nums, 0, nums.length-1);\\n    }\\n}\\n\\n// Cheers Woah!!\\n// Let\\'s Grow together\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/*\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n*/\\n\\nclass Solution {\\n    public TreeNode helper(int[] arr, int start, int end){\\n        if(start > end) return null;\\n        int mid = start + (end-start)/2;\\n        TreeNode midNode = new TreeNode(arr[mid]);\\n        midNode.left = helper(arr, start, mid-1);\\n        midNode.right = helper(arr, mid+1, end);\\n        return midNode;\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums) {        \\n        return helper(nums, 0, nums.length-1);\\n    }\\n}\\n\\n// Cheers Woah!!\\n// Let\\'s Grow together\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3147991,
                "title": "simple-recurtion-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) \\n    {\\n        return CreateNode(0, nums.Length - 1);\\n\\n        TreeNode CreateNode(int left, int right)\\n        {\\n            if (left > right)\\n            {\\n                return null;\\n            }\\n            int mid = left + (right - left) / 2;\\n            return new TreeNode(nums[mid], CreateNode(left, mid - 1), CreateNode(mid + 1, right));\\n        }\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Array",
                    "Tree",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) \\n    {\\n        return CreateNode(0, nums.Length - 1);\\n\\n        TreeNode CreateNode(int left, int right)\\n        {\\n            if (left > right)\\n            {\\n                return null;\\n            }\\n            int mid = left + (right - left) / 2;\\n            return new TreeNode(nums[mid], CreateNode(left, mid - 1), CreateNode(mid + 1, right));\\n        }\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2705947,
                "title": "beats-100-easy-solution",
                "content": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n          if (nums.length == 0) {\\n        return null;\\n    }\\n\\n    TreeNode head = helper(nums, 0, nums.length - 1);\\n    return head;\\n}\\n\\npublic TreeNode helper(int[] nums, int low, int high) {\\n    if (low > high) { \\n        return null;\\n\\n    }\\n\\n    int mid = (low + high) / 2;\\n    TreeNode node = new TreeNode(nums[mid]);\\n    node.left = helper(nums, low, mid - 1);\\n    node.right = helper(nums, mid + 1, high);\\n    return node;\\n    \\n}\\n    }\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Binary Search",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n          if (nums.length == 0) {\\n        return null;\\n    }\\n\\n    TreeNode head = helper(nums, 0, nums.length - 1);\\n    return head;\\n}\\n\\npublic TreeNode helper(int[] nums, int low, int high) {\\n    if (low > high) { \\n        return null;\\n\\n    }\\n\\n    int mid = (low + high) / 2;\\n    TreeNode node = new TreeNode(nums[mid]);\\n    node.left = helper(nums, low, mid - 1);\\n    node.right = helper(nums, mid + 1, high);\\n    return node;\\n    \\n}\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2572494,
                "title": "97-92-senior-developer-javascript-js-2022",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number[]} nums\\n * @return {TreeNode}\\n */\\nvar sortedArrayToBST = function(nums) {\\n    \\n    const fn = (nums, left, right) => {\\n        if (left >= right) return null;\\n        const mid = Math.floor((left + right)/2);\\n        return new TreeNode(nums[mid], \\n                            fn(nums, left, mid), \\n                            fn(nums, mid+1, right))\\n    }\\n    \\n    return fn(nums, 0, nums.length)\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number[]} nums\\n * @return {TreeNode}\\n */\\nvar sortedArrayToBST = function(nums) {\\n    \\n    const fn = (nums, left, right) => {\\n        if (left >= right) return null;\\n        const mid = Math.floor((left + right)/2);\\n        return new TreeNode(nums[mid], \\n                            fn(nums, left, mid), \\n                            fn(nums, mid+1, right))\\n    }\\n    \\n    return fn(nums, 0, nums.length)\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2473306,
                "title": "javascript-fast-and-optimized-iterative-approach",
                "content": "```\\nvar sortedArrayToBST = function(nums) {\\n    if (nums.length === 0) return undefined\\n    \\n    const root = new TreeNode(0)\\n    const nodesToCheck = [{node: root, floor: 0, ceiling: nums.length - 1}]\\n    \\n    while(nodesToCheck.length) {\\n        const { node, floor, ceiling } = nodesToCheck.pop()\\n        const middle = Math.ceil((floor + ceiling) / 2)\\n        \\n        node.val = nums[middle]\\n        \\n        if (floor < middle) {\\n            node.left = new TreeNode(0)\\n            nodesToCheck.push({ node: node.left, floor, ceiling: middle - 1 })\\n        }\\n        \\n        if (ceiling > middle) {\\n            node.right = new TreeNode(0)\\n            nodesToCheck.push({ node: node.right, floor: middle + 1, ceiling })\\n        }\\n    }\\n    \\n    return root\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Iterator"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n    if (nums.length === 0) return undefined\\n    \\n    const root = new TreeNode(0)\\n    const nodesToCheck = [{node: root, floor: 0, ceiling: nums.length - 1}]\\n    \\n    while(nodesToCheck.length) {\\n        const { node, floor, ceiling } = nodesToCheck.pop()\\n        const middle = Math.ceil((floor + ceiling) / 2)\\n        \\n        node.val = nums[middle]\\n        \\n        if (floor < middle) {\\n            node.left = new TreeNode(0)\\n            nodesToCheck.push({ node: node.left, floor, ceiling: middle - 1 })\\n        }\\n        \\n        if (ceiling > middle) {\\n            node.right = new TreeNode(0)\\n            nodesToCheck.push({ node: node.right, floor: middle + 1, ceiling })\\n        }\\n    }\\n    \\n    return root\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2405364,
                "title": "c-short-clean-code",
                "content": "***DO UPVOTE IF IT HELPS !!!!!!***\\n\\t\\n\\tTreeNode* help(vector<int>&nums, int i, int j){\\n        \\n        if(i>j) return NULL;\\n        \\n        int mid=i+(j-i)/2;   //mid\\n        \\n        TreeNode *root=new TreeNode(nums[mid]);  //create root node\\n        \\n        root->left=help(nums,i,mid-1);    //recursion on root->left\\n        root->right=help(nums,mid+1,j);   //recursion on root->right\\n        \\n        return root;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n=nums.size();\\n        return help(nums,0,n-1);\\n    }",
                "solutionTags": [
                    "C",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "***DO UPVOTE IF IT HELPS !!!!!!***\\n\\t\\n\\tTreeNode* help(vector<int>&nums, int i, int j){\\n        \\n        if(i>j) return NULL;\\n        \\n        int mid=i+(j-i)/2;   //mid\\n        \\n        TreeNode *root=new TreeNode(nums[mid]);  //create root node\\n        \\n        root->left=help(nums,i,mid-1);    //recursion on root->left\\n        root->right=help(nums,mid+1,j);   //recursion on root->right\\n        \\n        return root;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n=nums.size();\\n        return help(nums,0,n-1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2405199,
                "title": "c-easy-recursion-logic",
                "content": "```\\nclass Solution {\\n    TreeNode* doWork(vector<int>& nums, int l, int r) {\\n        if(r < l) return nullptr;\\n        int mid = l + (r-l) / 2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left = doWork(nums, l, mid-1);\\n        root->right = doWork(nums, mid+1, r);\\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n = nums.size();\\n        return doWork(nums, 0, n-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    TreeNode* doWork(vector<int>& nums, int l, int r) {\\n        if(r < l) return nullptr;\\n        int mid = l + (r-l) / 2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left = doWork(nums, l, mid-1);\\n        root->right = doWork(nums, mid+1, r);\\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n = nums.size();\\n        return doWork(nums, 0, n-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2404626,
                "title": "c-binary-search-recursive-clean-and-concise",
                "content": "**Recursive Approach.**\\n**Binary Search and Divide & Conquer Technique used.**\\n    \\n**Note:- Divide the Problem into subparts, then solve the subparts and then get to the final solution.**\\n    \\n**Approach:-**\\n\\t\\n*    As the array is sorted, so the first technique that should come in our mind is **Binary Search**.\\n*   Then apply the Binary search by taking two pointers one is **left pointer(l)** at 0th index and **right pointer(r)** at last index.\\n*  Calculate mid and make the element present at that index as a root node.\\n*  Move the left side of Binary search tree. So update **r=mid-1** as all elements in left of Binary search tree are smaller then the root node.\\n*  Simillary do this for right side and now update **l=mid+1**.\\n*  After accessing all the elements return the node which is a Binary Search Tree.\\n\\t  \\n\\t \\n\\t \\nclass Solution {\\npublic:\\n\\n    TreeNode* fun(int start,int end,vector<int> &nums){\\n        if(start>end){                       //Base Condition\\n            return NULL;\\n        }\\n\\t\\t\\n        int mid=start+(end-start)/2;         // mid value calculation for Binary search implementation\\n        TreeNode* node=new TreeNode(nums[mid]);        // creating the node\\n        node->left=fun(start,mid-1,nums);              // for left subtree\\n        node->right=fun(mid+1,end,nums);               // for right subtree\\n        return node;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int start=0;                   // left Pointer (l)\\n        int end=nums.size()-1;         // Right Pointer (r)\\n        TreeNode* root=fun(start,end,nums);\\n        return root;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n\\n    TreeNode* fun(int start,int end,vector<int> &nums){\\n        if(start>end){                       //Base Condition\\n            return NULL;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2404553,
                "title": "easy-c-5-liner-recursive-solution-easy-understanding",
                "content": "# **Easy C++ 5 liner Recursive Solution || Easy Understanding**\\n```\\nclass Solution {\\npublic:\\n    TreeNode* A(vector<int>& nums,int l,int r) {\\n        if(l>r)return NULL;\\n        int mid=(r+l)/2;\\n        TreeNode*root=new TreeNode(nums[mid],A(nums,l,mid-1),A(nums,mid+1,r));\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return A(nums,0,nums.size()-1);\\n    }\\n};\\n```\\n# **Please Share and Upvote**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* A(vector<int>& nums,int l,int r) {\\n        if(l>r)return NULL;\\n        int mid=(r+l)/2;\\n        TreeNode*root=new TreeNode(nums[mid],A(nums,l,mid-1),A(nums,mid+1,r));\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return A(nums,0,nums.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2404529,
                "title": "c-recursion",
                "content": "1. Take the mid point as the root node.\\n2. recurse on the left half of the midpoint\\n3. recurse on the right half of the midpoint\\n4. Tune in EVERYDAY 6pm PACIFIC TIME. Link in profile.\\n\\n```\\nclass Solution {\\n    TreeNode* doWork(vector<int>& nums, int L, int R) {\\n        if(R < L) return nullptr;\\n        int M = L + (R-L) / 2;\\n        \\n        TreeNode* root = new TreeNode(nums[M]);\\n        \\n        root->left = doWork(nums, L, M-1);\\n        root->right = doWork(nums, M+1, R);\\n        \\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n = nums.size();\\n        return doWork(nums, 0, n-1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    TreeNode* doWork(vector<int>& nums, int L, int R) {\\n        if(R < L) return nullptr;\\n        int M = L + (R-L) / 2;\\n        \\n        TreeNode* root = new TreeNode(nums[M]);\\n        \\n        root->left = doWork(nums, L, M-1);\\n        root->right = doWork(nums, M+1, R);\\n        \\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n = nums.size();\\n        return doWork(nums, 0, n-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2199396,
                "title": "javascript-js-solution-ultrafast",
                "content": "```\\nvar sortedArrayToBST = function(nums) {\\n    function create(left, right) {\\n        if (left > right) {\\n            return null;\\n        }\\n        \\n        const i = Math.floor((right - left) / 2) + left;\\n        \\n        const node = new TreeNode(nums[i]);\\n        \\n        node.left = create(left, i - 1);\\n        node.right = create(i + 1, right);\\n        \\n        return node;\\n    }\\n    \\n    return create(0, nums.length - 1);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar sortedArrayToBST = function(nums) {\\n    function create(left, right) {\\n        if (left > right) {\\n            return null;\\n        }\\n        \\n        const i = Math.floor((right - left) / 2) + left;\\n        \\n        const node = new TreeNode(nums[i]);\\n        \\n        node.left = create(left, i - 1);\\n        node.right = create(i + 1, right);\\n        \\n        return node;\\n    }\\n    \\n    return create(0, nums.length - 1);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1996086,
                "title": "rust-recursion",
                "content": "![image](https://assets.leetcode.com/users/images/377529cf-093a-47ff-8df5-bd7c3767ecfd_1659975311.772354.png)\\n\\n```rust\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        Self::helper(&nums, 0 as i32, nums.len() as i32 - 1)\\n    }\\n    \\n    pub fn helper(nums: &Vec<i32>, l: i32, r: i32) -> Option<Rc<RefCell<TreeNode>>>{\\n        if l > r {\\n            return None;\\n        }\\n        \\n        let mid = (l+r)/2;\\n        let mut root = TreeNode::new(nums[mid as usize]);\\n        root.left = Self::helper(nums, l, mid-1);\\n        root.right = Self::helper(nums, mid+1, r);\\n        \\n        Some(Rc::new(RefCell::new(root)))\\n    }\\n}\\n\\n```\\n\\nReference: [Blog Post](https://medium.com/go-rust/rust-day-11-convert-sorted-array-to-bst-991e5cce3878)",
                "solutionTags": [
                    "Rust",
                    "Recursion"
                ],
                "code": "```rust\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        Self::helper(&nums, 0 as i32, nums.len() as i32 - 1)\\n    }\\n    \\n    pub fn helper(nums: &Vec<i32>, l: i32, r: i32) -> Option<Rc<RefCell<TreeNode>>>{\\n        if l > r {\\n            return None;\\n        }\\n        \\n        let mid = (l+r)/2;\\n        let mut root = TreeNode::new(nums[mid as usize]);\\n        root.left = Self::helper(nums, l, mid-1);\\n        root.right = Self::helper(nums, mid+1, r);\\n        \\n        Some(Rc::new(RefCell::new(root)))\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1905957,
                "title": "divide-and-conquer-c-recursive-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* constructTree(vector<int>& nums, int l, int r) {\\n        if(l > r) return NULL;\\n        int mid = l + (r-l)/2;\\n        TreeNode* t = new TreeNode(nums[mid]);\\n        t->left = constructTree(nums, l, mid-1);\\n        t->right = constructTree(nums, mid+1, r);\\n        return t;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n = nums.size();\\n        if(n == 0) return NULL;\\n        return constructTree(nums, 0, n-1);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* constructTree(vector<int>& nums, int l, int r) {\\n        if(l > r) return NULL;\\n        int mid = l + (r-l)/2;\\n        TreeNode* t = new TreeNode(nums[mid]);\\n        t->left = constructTree(nums, l, mid-1);\\n        t->right = constructTree(nums, mid+1, r);\\n        return t;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int n = nums.size();\\n        if(n == 0) return NULL;\\n        return constructTree(nums, 0, n-1);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1837473,
                "title": "c-simple-solution",
                "content": "```\\nstruct TreeNode *sortedArrayToBST(int *nums, int numsSize)\\n{\\n    if (numsSize == 0)\\n    {\\n        return NULL;\\n    }\\n    int midIndex = numsSize >> 1;\\n    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));\\n    node->val = nums[midIndex];\\n    node->left = sortedArrayToBST(&nums[0], midIndex);\\n    node->right = sortedArrayToBST(&nums[midIndex + 1], numsSize - midIndex - 1);\\n    return node;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstruct TreeNode *sortedArrayToBST(int *nums, int numsSize)\\n{\\n    if (numsSize == 0)\\n    {\\n        return NULL;\\n    }\\n    int midIndex = numsSize >> 1;\\n    struct TreeNode *node = (struct TreeNode *)malloc(sizeof(struct TreeNode));\\n    node->val = nums[midIndex];\\n    node->left = sortedArrayToBST(&nums[0], midIndex);\\n    node->right = sortedArrayToBST(&nums[midIndex + 1], numsSize - midIndex - 1);\\n    return node;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1695119,
                "title": "java-1ms-recursion-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n       return constructBST(nums,0,nums.length-1); \\n    }\\n    public TreeNode constructBST(int[] nums,int start,int end){\\n        if(start>end)\\n            return null;\\n        int mid=(start+end)/2;\\n        int valueToAdd = nums[mid];\\n        TreeNode bst = new TreeNode(valueToAdd);\\n        bst.left= constructBST(nums,start,mid-1);\\n        bst.right=constructBST(nums,mid+1,end);\\n        return bst;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n       return constructBST(nums,0,nums.length-1); \\n    }\\n    public TreeNode constructBST(int[] nums,int start,int end){\\n        if(start>end)\\n            return null;\\n        int mid=(start+end)/2;\\n        int valueToAdd = nums[mid];\\n        TreeNode bst = new TreeNode(valueToAdd);\\n        bst.left= constructBST(nums,start,mid-1);\\n        bst.right=constructBST(nums,mid+1,end);\\n        return bst;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1533723,
                "title": "rust-using-match",
                "content": "```\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\ntype Node = Option<Rc<RefCell<TreeNode>>>;\\nimpl Solution {\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Node {\\n        let mut n = nums.len();\\n        \\n        match n { \\n             0 => None,\\n            _ => { \\n                let m = n/2;\\n                let mut node = TreeNode::new(nums[m]);\\n                node.left = Self::sorted_array_to_bst(nums[..m].to_vec());\\n                node.right = Self::sorted_array_to_bst(nums[m + 1..].to_vec());\\n                \\n                Some(Rc::new(RefCell::new(node)))\\n            }\\n        }\\n    }\\n}\\n\\t// update: you can still do it without using match\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\ntype Node = Option<Rc<RefCell<TreeNode>>>;\\nimpl Solution {\\n    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Node {\\n        let mut n = nums.len();\\n        \\n        match n { \\n             0 => None,\\n            _ => { \\n                let m = n/2;\\n                let mut node = TreeNode::new(nums[m]);\\n                node.left = Self::sorted_array_to_bst(nums[..m].to_vec());\\n                node.right = Self::sorted_array_to_bst(nums[m + 1..].to_vec());\\n                \\n                Some(Rc::new(RefCell::new(node)))\\n            }\\n        }\\n    }\\n}\\n\\t// update: you can still do it without using match\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1442153,
                "title": "c-optimised-solution-modified-binary-search-approach",
                "content": "**C++ optimised solution | Modified Binary Search Approach**\\n\\n```\\nTreeNode* balancedBST(vector<int> a , int start , int end){\\n\\n\\tif(start > end){\\n\\t\\treturn NULL;\\n\\t}\\n\\n\\tint mid = start + (end - start) / 2;\\n\\n\\tTreeNode* root  = new TreeNode(a[mid]);\\n\\n\\troot->left = balancedBST(a , start , mid-1);\\n\\troot->right = balancedBST(a,mid+1 , end);\\n\\n\\treturn root;\\n}\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        \\n        return balancedBST(nums , 0 , nums.size()-1);\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nTreeNode* balancedBST(vector<int> a , int start , int end){\\n\\n\\tif(start > end){\\n\\t\\treturn NULL;\\n\\t}\\n\\n\\tint mid = start + (end - start) / 2;\\n\\n\\tTreeNode* root  = new TreeNode(a[mid]);\\n\\n\\troot->left = balancedBST(a , start , mid-1);\\n\\troot->right = balancedBST(a,mid+1 , end);\\n\\n\\treturn root;\\n}\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        \\n        return balancedBST(nums , 0 , nums.size()-1);\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1398187,
                "title": "c-binary-search-easy-to-understand",
                "content": "**The mid of every recursive call will be the node of the tree and then we will assign the left and right of that node recursively and then return the given node**\\n```\\n    TreeNode *recursive(vector<int>&nums,int i,int j)\\n    {\\n        if(i>j)return NULL;\\n        int mid=(i+j)/2;\\n        TreeNode *root=new TreeNode(nums[mid]);\\n        root->left=recursive(nums,i,mid-1);\\n        root->right=recursive(nums,mid+1,j);\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return recursive(nums,0,nums.size()-1);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    TreeNode *recursive(vector<int>&nums,int i,int j)\\n    {\\n        if(i>j)return NULL;\\n        int mid=(i+j)/2;\\n        TreeNode *root=new TreeNode(nums[mid]);\\n        root->left=recursive(nums,i,mid-1);\\n        root->right=recursive(nums,mid+1,j);\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return recursive(nums,0,nums.size()-1);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1363720,
                "title": "python3-easy-solution",
                "content": "```\\ndef sortedArrayToBST(self, arr: List[int]) -> TreeNode:\\n        if not arr:\\n            return None\\n        midelement=(len(arr))//2\\n        root=TreeNode(arr[midelement])\\n        root.left=self.sortedArrayToBST(arr[:midelement])\\n        root.right=self.sortedArrayToBST(arr[midelement+1:])\\n        return root",
                "solutionTags": [],
                "code": "```\\ndef sortedArrayToBST(self, arr: List[int]) -> TreeNode:\\n        if not arr:\\n            return None\\n        midelement=(len(arr))//2\\n        root=TreeNode(arr[midelement])\\n        root.left=self.sortedArrayToBST(arr[:midelement])\\n        root.right=self.sortedArrayToBST(arr[midelement+1:])\\n        return root",
                "codeTag": "Python3"
            },
            {
                "id": 1302472,
                "title": "python-recursive-solution-better-than-99",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if len(nums)==0:\\n            return\\n        x=len(nums)//2\\n        d=TreeNode(nums[x])\\n        x1=nums[:x]\\n        x2=nums[x+1:]\\n        d.left=self.sortedArrayToBST(x1)\\n        d.right=self.sortedArrayToBST(x2)\\n    \\n        return d\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if len(nums)==0:\\n            return\\n        x=len(nums)//2\\n        d=TreeNode(nums[x])\\n        x1=nums[:x]\\n        x2=nums[x+1:]\\n        d.left=self.sortedArrayToBST(x1)\\n        d.right=self.sortedArrayToBST(x2)\\n    \\n        return d\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1292616,
                "title": "using-binary-search-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* solve(vector<int>& nums, int start, int end){\\n        if(end <= start) return NULL;\\n        int mid = start + (end-start)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left = solve(nums, start, mid);\\n        root->right = solve(nums, mid+1, end);\\n        return root;    \\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return solve(nums, 0, nums.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* solve(vector<int>& nums, int start, int end){\\n        if(end <= start) return NULL;\\n        int mid = start + (end-start)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left = solve(nums, start, mid);\\n        root->right = solve(nums, mid+1, end);\\n        return root;    \\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return solve(nums, 0, nums.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1272944,
                "title": "js-solution",
                "content": "```\\nconst sortedArrayToBST = (A, start = 0, end = A.length) => {\\n  if (start >= end) return null;\\n  const mid = Math.floor(start + (end - start) / 2);\\n  return new TreeNode(A[mid], sortedArrayToBST(A, start, mid), sortedArrayToBST(A, mid + 1, end));\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst sortedArrayToBST = (A, start = 0, end = A.length) => {\\n  if (start >= end) return null;\\n  const mid = Math.floor(start + (end - start) / 2);\\n  return new TreeNode(A[mid], sortedArrayToBST(A, start, mid), sortedArrayToBST(A, mid + 1, end));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1153734,
                "title": "c-easy-solution",
                "content": "\\n    \\n    TreeNode* arraytoBST(vector<int>& nums, int start, int end)\\n    {\\n        if(start > end)\\n            return NULL;\\n        \\n        int mid = (start + end) / 2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        \\n        root -> left = arraytoBST(nums, start, mid - 1);\\n        root -> right = arraytoBST(nums, mid + 1, end);\\n        \\n        return root;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) \\n    {\\n        return arraytoBST(nums, 0, nums.size() - 1);\\n    }\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "\\n    \\n    TreeNode* arraytoBST(vector<int>& nums, int start, int end)\\n    {\\n        if(start > end)\\n            return NULL;\\n        \\n        int mid = (start + end) / 2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        \\n        root -> left = arraytoBST(nums, start, mid - 1);\\n        root -> right = arraytoBST(nums, mid + 1, end);\\n        \\n        return root;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) \\n    {\\n        return arraytoBST(nums, 0, nums.size() - 1);\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1142208,
                "title": "python-simple-solution-divide-and-conquer",
                "content": "#### Intuition\\nBecause the input array is sorted in an increasing order, we infer that the root element would be the one in the middle of the array. Now that we know the position of one element in the BST, we will proceed by solving the remaining elements on the left and right of the middle element.\\n\\n#### Divide and Conquer\\n- In this, we divide the main problem into smaller subproblems and then solve the smaller subproblems to find the solution. \\n- In this problem, the remaining arrays to the left and the right of the mid element are the subproblems. \\n- So, we created a node for the middle element and recurse on the left and right sub-arrays.\\n\\n#### Cases\\n1. ```len(nums) == 0```  => The BST node must be ```None```.\\n2. ```len(nums) == 1``` => The BST node will be ```nums[0]```.\\n3. ```len(nums) > 1``` => We must divide and recurse further.\\n\\n#### Code\\n```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        node = TreeNode()\\n        if len(nums) == 0: # case 1\\n            return None\\n        if len(nums)  == 1: # case 2\\n            node.val = nums[0]\\n            return node\\n        \\n        mid = math.floor(len(nums)/2)\\n        left = self.sortedArrayToBST(nums[:mid]) # left sub-tree\\n        right = self.sortedArrayToBST(nums[mid +1:]) # right sub-tree\\n        \\n        node.val = nums[mid] # mid\\n        node.left = left\\n        node.right = right\\n        \\n        return node\\n```",
                "solutionTags": [
                    "Python",
                    "Divide and Conquer"
                ],
                "code": "```len(nums) == 0```\n```None```\n```len(nums) == 1```\n```nums[0]```\n```len(nums) > 1```\n```\\ndef sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        node = TreeNode()\\n        if len(nums) == 0: # case 1\\n            return None\\n        if len(nums)  == 1: # case 2\\n            node.val = nums[0]\\n            return node\\n        \\n        mid = math.floor(len(nums)/2)\\n        left = self.sortedArrayToBST(nums[:mid]) # left sub-tree\\n        right = self.sortedArrayToBST(nums[mid +1:]) # right sub-tree\\n        \\n        node.val = nums[mid] # mid\\n        node.left = left\\n        node.right = right\\n        \\n        return node\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 964815,
                "title": "golang-simple-recursive-solution",
                "content": "```go\\n/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n    if len(nums) == 0 {\\n        return nil\\n    }\\n    \\n    mid := (len(nums)-1)/2\\n    node := &TreeNode{}\\n    node.Val = nums[mid]\\n    node.Left = sortedArrayToBST(nums[:mid])\\n    node.Right = sortedArrayToBST(nums[mid+1:])\\n    \\n    return node\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\n/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n    if len(nums) == 0 {\\n        return nil\\n    }\\n    \\n    mid := (len(nums)-1)/2\\n    node := &TreeNode{}\\n    node.Val = nums[mid]\\n    node.Left = sortedArrayToBST(nums[:mid])\\n    node.Right = sortedArrayToBST(nums[mid+1:])\\n    \\n    return node\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 917521,
                "title": "simple-c",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode *solve(vector<int>& nums, int low, int high){\\n        if(low > high)\\n            return nullptr;\\n        \\n        if(low == high)\\n            return new TreeNode(nums[low]);\\n\\t\\t\\t\\n        int mid = (low + high)/2;\\n        auto root = new TreeNode(nums[mid]);\\n\\t\\t\\n        root -> left = solve(nums,low,mid-1);\\n        root -> right = solve(nums,mid+1,high);\\n\\t\\t\\n        return root;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return solve(nums,0,nums.size() - 1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode *solve(vector<int>& nums, int low, int high){\\n        if(low > high)\\n            return nullptr;\\n        \\n        if(low == high)\\n            return new TreeNode(nums[low]);\\n\\t\\t\\t\\n        int mid = (low + high)/2;\\n        auto root = new TreeNode(nums[mid]);\\n\\t\\t\\n        root -> left = solve(nums,low,mid-1);\\n        root -> right = solve(nums,mid+1,high);\\n\\t\\t\\n        return root;\\n    }\\n    \\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return solve(nums,0,nums.size() - 1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 893584,
                "title": "basic-python-solution",
                "content": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None;\\n        mid = (len(nums))//2\\n        \\n        hBST = TreeNode(nums[mid])\\n        \\n        hBST.left = self.sortedArrayToBST(nums[:mid])\\n        hBST.right = self.sortedArrayToBST(nums[mid+1:])\\n        \\n        return hBST\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if not nums:\\n            return None;\\n        mid = (len(nums))//2\\n        \\n        hBST = TreeNode(nums[mid])\\n        \\n        hBST.left = self.sortedArrayToBST(nums[:mid])\\n        hBST.right = self.sortedArrayToBST(nums[mid+1:])\\n        \\n        return hBST\\n```",
                "codeTag": "Java"
            },
            {
                "id": 838383,
                "title": "cpp-solution-using-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* check(vector<int>& nums,int l,int r)\\n    {\\n        if(l>r)\\n            return NULL;\\n        int m=(l+r)/2;\\n        TreeNode* t=new TreeNode(nums[m]);\\n        t->left=check(nums,l,m-1);\\n        t->right=check(nums,m+1,r);\\n        return t;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int l=0;\\n        int r=nums.size()-1;\\n        TreeNode* temp=check(nums,l,r);\\n        return temp;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* check(vector<int>& nums,int l,int r)\\n    {\\n        if(l>r)\\n            return NULL;\\n        int m=(l+r)/2;\\n        TreeNode* t=new TreeNode(nums[m]);\\n        t->left=check(nums,l,m-1);\\n        t->right=check(nums,m+1,r);\\n        return t;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        int l=0;\\n        int r=nums.size()-1;\\n        TreeNode* temp=check(nums,l,r);\\n        return temp;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 784017,
                "title": "python-simple-recursion-faster-than-97",
                "content": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if len(nums) == 0:\\n            return None\\n        \\n        middle = len(nums) // 2\\n        return TreeNode(\\n            val=nums[middle],\\n            left=self.sortedArrayToBST(nums[:middle]),\\n            right=self.sortedArrayToBST(nums[middle+1:])\\n        )\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if len(nums) == 0:\\n            return None\\n        \\n        middle = len(nums) // 2\\n        return TreeNode(\\n            val=nums[middle],\\n            left=self.sortedArrayToBST(nums[:middle]),\\n            right=self.sortedArrayToBST(nums[middle+1:])\\n        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 670228,
                "title": "c-recursion-is-a-beautiful-story",
                "content": "The approach is just like we do in Binary Search. We find the middle, make it the root, \\nrecursively build left subtree of root and recursively build right subtree of the root.\\nAt the end return root.\\n```\\nclass Solution {\\npublic:\\n    TreeNode* convert(vector<int>& nums, int l, int r) {\\n        if(l > r)\\n            return NULL;\\n        int mid = l + (r-l)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        \\n        root->left  = convert(nums, l, mid-1);    //Go build left tree\\n        root->right = convert(nums, mid+1, r); //Go build right tree\\n        \\n        return root; //I am done\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return convert(nums, 0, nums.size()-1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* convert(vector<int>& nums, int l, int r) {\\n        if(l > r)\\n            return NULL;\\n        int mid = l + (r-l)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        \\n        root->left  = convert(nums, l, mid-1);    //Go build left tree\\n        root->right = convert(nums, mid+1, r); //Go build right tree\\n        \\n        return root; //I am done\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return convert(nums, 0, nums.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 650711,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        if (nums == null || nums.Length == 0)\\n            return null;\\n        \\n        return BuildTree(nums, 0, nums.Length - 1);\\n    }\\n    \\n    private TreeNode BuildTree(int[] nums, int i, int j)\\n    {\\n        if (j < i)\\n            return null;\\n        \\n        int mid = j + (i - j) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        \\n        node.left = BuildTree(nums, i, mid - 1);\\n        node.right = BuildTree(nums, mid + 1, j);\\n        \\n        return node;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        if (nums == null || nums.Length == 0)\\n            return null;\\n        \\n        return BuildTree(nums, 0, nums.Length - 1);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 508402,
                "title": "simple-python-approach",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if nums:\\n          \\n            mid=len(nums)//2\\n            newTree=TreeNode(nums[mid])\\n            newTree.left=self.sortedArrayToBST(nums[:mid])\\n            newTree.right=self.sortedArrayToBST(nums[mid+1:])\\n\\n            return newTree\\n        return None",
                "solutionTags": [],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if nums:\\n          \\n            mid=len(nums)//2\\n            newTree=TreeNode(nums[mid])\\n            newTree.left=self.sortedArrayToBST(nums[:mid])\\n            newTree.right=self.sortedArrayToBST(nums[mid+1:])\\n\\n            return newTree\\n        return None",
                "codeTag": "Java"
            },
            {
                "id": 476356,
                "title": "java-solution-better-than-100-of-the-solutions",
                "content": "![image](https://assets.leetcode.com/users/mokshverma98/image_1578684669.png)\\n\\nThe approach is to pick the middle element of the array as the root of the current subtree.\\n```\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        int mid = nums.length/2;\\n        if(nums.length==0)\\n            return null;\\n        TreeNode root = new TreeNode(nums[nums.length/2]);\\n        root.left = sol(nums, 0, mid-1);\\n        root.right = sol(nums,mid+1, nums.length-1);\\n        return root;\\n    }\\n    \\n    public TreeNode sol(int[] nums, int low, int high){\\n        int mid = (low+high)/2;\\n        if(low==high){\\n            return new TreeNode(nums[low]);\\n        } else if(low>high)\\n            return null;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sol(nums, low, mid-1);\\n        root.right = sol(nums, mid+1, high);\\n        return root;\\n        \\n    }\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        int mid = nums.length/2;\\n        if(nums.length==0)\\n            return null;\\n        TreeNode root = new TreeNode(nums[nums.length/2]);\\n        root.left = sol(nums, 0, mid-1);\\n        root.right = sol(nums,mid+1, nums.length-1);\\n        return root;\\n    }\\n    \\n    public TreeNode sol(int[] nums, int low, int high){\\n        int mid = (low+high)/2;\\n        if(low==high){\\n            return new TreeNode(nums[low]);\\n        } else if(low>high)\\n            return null;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sol(nums, low, mid-1);\\n        root.right = sol(nums, mid+1, high);\\n        return root;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 361873,
                "title": "python3-recursively",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if  nums == [] :\\n            return None\\n        mid = len(nums)//2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> TreeNode:\\n        if  nums == [] :\\n            return None\\n        mid = len(nums)//2\\n        root = TreeNode(nums[mid])\\n        root.left = self.sortedArrayToBST(nums[:mid])\\n        root.right = self.sortedArrayToBST(nums[mid+1:])\\n        return root\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 316203,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        TreeNode answer = null;\\n        \\n        if (nums == null || nums.Count() == 0){\\n            return answer;\\n        }\\n        int length = nums.Count();\\n        \\n        answer = new TreeNode(nums[length/2]);\\n        \\n        answer.left = SortedArrayToBST(nums.Take(length/2).ToArray());\\n        answer.right = SortedArrayToBST(nums.Skip(length/2 + 1).Take(length - (length/2 + 1)).ToArray());\\n        \\n        return answer;\\n    }        \\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        TreeNode answer = null;\\n        \\n        if (nums == null || nums.Count() == 0){\\n            return answer;\\n        }\\n        int length = nums.Count();\\n        \\n        answer = new TreeNode(nums[length/2]);\\n        \\n        answer.left = SortedArrayToBST(nums.Take(length/2).ToArray());\\n        answer.right = SortedArrayToBST(nums.Skip(length/2 + 1).Take(length - (length/2 + 1)).ToArray());\\n        \\n        return answer;\\n    }        \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 286183,
                "title": "c-dfs",
                "content": "```\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        var n = nums.Length;\\n        return DFS(nums, 0, n - 1);\\n    }\\n\\n    private TreeNode DFS(int[] nums, int left, int right) {\\n        if (left > right) return null;\\n        var mid = left + (right - left) / 2;\\n        var root = new TreeNode(nums[mid]);\\n        root.left = DFS(nums, left, mid - 1);\\n        root.right = DFS(nums, mid + 1, right);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        var n = nums.Length;\\n        return DFS(nums, 0, n - 1);\\n    }\\n\\n    private TreeNode DFS(int[] nums, int left, int right) {\\n        if (left > right) return null;\\n        var mid = left + (right - left) / 2;\\n        var root = new TreeNode(nums[mid]);\\n        root.left = DFS(nums, left, mid - 1);\\n        root.right = DFS(nums, mid + 1, right);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 267785,
                "title": "golang",
                "content": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\n\\tif len(nums) == 1 {\\n\\t\\treturn &TreeNode{Val: nums[0]}\\n\\t}\\n\\n\\tmid := len(nums) / 2\\n\\treturn &TreeNode{\\n\\t\\tVal:   nums[mid],\\n\\t\\tLeft:  sortedArrayToBST(nums[:mid]),\\n\\t\\tRight: sortedArrayToBST(nums[mid+1:]),\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc sortedArrayToBST(nums []int) *TreeNode {\\n\\tif len(nums) == 0 {\\n\\t\\treturn nil\\n\\t}\\n\\n\\tif len(nums) == 1 {\\n\\t\\treturn &TreeNode{Val: nums[0]}\\n\\t}\\n\\n\\tmid := len(nums) / 2\\n\\treturn &TreeNode{\\n\\t\\tVal:   nums[mid],\\n\\t\\tLeft:  sortedArrayToBST(nums[:mid]),\\n\\t\\tRight: sortedArrayToBST(nums[mid+1:]),\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 221782,
                "title": "thinking-process-in-scala",
                "content": ">If we decide a root, we will divide nums in half. \\n>For each half, we keep following the same pattern until we reduce a case to be base case: null or only one node exists.\\n\\n>To make the tree as balanced as possible, it\\'s always wise to pick the middle element as the value of root. \\n>In this case, we greedily decrease difference of node counts between two subtrees.\\n****\\n```\\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\\n      if (nums == null || nums.length == 0) return null\\n      \\n      val numsLen = nums.length\\n        \\n      def toBST(start: Int, end: Int): TreeNode = {\\n        if (start > end) null\\n        else if (start == end) new TreeNode(nums(start))\\n        else {\\n          // Set nums(mid) as value of root.\\n          val mid = start + ((end - start) >> 1)          \\n          val root = new TreeNode(nums(mid))\\n          \\n          root.left = toBST(start, mid - 1)\\n          root.right = toBST(mid + 1, end)\\n            \\n          root\\n        }\\n      }\\n        \\n      toBST(0, numsLen - 1)\\n    }\\n```\\n**(\\u4EBA \\u2022\\u0348\\u1D17\\u2022\\u0348)** Thanks for voting!",
                "solutionTags": [],
                "code": "```\\n    def sortedArrayToBST(nums: Array[Int]): TreeNode = {\\n      if (nums == null || nums.length == 0) return null\\n      \\n      val numsLen = nums.length\\n        \\n      def toBST(start: Int, end: Int): TreeNode = {\\n        if (start > end) null\\n        else if (start == end) new TreeNode(nums(start))\\n        else {\\n          // Set nums(mid) as value of root.\\n          val mid = start + ((end - start) >> 1)          \\n          val root = new TreeNode(nums(mid))\\n          \\n          root.left = toBST(start, mid - 1)\\n          root.right = toBST(mid + 1, end)\\n            \\n          root\\n        }\\n      }\\n        \\n      toBST(0, numsLen - 1)\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 175266,
                "title": "c-solution-with-avl-tree-implementation",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        destroy(pRoot_);\\n        pRoot_ = nullptr;\\n        for (auto num : nums) insert(num);\\n        return getRoot();\\n    }\\n    \\nprivate:\\n    TreeNode* getRoot() { return pRoot_; }\\n\\n    void destroy(TreeNode *node)\\n    {\\n        if (!node)\\n            return;\\n        destroy(node->left);\\n        destroy(node->right);\\n        delete node;\\n    }\\n    \\n    size_t height(TreeNode *pNode) {\\n        auto const leftHeight = pNode->left ? height(pNode->left) : 0;\\n        auto const rightHeight = pNode->right ? height(pNode->right) : 0;\\n        return std::max(leftHeight, rightHeight) + 1;\\n    }\\n    \\n    ssize_t getBFactor(TreeNode *pNode)  {\\n        return (pNode->left ? height(pNode->left) : 0) - (pNode->right ? height(pNode->right) : 0);\\n    }\\n    \\n    void insert(int value) { pRoot_ = insert_(pRoot_, value); }\\n    \\n    TreeNode* rightRotate_(TreeNode *pNode) {\\n\\t\\tauto qNode = pNode->left;\\n\\t\\tpNode->left = qNode->right;\\n\\t\\tqNode->right = pNode;\\n\\t\\treturn qNode;\\n\\t}\\n\\n\\tTreeNode* leftRotate_(TreeNode *pNode) {\\n\\t\\tauto qNode = pNode->right;\\n\\t\\tpNode->right = qNode->left;\\n\\t\\tqNode->left = pNode;\\n\\t\\treturn qNode;\\n\\t}\\n\\n    TreeNode* balance_(TreeNode *pNode) {\\n\\t\\tauto const bfactor = getBFactor(pNode);\\n\\t\\t// right subtree is heavier than the left by 2, required to rotate big to the left\\n\\t\\tif (-2 == bfactor)\\n\\t\\t{\\n\\t\\t\\t// left subtree of the subtree is heavier than the right, required to rotate small to the right\\n\\t\\t\\tif (getBFactor(pNode->right) > 0) pNode->right = rightRotate_(pNode->right);\\n\\t\\t\\tpNode = leftRotate_(pNode);\\n\\t\\t}\\n\\t\\t// left subtree is heavier than the right by 2, required to rotate big to the right\\n\\t\\telse if (2 == bfactor)\\n\\t\\t{\\n\\t\\t\\t// right subtree of the subtree is heavier than the left, required to rotate small to the left\\n\\t\\t\\tif (getBFactor(pNode->left) < 0) pNode->left = leftRotate_(pNode->left);\\n\\t\\t\\tpNode = rightRotate_(pNode);\\n\\t\\t}\\n        \\n        return pNode;\\n\\t}\\n    \\n    TreeNode* insert_(TreeNode *pNode, int value) {\\n\\t\\tif (!pNode)\\n            return new TreeNode(value);\\n\\t\\telse if (value < pNode->val)\\n\\t\\t\\tpNode->left = insert_(pNode->left, value);\\n\\t\\telse\\n\\t\\t\\tpNode->right = insert_(pNode->right, value);\\n\\t\\treturn balance_(pNode);\\n\\t}\\n    \\n    TreeNode *pRoot_ = nullptr;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        destroy(pRoot_);\\n        pRoot_ = nullptr;\\n        for (auto num : nums) insert(num);\\n        return getRoot();\\n    }\\n    \\nprivate:\\n    TreeNode* getRoot() { return pRoot_; }\\n\\n    void destroy(TreeNode *node)\\n    {\\n        if (!node)\\n            return;\\n        destroy(node->left);\\n        destroy(node->right);\\n        delete node;\\n    }\\n    \\n    size_t height(TreeNode *pNode) {\\n        auto const leftHeight = pNode->left ? height(pNode->left) : 0;\\n        auto const rightHeight = pNode->right ? height(pNode->right) : 0;\\n        return std::max(leftHeight, rightHeight) + 1;\\n    }\\n    \\n    ssize_t getBFactor(TreeNode *pNode)  {\\n        return (pNode->left ? height(pNode->left) : 0) - (pNode->right ? height(pNode->right) : 0);\\n    }\\n    \\n    void insert(int value) { pRoot_ = insert_(pRoot_, value); }\\n    \\n    TreeNode* rightRotate_(TreeNode *pNode) {\\n\\t\\tauto qNode = pNode->left;\\n\\t\\tpNode->left = qNode->right;\\n\\t\\tqNode->right = pNode;\\n\\t\\treturn qNode;\\n\\t}\\n\\n\\tTreeNode* leftRotate_(TreeNode *pNode) {\\n\\t\\tauto qNode = pNode->right;\\n\\t\\tpNode->right = qNode->left;\\n\\t\\tqNode->left = pNode;\\n\\t\\treturn qNode;\\n\\t}\\n\\n    TreeNode* balance_(TreeNode *pNode) {\\n\\t\\tauto const bfactor = getBFactor(pNode);\\n\\t\\t// right subtree is heavier than the left by 2, required to rotate big to the left\\n\\t\\tif (-2 == bfactor)\\n\\t\\t{\\n\\t\\t\\t// left subtree of the subtree is heavier than the right, required to rotate small to the right\\n\\t\\t\\tif (getBFactor(pNode->right) > 0) pNode->right = rightRotate_(pNode->right);\\n\\t\\t\\tpNode = leftRotate_(pNode);\\n\\t\\t}\\n\\t\\t// left subtree is heavier than the right by 2, required to rotate big to the right\\n\\t\\telse if (2 == bfactor)\\n\\t\\t{\\n\\t\\t\\t// right subtree of the subtree is heavier than the left, required to rotate small to the left\\n\\t\\t\\tif (getBFactor(pNode->left) < 0) pNode->left = leftRotate_(pNode->left);\\n\\t\\t\\tpNode = rightRotate_(pNode);\\n\\t\\t}\\n        \\n        return pNode;\\n\\t}\\n    \\n    TreeNode* insert_(TreeNode *pNode, int value) {\\n\\t\\tif (!pNode)\\n            return new TreeNode(value);\\n\\t\\telse if (value < pNode->val)\\n\\t\\t\\tpNode->left = insert_(pNode->left, value);\\n\\t\\telse\\n\\t\\t\\tpNode->right = insert_(pNode->right, value);\\n\\t\\treturn balance_(pNode);\\n\\t}\\n    \\n    TreeNode *pRoot_ = nullptr;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 35257,
                "title": "ridiculously-simple-ruby-solution",
                "content": "```ruby\\ndef sorted_array_to_bst(arr)\\n  return nil if arr.nil? || arr.empty?\\n  \\n  mid = arr.length / 2\\n  n = TreeNode.new(arr[mid])\\n    n.left = sorted_array_to_bst(arr[0...mid])\\n    n.right = sorted_array_to_bst(arr[mid+1..-1])\\n  return n\\nend\\n```",
                "solutionTags": [],
                "code": "```ruby\\ndef sorted_array_to_bst(arr)\\n  return nil if arr.nil? || arr.empty?\\n  \\n  mid = arr.length / 2\\n  n = TreeNode.new(arr[mid])\\n    n.left = sorted_array_to_bst(arr[0...mid])\\n    n.right = sorted_array_to_bst(arr[mid+1..-1])\\n  return n\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4079393,
                "title": "python-simple-recursion-runtime-beats-98-92-memory-beats-97-64",
                "content": "**If you got help from this,... Plz Upvote .. it encourage me**\\n# Code\\n```\\n# Definition for a binary tree node.\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        n = len(nums)\\n\\n        if not n:\\n            return None\\n        \\n        mid = (n-1)//2\\n        root = TreeNode(nums[mid])\\n\\n        root.left = (self.sortedArrayToBST(nums[:mid]))\\n        root.right = (self.sortedArrayToBST(nums[mid+1:]))\\n        \\n        return root\\n      \\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search Tree",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n# Definition for a binary tree node.\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        n = len(nums)\\n\\n        if not n:\\n            return None\\n        \\n        mid = (n-1)//2\\n        root = TreeNode(nums[mid])\\n\\n        root.left = (self.sortedArrayToBST(nums[:mid]))\\n        root.right = (self.sortedArrayToBST(nums[mid+1:]))\\n        \\n        return root\\n      \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3807548,
                "title": "video-converting-sorted-array-to-balanced-binary-search-tree",
                "content": "# Intuition\\nUpon reading the problem, it became clear that a binary search tree (BST) could be formed by leveraging the property of a sorted array, where the middle element can serve as the root of the BST. This is because in a sorted array, elements to the left of the middle element are lesser, and elements to the right are greater, which aligns with the properties of a BST.\\n\\nhttps://youtu.be/JiH4MDE2sJE\\n\\n# Approach\\nThe approach to solving this problem involves recursion. The main idea is to find the middle element of the array. This middle element will become the root of our binary search tree because it ensures that the tree will remain balanced. The left half of the array will be used to build the left subtree, and similarly, the right half for the right subtree. We then recursively construct these subtrees.\\n\\n# Complexity\\n- Time complexity: The time complexity for this approach is \\\\(O(n)\\\\), where \\\\(n\\\\) is the number of elements in the array. This is because we are visiting each element once while constructing the BST.\\n\\n- Space complexity: The space complexity is \\\\(O(n)\\\\) as well. This is because, in the worst-case scenario, we could end up with a recursive call stack depth of \\\\(n\\\\) during the creation of the BST.\\n\\n# Code\\n``` Python []\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        if not nums: \\n            return None \\n        mid = len(nums) // 2 \\n        # create node and construct subtrees \\n        node = TreeNode(nums[mid]) \\n        node.left = self.sortedArrayToBST(nums[:mid]) \\n        node.right = self.sortedArrayToBST(nums[mid+1:]) \\n        return node \\n```\\n``` JavaScript []\\nvar sortedArrayToBST = function(nums) {\\n    if(!nums.length) return null;\\n    let mid = Math.floor(nums.length / 2);\\n    let root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid + 1));\\n    return root;\\n};\\n```     \\n``` C# []\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        if(nums == null || nums.Length == 0)\\n            return null;\\n        return constructBSTRecursive(nums, 0, nums.Length - 1);\\n    }\\n\\n    private TreeNode constructBSTRecursive(int[] nums, int left, int right) {\\n        if(left > right)\\n            return null;\\n        int mid = left + (right - left) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        node.left = constructBSTRecursive(nums, left, mid - 1);\\n        node.right = constructBSTRecursive(nums, mid + 1, right);\\n        return node;\\n    }\\n}\\n```\\n``` C++ []\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return constructBSTRecursive(nums, 0, nums.size() - 1);\\n    }\\n\\n    TreeNode* constructBSTRecursive(vector<int>& nums, int left, int right) {\\n        if(left > right)\\n            return NULL;\\n        int mid = left + (right - left) / 2;\\n        TreeNode* node = new TreeNode(nums[mid]);\\n        node->left = constructBSTRecursive(nums, left, mid - 1);\\n        node->right = constructBSTRecursive(nums, mid + 1, right);\\n        return node;\\n    }\\n};\\n```\\n``` Java []\\npublic class Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        if(nums == null || nums.length == 0)\\n            return null;\\n        return constructBSTRecursive(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode constructBSTRecursive(int[] nums, int left, int right) {\\n        if(left > right)\\n            return null;\\n        int mid = left + (right - left) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        node.left = constructBSTRecursive(nums, left, mid - 1);\\n        node.right = constructBSTRecursive(nums, mid + 1, right);\\n        return node;\\n    }\\n}\\n```\\nRemember, practicing and understanding the underlying concepts is key to mastering data structures and algorithms. Happy coding!",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript"
                ],
                "code": "``` Python []\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        if not nums: \\n            return None \\n        mid = len(nums) // 2 \\n        # create node and construct subtrees \\n        node = TreeNode(nums[mid]) \\n        node.left = self.sortedArrayToBST(nums[:mid]) \\n        node.right = self.sortedArrayToBST(nums[mid+1:]) \\n        return node \\n```\n``` JavaScript []\\nvar sortedArrayToBST = function(nums) {\\n    if(!nums.length) return null;\\n    let mid = Math.floor(nums.length / 2);\\n    let root = new TreeNode(nums[mid]);\\n    root.left = sortedArrayToBST(nums.slice(0, mid));\\n    root.right = sortedArrayToBST(nums.slice(mid + 1));\\n    return root;\\n};\\n```\n``` C# []\\npublic class Solution {\\n    public TreeNode SortedArrayToBST(int[] nums) {\\n        if(nums == null || nums.Length == 0)\\n            return null;\\n        return constructBSTRecursive(nums, 0, nums.Length - 1);\\n    }\\n\\n    private TreeNode constructBSTRecursive(int[] nums, int left, int right) {\\n        if(left > right)\\n            return null;\\n        int mid = left + (right - left) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        node.left = constructBSTRecursive(nums, left, mid - 1);\\n        node.right = constructBSTRecursive(nums, mid + 1, right);\\n        return node;\\n    }\\n}\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return constructBSTRecursive(nums, 0, nums.size() - 1);\\n    }\\n\\n    TreeNode* constructBSTRecursive(vector<int>& nums, int left, int right) {\\n        if(left > right)\\n            return NULL;\\n        int mid = left + (right - left) / 2;\\n        TreeNode* node = new TreeNode(nums[mid]);\\n        node->left = constructBSTRecursive(nums, left, mid - 1);\\n        node->right = constructBSTRecursive(nums, mid + 1, right);\\n        return node;\\n    }\\n};\\n```\n``` Java []\\npublic class Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        if(nums == null || nums.length == 0)\\n            return null;\\n        return constructBSTRecursive(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode constructBSTRecursive(int[] nums, int left, int right) {\\n        if(left > right)\\n            return null;\\n        int mid = left + (right - left) / 2;\\n        TreeNode node = new TreeNode(nums[mid]);\\n        node.left = constructBSTRecursive(nums, left, mid - 1);\\n        node.right = constructBSTRecursive(nums, mid + 1, right);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3654641,
                "title": "c-easy-and-cisp-recursive-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        if(nums.size()==0) return NULL;\\n        if(nums.size()==1) return new TreeNode(nums[0]);\\n        int middle=nums.size()/2;\\n        TreeNode* root=new TreeNode(nums[middle]);\\n        vector<int> leftsub(nums.begin(),nums.begin()+middle);\\n        vector<int> rightsub(nums.begin()+middle+1,nums.end());\\n        root->left=sortedArrayToBST(leftsub);\\n        root->right=sortedArrayToBST(rightsub);\\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        if(nums.size()==0) return NULL;\\n        if(nums.size()==1) return new TreeNode(nums[0]);\\n        int middle=nums.size()/2;\\n        TreeNode* root=new TreeNode(nums[middle]);\\n        vector<int> leftsub(nums.begin(),nums.begin()+middle);\\n        vector<int> rightsub(nums.begin()+middle+1,nums.end());\\n        root->left=sortedArrayToBST(leftsub);\\n        root->right=sortedArrayToBST(rightsub);\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3545929,
                "title": "c-python-recursive-solution",
                "content": "\\n# Approach: Divide and Conquer, Recursion\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(logn)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# C++\\n```\\nclass Solution {\\n    TreeNode* recur(int s, int e, vector<int>& nums) {\\n        if(s > e) return NULL;\\n        int mid = s + (e-s)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root -> left = recur(s, mid - 1, nums);\\n        root -> right = recur(mid + 1, e, nums);\\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return recur(0, nums.size() - 1, nums);\\n    }\\n};\\n```\\n\\n# Python / Python3\\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        return self.recur(0, len(nums)-1, nums)\\n\\n    def recur(self, s, e, nums: List[int]) -> TreeNode:\\n        if(s > e):\\n            return None\\n        mid = int(s + (e-s)/2)\\n        root = TreeNode(nums[mid])\\n        root.left = self.recur(s, mid - 1, nums)\\n        root.right = self.recur(mid + 1, e, nums)\\n        return root\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    TreeNode* recur(int s, int e, vector<int>& nums) {\\n        if(s > e) return NULL;\\n        int mid = s + (e-s)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root -> left = recur(s, mid - 1, nums);\\n        root -> right = recur(mid + 1, e, nums);\\n        return root;\\n    }\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return recur(0, nums.size() - 1, nums);\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:\\n        return self.recur(0, len(nums)-1, nums)\\n\\n    def recur(self, s, e, nums: List[int]) -> TreeNode:\\n        if(s > e):\\n            return None\\n        mid = int(s + (e-s)/2)\\n        root = TreeNode(nums[mid])\\n        root.left = self.recur(s, mid - 1, nums)\\n        root.right = self.recur(mid + 1, e, nums)\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3531639,
                "title": "easy-solution-full-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nApply Somewhat same technique As applied in Binary Search\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* From the given function we will call a new function which we will create.\\n* What we will do in our new function is that we will apply the same technique we apply in Binary Search.\\n* This technique is applied here because we are given an Array/Vector of sorted elements, so we can think that if we will make the mid as the root node, it will be easy to for a BST.\\n* As in a sorted array if we find the mid element , it is but obvious that all the elements on the left side of the mid element will be smaller and all the elements on the right side will be greater.\\n* So here to form the BST we will first find our Base condition, here the base condition will be if(s>e), i.e starting is greater than ending, it is same as if(s<=e) in Binary search. If the base condition is satisfied return NULL.\\n*  Now we will find mid.\\n* After finding the mid, create a new node with the value of mid, this node is the root node of our BST.\\n* Now for the left and right sub tree recursively call the new function with the change in parameters.\\n* For the left subtree starting will be same but ending will be mid-1.\\n* For the right subtree starting will be mid+1 ending will be same.\\n\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return myfun(nums,0,nums.size()-1);\\n    }\\n\\n    TreeNode* myfun(vector<int>&nums,int s,int e)\\n    {\\n        if(s>e)\\n            return NULL;\\n\\n        int mid=s+(e-s)/2;\\n        TreeNode* node=new TreeNode(nums[mid]);\\n        node->left=myfun(nums,s,mid-1);\\n        node->right=myfun(nums,mid+1,e);\\n        return node;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return myfun(nums,0,nums.size()-1);\\n    }\\n\\n    TreeNode* myfun(vector<int>&nums,int s,int e)\\n    {\\n        if(s>e)\\n            return NULL;\\n\\n        int mid=s+(e-s)/2;\\n        TreeNode* node=new TreeNode(nums[mid]);\\n        node->left=myfun(nums,s,mid-1);\\n        node->right=myfun(nums,mid+1,e);\\n        return node;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436130,
                "title": "best-solution",
                "content": "# Intuition\\n1. Give a one helper function \\n2. Pass the vector or array , starting index and size of the array\\n3. Edge case is when high is lower then starting index it mean element is over\\n4. Create root node and just sioly call on the left and right of the root\\n\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n     TreeNode* ArrayToBST(vector<int>& nums , int low ,int high){\\n          if(high <= low) return NULL;\\n          int mid = (high+low)/2;\\n          TreeNode* root = new TreeNode(nums[mid]);\\n          root->left = ArrayToBST(nums ,low , mid);\\n          root->right = ArrayToBST( nums ,mid+1, high);\\n          return root;\\n     }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        \\n        return ArrayToBST(nums , 0 ,nums.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n     TreeNode* ArrayToBST(vector<int>& nums , int low ,int high){\\n          if(high <= low) return NULL;\\n          int mid = (high+low)/2;\\n          TreeNode* root = new TreeNode(nums[mid]);\\n          root->left = ArrayToBST(nums ,low , mid);\\n          root->right = ArrayToBST( nums ,mid+1, high);\\n          return root;\\n     }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        \\n        return ArrayToBST(nums , 0 ,nums.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3309212,
                "title": "easiest-typescript-solution-image-explanation-beautiful-4-bfs-liners",
                "content": "\\n# Code (Beautiful 4 BFS Liners)\\n- Gets the number, and if it has the length of `0`, obviously should return `null`.\\n- Get the center index of given array. `n / 2` will be chosen when `n` is even number.\\n- Set the center index as a center of the node, and the array to the left will be sent to `sortedArrayToBST()` recursively, and vice versa for the right side.\\n    - This logic works, with the following diagram\\n    - Only the left-most logic was drawn, but the rest follow the same logic.\\n![image.png](https://assets.leetcode.com/users/images/ce590f5f-ae34-42ce-86f2-e20a1b98c8c4_1679090669.4754777.png)\\n![image.png](https://assets.leetcode.com/users/images/36038513-f1a7-4999-b8ef-b10f883452bc_1679090677.5556152.png)\\n![image.png](https://assets.leetcode.com/users/images/f55c9c47-4681-4d2b-8235-96f2e402b871_1679090689.560499.png)\\n![image.png](https://assets.leetcode.com/users/images/b26c28c5-74e3-4986-9c89-8ed6e79b002d_1679090694.91906.png)\\n![image.png](https://assets.leetcode.com/users/images/7bc828c8-7284-4660-b6d5-298c92147e1f_1679090700.6244662.png)\\n![image.png](https://assets.leetcode.com/users/images/b02f44fe-cd76-4736-8c2f-86299e069442_1679090706.4978616.png)\\n\\n*end.*\\n\\n```\\nfunction sortedArrayToBST(nums: number[]): TreeNode | null {\\n    if (nums.length === 0) return null\\n\\n    const centerIndex = Math.floor(nums.length / 2)\\n    return new TreeNode(nums[centerIndex],\\n        sortedArrayToBST(nums.slice(0, centerIndex)),\\n        sortedArrayToBST(nums.slice(centerIndex + 1))\\n    )\\n};\\n```\\n\\n## Tips\\n- If you face such a problem like this, its the best to reuse the given function most of the times.",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction sortedArrayToBST(nums: number[]): TreeNode | null {\\n    if (nums.length === 0) return null\\n\\n    const centerIndex = Math.floor(nums.length / 2)\\n    return new TreeNode(nums[centerIndex],\\n        sortedArrayToBST(nums.slice(0, centerIndex)),\\n        sortedArrayToBST(nums.slice(centerIndex + 1))\\n    )\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3282593,
                "title": "beat-90-c-convert-sorted-array-to-bst",
                "content": "**NOTE - PLEASE READ INTUITION AND APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs given array is sorted so we just need to find mid element of array(Using Binary Search) and put it at root of the tree and left half of array will go in the left side of the tree and right half of array will go in the right half of the tree. And all this will be performed in recursion which will terminate when right index is at left or smaller than the left index.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStep-1: Find mid of the given array\\nStep-2: Create a node using this mid element\\nStep-3: Put left half of array in left child of this node\\nStep-4: Put right half of array in right child of this node\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nWhere, n = number of elements in the given array\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* constructBST(vector<int>& nums, int leftIndex, int rightIndex)\\n    {\\n        if(leftIndex>rightIndex)\\n            return nullptr;\\n\\n        int mid = leftIndex + (rightIndex - leftIndex)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left = constructBST(nums, leftIndex, mid-1);\\n        root->right = constructBST(nums, mid+1, rightIndex);\\n\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        if(n==0)\\n            return nullptr;\\n        if(n==1)\\n            return new TreeNode(nums[0]);\\n        return constructBST(nums, 0, n-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* constructBST(vector<int>& nums, int leftIndex, int rightIndex)\\n    {\\n        if(leftIndex>rightIndex)\\n            return nullptr;\\n\\n        int mid = leftIndex + (rightIndex - leftIndex)/2;\\n        TreeNode* root = new TreeNode(nums[mid]);\\n        root->left = constructBST(nums, leftIndex, mid-1);\\n        root->right = constructBST(nums, mid+1, rightIndex);\\n\\n        return root;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        if(n==0)\\n            return nullptr;\\n        if(n==1)\\n            return new TreeNode(nums[0]);\\n        return constructBST(nums, 0, n-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3218595,
                "title": "java-solution-0ms-beats-100",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateTree(nums, 0, nums.length-1);\\n    }\\n    TreeNode CreateTree(int[] nums, int l, int r)\\n    {\\n        if(l>r)\\n            return null;\\n\\n        int mid = (l + r)/2;\\n\\n        TreeNode head = new TreeNode(nums[mid]);\\n        head.left = CreateTree(nums, l, mid-1);\\n        head.right = CreateTree(nums, mid+1, r);\\n        return head;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateTree(nums, 0, nums.length-1);\\n    }\\n    TreeNode CreateTree(int[] nums, int l, int r)\\n    {\\n        if(l>r)\\n            return null;\\n\\n        int mid = (l + r)/2;\\n\\n        TreeNode head = new TreeNode(nums[mid]);\\n        head.left = CreateTree(nums, l, mid-1);\\n        head.right = CreateTree(nums, mid+1, r);\\n        return head;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3216242,
                "title": "java-solution-0-ms-beats-100",
                "content": "# Java Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n * int val;\\n * TreeNode left;\\n * TreeNode right;\\n * TreeNode() {}\\n * TreeNode(int val) { this.val = val; }\\n * TreeNode(int val, TreeNode left, TreeNode right) {\\n * this.val = val;\\n * this.left = left;\\n * this.right = right;\\n * }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateBST(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode CreateBST(int nums[], int l, int r) {\\n        if (l > r) { // Base Condition or Recursion Stoping Condition\\n            return null;\\n        }\\n        // so basically in this question we have to convert sorted array to height balanced tree\\n        // so if we directly create tree in given sorted order it will become linked list\\n        // so we have to take middle element as head value such it will  become height balanced tree \\n        int mid = (l + r) / 2;\\n        TreeNode root = new TreeNode(nums[mid]); // mid value or median \\n        root.left = CreateBST(nums, l, mid - 1); // assign the value for left of subtree that is l to mid -1 for given array\\n        root.right = CreateBST(nums, mid + 1, r); // assign the value for right go subtree that is mid+1 to r for given array\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Divide and Conquer",
                    "Tree",
                    "Binary Search Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n * int val;\\n * TreeNode left;\\n * TreeNode right;\\n * TreeNode() {}\\n * TreeNode(int val) { this.val = val; }\\n * TreeNode(int val, TreeNode left, TreeNode right) {\\n * this.val = val;\\n * this.left = left;\\n * this.right = right;\\n * }\\n * }\\n */\\nclass Solution {\\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        return CreateBST(nums, 0, nums.length - 1);\\n    }\\n\\n    private TreeNode CreateBST(int nums[], int l, int r) {\\n        if (l > r) { // Base Condition or Recursion Stoping Condition\\n            return null;\\n        }\\n        // so basically in this question we have to convert sorted array to height balanced tree\\n        // so if we directly create tree in given sorted order it will become linked list\\n        // so we have to take middle element as head value such it will  become height balanced tree \\n        int mid = (l + r) / 2;\\n        TreeNode root = new TreeNode(nums[mid]); // mid value or median \\n        root.left = CreateBST(nums, l, mid - 1); // assign the value for left of subtree that is l to mid -1 for given array\\n        root.right = CreateBST(nums, mid + 1, r); // assign the value for right go subtree that is mid+1 to r for given array\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109517,
                "title": "simple-swift-o-n-time-o-n-space",
                "content": "# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        guard nums.count > 0 else { return nil }\\n        let mid = nums.count / 2\\n        var newNode = TreeNode(nums[mid])\\n        newNode.left = sortedArrayToBST(Array(nums[0..<mid]))\\n        newNode.right = sortedArrayToBST(Array(nums[mid+1..<nums.count]))\\n        return newNode\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func sortedArrayToBST(_ nums: [Int]) -> TreeNode? {\\n        guard nums.count > 0 else { return nil }\\n        let mid = nums.count / 2\\n        var newNode = TreeNode(nums[mid])\\n        newNode.left = sortedArrayToBST(Array(nums[0..<mid]))\\n        newNode.right = sortedArrayToBST(Array(nums[mid+1..<nums.count]))\\n        return newNode\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3044433,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* f(vector<int> nums, int l, int h)\\n    {\\n        if(l>h)\\n            return NULL;\\n        int m = (l+h)/2;\\n        TreeNode* t=new TreeNode(nums[m]);\\n        t->left=f(nums, l, m-1);\\n        t->right=f(nums, m+1, h);\\n        return t;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return f(nums, 0, nums.size()-1);\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* f(vector<int> nums, int l, int h)\\n    {\\n        if(l>h)\\n            return NULL;\\n        int m = (l+h)/2;\\n        TreeNode* t=new TreeNode(nums[m]);\\n        t->left=f(nums, l, m-1);\\n        t->right=f(nums, m+1, h);\\n        return t;\\n    }\\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\\n        return f(nums, 0, nums.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2406292,
                "title": "java-2ms-iterative-replacement-to-recursion-explained",
                "content": "**Went through various solutions regarding Recursive Approaches,\\nWhy not give a try with iterative approach ?**\\n\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\n\\nclass Tree {\\n    int low_idx, high_idx;\\n    TreeNode node;\\n    Tree(int low, int high, TreeNode _node) {\\n        low_idx = low;\\n        high_idx = high;\\n        node = _node;\\n    }\\n}\\n\\n// Recursive Method - Uses Stack implicitly, \\n// Iterative method - Used Stack Explicitly.\\n\\nclass Solution {    \\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        \\n        // return if the length of array is 0\\n        if(nums.length==0)\\n            return null;\\n\\n        // create stack and push the node with middle element of the array as 1st Parent Node\\n        Stack<Tree> stack = new Stack<Tree>();\\n        TreeNode root = new TreeNode(nums[(nums.length-1)/2]);\\n        stack.push(\\n            new Tree(\\n                0,              // low_idx\\n                nums.length-1,  // high_idx\\n                root            // Parent node (TreeNode)\\n            )\\n        );\\n        \\n        // Loop till Stack gets empty\\n        while (!stack.empty()) {\\n            // pop the top node and assign the left and right child to it\\n            Tree temp = stack.pop();\\n            \\n            // find mid index \\n            int mid = temp.low_idx + (temp.high_idx - temp.low_idx) / 2;\\n            \\n            // if current value is less than mid value, go to left sub-tree\\n            if (temp.low_idx < mid) {\\n                \\n                TreeNode node = new TreeNode(\\n                    nums[temp.low_idx + (mid-1 - temp.low_idx) / 2]\\n                );\\n                \\n                temp.node.left = node;      // Store Node as Left Child\\n                \\n                stack.push(new Tree(\\n                    temp.low_idx, mid-1, node\\n                ));\\n            } \\n            \\n            // if current value is more than mid value, go to right sub-tree\\n            if (mid < temp.high_idx) {\\n                \\n                TreeNode node = new TreeNode(\\n                    nums[mid+1 + (temp.high_idx - mid-1)/2]\\n                );\\n                \\n                temp.node.right = node;     // Store Node as Right Child\\n                \\n                stack.push(new Tree(\\n                    mid+1, temp.high_idx, node\\n                ));\\n            }\\n        }\\n        return root;    // The 1st Parent Node\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack",
                    "Iterator"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\n\\nclass Tree {\\n    int low_idx, high_idx;\\n    TreeNode node;\\n    Tree(int low, int high, TreeNode _node) {\\n        low_idx = low;\\n        high_idx = high;\\n        node = _node;\\n    }\\n}\\n\\n// Recursive Method - Uses Stack implicitly, \\n// Iterative method - Used Stack Explicitly.\\n\\nclass Solution {    \\n    public TreeNode sortedArrayToBST(int[] nums) {\\n        \\n        // return if the length of array is 0\\n        if(nums.length==0)\\n            return null;\\n\\n        // create stack and push the node with middle element of the array as 1st Parent Node\\n        Stack<Tree> stack = new Stack<Tree>();\\n        TreeNode root = new TreeNode(nums[(nums.length-1)/2]);\\n        stack.push(\\n            new Tree(\\n                0,              // low_idx\\n                nums.length-1,  // high_idx\\n                root            // Parent node (TreeNode)\\n            )\\n        );\\n        \\n        // Loop till Stack gets empty\\n        while (!stack.empty()) {\\n            // pop the top node and assign the left and right child to it\\n            Tree temp = stack.pop();\\n            \\n            // find mid index \\n            int mid = temp.low_idx + (temp.high_idx - temp.low_idx) / 2;\\n            \\n            // if current value is less than mid value, go to left sub-tree\\n            if (temp.low_idx < mid) {\\n                \\n                TreeNode node = new TreeNode(\\n                    nums[temp.low_idx + (mid-1 - temp.low_idx) / 2]\\n                );\\n                \\n                temp.node.left = node;      // Store Node as Left Child\\n                \\n                stack.push(new Tree(\\n                    temp.low_idx, mid-1, node\\n                ));\\n            } \\n            \\n            // if current value is more than mid value, go to right sub-tree\\n            if (mid < temp.high_idx) {\\n                \\n                TreeNode node = new TreeNode(\\n                    nums[mid+1 + (temp.high_idx - mid-1)/2]\\n                );\\n                \\n                temp.node.right = node;     // Store Node as Right Child\\n                \\n                stack.push(new Tree(\\n                    mid+1, temp.high_idx, node\\n                ));\\n            }\\n        }\\n        return root;    // The 1st Parent Node\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1829301,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1947878,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1565854,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1567193,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1566580,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1565757,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1842515,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1709914,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1801847,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1702993,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1829301,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1947878,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1565854,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1567193,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1566580,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1565757,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1842515,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1709914,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1801847,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1702993,
                "content": [
                    {
                        "username": "barneh",
                        "content": "how is this easy\\n"
                    },
                    {
                        "username": "pabloppizarro",
                        "content": "I agree, I think that its easy in the Computer Science world. But not for people who start doing programming stuff by web dev or some similar. "
                    },
                    {
                        "username": "namlehoangdev",
                        "content": "Hope the picture below can help everyone think of an iterative solution:\n\nHere is how an array: `[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]` transform to BST\n![](https://i.imgur.com/p7i22Kx.gif)"
                    },
                    {
                        "username": "mayankagarwal2402",
                        "content": "dude you are a legend. best example of \"a picture(animation actually) speaks louder than a thousand words.\"\nbtw what tool did you create animation on?"
                    },
                    {
                        "username": "sinomiko",
                        "content": "Given the sorted array: [-10,-3,0,5,9],\\nOne possible answer is: [0,-3,9,-10,null,5], \\n \\n Run Code Status: Finished\\nRun Code Result:\\nYour input\\n[-10,-3,0,5,9]\\nYour answer\\n[0,-3,9,-10,null,5]\\nExpected answer\\n[0,-10,5,null,-3,null,9]"
                    },
                    {
                        "username": "stellari",
                        "content": "I understand that this problem can be most naturally solved with recursion. However, I wonder if there is an iterative solution that only uses constant space (aside from the space occupied by the input array and the output tree nodes). For now, the only thing I can think of is Morris Traversal, but I wonder if a simpler solution exists for this particular problem. Any suggestion would be appreciated!"
                    },
                    {
                        "username": "catherinerae",
                        "content": "Article explaining how to solve this BST problem with Javascript, drawn with diagrams:\\nhttps://medium.com/confessions-of-a-bootcamp-grad/how-to-solve-leetcodes-convert-sorted-array-to-binary-search-tree-problem-with-javascript-a61e6d6d6c36"
                    },
                    {
                        "username": "anglez",
                        "content": "It just keeps giving me Compile Error, but it runs well on the console in Leetcode or in xcode 9.4.1. \\nI don\\'t know what happend. But in Leetcode console, my code works well, and finishes in 8ms. But when I hit the run button besides submission button, it\\'s always compile error.\\nAnybody run into this?"
                    },
                    {
                        "username": "lazarevzubov",
                        "content": "Yes. After re-loading the page, it worked for me. Perhaps, a problem with cache or something. Do you use Safari?"
                    },
                    {
                        "username": "amitmungare27",
                        "content": "To convert a sorted array to a binary search tree, we can use the following recursive algorithm:\\n1) If the array is empty, return null.\\n2) Find the middle element of the array and create a new node with its value.\\n3) Recursively construct the left subtree using the left half of the array.\\n4) Recursively construct the right subtree using the right half of the array.\\n5) Set the left and right child of the node created in step 2 to the root of the left and right subtree respectively.\\n6) Return the root node."
                    },
                    {
                        "username": "anj_p_r",
                        "content": "Constraints : \\'nums\\' to have 1 <= size <= 10000 . Don\\'t need the first point."
                    },
                    {
                        "username": "stridemann",
                        "content": "Yep. It is fast, but most of time you find out to which \"mid\" index you add 1 and for another subtract 1."
                    },
                    {
                        "username": "stridemann",
                        "content": "[@sohamkulkarni](/sohamkulkarni) It will be height balanced coz we are using binary partition way."
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "what about height balancing ? \\nwe just have to construct an AVL tree right?"
                    },
                    {
                        "username": "rohhiiiit",
                        "content": "Algorithm:\\n*  initialize `start=0` and `end=(length of  array -1)`\\n*  call recursive method : `createTree(nums,start,end)`\\n\\t\\t* if `start>end` `return NULL`\\n\\t\\t* calculate `mid=(start+end)/2`\\n\\t\\t* create `Node(Root)` with `nums[mid]` as value\\n\\t\\t* `node.left = createTree(nums,0,mid-1)`\\n\\t\\t* `node.right = createTree(nums,mid+1,end)`\\n\\t\\t* `return node`   "
                    },
                    {
                        "username": "a098707730135",
                        "content": "[@alighraibeh87](/alighraibeh87) I guess he/she meant to find a root (mid of the list, (start+end)/2).\\n\\nThe rest of the left part and the right part will meet the problem\\'s request that it has to be \"Height-Balanced Tree.\""
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "(start+end)//2 integer division you mean ? \\n"
                    },
                    {
                        "username": "aagraw19",
                        "content": "can someone help me understand why is this not a balanced tree. \\nTest case input: [0,1,2,3,4,5]\\nOutput based of my implementation: [3,2,4,1,null,null,5,0]. If I plot this as a BT.\\nL1 Root: 3\\nL2 (root =3) - left child = 2\\nL2 (root =3) - right child = 4.\\nL3 (root =2) - left child = 1\\nL3 (root =2) - right child = null\\nL3 (root =4) - left child = null\\nL3 (root =4) - right child = 5\\nL4 (root =1) - left child = 0\\nWhy is this not height balanced. I see max depth difference as 1. \\n\\nLeet code is saying the expected answer should be [3,1,5,0,2,4]. "
                    },
                    {
                        "username": "mariatiperez",
                        "content": "The imbalance is in node 2 (L3 root = 2), the subtrees differ by more than one. The depth of the left subtree is 2 (containing child node 1 and grandchild 0) while the right subtree has a depth of 0 (no nodes)"
                    },
                    {
                        "username": "Helalmajeed",
                        "content": "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."
                    },
                    {
                        "username": "akm-08",
                        "content": "Input\\nnums = [0,1,2,3,4,5]\\nOutput\\n[3,2,4,1,null,null,5,0]\\nExpected\\n[3,1,5,0,2,4]\\n\\nOutput got is also a valid Binary Search Tree. Still not accepting the test case.\\n\\ncan anyone explain"
                    },
                    {
                        "username": "dhruvil2511",
                        "content": "height wont be balanced for every node."
                    },
                    {
                        "username": "klaca",
                        "content": "its not a valid binary search tree, as the rightmost leaf is 0, which is less than many nodes in the left branch"
                    },
                    {
                        "username": "Furies",
                        "content": "[@ksgrande88](/ksgrande88) +1"
                    },
                    {
                        "username": "ksgrande88",
                        "content": "same here"
                    }
                ]
            },
            {
                "id": 1963701,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1569243,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1571226,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1954417,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1881090,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1569358,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1569309,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1571227,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 2018921,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1979840,
                "content": [
                    {
                        "username": "ningaloo",
                        "content": "this is not an easy wtf"
                    },
                    {
                        "username": "Liuzujun2010",
                        "content": "Exceed Memory Limit, I think my recursive solution does not use any extra space except store the Tree itself. Does anyone know how to solve the problem?"
                    },
                    {
                        "username": "yadabsd",
                        "content": "Did you check if the tree array is empty then return null?\\nCheck your program for input [];"
                    },
                    {
                        "username": "jish6303",
                        "content": "I was wondering if given a particular input the answer is unique.\\nIf the input is an array of 11 integers (let's say from 1 to 11).\\nCan I make a tree with root node value 8, the left is a BST of 7 nodes (full, 3 levels) and the right tree is a BST of 3 nodes (full, 2 levels).\\nThat would also meet the requirement but obviously that is not the unique solution to the input."
                    },
                    {
                        "username": "oops_moment",
                        "content": "The reason why simply putting all the smaller elements to the left and larger elements to the right of the middle element fails is that it can result in a balanced tree but not a height-balanced tree, especially when the size of the input array is even.\n\nConsider the following example: [0, 1, 2, 3, 4, 5]. If we try to construct the binary search tree using the approach of putting smaller elements to the left and larger elements to the right, we would end up with the following structure:\n\n(oof drawing that wasn't easy try coping up it's my first discussion, but wanted to give a try XD)\nThe tree seems balanced in terms of the number of nodes on the left and right sides, but it's not height-balanced. The left subtree of node 2 has a depth of 2 (containing node 1 and node 0), while the right subtree has a depth of 0 (no nodes). The difference in depth between the left and right subtrees is more than one, which violates the definition of a height-balanced tree.\n\nTo ensure a height-balanced tree, we need to construct the tree recursively, choosing the middle element as the root, and then constructing the left and right subtrees based on the remaining elements in a balanced manner. This ensures that the depth difference between any two leaf nodes is at most one, resulting in a height-balanced binary search tree.\n\n"
                    },
                    {
                        "username": "ASMIT-SRIVASTAVA",
                        "content": "awesome\\n"
                    },
                    {
                        "username": "drgIv",
                        "content": "input [0,1,2,3,4,5] \\noutput [3,0,4,null,1,null,5,null,2]\\nexpected [3,1,5,0,2,4]\\nfalse. \\nWhy?("
                    },
                    {
                        "username": "ravi60plus",
                        "content": "Example illustrated with input and output is what my program produces as outpur when I run the code. But the expected output is different, Why? Not able to figure out"
                    },
                    {
                        "username": "xT-Tx",
                        "content": "Only 1ms? Or even less than 1ms?\\nI tried the same recursive solution using c++, and the runtime is 8ms.\\nI also tried with swift, and always got compile error.\\nIt\\'s unbelievable."
                    },
                    {
                        "username": "zenfred",
                        "content": "LeetCode does not optimize C++ standard library. That increases the constant factor."
                    },
                    {
                        "username": "deepbluech",
                        "content": "Is there anybody can solve this problem without using recursion?And what is the time & space complexity?"
                    },
                    {
                        "username": "mrpiggy97",
                        "content": "although you asked this question eons ago and you might not see this, please check my solution, it does not use recursion"
                    },
                    {
                        "username": "0x49D1",
                        "content": "There was no explanation of what is binary search tree, so had to find it somewhere else. Why not? If I've not seen it before - I need at least some brief explanation, that would greatly help to solve the issue.\n\n**Binary Search Tree is a node-based binary tree data structure that has the following properties:**\n* The left subtree of a node contains only nodes with keys lesser than the node’s key.\n* The right subtree of a node contains only nodes with keys greater than the node’s key.\n* The left and right subtree each must also be a binary search tree."
                    },
                    {
                        "username": "boredcookie",
                        "content": "hint: you have a `sorted` array and you have to make a `binary search` tree"
                    }
                ]
            },
            {
                "id": 1776133,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1574766,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1568929,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1571225,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 2076647,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 2050259,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1995534,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1973337,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1957274,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1878952,
                "content": [
                    {
                        "username": "mcnugets",
                        "content": "Buggy testcase??? when running my code on my IDE it runs perfectly, but when running on leetcode it giving me runtime error "
                    },
                    {
                        "username": "suyashsingh234",
                        "content": "\"Run code\" button is broken on this question and displays wrong answer for custom test cases. Just click on submit."
                    },
                    {
                        "username": "ustcr7",
                        "content": "is {4,2,5,1,3} a height balanced BST?"
                    },
                    {
                        "username": "IuliiaKot",
                        "content": "When I run my solution I got the next error:\\n Line 34: ValueError: No JSON object could be decoded\\n\\nCould someone help me? I am not sure that I understand why it happened."
                    },
                    {
                        "username": "noblemanfreeman",
                        "content": "yoo"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Help needed : \\nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\\nis [0,-3,5,-10,0,null,9]\\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5].\\n\\nAm I missing something here? My Output seems correct only."
                    },
                    {
                        "username": "toiepp",
                        "content": "I can\\'t understand why this `[1, 0, 2, -1]` is considered to be height-balanced BST from this list `nums = [-1, 0, 1, 2]`. My code output the result which should be correct: `output = [-1, null, 1, 0, 2]`. Could anyone explain this, please?"
                    },
                    {
                        "username": "shubhamshekhar1",
                        "content": "Did you find an answer to this? I am facing similar issue. \nI Implemented one solution, and my output for nums = [-10,-3,0,5,9]\nis [0,-3,5,-10,0,null,9]\nbut Leetcode is saying Expected is [0,-3,9,-10,null,5]."
                    },
                    {
                        "username": "frozennuts",
                        "content": "This question has no business being labeled as easy. This is at least a medium."
                    },
                    {
                        "username": "Skaezr73",
                        "content": "This must have been labelled as \\'MEDIUM\\'..\\nAnd other question namely :\"construct BST from preorder traversal\" must have been labelled as \\'EASY\\'. "
                    },
                    {
                        "username": "gietbarca",
                        "content": "[0,-3,5,-10,null,9] can anyone explain why my answer is not valid? "
                    }
                ]
            },
            {
                "id": 1873790,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1859577,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1857029,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1759380,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1754161,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1706276,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1700068,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1679863,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1642617,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1635183,
                "content": [
                    {
                        "username": "raffo24999",
                        "content": "Hi everyone. Probably I\\'m not getting something and I could use some help. \\nI think I have the right code to convert an array into a height balanced BST. However I\\'m not getting if the ascending order of the array is something I should consider. I\\'m inserting my elements in the no matter what the order of elements in the array is. Is this right. For instance:\\n\\nnums = [-10,-3,0,5,9]\\nOutput = [-10,-3,5,null,0,null,9]\\nExpected = [0,-3,9,-10,null,5]\\n\\nWhy is this wrong? My output is in the same form of Example 1: [0,-10,5,null,-3,null,9] but numbers are in different order. \\n\\n"
                    },
                    {
                        "username": "zajano",
                        "content": "How is [5, -3, 9, -10, 0] not valid? \\n\\nL1 >> root = 5 (left = -3, right = 9)\\nchild L depth = 2, child R depth = 1 (diff of 1)\\nL2 >> n1 = -3 (parent = root, left = -10, right = 0)\\nchild L depth =1, child R depth = 1 (diff of 0)\\nL2 >> n2 = 9 (parent = root, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n3 = -10 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\nL3 >> n4 = 0 (parent = n1, left = null, right = null)\\nchild L depth = 0, child R depth = 0 (diff of 0)\\n\\nEverything on the left of each node is smaller, everything on the right of each node is larger, and depth never differs by more than 1 in either direction. "
                    },
                    {
                        "username": "savelievdmtr371",
                        "content": "Guys, what does null mean? I don\\'t get it..."
                    },
                    {
                        "username": "ribhav_32",
                        "content": "    int r = 0;\\n    int vis[10001];\\n    TreeNode* bin(int i, int j, vector<int>& a)\\n    {\\n        if(i > j)\\n        return NULL;\\n        r = (i+j)/2;\\n        if(vis[r])\\n        return NULL;\\n\\n        vis[r] = 1;\\n\\n        TreeNode* root = new TreeNode(a[r]);\\n        root->left = bin(i,r-1,a);\\n        root->right = bin(r+1,j,a);\\n\\n        return root;\\n    }\\n\\n\\nI have a doubt in my above solution, I had initialized r as global variable which shows wrong solution.\\nbut if I am initializing it inside the function then it is accepted\\nI can\\'t find out the reason.\\npls anyone help me."
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "suryabhan_singh_rathore",
                        "content": "why is passing syntax error in node.left or root.left continuesly\\notherwise  the same code excuting well in vs code or on other platforms"
                    },
                    {
                        "username": "harshsharmahrs9",
                        "content": "use Mergesort algorith take middle element as root, so ur tree will be balanced as length of list is odd then difference between the length (leftsub tree or left sub-array and (right sub-tree or right sub-array) is 0 and for length even it would be 1 and implement same thing on leftsubarray and rightsubarray - taking their middle element as root"
                    },
                    {
                        "username": "jayantsaini0007",
                        "content": "the time complexity of my solution is O(n) right ?\nrecurrence realtion : T(n)=2T(n/2)+c\n\n TreeNode* uti(int left,int right,vector<int>&nums){\n        TreeNode*root=0;\n        if(left<=right){\n            int idx=(left+right)/2;\n            root=new TreeNode(nums[idx]);\n            root->left=uti(left,idx-1,nums);\n            root->right=uti(idx+1,right,nums);\n        }\n        return root;\n    }\n"
                    },
                    {
                        "username": "yadabsd",
                        "content": "JS\n`var sortedArrayToBST = function(nums) {\n    if(nums.length === 0) return null;\n    if(nums.length === 1) return new TreeNode(nums[0]);\n\n    let centerIndex = Math.floor(nums.length/2);\n    let rootNode = new TreeNode(nums[centerIndex])\n\n    rootNode.left = sortedArrayToBST(nums.slice(0, centerIndex));\n    rootNode.right = sortedArrayToBST(nums.slice(centerIndex+1, nums.length));\n\n    return rootNode;\n\n};`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "sajal_19",
                        "content": "simple java sol: \\n\\npublic TreeNode sortedArrayToBST(int[] nums) {\\n        return sortedArrayToBST(nums,0,nums.length-1);\\n    }\\n    public TreeNode sortedArrayToBST(int[] nums, int si, int ei){\\n        if(si>ei){\\n            return null;\\n        }\\n        int mid = ei + (si-ei)/2;\\n        TreeNode root = new TreeNode(nums[mid]);\\n        root.left = sortedArrayToBST(nums,si,mid-1);\\n        root.right= sortedArrayToBST(nums,mid+1,ei);\\n        return root;\\n    }"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            }
        ]
    },
    {
        "title": "Implement Trie (Prefix Tree)",
        "question_content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as &quot;try&quot;) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]\n[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // return True\ntrie.search(&quot;app&quot;);     // return False\ntrie.startsWith(&quot;app&quot;); // return True\ntrie.insert(&quot;app&quot;);\ntrie.search(&quot;app&quot;);     // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 3180933,
                "title": "solution",
                "content": "```C++ []\\nclass TrieNode {\\npublic:\\n    TrieNode *child[26];\\n    bool isWord;\\n    TrieNode() {\\n        isWord = false;\\n        for (auto &a : child) a = nullptr;\\n    }\\n};\\nclass Trie {\\n    TrieNode* root;\\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    void insert(string s) {\\n        TrieNode *p = root;\\n        for (auto &a : s) {\\n            int i = a - \\'a\\';\\n            if (!p->child[i]) p->child[i] = new TrieNode();\\n            p = p->child[i];\\n        }\\n        p->isWord = true;\\n    }\\n    bool search(string key, bool prefix=false) {\\n        TrieNode *p = root;\\n        for (auto &a : key) {\\n            int i = a - \\'a\\';\\n            if (!p->child[i]) return false;\\n            p = p->child[i];\\n        }\\n        if (prefix==false) return p->isWord;\\n        return true;\\n    }\\n    bool startsWith(string prefix) {\\n        return search(prefix, true);\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root={}\\n        \\n    def insert(self, word: str) -> None:\\n\\n        cur=self.root\\n\\n        for letter in word:\\n            if letter not in cur:\\n                cur[letter]={}\\n            cur=cur[letter]\\n\\n        cur[\\'*\\']=\\'\\'\\n\\n    def search(self, word: str) -> bool:\\n\\n        cur=self.root\\n        for letter in word:\\n            if letter not in cur:\\n                return False\\n            cur=cur[letter]\\n\\n        return \\'*\\' in cur\\n        \\n    def startsWith(self, prefix: str) -> bool:\\n\\n        cur=self.root\\n        for letter in prefix:\\n            if letter not in cur:\\n                return False\\n            cur=cur[letter]\\n\\n        return True\\n```\\n\\n```Java []\\nclass Trie {\\n    Node root;\\n\\n    public Trie() {\\n        root = new Node();\\n    }\\n    \\n    public void insert(String word) {\\n        root.insert(word, 0);\\n    }\\n    \\n    public boolean search(String word) {\\n        return root.search(word, 0);\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        return root.startsWith(prefix, 0);\\n    }\\n\\n    class Node {\\n        Node[] nodes;\\n        boolean isEnd;\\n\\n        Node() {\\n            nodes = new Node[26];\\n        }\\n\\n        private void insert(String word, int idx) {\\n            if (idx >= word.length()) return;\\n            int i = word.charAt(idx) - \\'a\\';\\n            if (nodes[i] == null) {\\n                nodes[i] = new Node();\\n            }\\n\\n            if (idx == word.length()-1) nodes[i].isEnd = true;\\n            nodes[i].insert(word, idx+1);\\n        }\\n\\n        private boolean search(String word, int idx) {\\n            if (idx >= word.length()) return false;\\n            Node node = nodes[word.charAt(idx) - \\'a\\'];\\n            if (node == null) return false;\\n            if (idx == word.length() - 1 && node.isEnd) return true;\\n\\n            return node.search(word, idx+1);\\n\\n        }\\n\\n        private boolean startsWith(String prefix, int idx) {\\n            if (idx >= prefix.length()) return false;\\n            Node node = nodes[prefix.charAt(idx) - \\'a\\'];\\n            if (node == null) return false;\\n            if (idx == prefix.length() - 1) return true;\\n\\n            return node.startsWith(prefix, idx+1);\\n        }\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass TrieNode {\\npublic:\\n    TrieNode *child[26];\\n    bool isWord;\\n    TrieNode() {\\n        isWord = false;\\n        for (auto &a : child) a = nullptr;\\n    }\\n};\\nclass Trie {\\n    TrieNode* root;\\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    void insert(string s) {\\n        TrieNode *p = root;\\n        for (auto &a : s) {\\n            int i = a - \\'a\\';\\n            if (!p->child[i]) p->child[i] = new TrieNode();\\n            p = p->child[i];\\n        }\\n        p->isWord = true;\\n    }\\n    bool search(string key, bool prefix=false) {\\n        TrieNode *p = root;\\n        for (auto &a : key) {\\n            int i = a - \\'a\\';\\n            if (!p->child[i]) return false;\\n            p = p->child[i];\\n        }\\n        if (prefix==false) return p->isWord;\\n        return true;\\n    }\\n    bool startsWith(string prefix) {\\n        return search(prefix, true);\\n    }\\n};\\n```\n```Python3 []\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root={}\\n        \\n    def insert(self, word: str) -> None:\\n\\n        cur=self.root\\n\\n        for letter in word:\\n            if letter not in cur:\\n                cur[letter]={}\\n            cur=cur[letter]\\n\\n        cur[\\'*\\']=\\'\\'\\n\\n    def search(self, word: str) -> bool:\\n\\n        cur=self.root\\n        for letter in word:\\n            if letter not in cur:\\n                return False\\n            cur=cur[letter]\\n\\n        return \\'*\\' in cur\\n        \\n    def startsWith(self, prefix: str) -> bool:\\n\\n        cur=self.root\\n        for letter in prefix:\\n            if letter not in cur:\\n                return False\\n            cur=cur[letter]\\n\\n        return True\\n```\n```Java []\\nclass Trie {\\n    Node root;\\n\\n    public Trie() {\\n        root = new Node();\\n    }\\n    \\n    public void insert(String word) {\\n        root.insert(word, 0);\\n    }\\n    \\n    public boolean search(String word) {\\n        return root.search(word, 0);\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        return root.startsWith(prefix, 0);\\n    }\\n\\n    class Node {\\n        Node[] nodes;\\n        boolean isEnd;\\n\\n        Node() {\\n            nodes = new Node[26];\\n        }\\n\\n        private void insert(String word, int idx) {\\n            if (idx >= word.length()) return;\\n            int i = word.charAt(idx) - \\'a\\';\\n            if (nodes[i] == null) {\\n                nodes[i] = new Node();\\n            }\\n\\n            if (idx == word.length()-1) nodes[i].isEnd = true;\\n            nodes[i].insert(word, idx+1);\\n        }\\n\\n        private boolean search(String word, int idx) {\\n            if (idx >= word.length()) return false;\\n            Node node = nodes[word.charAt(idx) - \\'a\\'];\\n            if (node == null) return false;\\n            if (idx == word.length() - 1 && node.isEnd) return true;\\n\\n            return node.search(word, idx+1);\\n\\n        }\\n\\n        private boolean startsWith(String prefix, int idx) {\\n            if (idx >= prefix.length()) return false;\\n            Node node = nodes[prefix.charAt(idx) - \\'a\\'];\\n            if (node == null) return false;\\n            if (idx == prefix.length() - 1) return true;\\n\\n            return node.startsWith(prefix, idx+1);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58989,
                "title": "my-python-solution",
                "content": "        \\n    class TrieNode:\\n            # Initialize your data structure here.\\n            def __init__(self):\\n                self.word=False\\n                self.children={}\\n        \\n        class Trie:\\n        \\n            def __init__(self):\\n                self.root = TrieNode()\\n        \\n            # @param {string} word\\n            # @return {void}\\n            # Inserts a word into the trie.\\n            def insert(self, word):\\n                node=self.root\\n                for i in word:\\n                    if i not in node.children:\\n                        node.children[i]=TrieNode()\\n                    node=node.children[i]\\n                node.word=True\\n        \\n            # @param {string} word\\n            # @return {boolean}\\n            # Returns if the word is in the trie.\\n            def search(self, word):\\n                node=self.root\\n                for i in word:\\n                    if i not in node.children:\\n                        return False\\n                    node=node.children[i]\\n                return node.word\\n        \\n            # @param {string} prefix\\n            # @return {boolean}\\n            # Returns if there is any word in the trie\\n            # that starts with the given prefix.\\n            def startsWith(self, prefix):\\n                node=self.root\\n                for i in prefix:\\n                    if i not in node.children:\\n                        return False\\n                    node=node.children[i]\\n                return True\\n                \\n        \\n        # Your Trie object will be instantiated and called as such:\\n        # trie = Trie()\\n        # trie.insert(\"somestring\")\\n        # trie.search(\"key\")",
                "solutionTags": [],
                "code": "        \\n    class TrieNode:\\n            # Initialize your data structure here.\\n            def __init__(self):\\n                self.word=False\\n                self.children={}\\n        \\n        class Trie:\\n        \\n            def __init__(self):\\n                self.root = TrieNode()\\n        \\n            # @param {string} word\\n            # @return {void}\\n            # Inserts a word into the trie.\\n            def insert(self, word):\\n                node=self.root\\n                for i in word:\\n                    if i not in node.children:\\n                        node.children[i]=TrieNode()\\n                    node=node.children[i]\\n                node.word=True\\n        \\n            # @param {string} word\\n            # @return {boolean}\\n            # Returns if the word is in the trie.\\n            def search(self, word):\\n                node=self.root\\n                for i in word:\\n                    if i not in node.children:\\n                        return False\\n                    node=node.children[i]\\n                return node.word\\n        \\n            # @param {string} prefix\\n            # @return {boolean}\\n            # Returns if there is any word in the trie\\n            # that starts with the given prefix.\\n            def startsWith(self, prefix):\\n                node=self.root\\n                for i in prefix:\\n                    if i not in node.children:\\n                        return False\\n                    node=node.children[i]\\n                return True\\n                \\n        \\n        # Your Trie object will be instantiated and called as such:\\n        # trie = Trie()\\n        # trie.insert(\"somestring\")\\n        # trie.search(\"key\")",
                "codeTag": "Java"
            },
            {
                "id": 58832,
                "title": "ac-java-solution-simple-using-single-array",
                "content": "Detailed explanation after code!\\n\\n    class TrieNode {\\n        public char val;\\n        public boolean isWord; \\n        public TrieNode[] children = new TrieNode[26];\\n        public TrieNode() {}\\n        TrieNode(char c){\\n            TrieNode node = new TrieNode();\\n            node.val = c;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n        public Trie() {\\n            root = new TrieNode();\\n            root.val = ' ';\\n        }\\n    \\n        public void insert(String word) {\\n            TrieNode ws = root;\\n            for(int i = 0; i < word.length(); i++){\\n                char c = word.charAt(i);\\n                if(ws.children[c - 'a'] == null){\\n                    ws.children[c - 'a'] = new TrieNode(c);\\n                }\\n                ws = ws.children[c - 'a'];\\n            }\\n            ws.isWord = true;\\n        }\\n    \\n        public boolean search(String word) {\\n            TrieNode ws = root; \\n            for(int i = 0; i < word.length(); i++){\\n                char c = word.charAt(i);\\n                if(ws.children[c - 'a'] == null) return false;\\n                ws = ws.children[c - 'a'];\\n            }\\n            return ws.isWord;\\n        }\\n    \\n        public boolean startsWith(String prefix) {\\n            TrieNode ws = root; \\n            for(int i = 0; i < prefix.length(); i++){\\n                char c = prefix.charAt(i);\\n                if(ws.children[c - 'a'] == null) return false;\\n                ws = ws.children[c - 'a'];\\n            }\\n            return true;\\n        }\\n    }\\n\\nWith my  solution I took the simple approach of giving each TrieNode a 26 element array of each possible child node it may have. I only gave 26 children nodes because we are only working with lowercase 'a' - 'z'. If you are uncertain why I made the root of my Trie an empty character this is a standard/typical approach for building out a Trie it is somewhat arbitrary what the root node is. \\n\\nFor insert I used the following algorithm. Loop through each character in the word being inserted check if the character is a child node of the current TrieNode i.e. check if the array has a populated value in the index of this character. If the current character ISN'T a child node of my current node add this character representation to the corresponding index location then set current node equal to the child that was added. However if the current character IS a child of the current node only set current node equal to the child. After evaluating the entire String the Node we left off on is marked as a *word* this allows our Trie to know which words exist in our \"dictionary\"\\n\\nFor search I simply navigate through the Trie if I discover the current character isn't in the Trie I return false.\\nAfter checking each Char in the String I check to see if the Node I left off on was marked as a word returning the result.\\n\\nStarts with is identical to search except it doesn't matter if the Node I left off was marked as a word or not if entire string evaluated i always return true;",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Trie"
                ],
                "code": "Detailed explanation after code!\\n\\n    class TrieNode {\\n        public char val;\\n        public boolean isWord; \\n        public TrieNode[] children = new TrieNode[26];\\n        public TrieNode() {}\\n        TrieNode(char c){\\n            TrieNode node = new TrieNode();\\n            node.val = c;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n        public Trie() {\\n            root = new TrieNode();\\n            root.val = ' ';\\n        }\\n    \\n        public void insert(String word) {\\n            TrieNode ws = root;\\n            for(int i = 0; i < word.length(); i++){\\n                char c = word.charAt(i);\\n                if(ws.children[c - 'a'] == null){\\n                    ws.children[c - 'a'] = new TrieNode(c);\\n                }\\n                ws = ws.children[c - 'a'];\\n            }\\n            ws.isWord = true;\\n        }\\n    \\n        public boolean search(String word) {\\n            TrieNode ws = root; \\n            for(int i = 0; i < word.length(); i++){\\n                char c = word.charAt(i);\\n                if(ws.children[c - 'a'] == null) return false;\\n                ws = ws.children[c - 'a'];\\n            }\\n            return ws.isWord;\\n        }\\n    \\n        public boolean startsWith(String prefix) {\\n            TrieNode ws = root; \\n            for(int i = 0; i < prefix.length(); i++){\\n                char c = prefix.charAt(i);\\n                if(ws.children[c - 'a'] == null) return false;\\n                ws = ws.children[c - 'a'];\\n            }\\n            return true;\\n        }\\n    }\\n\\nWith my  solution I took the simple approach of giving each TrieNode a 26 element array of each possible child node it may have. I only gave 26 children nodes because we are only working with lowercase 'a' - 'z'. If you are uncertain why I made the root of my Trie an empty character this is a standard/typical approach for building out a Trie it is somewhat arbitrary what the root node is. \\n\\nFor insert I used the following algorithm. Loop through each character in the word being inserted check if the character is a child node of the current TrieNode i.e. check if the array has a populated value in the index of this character. If the current character ISN'T a child node of my current node add this character representation to the corresponding index location then set current node equal to the child that was added. However if the current character IS a child of the current node only set current node equal to the child. After evaluating the entire String the Node we left off on is marked as a *word* this allows our Trie to know which words exist in our \"dictionary\"\\n\\nFor search I simply navigate through the Trie if I discover the current character isn't in the Trie I return false.\\nAfter checking each Char in the String I check to see if the Node I left off on was marked as a word returning the result.\\n\\nStarts with is identical to search except it doesn't matter if the Node I left off was marked as a word or not if entire string evaluated i always return true;",
                "codeTag": "Java"
            },
            {
                "id": 58834,
                "title": "ac-python-solution",
                "content": "    class TrieNode:\\n    # Initialize your data structure here.\\n    def __init__(self):\\n        self.children = collections.defaultdict(TrieNode)\\n        self.is_word = False\\n\\n    class Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word):\\n        current = self.root\\n        for letter in word:\\n            current = current.children[letter]\\n        current.is_word = True\\n\\n    def search(self, word):\\n        current = self.root\\n        for letter in word:\\n            current = current.children.get(letter)\\n            if current is None:\\n                return False\\n        return current.is_word\\n\\n    def startsWith(self, prefix):\\n        current = self.root\\n        for letter in prefix:\\n            current = current.children.get(letter)\\n            if current is None:\\n                return False\\n        return True",
                "solutionTags": [],
                "code": "    class TrieNode:\\n    # Initialize your data structure here.\\n    def __init__(self):\\n        self.children = collections.defaultdict(TrieNode)\\n        self.is_word = False\\n\\n    class Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word):\\n        current = self.root\\n        for letter in word:\\n            current = current.children[letter]\\n        current.is_word = True\\n\\n    def search(self, word):\\n        current = self.root\\n        for letter in word:\\n            current = current.children.get(letter)\\n            if current is None:\\n                return False\\n        return current.is_word\\n\\n    def startsWith(self, prefix):\\n        current = self.root\\n        for letter in prefix:\\n            current = current.children.get(letter)\\n            if current is None:\\n                return False\\n        return True",
                "codeTag": "Java"
            },
            {
                "id": 58842,
                "title": "maybe-the-code-is-not-too-much-by-using-next-26-c",
                "content": "    class TrieNode\\n    {\\n    public:\\n        TrieNode *next[26];\\n        bool is_word;\\n        \\n        // Initialize your data structure here.\\n        TrieNode(bool b = false)\\n        {\\n            memset(next, 0, sizeof(next));\\n            is_word = b;\\n        }\\n    };\\n    \\n    class Trie\\n    {\\n        TrieNode *root;\\n    public:\\n        Trie()\\n        {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string s)\\n        {\\n            TrieNode *p = root;\\n            for(int i = 0; i < s.size(); ++ i)\\n            {\\n                if(p -> next[s[i] - 'a'] == NULL)\\n                    p -> next[s[i] - 'a'] = new TrieNode();\\n                p = p -> next[s[i] - 'a'];\\n            }\\n            p -> is_word = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key)\\n        {\\n            TrieNode *p = find(key);\\n            return p != NULL && p -> is_word;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix)\\n        {\\n            return find(prefix) != NULL;\\n        }\\n    \\n    private:\\n        TrieNode* find(string key)\\n        {\\n            TrieNode *p = root;\\n            for(int i = 0; i < key.size() && p != NULL; ++ i)\\n                p = p -> next[key[i] - 'a'];\\n            return p;\\n        }\\n    };",
                "solutionTags": [],
                "code": "    class TrieNode\\n    {\\n    public:\\n        TrieNode *next[26];\\n        bool is_word;\\n        \\n        // Initialize your data structure here.\\n        TrieNode(bool b = false)\\n        {\\n            memset(next, 0, sizeof(next));\\n            is_word = b;\\n        }\\n    };\\n    \\n    class Trie\\n    {\\n        TrieNode *root;\\n    public:\\n        Trie()\\n        {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string s)\\n        {\\n            TrieNode *p = root;\\n            for(int i = 0; i < s.size(); ++ i)\\n            {\\n                if(p -> next[s[i] - 'a'] == NULL)\\n                    p -> next[s[i] - 'a'] = new TrieNode();\\n                p = p -> next[s[i] - 'a'];\\n            }\\n            p -> is_word = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key)\\n        {\\n            TrieNode *p = find(key);\\n            return p != NULL && p -> is_word;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix)\\n        {\\n            return find(prefix) != NULL;\\n        }\\n    \\n    private:\\n        TrieNode* find(string key)\\n        {\\n            TrieNode *p = root;\\n            for(int i = 0; i < key.size() && p != NULL; ++ i)\\n                p = p -> next[key[i] - 'a'];\\n            return p;\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 58868,
                "title": "implement-trie-prefix-tree-c-clean-code-array-map",
                "content": "**array**\\n```\\nclass Trie {\\npublic:\\n    Trie() {}\\n\\n    void insert(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            ch -= 'a';\\n            if (!node->next[ch]) { node->next[ch] = new Trie(); }\\n            node = node->next[ch];\\n        }\\n        node->isword = true;\\n    }\\n\\n    bool search(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            ch -= 'a';\\n            if (!node->next[ch]) { return false; }\\n            node = node->next[ch];\\n        }\\n        return node->isword;\\n    }\\n\\n    bool startsWith(string prefix) {\\n        Trie* node = this;\\n        for (char ch : prefix) {\\n            ch -= 'a';\\n            if (!node->next[ch]) { return false; }\\n            node = node->next[ch];\\n        }\\n        return true;\\n    }\\n\\nprivate:\\n    Trie* next[26] = {};\\n    bool isword = false;\\n};\\n```\\n\\n**map**\\n```\\nclass Trie {\\npublic:\\n    Trie() {}\\n\\n    void insert(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            if (!node->next.count(ch)) { node->next[ch] = new Trie(); }\\n            node = node->next[ch];\\n        }\\n        node->isword = true;\\n    }\\n\\n    bool search(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            if (!node->next.count(ch)) { return false; }\\n            node = node->next[ch];\\n        }\\n        return node->isword;\\n    }\\n\\n    bool startsWith(string prefix) {\\n        Trie* node = this;\\n        for (char ch : prefix) {\\n            if (!node->next.count(ch)) { return false; }\\n            node = node->next[ch];\\n        }\\n        return true;\\n    }\\n\\nprivate:\\n    map<char, Trie*> next = {};\\n    bool isword = false;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie {\\npublic:\\n    Trie() {}\\n\\n    void insert(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            ch -= 'a';\\n            if (!node->next[ch]) { node->next[ch] = new Trie(); }\\n            node = node->next[ch];\\n        }\\n        node->isword = true;\\n    }\\n\\n    bool search(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            ch -= 'a';\\n            if (!node->next[ch]) { return false; }\\n            node = node->next[ch];\\n        }\\n        return node->isword;\\n    }\\n\\n    bool startsWith(string prefix) {\\n        Trie* node = this;\\n        for (char ch : prefix) {\\n            ch -= 'a';\\n            if (!node->next[ch]) { return false; }\\n            node = node->next[ch];\\n        }\\n        return true;\\n    }\\n\\nprivate:\\n    Trie* next[26] = {};\\n    bool isword = false;\\n};\\n```\n```\\nclass Trie {\\npublic:\\n    Trie() {}\\n\\n    void insert(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            if (!node->next.count(ch)) { node->next[ch] = new Trie(); }\\n            node = node->next[ch];\\n        }\\n        node->isword = true;\\n    }\\n\\n    bool search(string word) {\\n        Trie* node = this;\\n        for (char ch : word) {\\n            if (!node->next.count(ch)) { return false; }\\n            node = node->next[ch];\\n        }\\n        return node->isword;\\n    }\\n\\n    bool startsWith(string prefix) {\\n        Trie* node = this;\\n        for (char ch : prefix) {\\n            if (!node->next.count(ch)) { return false; }\\n            node = node->next[ch];\\n        }\\n        return true;\\n    }\\n\\nprivate:\\n    map<char, Trie*> next = {};\\n    bool isword = false;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58945,
                "title": "share-my-c-solution-easy-to-understand",
                "content": "    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        bool is_word;\\n        TrieNode *children[26];\\n        \\n        TrieNode() {\\n            is_word = false;\\n            \\n            for (int i = 0; i < 26; i++)\\n                children[i] = NULL;\\n        }\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            int word_len = word.length();\\n            int k = 0;\\n            TrieNode *cur = root;\\n            \\n            for (int i = 0; i < word_len; i++)\\n            {\\n                k = word[i] - 'a';\\n                \\n                if (cur->children[k] == NULL)\\n                {\\n                    cur->children[k] = new TrieNode();\\n                }\\n                \\n                cur = cur->children[k];\\n            }\\n            \\n            cur->is_word = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n            int word_len = word.length();\\n            int k = 0;\\n            TrieNode *cur = root;\\n            \\n            for (int i = 0; i < word_len; i++)\\n            {\\n                k = word[i] - 'a';\\n                cur = cur->children[k];\\n                \\n                if (cur == NULL)\\n                    return false;\\n            }\\n            \\n            return cur->is_word;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            int word_len = prefix.length();\\n            int k = 0;\\n            TrieNode *cur = root;\\n            \\n            for (int i = 0; i < word_len; i++)\\n            {\\n                k = prefix[i] - 'a';\\n                cur = cur->children[k];\\n                \\n                if (cur == NULL)\\n                    return false;\\n            }\\n            \\n            return true;\\n        }\\n    \\n    private:\\n        TrieNode* root;\\n    };\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie;\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "solutionTags": [
                    "C++"
                ],
                "code": "    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        bool is_word;\\n        TrieNode *children[26];\\n        \\n        TrieNode() {\\n            is_word = false;\\n            \\n            for (int i = 0; i < 26; i++)\\n                children[i] = NULL;\\n        }\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            int word_len = word.length();\\n            int k = 0;\\n            TrieNode *cur = root;\\n            \\n            for (int i = 0; i < word_len; i++)\\n            {\\n                k = word[i] - 'a';\\n                \\n                if (cur->children[k] == NULL)\\n                {\\n                    cur->children[k] = new TrieNode();\\n                }\\n                \\n                cur = cur->children[k];\\n            }\\n            \\n            cur->is_word = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n            int word_len = word.length();\\n            int k = 0;\\n            TrieNode *cur = root;\\n            \\n            for (int i = 0; i < word_len; i++)\\n            {\\n                k = word[i] - 'a';\\n                cur = cur->children[k];\\n                \\n                if (cur == NULL)\\n                    return false;\\n            }\\n            \\n            return cur->is_word;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            int word_len = prefix.length();\\n            int k = 0;\\n            TrieNode *cur = root;\\n            \\n            for (int i = 0; i < word_len; i++)\\n            {\\n                k = prefix[i] - 'a';\\n                cur = cur->children[k];\\n                \\n                if (cur == NULL)\\n                    return false;\\n            }\\n            \\n            return true;\\n        }\\n    \\n    private:\\n        TrieNode* root;\\n    };\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie;\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "codeTag": "Java"
            },
            {
                "id": 1509720,
                "title": "c-python-208-implement-trie-prefix-tree-clean-concise",
                "content": "<iframe src=\"https://leetcode.com/playground/GaxRk6Q3/shared\" frameBorder=\"0\" width=\"100%\" height=\"680\"></iframe>\\n\\n**Complexity**\\n- Time:\\n\\t- insert(word): `O(|word|)`\\n\\t- search(word): `O(|word|)`\\n\\t- startsWith(prefix): `O(|prefix|)`\\n- Space: `O(T)`, where `T` is total of Trie nodes, in the worst case it\\'s total number of characters of words we inserted.",
                "solutionTags": [],
                "code": "<iframe src=\"https://leetcode.com/playground/GaxRk6Q3/shared\" frameBorder=\"0\" width=\"100%\" height=\"680\"></iframe>\\n\\n**Complexity**\\n- Time:\\n\\t- insert(word): `O(|word|)`\\n\\t- search(word): `O(|word|)`\\n\\t- startsWith(prefix): `O(|prefix|)`\\n- Space: `O(T)`, where `T` is total of Trie nodes, in the worst case it\\'s total number of characters of words we inserted.",
                "codeTag": "Unknown"
            },
            {
                "id": 362916,
                "title": "simple-python-solution-beats-99-runtime-95-memory",
                "content": "There is no need to create a Trie node class. Using a dictionary can give much better performance. Nodes are replaced by dictionary. `is_word` is replaced by adding a `\"-\"` key to the dictionary.\\n\\n\\tclass Trie(object):\\n\\n\\t\\tdef __init__(self):\\n\\t\\t\\tself.trie = {}\\n\\n\\n\\t\\tdef insert(self, word):\\n\\t\\t\\tt = self.trie\\n\\t\\t\\tfor c in word:\\n\\t\\t\\t\\tif c not in t: t[c] = {}\\n\\t\\t\\t\\tt = t[c]\\n\\t\\t\\tt[\"-\"] = True\\n\\n\\n\\t\\tdef search(self, word):\\n\\t\\t\\tt = self.trie\\n\\t\\t\\tfor c in word:\\n\\t\\t\\t\\tif c not in t: return False\\n\\t\\t\\t\\tt = t[c]\\n\\t\\t\\treturn \"-\" in t\\n\\n\\t\\tdef startsWith(self, prefix):\\n\\t\\t\\tt = self.trie\\n\\t\\t\\tfor c in prefix:\\n\\t\\t\\t\\tif c not in t: return False\\n\\t\\t\\t\\tt = t[c]\\n\\t\\t\\treturn True",
                "solutionTags": [
                    "Python"
                ],
                "code": "There is no need to create a Trie node class. Using a dictionary can give much better performance. Nodes are replaced by dictionary. `is_word` is replaced by adding a `\"-\"` key to the dictionary.\\n\\n\\tclass Trie(object):\\n\\n\\t\\tdef __init__(self):\\n\\t\\t\\tself.trie = {}\\n\\n\\n\\t\\tdef insert(self, word):\\n\\t\\t\\tt = self.trie\\n\\t\\t\\tfor c in word:\\n\\t\\t\\t\\tif c not in t: t[c] = {}\\n\\t\\t\\t\\tt = t[c]\\n\\t\\t\\tt[\"-\"] = True\\n\\n\\n\\t\\tdef search(self, word):\\n\\t\\t\\tt = self.trie\\n\\t\\t\\tfor c in word:\\n\\t\\t\\t\\tif c not in t: return False\\n\\t\\t\\t\\tt = t[c]\\n\\t\\t\\treturn \"-\" in t\\n\\n\\t\\tdef startsWith(self, prefix):\\n\\t\\t\\tt = self.trie\\n\\t\\t\\tfor c in prefix:\\n\\t\\t\\t\\tif c not in t: return False\\n\\t\\t\\t\\tt = t[c]\\n\\t\\t\\treturn True",
                "codeTag": "Java"
            },
            {
                "id": 631562,
                "title": "c-small-very-easy-to-understand-solution-o-n-n-len-word",
                "content": "class Trie {  \\n\\nprivate: \\n\\n    struct TrieNode{\\n        struct TrieNode *child[26];\\n        bool isEnd;\\n    };\\n    TrieNode* node;\\n    \\npublic:    \\n\\n    Trie() {\\n        node=new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* cur=node;\\n        for(char c: word){\\n            if(cur->child[c-\\'a\\']==NULL) cur->child[c-\\'a\\']=new TrieNode();\\n            cur=cur->child[c-\\'a\\'];\\n        }\\n        cur->isEnd=true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* cur=node;\\n        for(char c: word){\\n            if(cur->child[c-\\'a\\']==NULL)return false;\\n            cur=cur->child[c-\\'a\\'];\\n        }\\n        if(cur->isEnd==true) return true;\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* cur=node;\\n        for(char c: prefix){\\n            if(cur->child[c-\\'a\\']==NULL)return false;\\n            cur=cur->child[c-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Trie"
                ],
                "code": "class Trie {  \\n\\nprivate: \\n\\n    struct TrieNode{\\n        struct TrieNode *child[26];\\n        bool isEnd;\\n    };\\n    TrieNode* node;\\n    \\npublic:    \\n\\n    Trie() {\\n        node=new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* cur=node;\\n        for(char c: word){\\n            if(cur->child[c-\\'a\\']==NULL) cur->child[c-\\'a\\']=new TrieNode();\\n            cur=cur->child[c-\\'a\\'];\\n        }\\n        cur->isEnd=true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* cur=node;\\n        for(char c: word){\\n            if(cur->child[c-\\'a\\']==NULL)return false;\\n            cur=cur->child[c-\\'a\\'];\\n        }\\n        if(cur->isEnd==true) return true;\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* cur=node;\\n        for(char c: prefix){\\n            if(cur->child[c-\\'a\\']==NULL)return false;\\n            cur=cur->child[c-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};",
                "codeTag": "Java"
            },
            {
                "id": 399178,
                "title": "clean-javascript-solution",
                "content": "```\\nclass Trie {\\n  constructor() {\\n    this.root = {};\\n  }\\n\\n  insert(word) {\\n    let node = this.root;\\n    for (let c of word) {\\n      if (node[c] == null) node[c] = {};\\n      node = node[c];\\n    }\\n    node.isWord = true;\\n  }\\n\\n  traverse(word) {\\n    let node = this.root;\\n    for (let c of word) {\\n      node = node[c];\\n      if (node == null) return null;\\n    }\\n    return node;\\n  }\\n\\n  search(word) {\\n    const node = this.traverse(word);\\n    return node != null && node.isWord === true;\\n  }\\n\\n  startsWith(prefix) {\\n    return this.traverse(prefix) != null;\\n  }\\n}\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass Trie {\\n  constructor() {\\n    this.root = {};\\n  }\\n\\n  insert(word) {\\n    let node = this.root;\\n    for (let c of word) {\\n      if (node[c] == null) node[c] = {};\\n      node = node[c];\\n    }\\n    node.isWord = true;\\n  }\\n\\n  traverse(word) {\\n    let node = this.root;\\n    for (let c of word) {\\n      node = node[c];\\n      if (node == null) return null;\\n    }\\n    return node;\\n  }\\n\\n  search(word) {\\n    const node = this.traverse(word);\\n    return node != null && node.isWord === true;\\n  }\\n\\n  startsWith(prefix) {\\n    return this.traverse(prefix) != null;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3307680,
                "title": "easy-explanation-in-detail-with-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTrie, also known as a prefix tree, is a data structure used for efficient retrieval of strings in a set of strings. It is particularly useful when we need to perform prefix searches on the set of strings. The intuition behind Trie is to store the strings in a tree-like data structure where each node in the tree represents a character in the string. The edges between nodes represent characters of the string, and each node may have multiple children nodes corresponding to different characters.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe implementation provided in the code is a Trie data structure. It has a private member variable root which is the root node of the Trie. The insert function takes a string as input and inserts it into the Trie by iterating over the characters of the string and creating new nodes if necessary. The search function takes a string as input and returns true if the string is present in the Trie, and false otherwise. The startsWith function takes a prefix string as input and returns true if there is any string in the Trie that starts with the prefix, and false otherwise.\\n\\nThe my namespace is used to define a custom TreeNode class to avoid conflicts with the existing TreeNode struct defined in LeetCode as i got error while submtting it, so after that instead of changing the TreeNode name to another name in all code, i just put that in another namespace. The TreeNode class has two private member variables - end, which indicates whether the node represents the end of a string, and child, which is a vector of pointers to child nodes representing the characters of the string. The setEnd, setNode, isEnd, isSet, and getNode functions are used to manipulate and access the properties of the TreeNode class.\\n\\nOverall, this implementation of the Trie data structure provides an efficient way of storing and retrieving a set of strings. It has a time complexity of O(m) for insert, search, and startsWith functions, where m is the length of the string being processed.\\n\\n# TreeNode\\n\\n1. TreeNode() - The constructor of the TreeNode class initializes a new node with a boolean flag end set to false and an array of child nodes, represented as a vector of TreeNode pointers, initialized to NULL. The size of the array is set to 26 to accommodate the 26 lowercase letters of the English alphabet.\\n\\n2. void setEnd() - The setEnd method sets the end flag of the node to true to indicate that a word ends at this node.\\n\\n3. void setNode(char ch) - The setNode method takes a character ch as input and creates a new child node for the corresponding letter of the alphabet by setting the corresponding element of the child vector to a new TreeNode object.\\n\\n4. bool isEnd() - The isEnd method returns the value of the end flag of the node, indicating whether a word ends at this node.\\n\\n5. bool isSet(char ch) - The isSet method takes a character ch as input and returns true if the corresponding child node exists, i.e., the corresponding element of the child vector is not NULL.\\n\\n6. TreeNode* getNode(char ch) - The getNode method takes a character ch as input and returns a pointer to the corresponding child node. It assumes that the child node exists and does not check if the corresponding element of the child vector is NULL.\\n\\nThese methods are used to manipulate the nodes in the Trie data structure. The setEnd, isEnd, and setNode methods are used to mark the end of a word and add new child nodes to the Trie. The isSet and getNode methods are used to navigate the Trie by checking if a child node exists and retrieving a pointer to a child node, respectively. The time complexity of each of the methods is O(1), making them efficient for manipulating nodes in a Trie data structure.\\n\\n# Trie\\n\\n1. Trie() - The constructor of the Trie class initializes an empty Trie by creating a new TreeNode as the root of the Trie.\\n\\n2. void insert(string word) - The insert method takes a string word as input and inserts it into the Trie by iterating over each character of the string. It starts at the root node and checks if the child node corresponding to the current character exists. If it does, it moves to the existing child node; otherwise, it creates a new child node for the current character and moves to the newly created child node. After iterating over all characters of the string, it sets the end flag of the final node to true to indicate the end of the inserted string.\\n\\n3. bool search(string word) - The search method takes a string word as input and searches for it in the Trie by iterating over each character of the string. It starts at the root node and checks if the child node corresponding to the current character exists. If it does, it moves to the existing child node; otherwise, it returns false to indicate that the word is not present in the Trie. After iterating over all characters of the string, it returns true if the end flag of the final node is set to true, indicating that the string has been inserted into the Trie.\\n\\n4. bool startsWith(string prefix) - The startsWith method takes a string prefix as input and searches for any string in the Trie that starts with the given prefix by iterating over each character of the prefix. It starts at the root node and checks if the child node corresponding to the current character exists. If it does, it moves to the existing child node; otherwise, it returns false to indicate that there is no string in the Trie that starts with the given prefix. After iterating over all characters of the prefix, it returns true to indicate that there is at least one string in the Trie that starts with the given prefix.\\n\\nThe Trie class provides an efficient way of storing and retrieving a set of strings, making it a useful data structure for tasks such as autocompletion and spell checking. The time complexity of each of the methods is O(m), where m is the length of the string being processed, making it an efficient data structure for processing large sets of strings.\\n\\n# Complexity\\n\\nThe time and space complexity of the Trie data structure depend on the number of words and the length of the longest word in the Trie.\\n\\nFor the insert, search, and startsWith methods, the time complexity is O(L), where L is the length of the word being searched or inserted. This is because we need to traverse the Trie from the root to the leaf node corresponding to the last character of the word. Since the length of the word is at most L, the time complexity is O(L).\\n\\nThe space complexity of the Trie depends on the number of words and the length of the longest word. The space complexity of the Trie is O(N * L), where N is the number of words and L is the length of the longest word. This is because we need to store a new node for each character in each word, and the number of nodes in the Trie is at most N * L.\\n\\nIn the implementation provided, the TreeNode class uses a vector of size 26 to store the child nodes. The space complexity of each node is O(26) = O(1), which does not depend on the number of words or the length of the longest word. Therefore, the space complexity of the Trie is dominated by the number of nodes in the Trie, which is O(N * L).\\n# Code\\n```\\nnamespace my{\\n    class TreeNode{\\n        private:\\n            bool end;\\n            vector<TreeNode*> child;\\n        public:\\n            TreeNode(){\\n                this->end = false;\\n                child.resize(26,NULL);\\n            }\\n\\n            void setEnd(){\\n                this->end = true;\\n            }\\n\\n            void setNode(char ch){\\n                child[ch-\\'a\\'] = new TreeNode();\\n            }\\n\\n            bool isEnd(){\\n                return this->end;\\n            }\\n\\n            bool isSet(char ch){\\n                return child[ch-\\'a\\'] != NULL;\\n            }\\n\\n            TreeNode* getNode(char ch){\\n                return child[ch-\\'a\\'];\\n            }\\n    };\\n}\\n\\n\\nclass Trie {\\nprivate:\\n    my::TreeNode* root;\\npublic:\\n    Trie() {\\n        root = new my::TreeNode();\\n    }\\n    \\n    void insert(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                p->setNode(ch);\\n                p = p->getNode(ch);\\n            }\\n        }\\n        p->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return p->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < prefix.size(); i++){\\n            char ch = prefix[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Design",
                    "Trie",
                    "Simulation"
                ],
                "code": "```\\nnamespace my{\\n    class TreeNode{\\n        private:\\n            bool end;\\n            vector<TreeNode*> child;\\n        public:\\n            TreeNode(){\\n                this->end = false;\\n                child.resize(26,NULL);\\n            }\\n\\n            void setEnd(){\\n                this->end = true;\\n            }\\n\\n            void setNode(char ch){\\n                child[ch-\\'a\\'] = new TreeNode();\\n            }\\n\\n            bool isEnd(){\\n                return this->end;\\n            }\\n\\n            bool isSet(char ch){\\n                return child[ch-\\'a\\'] != NULL;\\n            }\\n\\n            TreeNode* getNode(char ch){\\n                return child[ch-\\'a\\'];\\n            }\\n    };\\n}\\n\\n\\nclass Trie {\\nprivate:\\n    my::TreeNode* root;\\npublic:\\n    Trie() {\\n        root = new my::TreeNode();\\n    }\\n    \\n    void insert(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                p->setNode(ch);\\n                p = p->getNode(ch);\\n            }\\n        }\\n        p->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return p->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < prefix.size(); i++){\\n            char ch = prefix[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58953,
                "title": "ac-python-solution-using-defaultdict",
                "content": "    from collections import defaultdict\\n    \\n    \\n    class TrieNode(object):\\n        def __init__(self):\\n            \"\"\"\\n            Initialize your data structure here.\\n            \"\"\"\\n            self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\\n            self.isword = False  # True for the end of the trie.\\n    \\n    \\n    class Trie(object):\\n        def __init__(self):\\n            self.root = TrieNode()\\n    \\n        def insert(self, word):\\n            \"\"\"\\n            Inserts a word into the trie.\\n            :type word: str\\n            :rtype: void\\n            \"\"\"\\n            curr = self.root\\n            for char in word:\\n                curr = curr.nodes[char]\\n            curr.isword = True\\n    \\n        def search(self, word):\\n            \"\"\"\\n            Returns if the word is in the trie.\\n            :type word: str\\n            :rtype: bool\\n            \"\"\"\\n            curr = self.root\\n            for char in word:\\n                if char not in curr.nodes:\\n                    return False\\n                curr = curr.nodes[char]\\n            return curr.isword\\n    \\n        def startsWith(self, prefix):\\n            \"\"\"\\n            Returns if there is any word in the trie\\n            that starts with the given prefix.\\n            :type prefix: str\\n            :rtype: bool\\n            \"\"\"\\n            curr = self.root\\n            for char in prefix:\\n                if char not in curr.nodes:\\n                    return False\\n                curr = curr.nodes[char]\\n            return True",
                "solutionTags": [
                    "Python"
                ],
                "code": "    from collections import defaultdict\\n    \\n    \\n    class TrieNode(object):\\n        def __init__(self):\\n            \"\"\"\\n            Initialize your data structure here.\\n            \"\"\"\\n            self.nodes = defaultdict(TrieNode)  # Easy to insert new node.\\n            self.isword = False  # True for the end of the trie.\\n    \\n    \\n    class Trie(object):\\n        def __init__(self):\\n            self.root = TrieNode()\\n    \\n        def insert(self, word):\\n            \"\"\"\\n            Inserts a word into the trie.\\n            :type word: str\\n            :rtype: void\\n            \"\"\"\\n            curr = self.root\\n            for char in word:\\n                curr = curr.nodes[char]\\n            curr.isword = True\\n    \\n        def search(self, word):\\n            \"\"\"\\n            Returns if the word is in the trie.\\n            :type word: str\\n            :rtype: bool\\n            \"\"\"\\n            curr = self.root\\n            for char in word:\\n                if char not in curr.nodes:\\n                    return False\\n                curr = curr.nodes[char]\\n            return curr.isword\\n    \\n        def startsWith(self, prefix):\\n            \"\"\"\\n            Returns if there is any word in the trie\\n            that starts with the given prefix.\\n            :type prefix: str\\n            :rtype: bool\\n            \"\"\"\\n            curr = self.root\\n            for char in prefix:\\n                if char not in curr.nodes:\\n                    return False\\n                curr = curr.nodes[char]\\n            return True",
                "codeTag": "Java"
            },
            {
                "id": 3305783,
                "title": "easy-solutions-in-java-python-and-c-look-at-once",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Trie is a tree-based data structure which is generally used for efficient searching of strings.\\n\\n- We can start with an empty trie and add the strings as we move along.\\n- We can represent each node of the trie using a dictionary with keys representing characters and values representing the nodes reachable from the current node.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can define the Trie class and its methods as follows:\\n\\n- In the constructor, we can initialize the root node of the trie as an empty dictionary.\\n- The insert() method can be used to insert a new string into the trie. We can iterate over each character of the string and add it to the trie by traversing the dictionary representing the nodes of the trie. We can mark the last node of the string by adding a special character (e.g., \\'$\\') to the dictionary.\\n\\n- The search() method can be used to search for a string in the trie. We can iterate over each character of the string and traverse the dictionary representing the nodes of the trie. If the character is not present in the dictionary, we return False. If we reach the end of the string and the last node is marked by the special character, we return True.\\n- The startsWith() method can be used to search for a prefix in the trie. We can iterate over each character of the prefix and traverse the dictionary representing the nodes of the trie. If the character is not present in the dictionary, we return False. If we reach the end of the prefix, we return True.\\n\\n\\n\\n\\n\\n\\n# Complexity\\n1. Time complexity:\\n- For each insertion, we iterate over the length of the string and traverse the dictionary representing the nodes of the trie. Therefore, the time complexity of the insert() method is O(m), where m is the length of the string.\\n- For each search and startsWith operation, we iterate over the length of the string/prefix and traverse the dictionary representing the nodes of the trie. Therefore, the time complexity of the search() and startsWith() methods is O(m), where m is the length of the string/prefix.\\n- Therefore, the total time complexity of n insert, search, and startsWith operations is \\n\\n\\n2. Space complexity:\\n- For each insertion, we create new nodes in the trie. Therefore, the space complexity of the trie is proportional to the number of unique characters in all the strings that are inserted into the trie.\\n- Therefore, the space complexity of the trie is O(S), where S is the total number of characters in all the strings that are inserted into the trie.\\n\\n\\n\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n\\n\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n# Code\\n``` Java []\\nclass TrieNode {\\n    boolean isWord;\\n    TrieNode[] children;\\n    \\n    public TrieNode() {\\n        isWord = false;\\n        children = new TrieNode[26]; // 26 English lowercase letters\\n    }\\n}\\n\\nclass Trie {\\n    TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            int index = c - \\'a\\';\\n            if (node.children[index] == null) {\\n                node.children[index] = new TrieNode();\\n            }\\n            node = node.children[index];\\n        }\\n        node.isWord = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            int index = c - \\'a\\';\\n            if (node.children[index] == null) {\\n                return false;\\n            }\\n            node = node.children[index];\\n        }\\n        return node.isWord;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root;\\n        for (char c : prefix.toCharArray()) {\\n            int index = c - \\'a\\';\\n            if (node.children[index] == null) {\\n                return false;\\n            }\\n            node = node.children[index];\\n        }\\n        return true;\\n    }\\n}\\n\\n\\n```\\n```Python []\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n\\nclass Trie(object):\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                node.children[char] = TrieNode()\\n            node = node.children[char]\\n        node.is_word = True\\n\\n    def search(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return node.is_word\\n\\n    def startsWith(self, prefix):\\n        node = self.root\\n        for char in prefix:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return True\\n\\n\\n\\n```\\n```C++ []\\nclass TrieNode {\\npublic:\\n    bool isWord;\\n    TrieNode* children[26];\\n    \\n    TrieNode() {\\n        isWord = false;\\n        memset(children, 0, sizeof(children)); // Initialize all children to null\\n    }\\n};\\n\\nclass Trie {\\nprivate:\\n    TrieNode* root;\\n    \\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                node->children[index] = new TrieNode();\\n            }\\n            node = node->children[index];\\n        }\\n        node->isWord = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return node->isWord;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* node = root;\\n        for (char c : prefix) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return true;\\n    }\\n};\\n\\n\\n\\n```\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Hash Table",
                    "Trie"
                ],
                "code": "```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n``` Java []\\nclass TrieNode {\\n    boolean isWord;\\n    TrieNode[] children;\\n    \\n    public TrieNode() {\\n        isWord = false;\\n        children = new TrieNode[26]; // 26 English lowercase letters\\n    }\\n}\\n\\nclass Trie {\\n    TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            int index = c - \\'a\\';\\n            if (node.children[index] == null) {\\n                node.children[index] = new TrieNode();\\n            }\\n            node = node.children[index];\\n        }\\n        node.isWord = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            int index = c - \\'a\\';\\n            if (node.children[index] == null) {\\n                return false;\\n            }\\n            node = node.children[index];\\n        }\\n        return node.isWord;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root;\\n        for (char c : prefix.toCharArray()) {\\n            int index = c - \\'a\\';\\n            if (node.children[index] == null) {\\n                return false;\\n            }\\n            node = node.children[index];\\n        }\\n        return true;\\n    }\\n}\\n\\n\\n```\n```Python []\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n\\nclass Trie(object):\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                node.children[char] = TrieNode()\\n            node = node.children[char]\\n        node.is_word = True\\n\\n    def search(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return node.is_word\\n\\n    def startsWith(self, prefix):\\n        node = self.root\\n        for char in prefix:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return True\\n\\n\\n\\n```\n```C++ []\\nclass TrieNode {\\npublic:\\n    bool isWord;\\n    TrieNode* children[26];\\n    \\n    TrieNode() {\\n        isWord = false;\\n        memset(children, 0, sizeof(children)); // Initialize all children to null\\n    }\\n};\\n\\nclass Trie {\\nprivate:\\n    TrieNode* root;\\n    \\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                node->children[index] = new TrieNode();\\n            }\\n            node = node->children[index];\\n        }\\n        node->isWord = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return node->isWord;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* node = root;\\n        for (char c : prefix) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return true;\\n    }\\n};\\n\\n\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 713041,
                "title": "cleanest-c-solution-vector-easy-to-understand",
                "content": "```\\n\\'\\'\\'\\nclass TrieNode{\\n  public:\\n    vector<TrieNode*> dict;\\n    bool isEnd;\\n    TrieNode(){\\n        isEnd = false;\\n        dict.resize(26, nullptr);\\n    }\\n};\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    \\n    /** Initialize your data structure here. */\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string s) {\\n        TrieNode* node = root;\\n        for(int i=0;i<s.length();i++){\\n            if(node->dict[s[i]-\\'a\\']==nullptr){\\n                node->dict[s[i]-\\'a\\'] = new TrieNode();\\n            }\\n            node = node->dict[s[i]-\\'a\\'];\\n        }\\n        node->isEnd = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string s) {\\n        TrieNode* node = root;\\n        for(int i=0;i<s.length();i++){\\n            if(node->dict[s[i]-\\'a\\']==nullptr)\\n                return false;\\n            node = node->dict[s[i]-\\'a\\'];\\n        }\\n        return node->isEnd;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string s) {\\n        TrieNode* node = root;\\n        for(int i=0;i<s.length();i++){\\n            if(node->dict[s[i]-\\'a\\']==nullptr)\\n                return false;\\n            node = node->dict[s[i]-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n\\'\\'\\'\\n```\\nFor any *Query* you can ask me in the **comment** section.\\nIf you like my solution, don\\'t forget to **upvote**. \\nHappy coding. :)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Trie",
                    "Iterator"
                ],
                "code": "```\\n\\'\\'\\'\\nclass TrieNode{\\n  public:\\n    vector<TrieNode*> dict;\\n    bool isEnd;\\n    TrieNode(){\\n        isEnd = false;\\n        dict.resize(26, nullptr);\\n    }\\n};\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    \\n    /** Initialize your data structure here. */\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string s) {\\n        TrieNode* node = root;\\n        for(int i=0;i<s.length();i++){\\n            if(node->dict[s[i]-\\'a\\']==nullptr){\\n                node->dict[s[i]-\\'a\\'] = new TrieNode();\\n            }\\n            node = node->dict[s[i]-\\'a\\'];\\n        }\\n        node->isEnd = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string s) {\\n        TrieNode* node = root;\\n        for(int i=0;i<s.length();i++){\\n            if(node->dict[s[i]-\\'a\\']==nullptr)\\n                return false;\\n            node = node->dict[s[i]-\\'a\\'];\\n        }\\n        return node->isEnd;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string s) {\\n        TrieNode* node = root;\\n        for(int i=0;i<s.length();i++){\\n            if(node->dict[s[i]-\\'a\\']==nullptr)\\n                return false;\\n            node = node->dict[s[i]-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n\\'\\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 631328,
                "title": "easy-to-understand-c-solution-with-images",
                "content": "The following code creates a node of the Trie.\\n```\\nclass TrieNode{\\n    public:\\n    char data;\\n    unordered_map<char, TrieNode*> children;\\n    bool isTerminal;\\n    \\n        TrieNode(char data){\\n            this->data = data;\\n            isTerminal = false;\\n        }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/nikhil_1407/image_1589441550.png)\\n\\n\\n**We First initialize our trie with \\'\\\\0\\'\\nNow the below function is used to insert a word in out Trie.**\\n```\\nvoid insertWord(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            root->isTerminal = true;\\n            return;\\n        }\\n        TrieNode* child;\\n        if(root->children.find(word[0]) != root->children.end())\\n            child = root->children[word[0]];\\n        else{\\n            root->children[word[0]] = new TrieNode(word[0]);\\n            child = root->children[word[0]];\\n        }\\n        insertWord(child, word.substr(1));\\n    }\\n```\\n![image](https://assets.leetcode.com/users/nikhil_1407/image_1589442865.png)\\n\\n**Now for our Searching code **\\n```\\nint doSearch(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            if(root->isTerminal)\\n                return 1;\\n            return 0;\\n        }\\n        if(root->children.find(word[0])!=root->children.end())\\n            return doSearch(root->children[word[0]], word.substr(1));\\n        return -1;\\n    }\\n```\\n![image](https://assets.leetcode.com/users/nikhil_1407/image_1589443675.png)\\n\\n**This is the complete Code in C++**\\n```\\nclass Trie {\\n    TrieNode* root;\\n    \\n    void insertWord(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            root->isTerminal = true;\\n            return;\\n        }\\n        TrieNode* child;\\n        if(root->children.find(word[0]) != root->children.end())\\n            child = root->children[word[0]];\\n        else{\\n            root->children[word[0]] = new TrieNode(word[0]);\\n            child = root->children[word[0]];\\n        }\\n        insertWord(child, word.substr(1));\\n    }\\n    \\n    int doSearch(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            if(root->isTerminal)\\n                return 1;\\n            return 0;\\n        }\\n        if(root->children.find(word[0])!=root->children.end())\\n            return doSearch(root->children[word[0]], word.substr(1));\\n        return -1;\\n    }\\npublic:\\n    /** Initialize with \\'\\\\0\\'  character => initially the trie is empty*/\\n    Trie() {\\n        root = new TrieNode(\\'\\\\0\\');\\n    }\\n    \\n    /** This recursively calls our inbuilt function */\\n    void insert(string word) {\\n        insertWord(root, word);\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        if(doSearch(root, word) == 1)\\n            return true;\\n        return false;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        int res = doSearch(root, prefix);\\n        if(res>=0)\\n            return true;\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```\\n```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode{\\n    public:\\n    char data;\\n    unordered_map<char, TrieNode*> children;\\n    bool isTerminal;\\n    \\n        TrieNode(char data){\\n            this->data = data;\\n            isTerminal = false;\\n        }\\n};\\n```\n```\\nvoid insertWord(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            root->isTerminal = true;\\n            return;\\n        }\\n        TrieNode* child;\\n        if(root->children.find(word[0]) != root->children.end())\\n            child = root->children[word[0]];\\n        else{\\n            root->children[word[0]] = new TrieNode(word[0]);\\n            child = root->children[word[0]];\\n        }\\n        insertWord(child, word.substr(1));\\n    }\\n```\n```\\nint doSearch(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            if(root->isTerminal)\\n                return 1;\\n            return 0;\\n        }\\n        if(root->children.find(word[0])!=root->children.end())\\n            return doSearch(root->children[word[0]], word.substr(1));\\n        return -1;\\n    }\\n```\n```\\nclass Trie {\\n    TrieNode* root;\\n    \\n    void insertWord(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            root->isTerminal = true;\\n            return;\\n        }\\n        TrieNode* child;\\n        if(root->children.find(word[0]) != root->children.end())\\n            child = root->children[word[0]];\\n        else{\\n            root->children[word[0]] = new TrieNode(word[0]);\\n            child = root->children[word[0]];\\n        }\\n        insertWord(child, word.substr(1));\\n    }\\n    \\n    int doSearch(TrieNode* root, string word){\\n        if(word.length() == 0){\\n            if(root->isTerminal)\\n                return 1;\\n            return 0;\\n        }\\n        if(root->children.find(word[0])!=root->children.end())\\n            return doSearch(root->children[word[0]], word.substr(1));\\n        return -1;\\n    }\\npublic:\\n    /** Initialize with \\'\\\\0\\'  character => initially the trie is empty*/\\n    Trie() {\\n        root = new TrieNode(\\'\\\\0\\');\\n    }\\n    \\n    /** This recursively calls our inbuilt function */\\n    void insert(string word) {\\n        insertWord(root, word);\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        if(doSearch(root, word) == 1)\\n            return true;\\n        return false;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        int res = doSearch(root, prefix);\\n        if(res>=0)\\n            return true;\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 943448,
                "title": "python-simple-trienode-and-trie-implementation",
                "content": "```\\nclass TrieNode:\\n    def __init__(self):\\n        # Stores children nodes and whether node is the end of a word\\n        self.children = {}\\n        self.isEnd = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        cur = self.root\\n        # Insert character by character into trie\\n        for c in word:\\n            # if character path does not exist, create it\\n            if c not in cur.children:\\n                cur.children[c] = TrieNode()\\n            cur = cur.children[c]\\n        cur.isEnd = True\\n        \\n\\n    def search(self, word: str) -> bool:\\n        cur = self.root\\n        # Search character by character in trie\\n        for c in word:\\n            # if character path does not exist, return False\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return cur.isEnd\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        # Same as search, except there is no isEnd condition at final return\\n        cur = self.root\\n        for c in prefix:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return True\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        # Stores children nodes and whether node is the end of a word\\n        self.children = {}\\n        self.isEnd = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        cur = self.root\\n        # Insert character by character into trie\\n        for c in word:\\n            # if character path does not exist, create it\\n            if c not in cur.children:\\n                cur.children[c] = TrieNode()\\n            cur = cur.children[c]\\n        cur.isEnd = True\\n        \\n\\n    def search(self, word: str) -> bool:\\n        cur = self.root\\n        # Search character by character in trie\\n        for c in word:\\n            # if character path does not exist, return False\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return cur.isEnd\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        # Same as search, except there is no isEnd condition at final return\\n        cur = self.root\\n        for c in prefix:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58966,
                "title": "java-my-solution-with-brief-explanations-15ms-beats-95",
                "content": "For the `TrieNode`, each node has **two** fields: \\n \\n - a `boolean` `isEnd` that stores whether the current character is the end of a word\\n - a `TrieNode[]` array of size 26 that stores its children\\n\\n`search` and `startsWith` are combined into a helper method `search(String str, int type)` to save coding.\\n\\n\\n    class TrieNode {\\n\\tboolean isEnd;\\n\\tTrieNode[] children;\\n\\t\\n    public TrieNode() {\\n        isEnd = true;\\n        children = new TrieNode[26];\\n    }\\n    }\\n\\n    public class Trie {\\n    private TrieNode root;\\n\\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n\\n    public void insert(String word) {\\n    \\tTrieNode current = root;\\n    \\tfor(int i=0, L=word.length(); i<L; i++) {\\n        \\tint id = word.charAt(i) - 'a';\\n        \\tif(current.children[id]==null) {\\n        \\t\\tcurrent.children[id] = new TrieNode();\\n        \\t\\tcurrent.children[id].isEnd = false;\\n        \\t}\\n        \\tcurrent = current.children[id];\\n        }\\n        current.isEnd = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        return search(word, 1);\\n    }\\n    public boolean startsWith(String prefix) {\\n        return search(prefix, 2);\\n    }\\n    private boolean search(String str, int type) {\\n        TrieNode current = root;\\n        int i=-1, L=str.length();\\n        while(++i<L) {\\n\\t        int id = str.charAt(i) - 'a';\\n\\t        if((current=current.children[id]) == null) return false;\\n        }\\n        return type==1 ? current.isEnd : true;\\n    }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "For the `TrieNode`, each node has **two** fields: \\n \\n - a `boolean` `isEnd` that stores whether the current character is the end of a word\\n - a `TrieNode[]` array of size 26 that stores its children\\n\\n`search` and `startsWith` are combined into a helper method `search(String str, int type)` to save coding.\\n\\n\\n    class TrieNode {\\n\\tboolean isEnd;\\n\\tTrieNode[] children;\\n\\t\\n    public TrieNode() {\\n        isEnd = true;\\n        children = new TrieNode[26];\\n    }\\n    }\\n\\n    public class Trie {\\n    private TrieNode root;\\n\\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n\\n    public void insert(String word) {\\n    \\tTrieNode current = root;\\n    \\tfor(int i=0, L=word.length(); i<L; i++) {\\n        \\tint id = word.charAt(i) - 'a';\\n        \\tif(current.children[id]==null) {\\n        \\t\\tcurrent.children[id] = new TrieNode();\\n        \\t\\tcurrent.children[id].isEnd = false;\\n        \\t}\\n        \\tcurrent = current.children[id];\\n        }\\n        current.isEnd = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        return search(word, 1);\\n    }\\n    public boolean startsWith(String prefix) {\\n        return search(prefix, 2);\\n    }\\n    private boolean search(String str, int type) {\\n        TrieNode current = root;\\n        int i=-1, L=str.length();\\n        while(++i<L) {\\n\\t        int id = str.charAt(i) - 'a';\\n\\t        if((current=current.children[id]) == null) return false;\\n        }\\n        return type==1 ? current.isEnd : true;\\n    }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 58852,
                "title": "c-my-solution-easy-to-understand",
                "content": "        /**\\n         ** author: cxq\\n         ** weibo: http://weibo.com/chenxq1992\\n         **/ \\n    \\n        class TrieNode {\\n        public:\\n            char content;   // the character included\\n            bool isend;     // if the node is the end of a word\\n            int shared;     // the number of the node shared ,convenient to implement delete(string key), not necessary in this problem\\n            vector<TrieNode*> children; // the children of the node\\n            // Initialize your data structure here.\\n            TrieNode():content(' '), isend(false), shared(0) {}\\n            TrieNode(char ch):content(ch), isend(false), shared(0) {}\\n            TrieNode* subNode(char ch) {\\n                if (!children.empty()) {\\n                    for (auto child : children) {\\n                        if (child->content == ch)\\n                            return child;\\n                    }\\n                }\\n                return nullptr;\\n            }\\n            ~TrieNode() {\\n                for (auto child : children)\\n                    delete child;\\n            }\\n        };\\n        \\n        class Trie {\\n        public:\\n            Trie() {\\n                root = new TrieNode();\\n            }\\n        \\n            // Inserts a word into the trie.\\n            void insert(string s) {\\n                if (search(s)) return;\\n                TrieNode* curr = root;\\n                for (auto ch : s) {\\n                    TrieNode* child = curr->subNode(ch);\\n                    if (child != nullptr) {\\n                        curr = child;\\n                    } else {\\n                        TrieNode *newNode = new TrieNode(ch);\\n                        curr->children.push_back(newNode);\\n                        curr = newNode;\\n                    }\\n                    ++curr->shared;\\n                }\\n                curr->isend = true;\\n            }\\n        \\n            // Returns if the word is in the trie.\\n            bool search(string key) {\\n                TrieNode* curr = root;\\n                for (auto ch : key) {\\n                    curr = curr->subNode(ch);\\n                    if (curr == nullptr)\\n                        return false;\\n                }\\n                return curr->isend == true;\\n            }\\n        \\n            // Returns if there is any word in the trie\\n            // that starts with the given prefix.\\n            bool startsWith(string prefix) {\\n                TrieNode* curr = root;\\n                for (auto ch : prefix) {\\n                    curr = curr->subNode(ch);\\n                    if (curr == nullptr)\\n                        return false;\\n                }\\n                return true;\\n            }\\n            ~Trie() {\\n                delete root;\\n            }\\n        private:\\n            TrieNode* root;\\n        };",
                "solutionTags": [],
                "code": "        /**\\n         ** author: cxq\\n         ** weibo: http://weibo.com/chenxq1992\\n         **/ \\n    \\n        class TrieNode {\\n        public:\\n            char content;   // the character included\\n            bool isend;     // if the node is the end of a word\\n            int shared;     // the number of the node shared ,convenient to implement delete(string key), not necessary in this problem\\n            vector<TrieNode*> children; // the children of the node\\n            // Initialize your data structure here.\\n            TrieNode():content(' '), isend(false), shared(0) {}\\n            TrieNode(char ch):content(ch), isend(false), shared(0) {}\\n            TrieNode* subNode(char ch) {\\n                if (!children.empty()) {\\n                    for (auto child : children) {\\n                        if (child->content == ch)\\n                            return child;\\n                    }\\n                }\\n                return nullptr;\\n            }\\n            ~TrieNode() {\\n                for (auto child : children)\\n                    delete child;\\n            }\\n        };\\n        \\n        class Trie {\\n        public:\\n            Trie() {\\n                root = new TrieNode();\\n            }\\n        \\n            // Inserts a word into the trie.\\n            void insert(string s) {\\n                if (search(s)) return;\\n                TrieNode* curr = root;\\n                for (auto ch : s) {\\n                    TrieNode* child = curr->subNode(ch);\\n                    if (child != nullptr) {\\n                        curr = child;\\n                    } else {\\n                        TrieNode *newNode = new TrieNode(ch);\\n                        curr->children.push_back(newNode);\\n                        curr = newNode;\\n                    }\\n                    ++curr->shared;\\n                }\\n                curr->isend = true;\\n            }\\n        \\n            // Returns if the word is in the trie.\\n            bool search(string key) {\\n                TrieNode* curr = root;\\n                for (auto ch : key) {\\n                    curr = curr->subNode(ch);\\n                    if (curr == nullptr)\\n                        return false;\\n                }\\n                return curr->isend == true;\\n            }\\n        \\n            // Returns if there is any word in the trie\\n            // that starts with the given prefix.\\n            bool startsWith(string prefix) {\\n                TrieNode* curr = root;\\n                for (auto ch : prefix) {\\n                    curr = curr->subNode(ch);\\n                    if (curr == nullptr)\\n                        return false;\\n                }\\n                return true;\\n            }\\n            ~Trie() {\\n                delete root;\\n            }\\n        private:\\n            TrieNode* root;\\n        };",
                "codeTag": "Java"
            },
            {
                "id": 1509492,
                "title": "java-fast-easy",
                "content": "```\\n/*\\n\\tEvery Node has a Array of 26 size to mark which chars are its children , also it has\\n\\ta boolean variable isEnd to mark end of any word.\\n\\n\\tinsert(): Point to root using curr pointer, now start a loop and extract each char from the\\n\\tword to be inserted in TRIE,  for every char check if it is present as child of\\n\\tcurr node(for first char curr node will be root node).if no , then insert the char as the \\n\\tchild of curr and move the cur pointer to that child, so that next time we can insert\\n\\tthe char as its child. Do this till the end char of word and outside the for loop\\n\\tmark the isEnd property of curr node (i.e the last char of our word) as true;\\n\\n\\tsearch() &  startsWith() : keep checking char by char and if you don\\'t found your char\\n\\tat any point return false, else at the end check for isEnd variable (in search() fun only)\\n\\tand return true(in startsWith () only).\\n\\n\\tBecause search function means that word should be completely present as a whole\\n\\tword and not as a part(substring ) of any other word thats why we are checking the\\n\\tisEnd flag , while startsWith() only want us to check that prefix is present in the trie or \\n\\tnot, it doesn\\'t bother wheter we have it as a complete word or as a substring of any \\n\\tother word.\\n*/\\nclass Trie {\\n    \\n    class Node {\\n        Node [] childs;\\n        boolean isEnd;\\n        \\n        Node(){\\n            childs = new Node[26];\\n            isEnd = false;\\n        }\\n    }\\n    \\n    final private Node root;\\n    \\n    public Trie() {\\n        root = new Node();\\n    }\\n    \\n \\n    public void insert(String word) {\\n        Node curr = root;\\n        \\n        for(int i = 0;i<word.length();i++){\\n            char ch = word.charAt(i);\\n            \\n            if(curr.childs[ch - \\'a\\'] == null){\\n                curr.childs[ch - \\'a\\'] = new Node();\\n            }\\n            curr = curr.childs[ch - \\'a\\'];\\n        }\\n        \\n        curr.isEnd = true;\\n    }\\n    \\n \\n    public boolean search(String word) {\\n        Node curr = root;\\n        \\n        for(int i = 0;i<word.length();i++){\\n            char ch = word.charAt(i);\\n            \\n            if(curr.childs[ch - \\'a\\'] == null) return false;\\n            curr = curr.childs[ch - \\'a\\'];\\n        }\\n        return curr.isEnd;\\n    }\\n    \\n  \\n    public boolean startsWith(String prefix) {\\n          Node curr = root;\\n        \\n        for(int i = 0;i<prefix.length();i++){\\n            char ch = prefix.charAt(i);\\n            \\n            if(curr.childs[ch - \\'a\\'] == null) return false;\\n            curr = curr.childs[ch - \\'a\\'];\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```\\n\\nUpvoting helps a lot \\uD83D\\uDC51 Thank you \\uD83D\\uDE0B Happy Coding \\uD83D\\uDE00",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/*\\n\\tEvery Node has a Array of 26 size to mark which chars are its children , also it has\\n\\ta boolean variable isEnd to mark end of any word.\\n\\n\\tinsert(): Point to root using curr pointer, now start a loop and extract each char from the\\n\\tword to be inserted in TRIE,  for every char check if it is present as child of\\n\\tcurr node(for first char curr node will be root node).if no , then insert the char as the \\n\\tchild of curr and move the cur pointer to that child, so that next time we can insert\\n\\tthe char as its child. Do this till the end char of word and outside the for loop\\n\\tmark the isEnd property of curr node (i.e the last char of our word) as true;\\n\\n\\tsearch() &  startsWith() : keep checking char by char and if you don\\'t found your char\\n\\tat any point return false, else at the end check for isEnd variable (in search() fun only)\\n\\tand return true(in startsWith () only).\\n\\n\\tBecause search function means that word should be completely present as a whole\\n\\tword and not as a part(substring ) of any other word thats why we are checking the\\n\\tisEnd flag , while startsWith() only want us to check that prefix is present in the trie or \\n\\tnot, it doesn\\'t bother wheter we have it as a complete word or as a substring of any \\n\\tother word.\\n*/\\nclass Trie {\\n    \\n    class Node {\\n        Node [] childs;\\n        boolean isEnd;\\n        \\n        Node(){\\n            childs = new Node[26];\\n            isEnd = false;\\n        }\\n    }\\n    \\n    final private Node root;\\n    \\n    public Trie() {\\n        root = new Node();\\n    }\\n    \\n \\n    public void insert(String word) {\\n        Node curr = root;\\n        \\n        for(int i = 0;i<word.length();i++){\\n            char ch = word.charAt(i);\\n            \\n            if(curr.childs[ch - \\'a\\'] == null){\\n                curr.childs[ch - \\'a\\'] = new Node();\\n            }\\n            curr = curr.childs[ch - \\'a\\'];\\n        }\\n        \\n        curr.isEnd = true;\\n    }\\n    \\n \\n    public boolean search(String word) {\\n        Node curr = root;\\n        \\n        for(int i = 0;i<word.length();i++){\\n            char ch = word.charAt(i);\\n            \\n            if(curr.childs[ch - \\'a\\'] == null) return false;\\n            curr = curr.childs[ch - \\'a\\'];\\n        }\\n        return curr.isEnd;\\n    }\\n    \\n  \\n    public boolean startsWith(String prefix) {\\n          Node curr = root;\\n        \\n        for(int i = 0;i<prefix.length();i++){\\n            char ch = prefix.charAt(i);\\n            \\n            if(curr.childs[ch - \\'a\\'] == null) return false;\\n            curr = curr.childs[ch - \\'a\\'];\\n        }\\n        \\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 422168,
                "title": "javascript-solution",
                "content": "#### The Idea\\n1. Store the entire trie in an object\\n2. Each node is an object that uses character as keys to connect to other characters\\n3. Set `isEnd` to true for the last character node in a word\\n``` javascript\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    this.root = {};\\n};\\n\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let node = this.root;\\n    word.split(\\'\\').forEach((char)=>{\\n        if (!node[char]) node[char] = {};\\n        node = node[char];\\n    })\\n    node.isEnd = true;\\n};\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let node = this.searchNode(word);\\n    return node!=null?node.isEnd==true:false;\\n};\\n\\n/** javaScript\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let node = this.searchNode(prefix);\\n    return node != null;\\n};\\n\\nTrie.prototype.searchNode = function(word) {\\n    let node = this.root;\\n    for (let char of word.split(\\'\\')) {\\n        if (node[char]) {\\n            node = node[char]\\n        } else {\\n            return null;\\n        }\\n    }\\n    return node;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javascript\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    this.root = {};\\n};\\n\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let node = this.root;\\n    word.split(\\'\\').forEach((char)=>{\\n        if (!node[char]) node[char] = {};\\n        node = node[char];\\n    })\\n    node.isEnd = true;\\n};\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let node = this.searchNode(word);\\n    return node!=null?node.isEnd==true:false;\\n};\\n\\n/** javaScript\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let node = this.searchNode(prefix);\\n    return node != null;\\n};\\n\\nTrie.prototype.searchNode = function(word) {\\n    let node = this.root;\\n    for (let char of word.split(\\'\\')) {\\n        if (node[char]) {\\n            node = node[char]\\n        } else {\\n            return null;\\n        }\\n    }\\n    return node;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 58841,
                "title": "ac-solution-in-java",
                "content": "    class TrieNode {\\n        private final int R = 26;\\n        private final TrieNode[] children;\\n        private String item;\\n        \\n        public TrieNode() {\\n            children = new TrieNode[R];\\n            item = \"\";\\n        }\\n        \\n        public String getItem() {\\n            return item;\\n        }\\n        \\n        public void setItem(String item) {\\n            this.item = item;\\n        }\\n        \\n        public TrieNode[] getChildren() {\\n            return children;\\n        }\\n        \\n        public TrieNode getChild(int i) {\\n            if (i >= 26 || i < 0) throw new IllegalArgumentException();\\n            return children[i];\\n        }\\n        \\n        public void setChild(int i, TrieNode node) {\\n            children[i] = node;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            TrieNode curr = root;\\n            for (char c : word.toCharArray()) {\\n                if (curr.getChild(c - 'a') == null) curr.setChild(c - 'a', new TrieNode());\\n                curr = curr.getChild(c - 'a');\\n            }\\n            curr.setItem(word);\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            TrieNode curr = root;\\n            for (char c : word.toCharArray()) {\\n                if (curr.getChild(c - 'a') == null) return false;\\n                curr = curr.getChild(c - 'a');\\n            }\\n            return curr.getItem().equals(word);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            TrieNode curr = root;\\n            for (char c : prefix.toCharArray()) {\\n                if (curr.getChild(c - 'a') == null) return false;\\n                curr = curr.getChild(c - 'a');\\n            }\\n            return true;\\n        }\\n    }\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie = new Trie();\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");\\n\\nThis is standard trie data structure implementation. It is a bit longer since I used getter and setter for TrieNode class.",
                "solutionTags": [
                    "Java"
                ],
                "code": "    class TrieNode {\\n        private final int R = 26;\\n        private final TrieNode[] children;\\n        private String item;\\n        \\n        public TrieNode() {\\n            children = new TrieNode[R];\\n            item = \"\";\\n        }\\n        \\n        public String getItem() {\\n            return item;\\n        }\\n        \\n        public void setItem(String item) {\\n            this.item = item;\\n        }\\n        \\n        public TrieNode[] getChildren() {\\n            return children;\\n        }\\n        \\n        public TrieNode getChild(int i) {\\n            if (i >= 26 || i < 0) throw new IllegalArgumentException();\\n            return children[i];\\n        }\\n        \\n        public void setChild(int i, TrieNode node) {\\n            children[i] = node;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            TrieNode curr = root;\\n            for (char c : word.toCharArray()) {\\n                if (curr.getChild(c - 'a') == null) curr.setChild(c - 'a', new TrieNode());\\n                curr = curr.getChild(c - 'a');\\n            }\\n            curr.setItem(word);\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            TrieNode curr = root;\\n            for (char c : word.toCharArray()) {\\n                if (curr.getChild(c - 'a') == null) return false;\\n                curr = curr.getChild(c - 'a');\\n            }\\n            return curr.getItem().equals(word);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            TrieNode curr = root;\\n            for (char c : prefix.toCharArray()) {\\n                if (curr.getChild(c - 'a') == null) return false;\\n                curr = curr.getChild(c - 'a');\\n            }\\n            return true;\\n        }\\n    }\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie = new Trie();\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");\\n\\nThis is standard trie data structure implementation. It is a bit longer since I used getter and setter for TrieNode class.",
                "codeTag": "Java"
            },
            {
                "id": 58927,
                "title": "compact-python-solution",
                "content": "    class TrieNode(object):\\n        def __init__(self):\\n            self.is_word = False\\n            self.children = collections.defaultdict(TrieNode)\\n    \\n    class Trie(object):\\n        def __init__(self):\\n            self.root = TrieNode()\\n    \\n        def insert(self, word):\\n            node = self.root\\n            for c in word:\\n                node = node.children[c]\\n            node.is_word = True\\n    \\n        def search(self, word, is_word=True):\\n            node = self.root\\n            for c in word:\\n                if c not in node.children:\\n                    return False\\n                node = node.children[c]\\n            return node.is_word if is_word else True\\n    \\n        def startsWith(self, prefix):\\n            return self.search(prefix, False)",
                "solutionTags": [],
                "code": "    class TrieNode(object):\\n        def __init__(self):\\n            self.is_word = False\\n            self.children = collections.defaultdict(TrieNode)\\n    \\n    class Trie(object):\\n        def __init__(self):\\n            self.root = TrieNode()\\n    \\n        def insert(self, word):\\n            node = self.root\\n            for c in word:\\n                node = node.children[c]\\n            node.is_word = True\\n    \\n        def search(self, word, is_word=True):\\n            node = self.root\\n            for c in word:\\n                if c not in node.children:\\n                    return False\\n                node = node.children[c]\\n            return node.is_word if is_word else True\\n    \\n        def startsWith(self, prefix):\\n            return self.search(prefix, False)",
                "codeTag": "Java"
            },
            {
                "id": 559215,
                "title": "go",
                "content": "```\\ntype Trie struct {\\n    children [26]*Trie\\n    isEnd bool\\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() Trie {\\n    return Trie{}\\n}\\n\\n\\n/** Inserts a word into the trie. */\\nfunc (this *Trie) Insert(word string)  {\\n    curr := this\\n    for _, ch := range word {\\n        idx := ch - \\'a\\'\\n        if curr.children[idx] == nil {\\n            curr.children[idx] = &Trie{}\\n        }\\n        curr = curr.children[idx]\\n    }\\n    curr.isEnd = true\\n}\\n\\n\\n/** Returns if the word is in the trie. */\\nfunc (this *Trie) Search(word string) bool {\\n    curr := this\\n    for _, ch := range word {\\n        idx := ch - \\'a\\'\\n        if curr.children[idx] == nil {\\n            return false\\n        }\\n        curr = curr.children[idx]\\n    }\\n    return curr.isEnd\\n}\\n\\n\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    curr := this\\n    for _, ch := range prefix {\\n        idx := ch - \\'a\\'\\n        if curr.children[idx] == nil {\\n            return false\\n        }\\n        curr = curr.children[idx]\\n    }\\n    return true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Trie struct {\\n    children [26]*Trie\\n    isEnd bool\\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() Trie {\\n    return Trie{}\\n}\\n\\n\\n/** Inserts a word into the trie. */\\nfunc (this *Trie) Insert(word string)  {\\n    curr := this\\n    for _, ch := range word {\\n        idx := ch - \\'a\\'\\n        if curr.children[idx] == nil {\\n            curr.children[idx] = &Trie{}\\n        }\\n        curr = curr.children[idx]\\n    }\\n    curr.isEnd = true\\n}\\n\\n\\n/** Returns if the word is in the trie. */\\nfunc (this *Trie) Search(word string) bool {\\n    curr := this\\n    for _, ch := range word {\\n        idx := ch - \\'a\\'\\n        if curr.children[idx] == nil {\\n            return false\\n        }\\n        curr = curr.children[idx]\\n    }\\n    return curr.isEnd\\n}\\n\\n\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    curr := this\\n    for _, ch := range prefix {\\n        idx := ch - \\'a\\'\\n        if curr.children[idx] == nil {\\n            return false\\n        }\\n        curr = curr.children[idx]\\n    }\\n    return true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 774379,
                "title": "python-solution-with-explanation",
                "content": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.childNodes = {}\\n        self.isWordEnd = False\\n\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        we will start with root node and check for the first character\\n        if there is already a node present for the character we will fetch that node, else we will create a new node\\n        then we will iterate to next character\\n        \"\"\"\\n        currNode = self.root\\n        for ch in word:\\n            node = currNode.childNodes.get(ch , TrieNode())\\n            currNode.childNodes[ch] = node\\n            currNode = node\\n\\n        # after all the characters are traversed, mark the last node as end of word\\n        currNode.isWordEnd = True\\n\\n\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        we will start from root node and check for all the characters\\n        if we could not find a node for a character we will return False there\\n        once we iterate through all character we will check if that is a word end\\n        \"\"\"\\n\\n        currNode = self.root\\n        for ch in word:\\n            node = currNode.childNodes.get(ch)\\n            if  not node:\\n                return False\\n            currNode = node\\n\\n        return currNode.isWordEnd\\n\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        starts with is similar to search except here we don\\'t have to check whether the last character is end of word\\n        \"\"\"\\n        currNode = self.root\\n        for ch in prefix:\\n            node = currNode.childNodes.get(ch)\\n            if not node:\\n                return False\\n            currNode = node\\n\\n        return True",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.childNodes = {}\\n        self.isWordEnd = False\\n\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        we will start with root node and check for the first character\\n        if there is already a node present for the character we will fetch that node, else we will create a new node\\n        then we will iterate to next character\\n        \"\"\"\\n        currNode = self.root\\n        for ch in word:\\n            node = currNode.childNodes.get(ch , TrieNode())\\n            currNode.childNodes[ch] = node\\n            currNode = node\\n\\n        # after all the characters are traversed, mark the last node as end of word\\n        currNode.isWordEnd = True\\n\\n\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        we will start from root node and check for all the characters\\n        if we could not find a node for a character we will return False there\\n        once we iterate through all character we will check if that is a word end\\n        \"\"\"\\n\\n        currNode = self.root\\n        for ch in word:\\n            node = currNode.childNodes.get(ch)\\n            if  not node:\\n                return False\\n            currNode = node\\n\\n        return currNode.isWordEnd\\n\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        starts with is similar to search except here we don\\'t have to check whether the last character is end of word\\n        \"\"\"\\n        currNode = self.root\\n        for ch in prefix:\\n            node = currNode.childNodes.get(ch)\\n            if not node:\\n                return False\\n            currNode = node\\n\\n        return True",
                "codeTag": "Java"
            },
            {
                "id": 320224,
                "title": "simple-python-solution-similar-problems-listed",
                "content": "Please see and vote for my solutions for\\n[208. Implement Trie (Prefix Tree)](https://leetcode.com/problems/implement-trie-prefix-tree/discuss/320224/Simple-Python-solution)\\n[1233. Remove Sub-Folders from the Filesystem](https://leetcode.com/problems/remove-sub-folders-from-the-filesystem/discuss/409075/standard-python-prefix-tree-solution)\\n[1032. Stream of Characters](https://leetcode.com/problems/stream-of-characters/discuss/320837/Standard-Python-Trie-Solution)\\n[211. Add and Search Word - Data structure design](https://leetcode.com/problems/add-and-search-word-data-structure-design/discuss/319361/Simple-Python-solution)\\n[676. Implement Magic Dictionary](https://leetcode.com/problems/implement-magic-dictionary/discuss/320197/Simple-Python-solution)\\n[677. Map Sum Pairs](https://leetcode.com/problems/map-sum-pairs/discuss/320237/Simple-Python-solution)\\n[745. Prefix and Suffix Search](https://leetcode.com/problems/prefix-and-suffix-search/discuss/320712/Different-Python-solutions-with-thinking-process)\\n[425. Word Squares](https://leetcode.com/problems/word-squares/discuss/320916/Easily-implemented-Python-solution%3A-Backtrack-%2B-Trie)\\n[472. Concatenated Words](https://leetcode.com/problems/concatenated-words/discuss/322444/Python-solutions%3A-top-down-DP-Trie)\\n[212. Word Search II](https://leetcode.com/problems/word-search-ii/discuss/319071/Standard-Python-solution-with-Trie-%2B-Backtrack)\\n[336. Palindrome Pairs](https://leetcode.com/problems/palindrome-pairs/discuss/316960/Different-Python-solutions%3A-brute-force-dictionary-Trie)\\n\\n```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.isEnd = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n    def insert(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                node.children[char] = TrieNode()\\n            node = node.children[char]\\n        node.isEnd = True  \\n\\n    def search(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return node.isEnd\\n\\n    def startsWith(self, prefix):\\n        node = self.root\\n        for char in prefix:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return True\\n    \\n    def delete(self, word):\\n        def recursive(node, word, i):\\n            if i == len(word):\\n                if not node.isEnd:\\n                    return False # word is not in trie\\n                node.isEnd = False # delete word via changing isEnd be False\\n                return len(node.children) == 0 # return whether it has no children\\n            if word[i] not in node.children: # word is not in trie\\n                return False\\n            need_delete = recursive(node.children[word[i]], word, i + 1)\\n            if need_delete:\\n                node.children.pop(word[i])\\n                return len(node.children) == 0\\n            return False # current node still has other chars, don\\'t need to delete it\\n        \\n        recursive(self.root, word, 0)\\n```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.isEnd = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n    def insert(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                node.children[char] = TrieNode()\\n            node = node.children[char]\\n        node.isEnd = True  \\n\\n    def search(self, word):\\n        node = self.root\\n        for char in word:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return node.isEnd\\n\\n    def startsWith(self, prefix):\\n        node = self.root\\n        for char in prefix:\\n            if char not in node.children:\\n                return False\\n            node = node.children[char]\\n        return True\\n    \\n    def delete(self, word):\\n        def recursive(node, word, i):\\n            if i == len(word):\\n                if not node.isEnd:\\n                    return False # word is not in trie\\n                node.isEnd = False # delete word via changing isEnd be False\\n                return len(node.children) == 0 # return whether it has no children\\n            if word[i] not in node.children: # word is not in trie\\n                return False\\n            need_delete = recursive(node.children[word[i]], word, i + 1)\\n            if need_delete:\\n                node.children.pop(word[i])\\n                return len(node.children) == 0\\n            return False # current node still has other chars, don\\'t need to delete it\\n        \\n        recursive(self.root, word, 0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58965,
                "title": "concise-javascript-solution",
                "content": "```js\\nfunction Trie() {\\n\\tconst root = {};\\n\\treturn { insert, search, startsWith };\\n\\n\\tfunction insert(word) {\\n\\t\\tlet curr = root;\\n\\t\\tword.split(\\'\\').forEach(ch => curr = curr[ch] = curr[ch] || {});\\n\\t\\tcurr.isWord = true;\\n\\t}\\n\\n\\tfunction traverse(word) {\\n\\t\\tlet curr = root;\\n\\t\\tfor (var i = 0; i < word.length; i++) {\\n\\t\\t\\tif (!curr) return null;\\n\\t\\t\\tcurr = curr[word[i]];\\n\\t\\t}\\n\\t\\treturn curr;\\n\\t}\\n\\n\\tfunction search(word) {\\n\\t\\tlet node = traverse(word);\\n\\t\\treturn !!node && !!node.isWord;\\n\\t}\\n\\n\\tfunction startsWith(word) {\\n\\t\\treturn !!traverse(word);\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```js\\nfunction Trie() {\\n\\tconst root = {};\\n\\treturn { insert, search, startsWith };\\n\\n\\tfunction insert(word) {\\n\\t\\tlet curr = root;\\n\\t\\tword.split(\\'\\').forEach(ch => curr = curr[ch] = curr[ch] || {});\\n\\t\\tcurr.isWord = true;\\n\\t}\\n\\n\\tfunction traverse(word) {\\n\\t\\tlet curr = root;\\n\\t\\tfor (var i = 0; i < word.length; i++) {\\n\\t\\t\\tif (!curr) return null;\\n\\t\\t\\tcurr = curr[word[i]];\\n\\t\\t}\\n\\t\\treturn curr;\\n\\t}\\n\\n\\tfunction search(word) {\\n\\t\\tlet node = traverse(word);\\n\\t\\treturn !!node && !!node.isWord;\\n\\t}\\n\\n\\tfunction startsWith(word) {\\n\\t\\treturn !!traverse(word);\\n\\t}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2094586,
                "title": "js-simple-explained-prefix-trees",
                "content": "# 208. Implement Trie (Prefix Tree) \\uD83D\\uDE80\\n***\\n### Solution Developed In:\\n![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\\n\\n## The Question\\nFor this article we will be covering Leetcode\\'s \\'[208. Implement Trie (Prefix Tree)](https://leetcode.com/problems/implement-trie-prefix-tree/)\\' question. \\n\\nQuestion:\\n\\n> A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\\n\\n> Implement the Trie class:\\n\\n> - `Trie()` Initializes the trie object.\\n> - void insert(String `word`) Inserts the string word into the **trie**.\\n> - boolean search(String `word`) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\\n> - boolean startsWith(String `prefix`) Returns true if there is a previously inserted string word that has the prefix `prefix`, and `false` otherwise.\\nExample:\\n\\n>![Example](https://assets.leetcode.com/users/images/4e873776-a82a-4a0a-8390-2d597320598b_1654002546.316233.png)\\n\\n```\\nInput\\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\\nOutput\\n[null, null, true, false, true, null, true]\\n```\\n\\n## Explaining The Question\\nThis Question is rated **Medium**. Which is for the most part accurate. But this is **ONLY** Medium if you have already know what a [Trie](https://en.wikipedia.org/wiki/Trie) / [prefix tree](https://en.wikipedia.org/wiki/Trie) is.\\n\\nWhat we\\'re being asked is to implement a Trie data structure. Which I am going to call a **Prefix Tree**. See below for what one is. \\n\\n***\\n\\n## What is a Trie?\\nA Trie is a tree data structure that is used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker. **How do you think Google is so fast** with giving you suggestions on what you are looking for? **How do spellchecks have any idea of what you are looking for**?\\n\\nThe answer is that they have a Trie (Prefix Tree). What this mean\\'s is there is a tree structure that holds all the prefix for all the words you\\'re looking for. See the image below:\\n>![Example](https://assets.leetcode.com/users/images/4e873776-a82a-4a0a-8390-2d597320598b_1654002546.316233.png)\\n\\nNotice how *App* and **Apple** are on the same tree path. All thats different is that the **App** is a prefix of **Apple** and thus the end of **App** is marked as red as that represents the end of a word. Same with the *E* as thats the end of ***Apple***. A prefix tree creates a tree for each and every prefix of a word. \\n\\n**So why is this so special?**\\nBecause it\\'s so unbelievably fast. On each character you\\'re looking for you\\'re eliminating a lot of words. So if you\\'re looking for a word that starts with the letter *A* you\\'re going to be eliminating all the words that **DONT** start with *A*.\\n\\nIt also gives us the ability to query a word and their prefixes which is often used in [Dynamic Programming](https://en.wikipedia.org/wiki/Dynamic_programming) to solve string related issues. \\n\\n##  Recommended Knowledge\\n1. [Trees](https://en.wikipedia.org/wiki/Binary_tree)\\n2. [Trie](https://en.wikipedia.org/wiki/Trie)\\n3. [JS Object Oriented](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\\n\\n## What do we know?\\n1. We need to create a Prefix Tree\\n2. We need to be able to create one, insert a word, search for a word, and search for a prefix.\\n\\n## How we\\'re going to do it:\\n\\nFirstly we\\'re going to define a TrieNode, as this will be the key to implementing the Trie.\\n\\n```\\nclass TrieNode {\\n    constructor(children = {}, end_of_word = false) {\\n        // Our child is a hashmap of chars.\\n        // Which we will use to ask.\\n        // -  \"Does this node have a child with this char?\" and\\n        // -  \"Is this the end of a word?\"\\n\\n        this.children    = children;\\n        this.end_of_word = end_of_word;\\n    }\\n}\\n```\\n\\nSee how we have a `children` property. This is a hashmap. Each node will contain a hashmap of children. Meaning, at each node we can ask \\'Does this node have a child?\\'. We also have a `end_of_word` property. This is a boolean. We will use this to determine if we have reached the end of a word. So when we insert a word we will set the `end_of_word` property to true on the last node. \\n\\n1. For initializing the Trie we will use the `TrieNode` constructor. This gives us a `this.root` which is a `TrieNode`. This will act as the head of the entire tree. \\n2. We will start with the insertion of a word. We break the word into a char array. We then ask the current node \\'Do you have a child with this char?\\' If so we move to it, if not we create a new node and add it to the children. Once we have reached the end of the word we set the `end_of_word` property to true.\\n3. For searching we will do something similar to insertion. We break the word into a char array. We then ask the current node \\'Do you have a child with this char?\\' If so we move to it, if not we return false. Once we have reached the end of the word we ask \\'Now we\\'re at the end of the word, am I really at the end of the word?\\' If so we return true. We do this by asking the node if it\\'s node property is true.\\n4. The SearchWith function is the same as .3, but instead of asking the end node we just return true otherwise we return false if a char did not exist\\n\\n## Big O Notation:\\n* Time Complexity:   *O(**c**)* | Where ***c*** is the number of chars in the word. As we will have to travel through the tree for each char. Arguably, it\\'s **O(n)** as we have to traverse the entire tree for each char in the event that the tree only has 1 word. \\n* Space Complexity: *O(**b**)* | Where ***b*** is the number of chars in the word. As in the worst case we will have to create a new node for each char in the word.\\n\\n***\\n\\n# The Solution\\n```\\nclass TrieNode {\\n    constructor(child = {}, end = false) {\\n\\n        // Our child is a hashmap of chars.\\n        // Which we will use to ask.\\n        // -  \"Does this node have a child with this char?\" and\\n        // -  \"Is this the end of a word?\"\\n        this.child = child;\\n        this.end   = end;\\n    }\\n}\\n\\nvar Trie = function () {\\n\\n    // Set root node, just like Binary Trees\\n    this.root = new TrieNode();\\n};\\n\\nTrie.prototype.insert = function (word) {\\n\\n    // Get a handle on the root node\\n    // As we\\'re inserting a word, we\\'ll need to traverse the tree\\n    let current = this.root;\\n\\n    // Fancy for loop, go over each word,\\n    // if it already exists, traverse it, if not\\n    // create it. \\n    for (const char of word) {\\n        if (!current.child[char]) {\\n            current.child[char] = new TrieNode();\\n        }\\n        current = current.child[char];\\n    }\\n\\n    current.end = true;\\n};\\n\\nTrie.prototype.search = function (word) {\\n\\n    // Get a handle on the root node\\n    let current = this.root;\\n\\n    // Fancy for loop, go over each word,\\n    // if it already exists, traverse it, if not return false\\n    for (const char of word) {\\n        if (current.child[char]) {\\n            current = current.child[char];\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Is this the end of a word?\\n    return current.end;\\n};\\n\\nTrie.prototype.startsWith = function (prefix) {\\n\\n    // Get a handle on the root node\\n    let current = this.root;\\n\\n    // Fancy for loop, go over each word,\\n    // if it already exists, traverse it, if not return false\\n    for (const char of prefix) {\\n        if (current.child[char]) {\\n            current = current.child[char];\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Well we made it this far, so it must be true. :D\\n    return true;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nInput\\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\\nOutput\\n[null, null, true, false, true, null, true]\\n```\n```\\nclass TrieNode {\\n    constructor(children = {}, end_of_word = false) {\\n        // Our child is a hashmap of chars.\\n        // Which we will use to ask.\\n        // -  \"Does this node have a child with this char?\" and\\n        // -  \"Is this the end of a word?\"\\n\\n        this.children    = children;\\n        this.end_of_word = end_of_word;\\n    }\\n}\\n```\n```\\nclass TrieNode {\\n    constructor(child = {}, end = false) {\\n\\n        // Our child is a hashmap of chars.\\n        // Which we will use to ask.\\n        // -  \"Does this node have a child with this char?\" and\\n        // -  \"Is this the end of a word?\"\\n        this.child = child;\\n        this.end   = end;\\n    }\\n}\\n\\nvar Trie = function () {\\n\\n    // Set root node, just like Binary Trees\\n    this.root = new TrieNode();\\n};\\n\\nTrie.prototype.insert = function (word) {\\n\\n    // Get a handle on the root node\\n    // As we\\'re inserting a word, we\\'ll need to traverse the tree\\n    let current = this.root;\\n\\n    // Fancy for loop, go over each word,\\n    // if it already exists, traverse it, if not\\n    // create it. \\n    for (const char of word) {\\n        if (!current.child[char]) {\\n            current.child[char] = new TrieNode();\\n        }\\n        current = current.child[char];\\n    }\\n\\n    current.end = true;\\n};\\n\\nTrie.prototype.search = function (word) {\\n\\n    // Get a handle on the root node\\n    let current = this.root;\\n\\n    // Fancy for loop, go over each word,\\n    // if it already exists, traverse it, if not return false\\n    for (const char of word) {\\n        if (current.child[char]) {\\n            current = current.child[char];\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Is this the end of a word?\\n    return current.end;\\n};\\n\\nTrie.prototype.startsWith = function (prefix) {\\n\\n    // Get a handle on the root node\\n    let current = this.root;\\n\\n    // Fancy for loop, go over each word,\\n    // if it already exists, traverse it, if not return false\\n    for (const char of prefix) {\\n        if (current.child[char]) {\\n            current = current.child[char];\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Well we made it this far, so it must be true. :D\\n    return true;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1510117,
                "title": "python-template-solution-explained",
                "content": "Define class `TrieNode`, where we have two fields: `self.children = {}` and `self.endNode = 0`. Then all three desired operations are straightforward: just go symbol by symbol and insert if needed or search. I prefer to do it in this way: it is not the shortest one but it quite universal: if you need to add more functionality to trie, it can be done easier.\\n\\n#### Complexity\\nTime complexity of all operations is `O(n)`, where `n` is the size of word. Space complexity is `O(M)`, where `M` is total lengths of all words.\\n\\n#### Code\\n```python\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.end_node = 0\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word): #None\\n        root = self.root\\n        for symbol in word:\\n            root = root.children.setdefault(symbol, TrieNode())\\n        root.end_node = 1\\n        \\n    def searchHelper(self, word):\\n        root = self.root\\n        for symbol in word:\\n            if symbol in root.children:\\n                root = root.children[symbol]\\n            else:\\n                return -1\\n\\n        return 1 if root.end_node == 1 else 0  \\n\\n    def search(self, word): #bool:\\n        return self.searchHelper(word) == 1\\n\\n    def startsWith(self, prefix): #bool:\\n        return self.searchHelper(prefix) >= 0  \\n```\\n \\n If you have any questoins, feel free to ask. If you like the solution and explanation, please **upvote!**",
                "solutionTags": [
                    "Trie"
                ],
                "code": "```python\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.end_node = 0\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word): #None\\n        root = self.root\\n        for symbol in word:\\n            root = root.children.setdefault(symbol, TrieNode())\\n        root.end_node = 1\\n        \\n    def searchHelper(self, word):\\n        root = self.root\\n        for symbol in word:\\n            if symbol in root.children:\\n                root = root.children[symbol]\\n            else:\\n                return -1\\n\\n        return 1 if root.end_node == 1 else 0  \\n\\n    def search(self, word): #bool:\\n        return self.searchHelper(word) == 1\\n\\n    def startsWith(self, prefix): #bool:\\n        return self.searchHelper(prefix) >= 0  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 632380,
                "title": "python-faster-than-97-69-trie-with-nested-dictionary-prefix-tree",
                "content": "![image](https://assets.leetcode.com/users/ssmkhrj/image_1589489907.png)\\n\\n\\n**Trie representation in form of nested dictionary:**\\n```\\n{   \\'b\\': {   \\'a\\': {   \\'l\\': {   \\'l\\': {   \\'$\\': True}},\\n                      \\'t\\': {   \\'$\\': True}}},\\n    \\'d\\': {   \\'o\\': {   \\'$\\': True,\\n                      \\'l\\': {   \\'l\\': {   \\'$\\': True}},\\n                      \\'r\\': {   \\'k\\': {   \\'$\\': True},\\n                               \\'m\\': {   \\'$\\': True}}}},\\n    \\'s\\': {   \\'e\\': {   \\'n\\': {   \\'d\\': {   \\'$\\': True},\\n                               \\'s\\': {   \\'e\\': {   \\'$\\': True}}}}}}\\n```\\n**Code:**\\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.root = {}\\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        start = self.root\\n        for i in word:\\n            if i not in start:\\n                start[i] = {}\\n            start = start[i]\\n        start[\\'$\\'] = True\\n                \\n        \\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        start = self.root\\n        for i in word:\\n            if i not in start:\\n                return False\\n            start = start[i]\\n        return \\'$\\' in start\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        start = self.root\\n        for i in prefix:\\n            if i not in start:\\n                return False\\n            start = start[i]\\n        return True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```\\n",
                "solutionTags": [],
                "code": "```\\n{   \\'b\\': {   \\'a\\': {   \\'l\\': {   \\'l\\': {   \\'$\\': True}},\\n                      \\'t\\': {   \\'$\\': True}}},\\n    \\'d\\': {   \\'o\\': {   \\'$\\': True,\\n                      \\'l\\': {   \\'l\\': {   \\'$\\': True}},\\n                      \\'r\\': {   \\'k\\': {   \\'$\\': True},\\n                               \\'m\\': {   \\'$\\': True}}}},\\n    \\'s\\': {   \\'e\\': {   \\'n\\': {   \\'d\\': {   \\'$\\': True},\\n                               \\'s\\': {   \\'e\\': {   \\'$\\': True}}}}}}\\n```\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.root = {}\\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        start = self.root\\n        for i in word:\\n            if i not in start:\\n                start[i] = {}\\n            start = start[i]\\n        start[\\'$\\'] = True\\n                \\n        \\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        start = self.root\\n        for i in word:\\n            if i not in start:\\n                return False\\n            start = start[i]\\n        return \\'$\\' in start\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        start = self.root\\n        for i in prefix:\\n            if i not in start:\\n                return False\\n            start = start[i]\\n        return True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1509811,
                "title": "python-simple-approach-beats-99-77-submissions",
                "content": "The approach is simple. Just visualize each string in linked list fashion. For example if you are inserting the word \"carpet\" it will look as follows\\n\\n\"c\" -> \"a\" -> \"r\" -> \"p\" -> \"e\" -> \"t\" -> \"end\"\\n\\nThe term \"end\" is a flag term which differentiates the traversed word from a prefix. So if you are looking for the word \"car\" you can find there is no \"end\" flag which means that the term \"car\" is a prefix and the term \"carpet\" is a word due to the \"end\" flag.\\n\\nThe Algorithm involves adding letters of the word in a linked list fashion. Once the last letter of the word is added, add a \"end\" flag. \\n\\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.trie = {}\\n\\n    def insert(self, word: str) -> None:\\n        t = self.trie\\n\\t\\t# The idea is to insert words in a linked fashion. For example \"cars\" will be inserted as\\n\\t\\t# {\\'c\\':{\\'a\\':{\\'r\\':{\\'s\\':{}}}}\\n        for w in word:\\n          if w not in t:\\n            t[w] = {}\\n          t = t[w]\\n\\t\\t# Another key named \"end\" will distinguish that the word  \"cars\" actually exists\\n\\t\\t# Without the end key it simply means that the traversed part is just prefix\\n        t[\"end\"] = True \\n\\n    def search(self, word: str) -> bool:\\n        t = self.trie\\n\\t\\t# Traverse through the word\\n        for w in word:\\n          if w in t:\\n            t = t[w]\\n          else:\\n            return False\\n\\t\\t# As the end key denotes the existence of the word\\n        return \"end\" in t\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        t = self.trie\\n\\t\\t# Traverse through the word\\n        for w in prefix:\\n          if w in t:\\n            t = t[w]\\n          else:\\n            return False\\n\\t\\t# Here it is okay to find whether we had traversed the entire prefix or not\\n        return True\\n```\\n\\nTime Complexity: O(m)\\nSpace Complexity: O(n)\\n\\n![image](https://assets.leetcode.com/users/images/a1933bc5-286c-4aca-bfee-7190c49c0175_1633669051.608017.png)\\n\\nThanks for reading ! If this post had helped you kindly upvote :)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.trie = {}\\n\\n    def insert(self, word: str) -> None:\\n        t = self.trie\\n\\t\\t# The idea is to insert words in a linked fashion. For example \"cars\" will be inserted as\\n\\t\\t# {\\'c\\':{\\'a\\':{\\'r\\':{\\'s\\':{}}}}\\n        for w in word:\\n          if w not in t:\\n            t[w] = {}\\n          t = t[w]\\n\\t\\t# Another key named \"end\" will distinguish that the word  \"cars\" actually exists\\n\\t\\t# Without the end key it simply means that the traversed part is just prefix\\n        t[\"end\"] = True \\n\\n    def search(self, word: str) -> bool:\\n        t = self.trie\\n\\t\\t# Traverse through the word\\n        for w in word:\\n          if w in t:\\n            t = t[w]\\n          else:\\n            return False\\n\\t\\t# As the end key denotes the existence of the word\\n        return \"end\" in t\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        t = self.trie\\n\\t\\t# Traverse through the word\\n        for w in prefix:\\n          if w in t:\\n            t = t[w]\\n          else:\\n            return False\\n\\t\\t# Here it is okay to find whether we had traversed the entire prefix or not\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 631370,
                "title": "python-dictionary",
                "content": "Use `$` as the end mark of a word.\\nSo `search` and `startsWith` are mostly the same only `search` requires an end mark at the last search node.\\nAnd Python dictionary\\'s `setdefault` serves just right here.\\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.T = {}\\n        \\n    def insert(self, word):\\n        node = self.T\\n        for c in word:\\n            node = node.setdefault(c, {})\\n        node[\\'$\\'] = None\\n    \\n    def match(self, seq, prefix):\\n        node = self.T\\n        for c in seq:\\n            if c not in node:\\n                return False\\n            node = node[c]\\n        return prefix or (\\'$\\' in node)\\n    \\n    def search(self, word):\\n        return self.match(word, False)\\n\\n    def startsWith(self, prefix):\\n        return self.match(prefix, True)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.T = {}\\n        \\n    def insert(self, word):\\n        node = self.T\\n        for c in word:\\n            node = node.setdefault(c, {})\\n        node[\\'$\\'] = None\\n    \\n    def match(self, seq, prefix):\\n        node = self.T\\n        for c in seq:\\n            if c not in node:\\n                return False\\n            node = node[c]\\n        return prefix or (\\'$\\' in node)\\n    \\n    def search(self, word):\\n        return self.match(word, False)\\n\\n    def startsWith(self, prefix):\\n        return self.match(prefix, True)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58840,
                "title": "ac-java-dfs-solution-beat-91-31-submissions",
                "content": "    class TrieNode {\\n        \\n        TrieNode[] children = new TrieNode[26];\\n        boolean isLeaf;\\n        // Constructor\\n        public TrieNode() {\\n        }\\n    }\\n\\n    public class Trie {\\n        \\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            insert(word.toCharArray(), 0, root);\\n        }\\n        \\n        public void insert(char[] word, int i, TrieNode node) {\\n            \\n            if (i == word.length) {\\n                node.isLeaf = true;\\n                return;\\n            }\\n            \\n            char c = word[i];\\n            if (node.children[c - 'a'] == null) {\\n                node.children[c - 'a'] = new TrieNode();\\n            }\\n            \\n            insert(word, i + 1, node.children[c - 'a']);\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            return search(word.toCharArray(), 0, root);\\n        }\\n        \\n        public boolean search(char[] word, int i, TrieNode node) {\\n            \\n            if (i == word.length) {\\n                return node.isLeaf;\\n            }\\n            \\n            char c = word[i];\\n            \\n            return node.children[c - 'a'] != null && search(word, i + 1, node.children[c - 'a']);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            return startsWith(prefix.toCharArray(), 0, root);\\n        }\\n        \\n        public boolean startsWith(char[] word, int i, TrieNode node) {\\n            \\n            if (i == word.length) {\\n                return true;\\n            }\\n            \\n            char c = word[i];\\n            return node.children[c - 'a'] != null && startsWith(word, i + 1, node.children[c - 'a']);\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Depth-First Search"
                ],
                "code": "    class TrieNode {\\n        \\n        TrieNode[] children = new TrieNode[26];\\n        boolean isLeaf;\\n        // Constructor\\n        public TrieNode() {\\n        }\\n    }\\n\\n    public class Trie {\\n        \\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            insert(word.toCharArray(), 0, root);\\n        }\\n        \\n        public void insert(char[] word, int i, TrieNode node) {\\n            \\n            if (i == word.length) {\\n                node.isLeaf = true;\\n                return;\\n            }\\n            \\n            char c = word[i];\\n            if (node.children[c - 'a'] == null) {\\n                node.children[c - 'a'] = new TrieNode();\\n            }\\n            \\n            insert(word, i + 1, node.children[c - 'a']);\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            return search(word.toCharArray(), 0, root);\\n        }\\n        \\n        public boolean search(char[] word, int i, TrieNode node) {\\n            \\n            if (i == word.length) {\\n                return node.isLeaf;\\n            }\\n            \\n            char c = word[i];\\n            \\n            return node.children[c - 'a'] != null && search(word, i + 1, node.children[c - 'a']);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            return startsWith(prefix.toCharArray(), 0, root);\\n        }\\n        \\n        public boolean startsWith(char[] word, int i, TrieNode node) {\\n            \\n            if (i == word.length) {\\n                return true;\\n            }\\n            \\n            char c = word[i];\\n            return node.children[c - 'a'] != null && startsWith(word, i + 1, node.children[c - 'a']);\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3307049,
                "title": "day-76-easiest-beginner-friendly-sol",
                "content": "**NOTE - PLEASE READ INTUITION AND APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Intuition of this Problem :\\n![TRIE-Datastructure-Representation-New.png](https://assets.leetcode.com/users/images/8ddb0b98-8f59-4b71-a394-2a02317a9ee1_1679037070.098246.png)\\n\\n*The Trie data structure is a tree-like data structure used to store a collection of strings in a way that allows for efficient retrieval and prefix search. In a Trie, each node represents a prefix of one or more strings, with the root node representing the empty string. Each node also has a boolean flag indicating whether a string ends at that node.*\\n\\n*The intuition behind using a Trie is that we can efficiently search for a string or a prefix in the set of strings by traversing the Trie. We start at the root node and move down the tree, following the edges labeled with the characters of the string or prefix we\\'re searching for. If we reach a node that has a string ending at it, then we know that the string we\\'re searching for is in the set. If we reach a node that doesn\\'t have a string ending at it, then we know that the string or prefix is not in the set.*\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach for this Problem :\\n1. Define a TrieNode class that has an array of TrieNode pointers to represent its children and a boolean value to indicate if it is the end of a word.\\n2. Define a Trie class that has a pointer to the root TrieNode.\\n3. Implement the insert method of the Trie class that takes a string as input and inserts it into the Trie by traversing the Trie based on each character in the string. If a TrieNode for a particular character does not exist, create one and set it as the child of the current TrieNode. Mark the final TrieNode as the end of a word.\\n4. Implement the search method of the Trie class that takes a string as input and returns true if the string is in the Trie and false otherwise. Traverse the Trie based on each character in the string. If a TrieNode for a particular character does not exist, return false. If the end of the word is reached and the TrieNode is marked as the end of a word, return true. Otherwise, return false.\\n5. Implement the startsWith method of the Trie class that takes a string as input and returns true if there is any word in the Trie that starts with the given prefix and false otherwise. Traverse the Trie based on each character in the prefix. If a TrieNode for a particular character does not exist, return false. Otherwise, return true.\\n6. Create a Trie object and call its insert, search, and startsWith methods to use the Trie data structure.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Code :\\n```C++ []\\nclass TrieNode {\\npublic:\\n    TrieNode* children[26];\\n    bool isWordCompleted;\\n\\n    TrieNode() {\\n        memset(children, 0, sizeof(children));\\n        isWordCompleted = false;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    TrieNode *root;\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* newRoot = root;\\n        for (char ch : word) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot -> children[alphabetIndex] == NULL) {\\n                newRoot -> children[alphabetIndex] = new TrieNode();\\n            } \\n            newRoot = newRoot -> children[alphabetIndex];\\n        }\\n        newRoot -> isWordCompleted = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* newRoot = root;\\n        for (char ch : word) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot -> children[alphabetIndex] == NULL) {\\n                return false;\\n            } \\n            newRoot = newRoot -> children[alphabetIndex];\\n        }\\n        if (newRoot -> isWordCompleted == true) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* newRoot = root;\\n        for (char ch : prefix) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot -> children[alphabetIndex] == NULL) {\\n                return false;\\n            } \\n            newRoot = newRoot -> children[alphabetIndex];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```\\n```Java []\\nclass TrieNode {\\n    TrieNode[] children;\\n    boolean isWordCompleted;\\n\\n    public TrieNode() {\\n        children = new TrieNode[26];\\n        isWordCompleted = false;\\n    }\\n}\\n\\nclass Trie {\\n    TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode newRoot = root;\\n        for (char ch : word.toCharArray()) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot.children[alphabetIndex] == null) {\\n                newRoot.children[alphabetIndex] = new TrieNode();\\n            } \\n            newRoot = newRoot.children[alphabetIndex];\\n        }\\n        newRoot.isWordCompleted = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode newRoot = root;\\n        for (char ch : word.toCharArray()) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot.children[alphabetIndex] == null) {\\n                return false;\\n            } \\n            newRoot = newRoot.children[alphabetIndex];\\n        }\\n        if (newRoot.isWordCompleted == true) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode newRoot = root;\\n        for (char ch : prefix.toCharArray()) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot.children[alphabetIndex] == null) {\\n                return false;\\n            } \\n            newRoot = newRoot.children[alphabetIndex];\\n        }\\n        return true;\\n    }\\n}\\n\\n```\\n```Python []\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = [None]*26\\n        self.isWordCompleted = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n    \\n    def insert(self, word: str) -> None:\\n        newRoot = self.root\\n        for ch in word:\\n            alphabetIndex = ord(ch) - ord(\\'a\\')\\n            if newRoot.children[alphabetIndex] == None:\\n                newRoot.children[alphabetIndex] = TrieNode()\\n            newRoot = newRoot.children[alphabetIndex]\\n        newRoot.isWordCompleted = True\\n    \\n    def search(self, word: str) -> bool:\\n        newRoot = self.root\\n        for ch in word:\\n            alphabetIndex = ord(ch) - ord(\\'a\\')\\n            if newRoot.children[alphabetIndex] == None:\\n                return False\\n            newRoot = newRoot.children[alphabetIndex]\\n        if newRoot.isWordCompleted == True:\\n            return True\\n        return False\\n    \\n    def startsWith(self, prefix: str) -> bool:\\n        newRoot = self.root\\n        for ch in prefix:\\n            alphabetIndex = ord(ch) - ord(\\'a\\')\\n            if newRoot.children[alphabetIndex] == None:\\n                return False\\n            newRoot = newRoot.children[alphabetIndex]\\n        return True\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- **Time complexity :** \\n**Insertion: O(L)**, *where L is the length of the word being inserted. In the worst case, we have to traverse the entire length of the word to insert it into the Trie.*\\n**Search: O(L)**, *where L is the length of the word being searched. In the worst case, we have to traverse the entire length of the word to search for it in the Trie.*\\n**StartsWith: O(P)**, *where P is the length of the prefix being searched. In the worst case, we have to traverse the entire length of the prefix to check if it exists in the Trie.*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity :\\n*The space complexity of the Trie data structure depends on the number of words being inserted and their length. In the worst case, if all the words in the Trie have no common prefixes, then the Trie will have N nodes (where N is the total number of characters in all the words) and each node will have 26 child nodes (assuming we are dealing with lowercase English alphabets). Therefore, the space complexity of the Trie data structure in the worst case is **O(26N)**, which simplifies to **O(N)**. This is because the maximum number of nodes in the Trie is limited to the number of characters in all the words, and the maximum number of child nodes a node can have is 26. In practice, the space complexity will be much lower than the worst case as many nodes will have common prefixes.*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Design",
                    "Trie"
                ],
                "code": "```C++ []\\nclass TrieNode {\\npublic:\\n    TrieNode* children[26];\\n    bool isWordCompleted;\\n\\n    TrieNode() {\\n        memset(children, 0, sizeof(children));\\n        isWordCompleted = false;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    TrieNode *root;\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* newRoot = root;\\n        for (char ch : word) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot -> children[alphabetIndex] == NULL) {\\n                newRoot -> children[alphabetIndex] = new TrieNode();\\n            } \\n            newRoot = newRoot -> children[alphabetIndex];\\n        }\\n        newRoot -> isWordCompleted = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* newRoot = root;\\n        for (char ch : word) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot -> children[alphabetIndex] == NULL) {\\n                return false;\\n            } \\n            newRoot = newRoot -> children[alphabetIndex];\\n        }\\n        if (newRoot -> isWordCompleted == true) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* newRoot = root;\\n        for (char ch : prefix) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot -> children[alphabetIndex] == NULL) {\\n                return false;\\n            } \\n            newRoot = newRoot -> children[alphabetIndex];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```\n```Java []\\nclass TrieNode {\\n    TrieNode[] children;\\n    boolean isWordCompleted;\\n\\n    public TrieNode() {\\n        children = new TrieNode[26];\\n        isWordCompleted = false;\\n    }\\n}\\n\\nclass Trie {\\n    TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode newRoot = root;\\n        for (char ch : word.toCharArray()) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot.children[alphabetIndex] == null) {\\n                newRoot.children[alphabetIndex] = new TrieNode();\\n            } \\n            newRoot = newRoot.children[alphabetIndex];\\n        }\\n        newRoot.isWordCompleted = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode newRoot = root;\\n        for (char ch : word.toCharArray()) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot.children[alphabetIndex] == null) {\\n                return false;\\n            } \\n            newRoot = newRoot.children[alphabetIndex];\\n        }\\n        if (newRoot.isWordCompleted == true) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode newRoot = root;\\n        for (char ch : prefix.toCharArray()) {\\n            int alphabetIndex = ch - \\'a\\';\\n            if (newRoot.children[alphabetIndex] == null) {\\n                return false;\\n            } \\n            newRoot = newRoot.children[alphabetIndex];\\n        }\\n        return true;\\n    }\\n}\\n\\n```\n```Python []\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = [None]*26\\n        self.isWordCompleted = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n    \\n    def insert(self, word: str) -> None:\\n        newRoot = self.root\\n        for ch in word:\\n            alphabetIndex = ord(ch) - ord(\\'a\\')\\n            if newRoot.children[alphabetIndex] == None:\\n                newRoot.children[alphabetIndex] = TrieNode()\\n            newRoot = newRoot.children[alphabetIndex]\\n        newRoot.isWordCompleted = True\\n    \\n    def search(self, word: str) -> bool:\\n        newRoot = self.root\\n        for ch in word:\\n            alphabetIndex = ord(ch) - ord(\\'a\\')\\n            if newRoot.children[alphabetIndex] == None:\\n                return False\\n            newRoot = newRoot.children[alphabetIndex]\\n        if newRoot.isWordCompleted == True:\\n            return True\\n        return False\\n    \\n    def startsWith(self, prefix: str) -> bool:\\n        newRoot = self.root\\n        for ch in prefix:\\n            alphabetIndex = ord(ch) - ord(\\'a\\')\\n            if newRoot.children[alphabetIndex] == None:\\n                return False\\n            newRoot = newRoot.children[alphabetIndex]\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 397976,
                "title": "java-solution-hashmap-handles-uppercase-lower-case",
                "content": "```\\nclass Trie {\\n    private TrieNode root;\\n    static class TrieNode {\\n        char c;\\n        Map<Character, TrieNode> charMap = new HashMap<>();\\n        boolean isLeaf;\\n    }\\n\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n\\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        TrieNode p = root;\\n        for(char c : word.toCharArray()) {\\n            if(! p.charMap.containsKey(c)) {\\n                TrieNode node = new TrieNode();\\n                node.c = c;\\n                p.charMap.put(c, node);\\n            }\\n            p = p.charMap.get(c);\\n        }\\n        p.isLeaf = true;\\n    }\\n\\n    /** Returns if the word is in the trie. */\\n    public boolean search(String word) {\\n        TrieNode p = root;\\n        for(char c : word.toCharArray()) {\\n            if(!p.charMap.containsKey(c)) {\\n                return false;\\n            }\\n            p = p.charMap.get(c);\\n        }\\n        return p.isLeaf;\\n    }\\n\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) {\\n        TrieNode p = root;\\n        for(char c : prefix.toCharArray()) {\\n            if(!p.charMap.containsKey(c)) {\\n                return false;\\n            }\\n            p = p.charMap.get(c);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Trie {\\n    private TrieNode root;\\n    static class TrieNode {\\n        char c;\\n        Map<Character, TrieNode> charMap = new HashMap<>();\\n        boolean isLeaf;\\n    }\\n\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n\\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        TrieNode p = root;\\n        for(char c : word.toCharArray()) {\\n            if(! p.charMap.containsKey(c)) {\\n                TrieNode node = new TrieNode();\\n                node.c = c;\\n                p.charMap.put(c, node);\\n            }\\n            p = p.charMap.get(c);\\n        }\\n        p.isLeaf = true;\\n    }\\n\\n    /** Returns if the word is in the trie. */\\n    public boolean search(String word) {\\n        TrieNode p = root;\\n        for(char c : word.toCharArray()) {\\n            if(!p.charMap.containsKey(c)) {\\n                return false;\\n            }\\n            p = p.charMap.get(c);\\n        }\\n        return p.isLeaf;\\n    }\\n\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) {\\n        TrieNode p = root;\\n        for(char c : prefix.toCharArray()) {\\n            if(!p.charMap.containsKey(c)) {\\n                return false;\\n            }\\n            p = p.charMap.get(c);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306528,
                "title": "c-beginner-friendly-solution-hashing-clean-code",
                "content": "\\n# PLEASE DO UPVOTE!!!!\\n# Code\\n```\\nclass Trie {\\npublic:\\n\\nunordered_map<string,int>mpp,mp;\\n    Trie() {\\n        \\n    }\\n    \\n    void insert(string word) {\\n        mpp[word]++;\\n        string s;\\n        for(auto it : word)\\n        {\\n            s.push_back(it);\\n            if(mp[s]==0) mp[s]++;\\n        }\\n    }\\n    \\n    bool search(string word) {\\n        if(mpp[word]) return true;\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        if(mp[prefix]) return true;\\n        return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n\\nunordered_map<string,int>mpp,mp;\\n    Trie() {\\n        \\n    }\\n    \\n    void insert(string word) {\\n        mpp[word]++;\\n        string s;\\n        for(auto it : word)\\n        {\\n            s.push_back(it);\\n            if(mp[s]==0) mp[s]++;\\n        }\\n    }\\n    \\n    bool search(string word) {\\n        if(mpp[word]) return true;\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        if(mp[prefix]) return true;\\n        return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 774401,
                "title": "c-solution-simple-and-clear",
                "content": "**Like it? please upvote...**\\n```\\nclass Trie {\\npublic:\\n    bool is_leaf;\\n    Trie* children[26];\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        this->is_leaf = false;\\n        for(int i=0;i<26;i++)\\n            this->children[i] = NULL;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        Trie* root = this;\\n        for (int i=0;i<word.length();i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            if (root->children[index] == NULL)\\n                root->children[index] = new Trie();\\n            root = root->children[index];\\n        }\\n        root->is_leaf = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        if (this == NULL)\\n            return false;\\n        Trie* root = this;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        if (root->is_leaf)\\n            return true;\\n        return false;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        if (this == NULL)\\n            return false;\\n        Trie* root = this;\\n        for(int i=0;i<prefix.length();i++)\\n        {\\n            int index = prefix[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n    bool is_leaf;\\n    Trie* children[26];\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        this->is_leaf = false;\\n        for(int i=0;i<26;i++)\\n            this->children[i] = NULL;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        Trie* root = this;\\n        for (int i=0;i<word.length();i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            if (root->children[index] == NULL)\\n                root->children[index] = new Trie();\\n            root = root->children[index];\\n        }\\n        root->is_leaf = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        if (this == NULL)\\n            return false;\\n        Trie* root = this;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        if (root->is_leaf)\\n            return true;\\n        return false;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        if (this == NULL)\\n            return false;\\n        Trie* root = this;\\n        for(int i=0;i<prefix.length();i++)\\n        {\\n            int index = prefix[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 503205,
                "title": "c-solution-by-using-unordered-map-easy-to-understand",
                "content": "```\\nclass TireNode{\\npublic:\\n    unordered_map<char, TireNode*> children;\\n    char val;\\n    bool isEnd = false;\\n    \\n    TireNode(){}\\n    \\n    TireNode(char v){\\n        this->val = v;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        root = new TireNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        TireNode* node = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char c = word[i];\\n            if(node->children.find(c) == node->children.end()){\\n                node->children[c] = new TireNode(c);                        // if not find children, creat new TireNode\\n            }\\n            \\n            node = node->children[c];                                               // if find move to child node\\n        }\\n        \\n        node->isEnd = true;                                                             // set the end of TireNode to true\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        TireNode* node = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char c = word[i];\\n            if(node->children.find(c) == node->children.end()) return false;\\n            node = node->children[c];\\n        }\\n        \\n        return node->isEnd;                            // check is it at the end of the TireNode\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        TireNode* node = root;\\n        for(int i = 0; i < prefix.size(); i++){\\n            char c = prefix[i];\\n            if(node->children.find(c) == node->children.end()) return false;\\n            node = node->children[c];\\n        }\\n        \\n        return true;\\n    }\\nprivate:\\n    TireNode* root;\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass TireNode{\\npublic:\\n    unordered_map<char, TireNode*> children;\\n    char val;\\n    bool isEnd = false;\\n    \\n    TireNode(){}\\n    \\n    TireNode(char v){\\n        this->val = v;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        root = new TireNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        TireNode* node = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char c = word[i];\\n            if(node->children.find(c) == node->children.end()){\\n                node->children[c] = new TireNode(c);                        // if not find children, creat new TireNode\\n            }\\n            \\n            node = node->children[c];                                               // if find move to child node\\n        }\\n        \\n        node->isEnd = true;                                                             // set the end of TireNode to true\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        TireNode* node = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char c = word[i];\\n            if(node->children.find(c) == node->children.end()) return false;\\n            node = node->children[c];\\n        }\\n        \\n        return node->isEnd;                            // check is it at the end of the TireNode\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        TireNode* node = root;\\n        for(int i = 0; i < prefix.size(); i++){\\n            char c = prefix[i];\\n            if(node->children.find(c) == node->children.end()) return false;\\n            node = node->children[c];\\n        }\\n        \\n        return true;\\n    }\\nprivate:\\n    TireNode* root;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 164163,
                "title": "c-member-access-within-misaligned-address-for-type-trienode-26",
                "content": "This code passes Run code check and result is correct, but throws Runtime error when submitting.\\nRuntime Error Message: \\nLine 35: member access within misaligned address 0x22656c70706122 for type \\'TrieNode *[26]\\', which requires 8 byte alignment\\n\\nAnyone else seeing this? Any thoughts on what might be wrong?\\n\\n```\\nclass TrieNode {\\npublic:\\n    TrieNode* next[26] = { NULL };\\n    bool valid;\\n    \\n    TrieNode()\\n    {\\n        valid = false;\\n    }\\n};\\n    \\nclass Trie {\\nprivate:\\n    TrieNode* root;\\n    \\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        TrieNode* root = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        TrieNode* p = root;\\n        for (auto letter : word)\\n        {\\n            if (!p->next[letter - \\'a\\'])\\n            {\\n                p->next[letter - \\'a\\'] = new TrieNode();\\n            }\\n            \\n            p = p->next[letter - \\'a\\'];\\n        }\\n        \\n        p->valid = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        TrieNode* p = root;\\n        for (auto letter : word)\\n        {\\n            if (!p->next[letter - \\'a\\'])\\n            {\\n                return false;\\n            }\\n            \\n            p = p->next[letter - \\'a\\'];\\n        }\\n        \\n        return p->valid;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        TrieNode* p = root;\\n        for (auto letter : prefix)\\n        {\\n            if (!p->next[letter - \\'a\\'])\\n            {\\n                return false;\\n            }\\n            \\n            p = p->next[letter - \\'a\\'];\\n        }\\n        \\n        return true;\\n    }\\n};\\n ```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode {\\npublic:\\n    TrieNode* next[26] = { NULL };\\n    bool valid;\\n    \\n    TrieNode()\\n    {\\n        valid = false;\\n    }\\n};\\n    \\nclass Trie {\\nprivate:\\n    TrieNode* root;\\n    \\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        TrieNode* root = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        TrieNode* p = root;\\n        for (auto letter : word)\\n        {\\n            if (!p->next[letter - \\'a\\'])\\n            {\\n                p->next[letter - \\'a\\'] = new TrieNode();\\n            }\\n            \\n            p = p->next[letter - \\'a\\'];\\n        }\\n        \\n        p->valid = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        TrieNode* p = root;\\n        for (auto letter : word)\\n        {\\n            if (!p->next[letter - \\'a\\'])\\n            {\\n                return false;\\n            }\\n            \\n            p = p->next[letter - \\'a\\'];\\n        }\\n        \\n        return p->valid;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        TrieNode* p = root;\\n        for (auto letter : prefix)\\n        {\\n            if (!p->next[letter - \\'a\\'])\\n            {\\n                return false;\\n            }\\n            \\n            p = p->next[letter - \\'a\\'];\\n        }\\n        \\n        return true;\\n    }\\n};\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 58986,
                "title": "concise-o-1-java-solution-based-on-hashmap",
                "content": "The basic idea is using prefix tree to implement this class, and store the children of each node.\\n\\n**Time complexity(Insert, Search)  = O(keyLength)**\\n\\nFor each char in one word, we only need O(1) time to get it from children array. So the total time = O(1 * keyLength.\\n        \\n   **Extra Space = O( numOflevel[0] * numOflevel[1] .. numOflevel[longestWord] )**  \\n\\nnumOflevel is the number of char on each level for the words in the dictionary.\\n\\n***If use Array to store children, it will cost O( 26 ^ (len(longestWord) - 1) ) extra space:***\\n\\n*For each char in one word, we have to store 26 children, so the total extra space should be O( 26 ^ (length of the longest word in the dictionary - 1) ) )* \\n\\n**To sum up, HashMap only needs the accurate necessary extra space, it will cost far less space than Array, and it can also support any ASCII char, e.g. 'A' - 'Z'.**\\n\\n    public class Trie {\\n        private TrieNode root;\\n        public Trie() {\\n            root = new TrieNode();\\n        }    \\n        public void insert(String word) {\\n            TrieNode node  = root;\\n            for (int i = 0; i < word.length(); i++) {\\n                char ch = word.charAt(i);\\n                if (node.children == null) \\n                    node.children = new HashMap<Character, TrieNode>();\\n                if (!node.children.containsKey(ch)) \\n                    node.children.put(ch, new TrieNode(ch));            \\n                node = node.children.get(ch);\\n            }\\n            node.isLeaf = true;\\n        }    \\n        public boolean search(String word) {\\n            TrieNode node  = root;\\n            for (int i = 0; i < word.length(); i++) {\\n                char ch = word.charAt(i);\\n                if (node.children == null || !node.children.containsKey(ch))\\n                    return false;\\n                node = node.children.get(ch);\\n            }\\n            return node.isLeaf;\\n        }     \\n        public boolean startsWith(String prefix) {\\n            TrieNode node  = root;\\n            for (int i = 0; i < prefix.length(); i++) {\\n                char ch = prefix.charAt(i);\\n                if (node.children == null || !node.children.containsKey(ch))\\n                    return false;\\n                node = node.children.get(ch);\\n            }\\n            return true;\\n        }\\n    }\\n    class TrieNode {\\n        public Map<Character, TrieNode>children = null;\\n        public boolean isLeaf = false;\\n        public char val;\\n        public TrieNode() {}\\n        public TrieNode(char val) {\\n            this.val = val;\\n        }\\n    }",
                "solutionTags": [],
                "code": "The basic idea is using prefix tree to implement this class, and store the children of each node.\\n\\n**Time complexity(Insert, Search)  = O(keyLength)**\\n\\nFor each char in one word, we only need O(1) time to get it from children array. So the total time = O(1 * keyLength.\\n        \\n   **Extra Space = O( numOflevel[0] * numOflevel[1] .. numOflevel[longestWord] )**  \\n\\nnumOflevel is the number of char on each level for the words in the dictionary.\\n\\n***If use Array to store children, it will cost O( 26 ^ (len(longestWord) - 1) ) extra space:***\\n\\n*For each char in one word, we have to store 26 children, so the total extra space should be O( 26 ^ (length of the longest word in the dictionary - 1) ) )* \\n\\n**To sum up, HashMap only needs the accurate necessary extra space, it will cost far less space than Array, and it can also support any ASCII char, e.g. 'A' - 'Z'.**\\n\\n    public class Trie {\\n        private TrieNode root;\\n        public Trie() {\\n            root = new TrieNode();\\n        }    \\n        public void insert(String word) {\\n            TrieNode node  = root;\\n            for (int i = 0; i < word.length(); i++) {\\n                char ch = word.charAt(i);\\n                if (node.children == null) \\n                    node.children = new HashMap<Character, TrieNode>();\\n                if (!node.children.containsKey(ch)) \\n                    node.children.put(ch, new TrieNode(ch));            \\n                node = node.children.get(ch);\\n            }\\n            node.isLeaf = true;\\n        }    \\n        public boolean search(String word) {\\n            TrieNode node  = root;\\n            for (int i = 0; i < word.length(); i++) {\\n                char ch = word.charAt(i);\\n                if (node.children == null || !node.children.containsKey(ch))\\n                    return false;\\n                node = node.children.get(ch);\\n            }\\n            return node.isLeaf;\\n        }     \\n        public boolean startsWith(String prefix) {\\n            TrieNode node  = root;\\n            for (int i = 0; i < prefix.length(); i++) {\\n                char ch = prefix.charAt(i);\\n                if (node.children == null || !node.children.containsKey(ch))\\n                    return false;\\n                node = node.children.get(ch);\\n            }\\n            return true;\\n        }\\n    }\\n    class TrieNode {\\n        public Map<Character, TrieNode>children = null;\\n        public boolean isLeaf = false;\\n        public char val;\\n        public TrieNode() {}\\n        public TrieNode(char val) {\\n            this.val = val;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 59052,
                "title": "ternary-search-trie-implementation-with-java",
                "content": "I noticed the most recent posted java solution are all about 26-ways tries. It is great but sometimes, a waste of storage space. I posted my TST solution here just in case anyone wants to try another implementation of Trie. After all, TST is one of the most common way to implement Trie. Also, R-way needs you to specify the number of children based on different problems, while in TST there are always 3 of them.\\n\\n    class TrieNode {\\n        char val;\\n        TrieNode left, mid, right;\\n        boolean end;\\n        \\n        // Initialize your data structure here.\\n        public TrieNode() {\\n            // do nothing\\n        }\\n        \\n        public TrieNode(char val) {\\n            this.val = val;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            if (word != null && !word.isEmpty()) insert(word, 0, root);\\n        }\\n        \\n        private TrieNode insert(String word, int index, TrieNode node) {\\n            char ch = word.charAt(index);\\n            if (node == null) node = new TrieNode(ch);\\n            if (ch < node.val) node.left = insert(word, index, node.left);\\n            else if (ch > node.val) node.right = insert(word, index, node.right);\\n            else if (index < word.length() - 1) node.mid = insert(word, index + 1, node.mid);\\n            else node.end = true;\\n            return node;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            if (word == null || word.isEmpty()) return false;\\n            return search(word, 0, root);\\n        }\\n        \\n        private boolean search(String word, int index, TrieNode node) {\\n            if (node == null) return false;\\n            char ch = word.charAt(index);\\n            if (ch < node.val) return search(word, index, node.left);\\n            if (ch > node.val) return search(word, index, node.right);\\n            if (index < word.length() - 1) return search(word, index + 1, node.mid);\\n            return node.end;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            if (prefix == null || prefix.isEmpty()) return false;\\n            return startsWith(prefix, 0, root);\\n        }\\n        \\n        private boolean startsWith(String prefix, int index, TrieNode node) {\\n            if (node == null) return false;\\n            char ch = prefix.charAt(index);\\n            if (ch < node.val) return startsWith(prefix, index, node.left);\\n            if (ch > node.val) return startsWith(prefix, index, node.right);\\n            if (index == prefix.length() - 1) return true;\\n            return startsWith(prefix, index + 1, node.mid);\\n        }\\n    }\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie = new Trie();\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "solutionTags": [
                    "Java",
                    "Trie"
                ],
                "code": "I noticed the most recent posted java solution are all about 26-ways tries. It is great but sometimes, a waste of storage space. I posted my TST solution here just in case anyone wants to try another implementation of Trie. After all, TST is one of the most common way to implement Trie. Also, R-way needs you to specify the number of children based on different problems, while in TST there are always 3 of them.\\n\\n    class TrieNode {\\n        char val;\\n        TrieNode left, mid, right;\\n        boolean end;\\n        \\n        // Initialize your data structure here.\\n        public TrieNode() {\\n            // do nothing\\n        }\\n        \\n        public TrieNode(char val) {\\n            this.val = val;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            if (word != null && !word.isEmpty()) insert(word, 0, root);\\n        }\\n        \\n        private TrieNode insert(String word, int index, TrieNode node) {\\n            char ch = word.charAt(index);\\n            if (node == null) node = new TrieNode(ch);\\n            if (ch < node.val) node.left = insert(word, index, node.left);\\n            else if (ch > node.val) node.right = insert(word, index, node.right);\\n            else if (index < word.length() - 1) node.mid = insert(word, index + 1, node.mid);\\n            else node.end = true;\\n            return node;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            if (word == null || word.isEmpty()) return false;\\n            return search(word, 0, root);\\n        }\\n        \\n        private boolean search(String word, int index, TrieNode node) {\\n            if (node == null) return false;\\n            char ch = word.charAt(index);\\n            if (ch < node.val) return search(word, index, node.left);\\n            if (ch > node.val) return search(word, index, node.right);\\n            if (index < word.length() - 1) return search(word, index + 1, node.mid);\\n            return node.end;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            if (prefix == null || prefix.isEmpty()) return false;\\n            return startsWith(prefix, 0, root);\\n        }\\n        \\n        private boolean startsWith(String prefix, int index, TrieNode node) {\\n            if (node == null) return false;\\n            char ch = prefix.charAt(index);\\n            if (ch < node.val) return startsWith(prefix, index, node.left);\\n            if (ch > node.val) return startsWith(prefix, index, node.right);\\n            if (index == prefix.length() - 1) return true;\\n            return startsWith(prefix, index + 1, node.mid);\\n        }\\n    }\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie = new Trie();\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "codeTag": "Java"
            },
            {
                "id": 1255484,
                "title": "very-easy-js-solution",
                "content": "```\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function () {\\n  this.root = {};\\n};\\n\\n/**\\n * Inserts a word into the trie.\\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function (word) {\\n  let node = this.root;\\n  for (let char of word) {\\n    if (!node[char]) {\\n      node[char] = {};\\n    }\\n    node = node[char];\\n  }\\n  node[\"isEnd\"] = true;\\n  // T.C: O(m), m = length of key\\n  // S.C: O(m)\\n};\\n\\n/**\\n * Returns if the word is in the trie.\\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function (word) {\\n  let node = this.root;\\n  for (let char of word) {\\n    if (!node[char]) {\\n      return false;\\n    }\\n    node = node[char];\\n  }\\n  return node[\"isEnd\"] === true;\\n  // T.C: O(m), m = length of key\\n  // S.C: O(1)\\n};\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix.\\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function (prefix) {\\n  let node = this.root;\\n  for (let char of prefix) {\\n    if (!node[char]) {\\n      return false;\\n    }\\n    node = node[char];\\n  }\\n  return true;\\n  // T.C: O(m), m = length of key\\n  // S.C: O(1)\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function () {\\n  this.root = {};\\n};\\n\\n/**\\n * Inserts a word into the trie.\\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function (word) {\\n  let node = this.root;\\n  for (let char of word) {\\n    if (!node[char]) {\\n      node[char] = {};\\n    }\\n    node = node[char];\\n  }\\n  node[\"isEnd\"] = true;\\n  // T.C: O(m), m = length of key\\n  // S.C: O(m)\\n};\\n\\n/**\\n * Returns if the word is in the trie.\\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function (word) {\\n  let node = this.root;\\n  for (let char of word) {\\n    if (!node[char]) {\\n      return false;\\n    }\\n    node = node[char];\\n  }\\n  return node[\"isEnd\"] === true;\\n  // T.C: O(m), m = length of key\\n  // S.C: O(1)\\n};\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix.\\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function (prefix) {\\n  let node = this.root;\\n  for (let char of prefix) {\\n    if (!node[char]) {\\n      return false;\\n    }\\n    node = node[char];\\n  }\\n  return true;\\n  // T.C: O(m), m = length of key\\n  // S.C: O(1)\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1510156,
                "title": "c-simple-and-clean-solution",
                "content": "```\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        this->is_leaf = false;\\n        for(int i = 0; i < 26; i++) this->children[i] = NULL;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        Trie* root = this;\\n        for (int i = 0; i < word.length(); i++) {\\n            int index = word[i] - \\'a\\';\\n            if (root->children[index] == NULL)\\n                root->children[index] = new Trie();\\n            root = root->children[index];\\n        }\\n        root->is_leaf = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        if (this == NULL) return false;\\n        \\n        Trie* root = this;\\n        for(int i = 0; i < word.length(); i++) {\\n            int index = word[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        return root->is_leaf;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        if (this == NULL) return false;\\n        \\n        Trie* root = this;\\n        for(int i = 0; i < prefix.length(); i++) {\\n            int index = prefix[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        return true;\\n    }\\n    \\nprivate:\\n    bool is_leaf;\\n    Trie* children[26];\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        this->is_leaf = false;\\n        for(int i = 0; i < 26; i++) this->children[i] = NULL;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        Trie* root = this;\\n        for (int i = 0; i < word.length(); i++) {\\n            int index = word[i] - \\'a\\';\\n            if (root->children[index] == NULL)\\n                root->children[index] = new Trie();\\n            root = root->children[index];\\n        }\\n        root->is_leaf = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        if (this == NULL) return false;\\n        \\n        Trie* root = this;\\n        for(int i = 0; i < word.length(); i++) {\\n            int index = word[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        return root->is_leaf;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        if (this == NULL) return false;\\n        \\n        Trie* root = this;\\n        for(int i = 0; i < prefix.length(); i++) {\\n            int index = prefix[i] - \\'a\\';\\n            root = root->children[index];\\n            if (root == NULL)\\n                return false;\\n        }\\n        return true;\\n    }\\n    \\nprivate:\\n    bool is_leaf;\\n    Trie* children[26];\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 373553,
                "title": "faster-than-95-python",
                "content": "```\\nclass Trie(object):\\n\\n    def __init__(self):\\n        self.head = {}\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        \\n\\n    def insert(self, word):        \\n        \"\"\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: None\\n        \"\"\"\\n        current = self.head\\n        for character in word:\\n            if character not in current:\\n                current[character] = {}\\n            current = current[character]\\n        current[\\'*\\'] = True            # \\'*\\' marks the end of word\\n        \\n\\n    def search(self, word):\\n        current = self.head\\n        for character in word:\\n            if character not in current:\\n                return False\\n            current = current[character]\\n        if \\'*\\' in current:\\n            return True\\n        return False\\n\\t\\t\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n    def startsWith(self, prefix):\\n        current = self.head\\n        for character in prefix:\\n            if character not in current:\\n                return False\\n            current = current[character]\\n        return True\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie(object):\\n\\n    def __init__(self):\\n        self.head = {}\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        \\n\\n    def insert(self, word):        \\n        \"\"\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: None\\n        \"\"\"\\n        current = self.head\\n        for character in word:\\n            if character not in current:\\n                current[character] = {}\\n            current = current[character]\\n        current[\\'*\\'] = True            # \\'*\\' marks the end of word\\n        \\n\\n    def search(self, word):\\n        current = self.head\\n        for character in word:\\n            if character not in current:\\n                return False\\n            current = current[character]\\n        if \\'*\\' in current:\\n            return True\\n        return False\\n\\t\\t\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n    def startsWith(self, prefix):\\n        current = self.head\\n        for character in prefix:\\n            if character not in current:\\n                return False\\n            current = current[character]\\n        return True\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 156159,
                "title": "java-solution-with-delete-method",
                "content": "Idea: \\n1. Each TrieNode has a flag indicating whether it is the end of a word in the Trie, and a Map that associate characters to TrieNodes. \\n2. Each path from root to a leaf is a key/word.\\n\\nGiven a trie [\"abc\", \"abde\", \"worb\", \"xyz\", \"xyzb\"], to delete a word \\'word\\', there are 4 cases,\\n1. If \\'word\\' doesn\\'t share any node with other words, delete all nodes of \\'word\\', e.g., deleting \"worb\".\\n2. If \\'word\\' is a prefix of other words, mark its leaf node as \\'not a word\\', e.g., deleting \"xyz\".\\n3. If other words are prefixes of \\'word\\', delete all nodes that are not shared with other words, deleting \"xyzb\".\\n4. If \\'word\\' is not a prefix of other words and no word is a prefix of \\'word\\', but \\'word\\' shares some nodes with other words, delete all nodes that aren\\'t shared with other words, e.g., deleting \"abde\"/\"abc\".\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/walkboy/image_1533263564.png)\\n\\n\\nComplexity - Time: O(n) for inset(), search(), startsWith() and delete() where n is word.length, Space: O(1)\\n```\\npublic class Trie {\\n    private TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode(true); // root can represent an empty string\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        if (word == null || word.length() == 0) {\\n            return;\\n        }\\n        \\n        TrieNode parent = root;\\n        for (int i = 0; i < word.length(); i++) {\\n            char cur = word.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) {\\n                child = new TrieNode(false);\\n                parent.children.put(cur, child);\\n            }\\n            \\n            parent = child; // Navigate to next level\\n        }\\n        \\n        parent.isEndOfWord = true;\\n    }\\n    \\n    /** Returns true if the word is in the trie. */\\n    public boolean search(String word) {\\n        if (word == null) { // Assume that empty string is in the trie\\n            return false;\\n        }\\n        \\n        TrieNode parent = root;\\n        for (int i = 0; i < word.length(); i++) {\\n            char cur = word.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) { // null if \\'word\\' is way too long or its prefix doesn\\'t appear in the Trie\\n                return false;\\n            }\\n            \\n            parent = child; // Navigate to next level\\n        }\\n        \\n        return parent.isEndOfWord;\\n    }\\n    \\n    /** Returns true if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) { // Assume that empty string is a valid prefix\\n        if (prefix == null) {\\n            return false;\\n        }\\n        \\n        TrieNode parent = root;\\n        for (int i = 0; i < prefix.length(); i++) {\\n            char cur = prefix.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) { // null if \\'prefix\\' is way too long or its prefix doesn\\'t appear in the Trie\\n                return false;\\n            }\\n            \\n            parent = child; // Navigate to next level\\n        }\\n        \\n        return true;\\n    }\\n    \\n    /** Deletes a word from the trie if present, and return true if the word is deleted successfully. */\\n    public boolean delete(String word) {\\n        if (word == null || word.length() == 0) {\\n            return false;\\n        }\\n        \\n        // All nodes below \\'deleteBelow\\' and on the path starting with \\'deleteChar\\' (including itself) will be deleted if needed\\n        TrieNode deleteBelow = null;\\n        char deleteChar = \\'\\\\0\\';\\n        \\n        // Search to ensure word is present\\n        TrieNode parent = root;\\n        for (int i = 0; i < word.length(); i++) {\\n            char cur = word.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) { // null if \\'word\\' is way too long or its prefix doesn\\'t appear in the Trie\\n                return false;\\n            }\\n            \\n            if (parent.children.size() > 1 || parent.isEndOfWord) { // Update \\'deleteBelow\\' and \\'deleteChar\\'\\n                deleteBelow = parent;\\n                deleteChar = cur;\\n            }\\n            \\n            parent = child;\\n        }\\n        \\n        if (!parent.isEndOfWord) { // word isn\\'t in trie\\n            return false;\\n        }\\n        \\n        if (parent.children.isEmpty()) {\\n            deleteBelow.children.remove(deleteChar);\\n        } else {\\n            parent.isEndOfWord = false; // Delete word by mark it as not the end of a word\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private class TrieNode {\\n        boolean isEndOfWord;\\n        Map<Character, TrieNode> children;\\n        \\n        TrieNode(boolean isEndOfWord) {\\n            this.isEndOfWord = isEndOfWord;\\n            this.children = new HashMap<>();\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Trie {\\n    private TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode(true); // root can represent an empty string\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        if (word == null || word.length() == 0) {\\n            return;\\n        }\\n        \\n        TrieNode parent = root;\\n        for (int i = 0; i < word.length(); i++) {\\n            char cur = word.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) {\\n                child = new TrieNode(false);\\n                parent.children.put(cur, child);\\n            }\\n            \\n            parent = child; // Navigate to next level\\n        }\\n        \\n        parent.isEndOfWord = true;\\n    }\\n    \\n    /** Returns true if the word is in the trie. */\\n    public boolean search(String word) {\\n        if (word == null) { // Assume that empty string is in the trie\\n            return false;\\n        }\\n        \\n        TrieNode parent = root;\\n        for (int i = 0; i < word.length(); i++) {\\n            char cur = word.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) { // null if \\'word\\' is way too long or its prefix doesn\\'t appear in the Trie\\n                return false;\\n            }\\n            \\n            parent = child; // Navigate to next level\\n        }\\n        \\n        return parent.isEndOfWord;\\n    }\\n    \\n    /** Returns true if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) { // Assume that empty string is a valid prefix\\n        if (prefix == null) {\\n            return false;\\n        }\\n        \\n        TrieNode parent = root;\\n        for (int i = 0; i < prefix.length(); i++) {\\n            char cur = prefix.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) { // null if \\'prefix\\' is way too long or its prefix doesn\\'t appear in the Trie\\n                return false;\\n            }\\n            \\n            parent = child; // Navigate to next level\\n        }\\n        \\n        return true;\\n    }\\n    \\n    /** Deletes a word from the trie if present, and return true if the word is deleted successfully. */\\n    public boolean delete(String word) {\\n        if (word == null || word.length() == 0) {\\n            return false;\\n        }\\n        \\n        // All nodes below \\'deleteBelow\\' and on the path starting with \\'deleteChar\\' (including itself) will be deleted if needed\\n        TrieNode deleteBelow = null;\\n        char deleteChar = \\'\\\\0\\';\\n        \\n        // Search to ensure word is present\\n        TrieNode parent = root;\\n        for (int i = 0; i < word.length(); i++) {\\n            char cur = word.charAt(i);\\n            \\n            TrieNode child = parent.children.get(cur); // Check if having a TrieNode associated with \\'cur\\'\\n            if (child == null) { // null if \\'word\\' is way too long or its prefix doesn\\'t appear in the Trie\\n                return false;\\n            }\\n            \\n            if (parent.children.size() > 1 || parent.isEndOfWord) { // Update \\'deleteBelow\\' and \\'deleteChar\\'\\n                deleteBelow = parent;\\n                deleteChar = cur;\\n            }\\n            \\n            parent = child;\\n        }\\n        \\n        if (!parent.isEndOfWord) { // word isn\\'t in trie\\n            return false;\\n        }\\n        \\n        if (parent.children.isEmpty()) {\\n            deleteBelow.children.remove(deleteChar);\\n        } else {\\n            parent.isEndOfWord = false; // Delete word by mark it as not the end of a word\\n        }\\n        \\n        return true;\\n    }\\n    \\n    private class TrieNode {\\n        boolean isEndOfWord;\\n        Map<Character, TrieNode> children;\\n        \\n        TrieNode(boolean isEndOfWord) {\\n            this.isEndOfWord = isEndOfWord;\\n            this.children = new HashMap<>();\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58887,
                "title": "python-each-function-only-one-line",
                "content": "Got this cool idea from this post. @severb \\nhttps://discuss.leetcode.com/topic/14216/tree-solutions-18-20-lines/5\\n\\n```\\ndef _trie():\\n    return defaultdict(_trie)\\n\\n\\nclass Trie(object):                                                              \\n                                                                                 \\n    def __init__(self):                                                          \\n        self.trie = _trie()                                                      \\n                                                                                 \\n    def insert(self, word):                                                      \\n        self._insert(word, self.trie)                                            \\n                                                                                 \\n    def _insert(self, word, trie):                                               \\n        self._insert(word[1:], trie[word[0]]) if word else trie['$']             \\n                                                                                 \\n    def search(self, word):                                                      \\n        return self._search(self.trie, word)                                     \\n                                                                                 \\n    def _search(self, trie, word, prefix=False):                                 \\n        return True if not word and ('$' in trie or prefix) else self._search(trie[word[0]], word[1:], prefix=prefix) if word and word[0] in trie else False\\n                                                                                 \\n    def startsWith(self, prefix):                                                \\n        return self._search(self.trie, prefix, True)\\n```\\n\\nThanks for @StefanPochmann 's good suggestion as always, the insert and _search function can be rewritten like this.\\n```\\ndef insert(self, word):\\n    reduce(operator.getitem, word + '$', self.trie)\\n\\ndef _search(self, trie, word, prefix=False):                                 \\n    return word[0] in trie and self._search(trie[word[0]], word[1:], prefix) if word else '$' in trie or prefix\\n```",
                "solutionTags": [],
                "code": "```\\ndef _trie():\\n    return defaultdict(_trie)\\n\\n\\nclass Trie(object):                                                              \\n                                                                                 \\n    def __init__(self):                                                          \\n        self.trie = _trie()                                                      \\n                                                                                 \\n    def insert(self, word):                                                      \\n        self._insert(word, self.trie)                                            \\n                                                                                 \\n    def _insert(self, word, trie):                                               \\n        self._insert(word[1:], trie[word[0]]) if word else trie['$']             \\n                                                                                 \\n    def search(self, word):                                                      \\n        return self._search(self.trie, word)                                     \\n                                                                                 \\n    def _search(self, trie, word, prefix=False):                                 \\n        return True if not word and ('$' in trie or prefix) else self._search(trie[word[0]], word[1:], prefix=prefix) if word and word[0] in trie else False\\n                                                                                 \\n    def startsWith(self, prefix):                                                \\n        return self._search(self.trie, prefix, True)\\n```\n```\\ndef insert(self, word):\\n    reduce(operator.getitem, word + '$', self.trie)\\n\\ndef _search(self, trie, word, prefix=False):                                 \\n    return word[0] in trie and self._search(trie[word[0]], word[1:], prefix) if word else '$' in trie or prefix\\n```",
                "codeTag": "Java"
            },
            {
                "id": 59038,
                "title": "c-solution-o-n-time-complexity",
                "content": "    class Trie {\\n        struct TrieNode \\n        {\\n            map<char, TrieNode*>child_table;\\n            int end;\\n            TrieNode(): end(0) {}\\n        };\\n            \\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string s) {\\n            TrieNode *curr = root;\\n            for (int i = 0; i < s.size(); i++)\\n            {\\n                if (curr->child_table.count(s[i]) == 0)\\n                    curr->child_table[s[i]] = new TrieNode();\\n                    \\n                curr = curr->child_table[s[i]];                \\n            }\\n            curr->end = 1;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key) {\\n            return find(key, 1);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            return find(prefix, 0);\\n        }\\n    \\n    private:\\n        TrieNode* root;\\n        bool find(string s, int exact_match)\\n        {\\n            TrieNode *curr = root;\\n            for (int i = 0; i < s.size(); i++)\\n            {\\n                if (curr->child_table.count(s[i]) == 0)\\n                    return false;\\n                else\\n                    curr = curr->child_table[s[i]];\\n            }\\n            \\n            if (exact_match)\\n                return (curr->end) ? true : false;\\n            else\\n                return true;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "    class Trie {\\n        struct TrieNode \\n        {\\n            map<char, TrieNode*>child_table;\\n            int end;\\n            TrieNode(): end(0) {}\\n        };\\n            \\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string s) {\\n            TrieNode *curr = root;\\n            for (int i = 0; i < s.size(); i++)\\n            {\\n                if (curr->child_table.count(s[i]) == 0)\\n                    curr->child_table[s[i]] = new TrieNode();\\n                    \\n                curr = curr->child_table[s[i]];                \\n            }\\n            curr->end = 1;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key) {\\n            return find(key, 1);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            return find(prefix, 0);\\n        }\\n    \\n    private:\\n        TrieNode* root;\\n        bool find(string s, int exact_match)\\n        {\\n            TrieNode *curr = root;\\n            for (int i = 0; i < s.size(); i++)\\n            {\\n                if (curr->child_table.count(s[i]) == 0)\\n                    return false;\\n                else\\n                    curr = curr->child_table[s[i]];\\n            }\\n            \\n            if (exact_match)\\n                return (curr->end) ? true : false;\\n            else\\n                return true;\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 3305777,
                "title": "explained-with-image-example-easy-to-understand",
                "content": "![image](https://assets.leetcode.com/users/images/5d3992fd-1ad8-421c-8d19-f20bfb66b81a_1679014647.6431518.jpeg)\\n\\n### CODE HAVING SOME DUPLICATION IN \\'SEARCH\\' AND \\'STARTSWITH\\' FUNCTION \\uD83D\\uDC47\\n```\\nclass Node{\\n    public : \\n    vector<Node*>v = vector<Node*>(26, NULL);\\n    bool isEnd = false;\\n};\\nclass Trie {\\npublic:\\n    Node* root;\\n    Trie() { root = new Node(); }\\n    //=====================================================================\\n    void insert(string word) \\n    {\\n        //DON\\'T MODIFY ROOT\\n        Node* currNode = root; //temporary pointer (currNode) for traversal\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) \\n                currNode->v[chIdx] = new Node();\\n            currNode = currNode->v[chIdx];\\n        }\\n        currNode->isEnd = true;\\n    }\\n    //============================================================================\\n    bool search(string word) \\n    {\\n        Node* currNode = root;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) return false;\\n            currNode = currNode->v[chIdx];\\n        }\\n        return (currNode->isEnd);\\n    }\\n    //=================================================================================\\n    bool startsWith(string prefix) \\n    {\\n        Node* currNode = root;\\n        for (int i = 0; i < prefix.size(); i++)\\n        {\\n            int chIdx = prefix[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) return false;\\n            currNode = currNode->v[chIdx];\\n        }\\n        return true;\\n    }\\n};\\n```\\n//========================================================================================================\\n### CODE HAVING NO DUPLICATION\\uD83D\\uDC47\\n```\\nclass Node{\\n    public : \\n    vector<Node*>v = vector<Node*>(26, NULL);\\n    bool isEnd = false;\\n};\\nclass Trie {\\npublic:\\n    Node* root;\\n    Trie() { root = new Node(); }\\n    //=====================================================================\\n    void insert(string word) \\n    {\\n        //DON\\'T MODIFY ROOT\\n        Node* currNode = root; //temporary pointer (currNode) for traversal\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) \\n                currNode->v[chIdx] = new Node();\\n            currNode = currNode->v[chIdx];\\n        }\\n        currNode->isEnd = true;\\n    }\\n    //============================================================================\\n    Node* getPrefixEndNode(string& word) \\n    {\\n        Node* currNode = root;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) return NULL;\\n            currNode = currNode->v[chIdx];\\n        }\\n        return currNode;\\n    }\\n    //================================================================================\\n    bool search(string word) \\n    {\\n        Node* prefixEndNode = getPrefixEndNode(word);\\n        if (prefixEndNode == NULL) return false;\\n        return (prefixEndNode->isEnd);\\n    }\\n    //=================================================================================\\n    bool startsWith(string prefix) \\n    {\\n        Node* prefixEndNode = getPrefixEndNode(prefix);\\n        if (prefixEndNode == NULL) return false;\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Trie"
                ],
                "code": "```\\nclass Node{\\n    public : \\n    vector<Node*>v = vector<Node*>(26, NULL);\\n    bool isEnd = false;\\n};\\nclass Trie {\\npublic:\\n    Node* root;\\n    Trie() { root = new Node(); }\\n    //=====================================================================\\n    void insert(string word) \\n    {\\n        //DON\\'T MODIFY ROOT\\n        Node* currNode = root; //temporary pointer (currNode) for traversal\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) \\n                currNode->v[chIdx] = new Node();\\n            currNode = currNode->v[chIdx];\\n        }\\n        currNode->isEnd = true;\\n    }\\n    //============================================================================\\n    bool search(string word) \\n    {\\n        Node* currNode = root;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) return false;\\n            currNode = currNode->v[chIdx];\\n        }\\n        return (currNode->isEnd);\\n    }\\n    //=================================================================================\\n    bool startsWith(string prefix) \\n    {\\n        Node* currNode = root;\\n        for (int i = 0; i < prefix.size(); i++)\\n        {\\n            int chIdx = prefix[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) return false;\\n            currNode = currNode->v[chIdx];\\n        }\\n        return true;\\n    }\\n};\\n```\n```\\nclass Node{\\n    public : \\n    vector<Node*>v = vector<Node*>(26, NULL);\\n    bool isEnd = false;\\n};\\nclass Trie {\\npublic:\\n    Node* root;\\n    Trie() { root = new Node(); }\\n    //=====================================================================\\n    void insert(string word) \\n    {\\n        //DON\\'T MODIFY ROOT\\n        Node* currNode = root; //temporary pointer (currNode) for traversal\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) \\n                currNode->v[chIdx] = new Node();\\n            currNode = currNode->v[chIdx];\\n        }\\n        currNode->isEnd = true;\\n    }\\n    //============================================================================\\n    Node* getPrefixEndNode(string& word) \\n    {\\n        Node* currNode = root;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            int chIdx = word[i] - \\'a\\';\\n            if (currNode->v[chIdx] == NULL) return NULL;\\n            currNode = currNode->v[chIdx];\\n        }\\n        return currNode;\\n    }\\n    //================================================================================\\n    bool search(string word) \\n    {\\n        Node* prefixEndNode = getPrefixEndNode(word);\\n        if (prefixEndNode == NULL) return false;\\n        return (prefixEndNode->isEnd);\\n    }\\n    //=================================================================================\\n    bool startsWith(string prefix) \\n    {\\n        Node* prefixEndNode = getPrefixEndNode(prefix);\\n        if (prefixEndNode == NULL) return false;\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2067181,
                "title": "clean-concise-python-solution-with-comments-easy-to-understand",
                "content": "```\\n\\nclass TrieNode:\\n    # creating constructor for TrieNode and assigning attributes to TrieNode\\n    def __init__(self):\\n        self.children = {}       # storing children in hashset instead of list to have search in constant time\\n        self.endOfWord = False   # by default saying that current node is not the end of word \\n\\n        \\nclass Trie:\\n    \\n    def __init__(self):\\n        self.root = TrieNode()                 # the root of trie with null value\\n        \\n    def insert(self, word: str) -> None:\\n        cur = self.root                        # starting cur pointer from the main root\\n        for c in word:                         # search for each letter of word\\n            if c not in cur.children:          # current letter \\'c\\' not in children hashmap\\n                cur.children[c] = TrieNode()   # then create new trie node with key \\'c\\' and value Null \\n            cur = cur.children[c]              # shift the cur pointer to the \\'c\\' child\\n        cur.endOfWord = True                   # mark the current not as end of the word\\n\\n    def search(self, word: str) -> bool:\\n        cur = self.root\\n        for c in word:\\n            if c not in cur.children:          # there if no children in hashmap with key \\'c\\'\\n                return False                   # the word not present in trie\\n            cur = cur.children[c]              # shift the cur pointer to the \\'c\\' child\\n        return cur.endOfWord                   # check if actual word ends here or may be the actual word is longer than given word\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        cur = self.root\\n        for c in prefix:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return True                            # all the letters of prefix has been checked so prefix is present\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Trie"
                ],
                "code": "```\\n\\nclass TrieNode:\\n    # creating constructor for TrieNode and assigning attributes to TrieNode\\n    def __init__(self):\\n        self.children = {}       # storing children in hashset instead of list to have search in constant time\\n        self.endOfWord = False   # by default saying that current node is not the end of word \\n\\n        \\nclass Trie:\\n    \\n    def __init__(self):\\n        self.root = TrieNode()                 # the root of trie with null value\\n        \\n    def insert(self, word: str) -> None:\\n        cur = self.root                        # starting cur pointer from the main root\\n        for c in word:                         # search for each letter of word\\n            if c not in cur.children:          # current letter \\'c\\' not in children hashmap\\n                cur.children[c] = TrieNode()   # then create new trie node with key \\'c\\' and value Null \\n            cur = cur.children[c]              # shift the cur pointer to the \\'c\\' child\\n        cur.endOfWord = True                   # mark the current not as end of the word\\n\\n    def search(self, word: str) -> bool:\\n        cur = self.root\\n        for c in word:\\n            if c not in cur.children:          # there if no children in hashmap with key \\'c\\'\\n                return False                   # the word not present in trie\\n            cur = cur.children[c]              # shift the cur pointer to the \\'c\\' child\\n        return cur.endOfWord                   # check if actual word ends here or may be the actual word is longer than given word\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        cur = self.root\\n        for c in prefix:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return True                            # all the letters of prefix has been checked so prefix is present\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1899190,
                "title": "typescript-solution",
                "content": "\\n```\\nclass TrieNode {\\n    children: Map<string, TrieNode>;\\n    isEnd: boolean;\\n\\n    constructor() {\\n        this.children = new Map<string, TrieNode>();\\n        this.isEnd = false;\\n    }\\n}\\n\\nclass Trie {\\n    root: TrieNode;\\n\\n    constructor() {\\n        this.root = new TrieNode();\\n    }\\n\\n    insert(word: string): void {\\n        let currNode = this.root;\\n        for(const char of word){\\n            if(!currNode.children.has(char)){\\n                currNode.children.set(char, new TrieNode());\\n            }\\n            currNode = currNode.children.get(char);\\n        }\\n        currNode.isEnd = true;\\n    }\\n\\n    search(word: string): boolean {\\n        let currNode = this.root;\\n        for(const char of word){\\n            if(!currNode.children.has(char)){\\n                return false;\\n            }\\n            currNode = currNode.children.get(char);\\n        }\\n        return currNode.isEnd;\\n    }\\n\\n    startsWith(prefix: string): boolean {\\n        let currNode = this.root;\\n        for(const char of prefix){\\n            if(!currNode.children.has(char)){\\n\\t\\t\\t\\treturn false;\\n            }\\n\\t\\t\\tcurrNode = currNode.children.get(char);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nclass TrieNode {\\n    children: Map<string, TrieNode>;\\n    isEnd: boolean;\\n\\n    constructor() {\\n        this.children = new Map<string, TrieNode>();\\n        this.isEnd = false;\\n    }\\n}\\n\\nclass Trie {\\n    root: TrieNode;\\n\\n    constructor() {\\n        this.root = new TrieNode();\\n    }\\n\\n    insert(word: string): void {\\n        let currNode = this.root;\\n        for(const char of word){\\n            if(!currNode.children.has(char)){\\n                currNode.children.set(char, new TrieNode());\\n            }\\n            currNode = currNode.children.get(char);\\n        }\\n        currNode.isEnd = true;\\n    }\\n\\n    search(word: string): boolean {\\n        let currNode = this.root;\\n        for(const char of word){\\n            if(!currNode.children.has(char)){\\n                return false;\\n            }\\n            currNode = currNode.children.get(char);\\n        }\\n        return currNode.isEnd;\\n    }\\n\\n    startsWith(prefix: string): boolean {\\n        let currNode = this.root;\\n        for(const char of prefix){\\n            if(!currNode.children.has(char)){\\n\\t\\t\\t\\treturn false;\\n            }\\n\\t\\t\\tcurrNode = currNode.children.get(char);\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 631419,
                "title": "python-sol-by-dictionary-80-w-visualization",
                "content": "Python sol by dictionary.\\n\\n---\\n\\n**Hint**:\\n\\nUse hierarchy dictionary to implement trie.\\n\\nHere, we use \\'@\\' as ending symbol to distinguish full match and start-with.\\n\\n---\\n\\n**Illustration and Visualization**:\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1589453243.png)\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1589453266.png)\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1589453280.png)\\n\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1589453293.png)\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1589453307.png)\\n\\n---\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1589453392.png)\\n\\n---\\n\\n**Implementation** by dictionary:\\n\\n\\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.trie = {}\\n        \\n        \\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        \\n        \\n        # update new word into trie\\n        table = self.trie\\n        for char in word:\\n\\n            if char not in table:\\n                table[char] = {}\\n\\n            table = table[char]\\n        \\n        # use \\'@\\' as ending symbol\\n        table[\\'@\\'] = {}\\n        \\n        \\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        \\n        # search word in trie\\n        table = self.trie\\n        \\n        for char in word:\\n            table = table.get(char, None)\\n            \\n            if table is None:\\n                return False\\n        \\n        # use ending symbol to judge whether current word exist in our trie or not\\n        return ( \\'@\\' in table )\\n        \\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        \\n        # check the prefix exist in trie or not\\n        table = self.trie\\n        \\n        for char in prefix:\\n            table = table.get(char, None)\\n            \\n            if table is None:\\n                return False\\n        \\n        return True\\n\\n\\n```\\n\\n---\\n\\nReference:\\n\\n[1] [Wiki: Trie ( data structure )](https://en.wikipedia.org/wiki/Trie)\\n\\n[2] [Python official docs about dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Trie"
                ],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.trie = {}\\n        \\n        \\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        \\n        \\n        # update new word into trie\\n        table = self.trie\\n        for char in word:\\n\\n            if char not in table:\\n                table[char] = {}\\n\\n            table = table[char]\\n        \\n        # use \\'@\\' as ending symbol\\n        table[\\'@\\'] = {}\\n        \\n        \\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        \\n        # search word in trie\\n        table = self.trie\\n        \\n        for char in word:\\n            table = table.get(char, None)\\n            \\n            if table is None:\\n                return False\\n        \\n        # use ending symbol to judge whether current word exist in our trie or not\\n        return ( \\'@\\' in table )\\n        \\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        \\n        # check the prefix exist in trie or not\\n        table = self.trie\\n        \\n        for char in prefix:\\n            table = table.get(char, None)\\n            \\n            if table is None:\\n                return False\\n        \\n        return True\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 59005,
                "title": "c-c-simple-solution",
                "content": "C++ version\\n\\n    class TrieNode {\\n    public:\\n        bool HasValue;\\n        TrieNode** Children;\\n        // Initialize your data structure here.\\n        TrieNode() {\\n            Children = new TrieNode*[26]();\\n            HasValue = false;\\n        }\\n        \\n        ~TrieNode(){\\n            for (int i = 0; i < 26; i++)\\n            {\\n                delete Children[i]; // delete NULL is safe, a no-op.\\n            }\\n            delete[] Children;\\n        }    \\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            getNode(word, true)->HasValue = true;         \\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n           TrieNode* pNode = getNode(word, false);\\n            return (pNode != NULL && pNode->HasValue);  \\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            return (getNode(prefix, false) != NULL); \\n        }\\n    \\n    private:\\n        TrieNode* root;\\n        TrieNode* getNode(string word, bool create){\\n            TrieNode* pNode = root;\\n            int id;\\n            int n = word.size();\\n            for (int i = 0; i <n; ++i)\\n            {\\n              id = word[i] - 'a';\\n              if (pNode->Children[id] == NULL){\\n                  if(create)\\n                    pNode->Children[id] = new TrieNode();\\n                  else\\n                    return NULL;\\n              }\\n              pNode = pNode->Children[id];\\n            }\\n    \\n            return pNode;        \\n        }   \\n    };\\n\\nC# version\\n\\n    class TrieNode {\\n        public bool HasValue;\\n        public TrieNode[] Children;\\n        // Initialize your data structure here.\\n        public TrieNode() {\\n            Children = new TrieNode[26];\\n            HasValue = false;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n        \\n        private TrieNode GetNode(string word, bool create)\\n        {\\n            TrieNode node = root;\\n            int id;\\n            foreach (char cr in word)\\n            {\\n              id = cr - 'a';\\n              if (node.Children[id] == null){\\n                  if(create)\\n                    node.Children[id] = new TrieNode();\\n                  else\\n                    return null; \\n              }\\n                \\n              node = node.Children[id];\\n            }\\n    \\n            return node;\\n        }    \\n    \\n        // Inserts a word into the trie.\\n        public void Insert(String word) {\\n            GetNode(word, true).HasValue = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public bool Search(string word) {\\n            var node = GetNode(word, false);\\n            return (node != null && node.HasValue);        \\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public bool StartsWith(string word) {\\n            return GetNode(word, false) != null;        \\n        }\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "C++ version\\n\\n    class TrieNode {\\n    public:\\n        bool HasValue;\\n        TrieNode** Children;\\n        // Initialize your data structure here.\\n        TrieNode() {\\n            Children = new TrieNode*[26]();\\n            HasValue = false;\\n        }\\n        \\n        ~TrieNode(){\\n            for (int i = 0; i < 26; i++)\\n            {\\n                delete Children[i]; // delete NULL is safe, a no-op.\\n            }\\n            delete[] Children;\\n        }    \\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            getNode(word, true)->HasValue = true;         \\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n           TrieNode* pNode = getNode(word, false);\\n            return (pNode != NULL && pNode->HasValue);  \\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            return (getNode(prefix, false) != NULL); \\n        }\\n    \\n    private:\\n        TrieNode* root;\\n        TrieNode* getNode(string word, bool create){\\n            TrieNode* pNode = root;\\n            int id;\\n            int n = word.size();\\n            for (int i = 0; i <n; ++i)\\n            {\\n              id = word[i] - 'a';\\n              if (pNode->Children[id] == NULL){\\n                  if(create)\\n                    pNode->Children[id] = new TrieNode();\\n                  else\\n                    return NULL;\\n              }\\n              pNode = pNode->Children[id];\\n            }\\n    \\n            return pNode;        \\n        }   \\n    };\\n\\nC# version\\n\\n    class TrieNode {\\n        public bool HasValue;\\n        public TrieNode[] Children;\\n        // Initialize your data structure here.\\n        public TrieNode() {\\n            Children = new TrieNode[26];\\n            HasValue = false;\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n        \\n        private TrieNode GetNode(string word, bool create)\\n        {\\n            TrieNode node = root;\\n            int id;\\n            foreach (char cr in word)\\n            {\\n              id = cr - 'a';\\n              if (node.Children[id] == null){\\n                  if(create)\\n                    node.Children[id] = new TrieNode();\\n                  else\\n                    return null; \\n              }\\n                \\n              node = node.Children[id];\\n            }\\n    \\n            return node;\\n        }    \\n    \\n        // Inserts a word into the trie.\\n        public void Insert(String word) {\\n            GetNode(word, true).HasValue = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public bool Search(string word) {\\n            var node = GetNode(word, false);\\n            return (node != null && node.HasValue);        \\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public bool StartsWith(string word) {\\n            return GetNode(word, false) != null;        \\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3305884,
                "title": "trie-basics-explained-video-java-c-python",
                "content": "# What\\'s a Trie\\nJust like in a binary tree, instead of having 2 children, trie has 26 children. The idea is each child corresponds to each letter in alphabet, eg child1 --> a child2 -->b \\nInstead of individual 26 children we store them in an array. \\n![image](https://assets.leetcode.com/users/images/b4a6e834-e984-4b46-bac8-10b9a5c5f07e_1679015891.6162877.jpeg)\\n\\n# How to store words in this?\\nStore act:  All the 26 children will be null Initially\\nthe first letter is \\'a\\' -->child[0] so create a new trie at child[0]\\nthe second letter is \\'c\\' --> child[2] so create a new trie at child[2] (at second level)\\nsimilarly for t.\\n\\n\\n# But why All this circus to store act? Can\\'t we use String or HashSet?\\nThe point is when we have large number of words the words are closer to each other eg: to store actor we just have to create 2 new TrieNodes unlike String where new word had to be created.\\n\\n# How to search and insert\\n![image](https://assets.leetcode.com/users/images/1b3fe26b-8380-4504-a640-cf9bfeec5f31_1679016933.6068597.jpeg)\\n\\n\\nAn additional paramter isEnd is required because in above example though we haven\\'t stored acto, we can find the word. To avoid this TrieNode will have a new parameter i.e boolean end which marks the end of the word. \\n\\nSearch for act: child[0] is not null indicating a is present, child[2] not null and child[20]--> not null and have end = true so we have act\\n\\nSimilarly for startswith, but the only difference is end can be both true or false.\\n\\n\\n\\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8Dkzz9YbEQQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\\n\\n\\n```\\nclass Trie {\\n    public TrieNode root;\\n    \\n    public class TrieNode{\\n        TrieNode [] arr;\\n        boolean end;\\n        TrieNode(){\\n           arr = new TrieNode[26];\\n            this.end = false;\\n        }\\n        \\n    }\\n    \\n    Trie(){\\n        this.root = new TrieNode();\\n    }\\n    \\n    public void insert(String s) {\\n        TrieNode curr = root;\\n        int c;\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i)-\\'a\\';\\n            if(curr.arr[c]==null){\\n                curr.arr[c] = new TrieNode();\\n            }\\n            curr = curr.arr[c];\\n        }\\n        curr.end = true;\\n        \\n    }\\n    \\n    public boolean search(String s) {\\n        TrieNode curr = root;\\n        int c;\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i)-\\'a\\';\\n            if(curr.arr[c]==null){\\n                return false;\\n            }\\n            curr = curr.arr[c];\\n        }\\n        return curr.end;\\n    }\\n    \\n    public boolean startsWith(String s) {\\n        TrieNode curr = root;\\n        int c;\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i)-\\'a\\';\\n            if(curr.arr[c]==null){\\n                return false;\\n            }\\n            curr = curr.arr[c];\\n        }\\n        return true;\\n    }\\n}\\n```\\n\\n```\\n#include <iostream>\\n#include <cstring>\\n\\nusing namespace std;\\n\\nclass Trie {\\nprivate:\\n    struct TrieNode {\\n        TrieNode* arr[26];\\n        bool end;\\n        \\n        TrieNode() {\\n            memset(arr, 0, sizeof(arr));\\n            end = false;\\n        }\\n    };\\n    \\n    TrieNode* root;\\n    \\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string s) {\\n        TrieNode* curr = root;\\n        int c;\\n        for(int i = 0; i < s.length(); i++) {\\n            c = s[i] - \\'a\\';\\n            if(curr->arr[c] == NULL) {\\n                curr->arr[c] = new TrieNode();\\n            }\\n            curr = curr->arr[c];\\n        }\\n        curr->end = true;\\n    }\\n    \\n    bool search(string s) {\\n        TrieNode* curr = root;\\n        int c;\\n        for(int i = 0; i < s.length(); i++) {\\n            c = s[i] - \\'a\\';\\n            if(curr->arr[c] == NULL) {\\n                return false;\\n            }\\n            curr = curr->arr[c];\\n        }\\n        return curr->end;\\n    }\\n    \\n    bool startsWith(string s) {\\n        TrieNode* curr = root;\\n        int c;\\n        for(int i = 0; i < s.length(); i++) {\\n            c = s[i] - \\'a\\';\\n            if(curr->arr[c] == NULL) {\\n                return false;\\n            }\\n            curr = curr->arr[c];\\n        }\\n        return true;\\n    }\\n};\\n\\n```\\n\\n\\n```\\n\\nclass Trie:\\n    class TrieNode:\\n        def __init__(self):\\n            self.arr = [None] * 26\\n            self.end = False\\n    \\n    def __init__(self):\\n        self.root = self.TrieNode()\\n    \\n    def insert(self, s: str) -> None:\\n        curr = self.root\\n        for c in s:\\n            idx = ord(c) - ord(\\'a\\')\\n            if curr.arr[idx] is None:\\n                curr.arr[idx] = self.TrieNode()\\n            curr = curr.arr[idx]\\n        curr.end = True\\n    \\n    def search(self, s: str) -> bool:\\n        curr = self.root\\n        for c in s:\\n            idx = ord(c) - ord(\\'a\\')\\n            if curr.arr[idx] is None:\\n                return False\\n            curr = curr.arr[idx]\\n        return curr.end\\n    \\n    def startsWith(self, s: str) -> bool:\\n        curr = self.root\\n        for c in s:\\n            idx = ord(c) - ord(\\'a\\')\\n            if curr.arr[idx] is None:\\n                return False\\n            curr = curr.arr[idx]\\n        return True\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C"
                ],
                "code": "```\\nclass Trie {\\n    public TrieNode root;\\n    \\n    public class TrieNode{\\n        TrieNode [] arr;\\n        boolean end;\\n        TrieNode(){\\n           arr = new TrieNode[26];\\n            this.end = false;\\n        }\\n        \\n    }\\n    \\n    Trie(){\\n        this.root = new TrieNode();\\n    }\\n    \\n    public void insert(String s) {\\n        TrieNode curr = root;\\n        int c;\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i)-\\'a\\';\\n            if(curr.arr[c]==null){\\n                curr.arr[c] = new TrieNode();\\n            }\\n            curr = curr.arr[c];\\n        }\\n        curr.end = true;\\n        \\n    }\\n    \\n    public boolean search(String s) {\\n        TrieNode curr = root;\\n        int c;\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i)-\\'a\\';\\n            if(curr.arr[c]==null){\\n                return false;\\n            }\\n            curr = curr.arr[c];\\n        }\\n        return curr.end;\\n    }\\n    \\n    public boolean startsWith(String s) {\\n        TrieNode curr = root;\\n        int c;\\n        for(int i = 0;i<s.length();i++){\\n            c = s.charAt(i)-\\'a\\';\\n            if(curr.arr[c]==null){\\n                return false;\\n            }\\n            curr = curr.arr[c];\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\n#include <iostream>\\n#include <cstring>\\n\\nusing namespace std;\\n\\nclass Trie {\\nprivate:\\n    struct TrieNode {\\n        TrieNode* arr[26];\\n        bool end;\\n        \\n        TrieNode() {\\n            memset(arr, 0, sizeof(arr));\\n            end = false;\\n        }\\n    };\\n    \\n    TrieNode* root;\\n    \\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string s) {\\n        TrieNode* curr = root;\\n        int c;\\n        for(int i = 0; i < s.length(); i++) {\\n            c = s[i] - \\'a\\';\\n            if(curr->arr[c] == NULL) {\\n                curr->arr[c] = new TrieNode();\\n            }\\n            curr = curr->arr[c];\\n        }\\n        curr->end = true;\\n    }\\n    \\n    bool search(string s) {\\n        TrieNode* curr = root;\\n        int c;\\n        for(int i = 0; i < s.length(); i++) {\\n            c = s[i] - \\'a\\';\\n            if(curr->arr[c] == NULL) {\\n                return false;\\n            }\\n            curr = curr->arr[c];\\n        }\\n        return curr->end;\\n    }\\n    \\n    bool startsWith(string s) {\\n        TrieNode* curr = root;\\n        int c;\\n        for(int i = 0; i < s.length(); i++) {\\n            c = s[i] - \\'a\\';\\n            if(curr->arr[c] == NULL) {\\n                return false;\\n            }\\n            curr = curr->arr[c];\\n        }\\n        return true;\\n    }\\n};\\n\\n```\n```\\n\\nclass Trie:\\n    class TrieNode:\\n        def __init__(self):\\n            self.arr = [None] * 26\\n            self.end = False\\n    \\n    def __init__(self):\\n        self.root = self.TrieNode()\\n    \\n    def insert(self, s: str) -> None:\\n        curr = self.root\\n        for c in s:\\n            idx = ord(c) - ord(\\'a\\')\\n            if curr.arr[idx] is None:\\n                curr.arr[idx] = self.TrieNode()\\n            curr = curr.arr[idx]\\n        curr.end = True\\n    \\n    def search(self, s: str) -> bool:\\n        curr = self.root\\n        for c in s:\\n            idx = ord(c) - ord(\\'a\\')\\n            if curr.arr[idx] is None:\\n                return False\\n            curr = curr.arr[idx]\\n        return curr.end\\n    \\n    def startsWith(self, s: str) -> bool:\\n        curr = self.root\\n        for c in s:\\n            idx = ord(c) - ord(\\'a\\')\\n            if curr.arr[idx] is None:\\n                return False\\n            curr = curr.arr[idx]\\n        return True\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2778112,
                "title": "c-solutions",
                "content": "```\\nclass TrieNode\\n{\\npublic:\\n    TrieNode *next[26];\\n    bool is_word;\\n    \\n    // Initialize your data structure here.\\n    TrieNode(bool b = false)\\n    {\\n        memset(next, 0, sizeof(next));\\n        is_word = b;\\n    }\\n};\\n\\nclass Trie\\n{\\n    TrieNode *root;\\npublic:\\n    Trie()\\n    {\\n        root = new TrieNode();\\n    }\\n\\n    // Inserts a word into the trie.\\n    void insert(string s)\\n    {\\n        TrieNode *p = root;\\n        for(int i = 0; i < s.size(); ++ i)\\n        {\\n            if(p -> next[s[i] - \\'a\\'] == NULL)\\n                p -> next[s[i] - \\'a\\'] = new TrieNode();\\n            p = p -> next[s[i] - \\'a\\'];\\n        }\\n        p -> is_word = true;\\n    }\\n\\n    // Returns if the word is in the trie.\\n    bool search(string key)\\n    {\\n        TrieNode *p = find(key);\\n        return p != NULL && p -> is_word;\\n    }\\n\\n    // Returns if there is any word in the trie\\n    // that starts with the given prefix.\\n    bool startsWith(string prefix)\\n    {\\n        return find(prefix) != NULL;\\n    }\\n\\nprivate:\\n    TrieNode* find(string key)\\n    {\\n        TrieNode *p = root;\\n        for(int i = 0; i < key.size() && p != NULL; ++ i)\\n            p = p -> next[key[i] - \\'a\\'];\\n        return p;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass TrieNode\\n{\\npublic:\\n    TrieNode *next[26];\\n    bool is_word;\\n    \\n    // Initialize your data structure here.\\n    TrieNode(bool b = false)\\n    {\\n        memset(next, 0, sizeof(next));\\n        is_word = b;\\n    }\\n};\\n\\nclass Trie\\n{\\n    TrieNode *root;\\npublic:\\n    Trie()\\n    {\\n        root = new TrieNode();\\n    }\\n\\n    // Inserts a word into the trie.\\n    void insert(string s)\\n    {\\n        TrieNode *p = root;\\n        for(int i = 0; i < s.size(); ++ i)\\n        {\\n            if(p -> next[s[i] - \\'a\\'] == NULL)\\n                p -> next[s[i] - \\'a\\'] = new TrieNode();\\n            p = p -> next[s[i] - \\'a\\'];\\n        }\\n        p -> is_word = true;\\n    }\\n\\n    // Returns if the word is in the trie.\\n    bool search(string key)\\n    {\\n        TrieNode *p = find(key);\\n        return p != NULL && p -> is_word;\\n    }\\n\\n    // Returns if there is any word in the trie\\n    // that starts with the given prefix.\\n    bool startsWith(string prefix)\\n    {\\n        return find(prefix) != NULL;\\n    }\\n\\nprivate:\\n    TrieNode* find(string key)\\n    {\\n        TrieNode *p = root;\\n        for(int i = 0; i < key.size() && p != NULL; ++ i)\\n            p = p -> next[key[i] - \\'a\\'];\\n        return p;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1208551,
                "title": "easy-c-solution-beats-98-using-array",
                "content": "```\\n\\nclass TrieNode{\\n    public:\\n        bool isEnd;\\n        TrieNode* children[26];\\n        TrieNode()\\n        {\\n            isEnd = false;\\n            for(int i=0; i<26; i++)\\n            {\\n                children[i] = NULL;\\n            }\\n        }\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    TrieNode* root;\\n    Trie() {\\n        \\n        root = new TrieNode();\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        \\n        int n = word.size();\\n        TrieNode* parent = root;\\n        for(int i=0; i<n; i++)\\n        {\\n            int val = word[i]-\\'a\\';\\n            if(parent->children[val]==NULL)\\n            {\\n                parent->children[val] = new TrieNode();\\n            }\\n            parent = parent->children[val];\\n        }\\n        parent->isEnd = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        \\n        int n = word.size();\\n        TrieNode* parent = root;\\n        for(int i=0; i<n; i++)\\n        {\\n            int val = word[i]-\\'a\\';\\n            if(parent->children[val]==NULL)\\n            {\\n                return false;\\n            }\\n            parent = parent->children[val];\\n        }\\n        return parent->isEnd;\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        \\n        int n = prefix.size();\\n        TrieNode* parent = root;\\n        for(int i=0; i<n; i++)\\n        {\\n            int val = prefix[i]-\\'a\\';\\n            if(parent->children[val]==NULL)\\n            {\\n                return false;\\n            }\\n            parent = parent->children[val];\\n        }\\n        return true;\\n        \\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Trie"
                ],
                "code": "```\\n\\nclass TrieNode{\\n    public:\\n        bool isEnd;\\n        TrieNode* children[26];\\n        TrieNode()\\n        {\\n            isEnd = false;\\n            for(int i=0; i<26; i++)\\n            {\\n                children[i] = NULL;\\n            }\\n        }\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    TrieNode* root;\\n    Trie() {\\n        \\n        root = new TrieNode();\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        \\n        int n = word.size();\\n        TrieNode* parent = root;\\n        for(int i=0; i<n; i++)\\n        {\\n            int val = word[i]-\\'a\\';\\n            if(parent->children[val]==NULL)\\n            {\\n                parent->children[val] = new TrieNode();\\n            }\\n            parent = parent->children[val];\\n        }\\n        parent->isEnd = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        \\n        int n = word.size();\\n        TrieNode* parent = root;\\n        for(int i=0; i<n; i++)\\n        {\\n            int val = word[i]-\\'a\\';\\n            if(parent->children[val]==NULL)\\n            {\\n                return false;\\n            }\\n            parent = parent->children[val];\\n        }\\n        return parent->isEnd;\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        \\n        int n = prefix.size();\\n        TrieNode* parent = root;\\n        for(int i=0; i<n; i++)\\n        {\\n            int val = prefix[i]-\\'a\\';\\n            if(parent->children[val]==NULL)\\n            {\\n                return false;\\n            }\\n            parent = parent->children[val];\\n        }\\n        return true;\\n        \\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 775530,
                "title": "javascript-es6-with-explanation",
                "content": "```\\nclass TrieNode{\\n    constructor(val = null){\\n        this.val = val; //cur node\\'s val\\n        this.children = []; //cur node\\'s children list (all chars)\\n        this.isEnd = false; //check this node is full word\\n    }\\n}\\nclass Trie {\\n    constructor() {\\n        this.root = new TrieNode(); //top root of trie tree\\'s value is null\\n    } \\n    \\n    insert(word) {\\n        let cur = this.root; //each time insert, starting from top root\\n        for (let c of word) {\\n            if (!cur.children[c]) {\\n                cur.children[c] = new TrieNode(c);\\n            }\\n            cur = cur.children[c]; //search children\\'s children  next node/pointer\\n        }\\n        cur.isEnd = true; //finish inserting full word\\n    }\\n    \\n    search(word) {\\n        let cur = this.root; //each time search, starting from top root\\n        for (let c of word) {\\n            if (!cur.children[c]) return false;\\n            else cur = cur.children[c];\\n        }\\n        return cur.isEnd; //check if can find full word, see curNode.isEnd\\n    }\\n    \\n    startsWith(prefix) { //check start with word\\n        let cur = this.root;\\n        for (let c of prefix){\\n            if (!cur.children[c]) return false;\\n            else cur = cur.children[c];\\n        }\\n        return true; //find the prefix word\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass TrieNode{\\n    constructor(val = null){\\n        this.val = val; //cur node\\'s val\\n        this.children = []; //cur node\\'s children list (all chars)\\n        this.isEnd = false; //check this node is full word\\n    }\\n}\\nclass Trie {\\n    constructor() {\\n        this.root = new TrieNode(); //top root of trie tree\\'s value is null\\n    } \\n    \\n    insert(word) {\\n        let cur = this.root; //each time insert, starting from top root\\n        for (let c of word) {\\n            if (!cur.children[c]) {\\n                cur.children[c] = new TrieNode(c);\\n            }\\n            cur = cur.children[c]; //search children\\'s children  next node/pointer\\n        }\\n        cur.isEnd = true; //finish inserting full word\\n    }\\n    \\n    search(word) {\\n        let cur = this.root; //each time search, starting from top root\\n        for (let c of word) {\\n            if (!cur.children[c]) return false;\\n            else cur = cur.children[c];\\n        }\\n        return cur.isEnd; //check if can find full word, see curNode.isEnd\\n    }\\n    \\n    startsWith(prefix) { //check start with word\\n        let cur = this.root;\\n        for (let c of prefix){\\n            if (!cur.children[c]) return false;\\n            else cur = cur.children[c];\\n        }\\n        return true; //find the prefix word\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 412299,
                "title": "python3-solution-with-all-trie-operations-including-finding-all-words-with-some-prefix",
                "content": "```python\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.root = {}\\n        self.end = \"#\"\\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        node = self.root\\n        for c in word:\\n            node = node.setdefault(c, {})\\n        node[self.end] = self.end\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        node = self.root\\n        for c in word:\\n            if c not in node:\\n                return False\\n            node = node[c]\\n        return self.end in node\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        node = self.root\\n        for c in prefix:\\n            if c not in node:\\n                return False\\n            node = node[c]\\n        return True\\n\\n    def all_words(self):\\n\\t\\t\\'\\'\\'\\n\\t\\treturn all the words in the trie\\n\\t\\t\\'\\'\\'\\n        node = self.root\\n        ans = []\\n        self._collect(node, \\'\\', ans)\\n        return ans\\n\\n    def _collect(self, node, path, ans):\\n        for k in node:\\n            if k == self.end:\\n                ans.append(path)\\n                continue\\n            self._collect(node[k], path + k, ans)\\n\\n    def words_with_prefix(self, prefix: str):\\n\\t\\t\\'\\'\\'\\n\\t\\treturn all possible words with common prefix\\n\\t\\t\\'\\'\\'\\n        node = self.root\\n        for c in prefix:\\n            if c not in node:\\n                return []\\n            node = node[c]\\n        ans = []\\n        self._words_with_prefix_helper(node, prefix, ans)\\n        return ans\\n\\n    def _words_with_prefix_helper(self, node, prefix, ans):\\n        for k in node:\\n            if k == self.end:\\n                ans.append(prefix)\\n                continue\\n            self._words_with_prefix_helper(node[k], prefix + k, ans)\\n\\n    def longest_prefix(self, s):\\n\\t\\t\\'\\'\\'\\'\\n\\t\\treturn longest prefix of s in the trie\\n\\t\\t\\'\\'\\'\\n        ans = \\'\\'\\n        if not s:\\n            return ans\\n        node = self.root\\n        for c in s:\\n            if c not in node:\\n                return ans\\n            node = node[c]\\n            ans += c\\n        return ans\\n\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.root = {}\\n        self.end = \"#\"\\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        node = self.root\\n        for c in word:\\n            node = node.setdefault(c, {})\\n        node[self.end] = self.end\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        node = self.root\\n        for c in word:\\n            if c not in node:\\n                return False\\n            node = node[c]\\n        return self.end in node\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        node = self.root\\n        for c in prefix:\\n            if c not in node:\\n                return False\\n            node = node[c]\\n        return True\\n\\n    def all_words(self):\\n\\t\\t\\'\\'\\'\\n\\t\\treturn all the words in the trie\\n\\t\\t\\'\\'\\'\\n        node = self.root\\n        ans = []\\n        self._collect(node, \\'\\', ans)\\n        return ans\\n\\n    def _collect(self, node, path, ans):\\n        for k in node:\\n            if k == self.end:\\n                ans.append(path)\\n                continue\\n            self._collect(node[k], path + k, ans)\\n\\n    def words_with_prefix(self, prefix: str):\\n\\t\\t\\'\\'\\'\\n\\t\\treturn all possible words with common prefix\\n\\t\\t\\'\\'\\'\\n        node = self.root\\n        for c in prefix:\\n            if c not in node:\\n                return []\\n            node = node[c]\\n        ans = []\\n        self._words_with_prefix_helper(node, prefix, ans)\\n        return ans\\n\\n    def _words_with_prefix_helper(self, node, prefix, ans):\\n        for k in node:\\n            if k == self.end:\\n                ans.append(prefix)\\n                continue\\n            self._words_with_prefix_helper(node[k], prefix + k, ans)\\n\\n    def longest_prefix(self, s):\\n\\t\\t\\'\\'\\'\\'\\n\\t\\treturn longest prefix of s in the trie\\n\\t\\t\\'\\'\\'\\n        ans = \\'\\'\\n        if not s:\\n            return ans\\n        node = self.root\\n        for c in s:\\n            if c not in node:\\n                return ans\\n            node = node[c]\\n            ans += c\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 397840,
                "title": "python-solution-with-only-one-class",
                "content": "My solution follows the explanation from the video, [Trie Data Structure (EXPLAINED)](https://www.youtube.com/watch?v=-urNrIAQnNo) on YouTube.  \\nTake a look for more details.\\n\\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.isWord = False\\n        self.children = {}\\n        \\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        node = self\\n        for w in word:\\n            if w not in node.children:\\n                node.children[w] = Trie()\\n            node = node.children[w]\\n        \\n        node.isWord = True\\n        # Mark it as an independent word\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        node = self\\n        for w in word:\\n            if w not in node.children:\\n                return False\\n            node = node.children[w]\\n        \\n        return node.isWord\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        node = self\\n        for w in prefix:\\n            if w not in node.children:\\n                return False\\n            node = node.children[w]\\n        \\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Trie"
                ],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.isWord = False\\n        self.children = {}\\n        \\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        node = self\\n        for w in word:\\n            if w not in node.children:\\n                node.children[w] = Trie()\\n            node = node.children[w]\\n        \\n        node.isWord = True\\n        # Mark it as an independent word\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        node = self\\n        for w in word:\\n            if w not in node.children:\\n                return False\\n            node = node.children[w]\\n        \\n        return node.isWord\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        node = self\\n        for w in prefix:\\n            if w not in node.children:\\n                return False\\n            node = node.children[w]\\n        \\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58870,
                "title": "concise-javascript-solution",
                "content": "```\\nclass Trie {\\n    constructor() {\\n        this.root = {};\\n    }\\n    \\n    insert(word) {\\n        let node = this.root;\\n        for (let i = 0; i < word.length; i++) {\\n            node = node[word[i]] = node[word[i]] || {};\\n            if (i === word.length - 1) node.isTerminal = true;\\n        }\\n    }\\n    \\n    search(word, isPrefix) {\\n        let node = this.root;\\n        for (let c of word) {\\n            if (!node[c]) return false;\\n            node = node[c];\\n        }\\n        return isPrefix || !!node.isTerminal;\\n    }\\n    \\n    startsWith(prefix) {\\n        return this.search(prefix, true);\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass Trie {\\n    constructor() {\\n        this.root = {};\\n    }\\n    \\n    insert(word) {\\n        let node = this.root;\\n        for (let i = 0; i < word.length; i++) {\\n            node = node[word[i]] = node[word[i]] || {};\\n            if (i === word.length - 1) node.isTerminal = true;\\n        }\\n    }\\n    \\n    search(word, isPrefix) {\\n        let node = this.root;\\n        for (let c of word) {\\n            if (!node[c]) return false;\\n            node = node[c];\\n        }\\n        return isPrefix || !!node.isTerminal;\\n    }\\n    \\n    startsWith(prefix) {\\n        return this.search(prefix, true);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58893,
                "title": "c-trienode-solution-clean-code",
                "content": "If you combine the logic for the 3 methods using a helper you can really reduce the code quite a bit.\\n\\n```\\npublic class Trie {\\n\\n    TrieNode root;\\n    \\n    /** Initialize your data structure here. */\\n    public Trie() \\n    {\\n        root = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void Insert(string word) \\n    {\\n        GetEndNode(word, true);\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public bool Search(string word) \\n    {\\n        TrieNode node = GetEndNode(word, false);\\n        return node != null && node.isWord;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public bool StartsWith(string prefix) \\n    {\\n        TrieNode node = GetEndNode(prefix, false);\\n        return node != null;  \\n    }\\n    \\n    public TrieNode GetEndNode(string word, bool insert)\\n    {\\n        TrieNode node = root;\\n        int wordIndex = 0;\\n        while (node != null && wordIndex < word.Length)\\n        {\\n            int nodeIndex = word[wordIndex] - 'a';\\n            if (insert && node.nodes[nodeIndex] == null) node.nodes[nodeIndex] = new TrieNode();\\n            node = node.nodes[nodeIndex];\\n            wordIndex++;\\n        }\\n        \\n        if (insert) node.isWord = true;\\n        return node;\\n    }\\n}\\n\\npublic class TrieNode\\n{\\n    public bool isWord;\\n    public TrieNode[] nodes = new TrieNode[26];\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Trie {\\n\\n    TrieNode root;\\n    \\n    /** Initialize your data structure here. */\\n    public Trie() \\n    {\\n        root = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void Insert(string word) \\n    {\\n        GetEndNode(word, true);\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public bool Search(string word) \\n    {\\n        TrieNode node = GetEndNode(word, false);\\n        return node != null && node.isWord;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public bool StartsWith(string prefix) \\n    {\\n        TrieNode node = GetEndNode(prefix, false);\\n        return node != null;  \\n    }\\n    \\n    public TrieNode GetEndNode(string word, bool insert)\\n    {\\n        TrieNode node = root;\\n        int wordIndex = 0;\\n        while (node != null && wordIndex < word.Length)\\n        {\\n            int nodeIndex = word[wordIndex] - 'a';\\n            if (insert && node.nodes[nodeIndex] == null) node.nodes[nodeIndex] = new TrieNode();\\n            node = node.nodes[nodeIndex];\\n            wordIndex++;\\n        }\\n        \\n        if (insert) node.isWord = true;\\n        return node;\\n    }\\n}\\n\\npublic class TrieNode\\n{\\n    public bool isWord;\\n    public TrieNode[] nodes = new TrieNode[26];\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 59067,
                "title": "two-c-o-n-solutions-array-or-hashtable",
                "content": "Edited: Finally, I solved the MLE problem and now I got two ways to deal with this problem.\\nEditeded: Destructor added.\\n\\nArray:\\n\\n    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode(bool end=false) {\\n            memset(branches,0,sizeof(branches));\\n            isEnd=end;\\n        }\\n        TrieNode* branches[26];\\n        bool isEnd;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        ~Trie() {\\n            destroy(root);\\n        }\\n        \\n        void destroy(TrieNode* node) {\\n            for(int i=0;i<26;i++)\\n                if(node->branches[i]) \\n                    destroy(node->branches[i]);\\n            delete node;\\n        }\\n\\n        // Inserts a word into the trie.\\n        void insert(string s) {\\n            TrieNode* node=root;\\n            int i;\\n            for(i=0;i<s.size();i++) {\\n                if(node->branches[s[i]-'a']==NULL)\\n                    break;\\n                else {\\n                    node=node->branches[s[i]-'a'];\\n                    node->isEnd=((i==s.size()-1)?true:node->isEnd);\\n                }\\n            }\\n            for(;i<s.size();i++) {\\n                node->branches[s[i]-'a']=new TrieNode(i==s.size()-1?true:false);\\n                node=node->branches[s[i]-'a'];\\n            }\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key) {\\n            TrieNode* node=root;\\n            for(int i=0;i<key.size();i++)\\n                if(node->branches[key[i]-'a']==NULL)\\n                    return false;\\n                else\\n                    node=node->branches[key[i]-'a'];\\n            if(node->isEnd)\\n                return true;\\n            else\\n                return false;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            TrieNode* node=root;\\n            for(int i=0;i<prefix.size();i++)\\n                if(node->branches[prefix[i]-'a']==NULL)\\n                    return false;\\n                else\\n                    node=node->branches[prefix[i]-'a'];\\n            return true;\\n        }\\n    private:\\n        TrieNode* root;\\n    };\\n\\nHashtable:\\n\\n    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode(bool end=false) {\\n            isEnd=end;\\n        }\\n        unordered_map<char,TrieNode*> branches;\\n        bool isEnd;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n        \\n        ~Trie() {\\n            destroy(root);\\n        }\\n    \\n        void destroy(TrieNode* node) {\\n            for(auto entry : node->branches)\\n                destroy(entry.second);\\n            delete node;\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string s) {\\n            TrieNode* node=root;\\n            int i;\\n            for(i=0;i<s.size();i++) {\\n                if(node->branches.find(s[i])==node->branches.end())\\n                    break;\\n                else {\\n                    node=node->branches[s[i]];\\n                    node->isEnd=((i==s.size()-1)?true:node->isEnd);\\n                }\\n            }\\n            for(;i<s.size();i++) {\\n                node->branches[s[i]]=new TrieNode(i==s.size()-1?true:false);\\n                node=node->branches[s[i]];\\n            }\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key) {\\n            TrieNode* node=root;\\n            for(int i=0;i<key.size();i++)\\n                if(node->branches.find(key[i])==node->branches.end())\\n                    return false;\\n                else\\n                    node=node->branches[key[i]];\\n            if(node->isEnd)\\n                return true;\\n            else\\n                return false;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            TrieNode* node=root;\\n            for(int i=0;i<prefix.size();i++)\\n                //if(node->branches[prefix[i]]==NULL)\\n                if(node->branches.find(prefix[i])==node->branches.end())\\n                    return false;\\n                else\\n                    node=node->branches[prefix[i]];\\n            return true;\\n        }\\n    private:\\n        TrieNode* root;\\n    };",
                "solutionTags": [],
                "code": "Edited: Finally, I solved the MLE problem and now I got two ways to deal with this problem.\\nEditeded: Destructor added.\\n\\nArray:\\n\\n    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode(bool end=false) {\\n            memset(branches,0,sizeof(branches));\\n            isEnd=end;\\n        }\\n        TrieNode* branches[26];\\n        bool isEnd;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        ~Trie() {\\n            destroy(root);\\n        }\\n        \\n        void destroy(TrieNode* node) {\\n            for(int i=0;i<26;i++)\\n                if(node->branches[i]) \\n                    destroy(node->branches[i]);\\n            delete node;\\n        }\\n\\n        // Inserts a word into the trie.\\n        void insert(string s) {\\n            TrieNode* node=root;\\n            int i;\\n            for(i=0;i<s.size();i++) {\\n                if(node->branches[s[i]-'a']==NULL)\\n                    break;\\n                else {\\n                    node=node->branches[s[i]-'a'];\\n                    node->isEnd=((i==s.size()-1)?true:node->isEnd);\\n                }\\n            }\\n            for(;i<s.size();i++) {\\n                node->branches[s[i]-'a']=new TrieNode(i==s.size()-1?true:false);\\n                node=node->branches[s[i]-'a'];\\n            }\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key) {\\n            TrieNode* node=root;\\n            for(int i=0;i<key.size();i++)\\n                if(node->branches[key[i]-'a']==NULL)\\n                    return false;\\n                else\\n                    node=node->branches[key[i]-'a'];\\n            if(node->isEnd)\\n                return true;\\n            else\\n                return false;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            TrieNode* node=root;\\n            for(int i=0;i<prefix.size();i++)\\n                if(node->branches[prefix[i]-'a']==NULL)\\n                    return false;\\n                else\\n                    node=node->branches[prefix[i]-'a'];\\n            return true;\\n        }\\n    private:\\n        TrieNode* root;\\n    };\\n\\nHashtable:\\n\\n    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode(bool end=false) {\\n            isEnd=end;\\n        }\\n        unordered_map<char,TrieNode*> branches;\\n        bool isEnd;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n        \\n        ~Trie() {\\n            destroy(root);\\n        }\\n    \\n        void destroy(TrieNode* node) {\\n            for(auto entry : node->branches)\\n                destroy(entry.second);\\n            delete node;\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string s) {\\n            TrieNode* node=root;\\n            int i;\\n            for(i=0;i<s.size();i++) {\\n                if(node->branches.find(s[i])==node->branches.end())\\n                    break;\\n                else {\\n                    node=node->branches[s[i]];\\n                    node->isEnd=((i==s.size()-1)?true:node->isEnd);\\n                }\\n            }\\n            for(;i<s.size();i++) {\\n                node->branches[s[i]]=new TrieNode(i==s.size()-1?true:false);\\n                node=node->branches[s[i]];\\n            }\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string key) {\\n            TrieNode* node=root;\\n            for(int i=0;i<key.size();i++)\\n                if(node->branches.find(key[i])==node->branches.end())\\n                    return false;\\n                else\\n                    node=node->branches[key[i]];\\n            if(node->isEnd)\\n                return true;\\n            else\\n                return false;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            TrieNode* node=root;\\n            for(int i=0;i<prefix.size();i++)\\n                //if(node->branches[prefix[i]]==NULL)\\n                if(node->branches.find(prefix[i])==node->branches.end())\\n                    return false;\\n                else\\n                    node=node->branches[prefix[i]];\\n            return true;\\n        }\\n    private:\\n        TrieNode* root;\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 3308161,
                "title": "easy-python-solution-86-faster",
                "content": "# PLEASE DO UPVOTE \\uD83D\\uDC9B\\n\\n# Code\\n```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children={}\\n        self.end=False\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root=TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        curr=self.root\\n        for i in word:\\n            if i not in curr.children:\\n                curr.children[i]=TrieNode()\\n            curr=curr.children[i]\\n        curr.end=True\\n\\n    def search(self, word: str) -> bool:\\n        curr=self.root\\n        for i in word:\\n            if i not in curr.children:\\n                return False\\n            curr=curr.children[i]\\n        return curr.end\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr=self.root\\n        for i in prefix:\\n            if i not in curr.children:\\n                return False\\n            curr=curr.children[i]\\n        return True\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children={}\\n        self.end=False\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root=TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        curr=self.root\\n        for i in word:\\n            if i not in curr.children:\\n                curr.children[i]=TrieNode()\\n            curr=curr.children[i]\\n        curr.end=True\\n\\n    def search(self, word: str) -> bool:\\n        curr=self.root\\n        for i in word:\\n            if i not in curr.children:\\n                return False\\n            curr=curr.children[i]\\n        return curr.end\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr=self.root\\n        for i in prefix:\\n            if i not in curr.children:\\n                return False\\n            curr=curr.children[i]\\n        return True\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1319311,
                "title": "c-100-faster-hindi-comments-full-explanation",
                "content": "class Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    \\n    // hum 26 size ka array bna rhe h kyunki, we have atmost 26 lower case alphabets\\n    Trie *v[26];\\n    // check krne ke liye ki koi particular word kha pr khatam ho rha h \\n    bool isLeaf;\\n    // contructor\\n    // runs when new keyword is used to create new object of this class\\n    Trie() {\\n        //v = new Trie*[26];\\n        for(int i=0;i<26;i++){\\n            v[i] = NULL;\\n        }\\n        // starting mei leaf false, kyunki yeh koi bhi work ko represent nhi kr rha h \\n        isLeaf = false;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        // this basically refers to the root pointer of this class \\n          Trie *curr = this;\\n        // main logic to create the trie\\n          for(int i=0;i<word.size();i++){\\n              int x = word[i]-\\'a\\';\\n              if(!curr->v[x]){\\n                  curr->v[x] = new Trie();\\n              }\\n              curr = curr->v[x];\\n          }\\n        // jab word khatam ho gya, then mark isLeaf as true, because we know yha pr word khatam ho gya h \\n        curr->isLeaf = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        Trie *curr = this;\\n        for(int i=0;i<word.size();i++){\\n            int x = word[i] - \\'a\\';\\n            if(!curr->v[x]){\\n                return false;\\n            }\\n            curr = curr->v[x];\\n        }\\n        // jahan pr hamri string khatam hui and agar vo pointer leaf bhi h, matlab vo word present h vha pr  \\n        if(curr->isLeaf){\\n            return true;\\n        }\\n        // agar vo node leaf nhi h toh word vha pr khatam nhi hua h \\n        \\n        // example word inserter - apple, and we search for app, then search runs completely, but not present in the trie\\n        return false;\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string word) {\\n         Trie *curr = this;\\n        for(int i=0;i<word.size();i++){\\n            int x = word[i] - \\'a\\';\\n            // if string ka char check kr rhe h, lekin hume vo apne trie mei nhi mila, toh matlab vo prefix present nhi hogaa kabhi, so return false\\n            if(!curr->v[x]){\\n                return false;\\n            }\\n            curr = curr->v[x];\\n        }\\n        // if runs completly,  then matlab koi naa koi prefix present h, so we will retuen true;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */",
                "solutionTags": [],
                "code": "class Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    \\n    // hum 26 size ka array bna rhe h kyunki, we have atmost 26 lower case alphabets\\n    Trie *v[26];\\n    // check krne ke liye ki koi particular word kha pr khatam ho rha h \\n    bool isLeaf;\\n    // contructor\\n    // runs when new keyword is used to create new object of this class\\n    Trie() {\\n        //v = new Trie*[26];\\n        for(int i=0;i<26;i++){\\n            v[i] = NULL;\\n        }\\n        // starting mei leaf false, kyunki yeh koi bhi work ko represent nhi kr rha h \\n        isLeaf = false;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        // this basically refers to the root pointer of this class \\n          Trie *curr = this;\\n        // main logic to create the trie\\n          for(int i=0;i<word.size();i++){\\n              int x = word[i]-\\'a\\';\\n              if(!curr->v[x]){\\n                  curr->v[x] = new Trie();\\n              }\\n              curr = curr->v[x];\\n          }\\n        // jab word khatam ho gya, then mark isLeaf as true, because we know yha pr word khatam ho gya h \\n        curr->isLeaf = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        Trie *curr = this;\\n        for(int i=0;i<word.size();i++){\\n            int x = word[i] - \\'a\\';\\n            if(!curr->v[x]){\\n                return false;\\n            }\\n            curr = curr->v[x];\\n        }\\n        // jahan pr hamri string khatam hui and agar vo pointer leaf bhi h, matlab vo word present h vha pr  \\n        if(curr->isLeaf){\\n            return true;\\n        }\\n        // agar vo node leaf nhi h toh word vha pr khatam nhi hua h \\n        \\n        // example word inserter - apple, and we search for app, then search runs completely, but not present in the trie\\n        return false;\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string word) {\\n         Trie *curr = this;\\n        for(int i=0;i<word.size();i++){\\n            int x = word[i] - \\'a\\';\\n            // if string ka char check kr rhe h, lekin hume vo apne trie mei nhi mila, toh matlab vo prefix present nhi hogaa kabhi, so return false\\n            if(!curr->v[x]){\\n                return false;\\n            }\\n            curr = curr->v[x];\\n        }\\n        // if runs completly,  then matlab koi naa koi prefix present h, so we will retuen true;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 313778,
                "title": "c-solution-simple-and-easy-to-understand-w-comments",
                "content": "Hopefully this can help anyone trying to understand this data structure.\\n\\t\\n\\ttypedef struct Trie\\n\\t{\\n\\t\\t// Array of 26 Trie pointers. Note: The strings we insert into a trie are not stored as\\n\\t\\t// data inside our nodes. Instead, the string that a node represents is based on the \\n\\t\\t// path you take to reach that node.\\n\\t\\tstruct Trie *children[26]; \\n\\t\\t// Used as a flag. The last node of the string we insert will be marked.\\n\\t\\tint isWord; \\n\\t} Trie;\\n\\n\\tTrie* trieCreate() \\n\\t{\\n\\t\\t// Create and return a new Trie node.\\n\\t\\treturn calloc(1, sizeof(Trie));\\n\\t}\\n\\n\\tvoid trieInsert(Trie *obj, char *word) \\n\\t{\\n\\t\\tint index, len = strlen(word);\\n\\t\\tTrie *temp;\\n\\n\\t\\tif (obj == NULL)\\n\\t\\t\\tobj = trieCreate();\\n\\t\\n\\t\\t// temp starts at the root node and spells out the string being inserted as it\\n\\t\\t// moves from node to node.\\n\\t\\ttemp = obj;\\n\\n\\t\\tfor (int i = 0; i < len; i++)\\n\\t\\t{\\n\\t\\t\\tindex = word[i] - \\'a\\';\\n\\t\\n\\t\\t\\t// Before we can move forward to the next node, we need to make sure that node\\n\\t\\t\\t// actually exists. If not, create it.\\n\\t\\t\\tif (temp->children[index] == NULL)\\n\\t\\t\\t\\ttemp->children[index] = trieCreate();\\n\\t\\t\\t\\n\\t\\t\\t// Continue moving forward\\n\\t\\t\\ttemp = temp->children[index];\\n\\t\\t}\\n\\t\\t\\n\\t\\t// When we break out of the for-loop, temp should be at the terminal\\n\\t\\t// node that represents the string we\\'re trying to insert.\\n\\t\\ttemp->isWord = 1;\\n\\t}\\n\\n\\tbool trieSearch(Trie *obj, char *word) \\n\\t{\\n\\t\\tif (obj == NULL)\\n\\t\\t\\treturn false;\\n\\n\\t\\tTrie *temp = obj;\\n\\t\\n\\t\\t// Simply iterate along the path of the word we are searching for. When we reach\\n\\t\\t// the terminal node, if \"isWord\" is marked, we know the string is in the trie.\\n\\t\\twhile (*word)\\n\\t\\t{\\n\\t\\t\\ttemp = temp->children[*word-\\'a\\'];\\n\\n\\t\\t\\tif (temp == NULL)\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tword++;\\n\\t\\t} \\n\\n\\t\\treturn temp->isWord;\\n\\t}\\n\\n\\n\\tbool trieStartsWith(Trie *obj, char *prefix) \\n\\t{\\n\\t\\tif (obj == NULL)\\n\\t\\t\\treturn false;\\n\\n\\t\\tTrie *temp = obj;\\n\\t\\t\\n\\t\\t// Again, we follow the path of the prefix string. Since the nodes are created \\n\\t\\t// as we traverse each string, we know that if the nodes exist, so must a string.\\n\\t\\twhile (*prefix)\\n\\t\\t{\\n\\t\\t\\ttemp = temp->children[*prefix-\\'a\\'];\\n\\n\\t\\t\\tif (temp == NULL)\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tprefix++;\\n\\t\\t} \\n\\n\\t\\treturn true;\\n\\t}\\n\\t// Recursively free all paths through our Trie.\\n\\tvoid trieFree(Trie* obj) \\n\\t{\\n\\t\\tfor (int i = 0; i < 26; i++)\\n\\t\\t\\tif (obj->children[i])\\n\\t\\t\\t\\ttrieFree(obj->children[i]);\\n\\n\\t\\tfree(obj);\\n\\t}",
                "solutionTags": [
                    "C"
                ],
                "code": "Hopefully this can help anyone trying to understand this data structure.\\n\\t\\n\\ttypedef struct Trie\\n\\t{\\n\\t\\t// Array of 26 Trie pointers. Note: The strings we insert into a trie are not stored as\\n\\t\\t// data inside our nodes. Instead, the string that a node represents is based on the \\n\\t\\t// path you take to reach that node.\\n\\t\\tstruct Trie *children[26]; \\n\\t\\t// Used as a flag. The last node of the string we insert will be marked.\\n\\t\\tint isWord; \\n\\t} Trie;\\n\\n\\tTrie* trieCreate() \\n\\t{\\n\\t\\t// Create and return a new Trie node.\\n\\t\\treturn calloc(1, sizeof(Trie));\\n\\t}\\n\\n\\tvoid trieInsert(Trie *obj, char *word) \\n\\t{\\n\\t\\tint index, len = strlen(word);\\n\\t\\tTrie *temp;\\n\\n\\t\\tif (obj == NULL)\\n\\t\\t\\tobj = trieCreate();\\n\\t\\n\\t\\t// temp starts at the root node and spells out the string being inserted as it\\n\\t\\t// moves from node to node.\\n\\t\\ttemp = obj;\\n\\n\\t\\tfor (int i = 0; i < len; i++)\\n\\t\\t{\\n\\t\\t\\tindex = word[i] - \\'a\\';\\n\\t\\n\\t\\t\\t// Before we can move forward to the next node, we need to make sure that node\\n\\t\\t\\t// actually exists. If not, create it.\\n\\t\\t\\tif (temp->children[index] == NULL)\\n\\t\\t\\t\\ttemp->children[index] = trieCreate();\\n\\t\\t\\t\\n\\t\\t\\t// Continue moving forward\\n\\t\\t\\ttemp = temp->children[index];\\n\\t\\t}\\n\\t\\t\\n\\t\\t// When we break out of the for-loop, temp should be at the terminal\\n\\t\\t// node that represents the string we\\'re trying to insert.\\n\\t\\ttemp->isWord = 1;\\n\\t}\\n\\n\\tbool trieSearch(Trie *obj, char *word) \\n\\t{\\n\\t\\tif (obj == NULL)\\n\\t\\t\\treturn false;\\n\\n\\t\\tTrie *temp = obj;\\n\\t\\n\\t\\t// Simply iterate along the path of the word we are searching for. When we reach\\n\\t\\t// the terminal node, if \"isWord\" is marked, we know the string is in the trie.\\n\\t\\twhile (*word)\\n\\t\\t{\\n\\t\\t\\ttemp = temp->children[*word-\\'a\\'];\\n\\n\\t\\t\\tif (temp == NULL)\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tword++;\\n\\t\\t} \\n\\n\\t\\treturn temp->isWord;\\n\\t}\\n\\n\\n\\tbool trieStartsWith(Trie *obj, char *prefix) \\n\\t{\\n\\t\\tif (obj == NULL)\\n\\t\\t\\treturn false;\\n\\n\\t\\tTrie *temp = obj;\\n\\t\\t\\n\\t\\t// Again, we follow the path of the prefix string. Since the nodes are created \\n\\t\\t// as we traverse each string, we know that if the nodes exist, so must a string.\\n\\t\\twhile (*prefix)\\n\\t\\t{\\n\\t\\t\\ttemp = temp->children[*prefix-\\'a\\'];\\n\\n\\t\\t\\tif (temp == NULL)\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tprefix++;\\n\\t\\t} \\n\\n\\t\\treturn true;\\n\\t}\\n\\t// Recursively free all paths through our Trie.\\n\\tvoid trieFree(Trie* obj) \\n\\t{\\n\\t\\tfor (int i = 0; i < 26; i++)\\n\\t\\t\\tif (obj->children[i])\\n\\t\\t\\t\\ttrieFree(obj->children[i]);\\n\\n\\t\\tfree(obj);\\n\\t}",
                "codeTag": "Python3"
            },
            {
                "id": 3306611,
                "title": "stepwise-explained-with-example-easy-to-understand",
                "content": "\\n\\n# Intuition\\nIn the beginning a trie might sound intimidating to implement and work with but if you understand it\\'s basics, it\\'s not as difficult as it looks. \\n\\nA trie is a tree-like data structure used to store a collection of strings or words. Each node in the Trie represents a character, and the path from the root node to a particular node represents a string or word. The end of a word is marked by a flag in the last node of the word.\\n\\n![image.png](https://assets.leetcode.com/users/images/d58fa8e4-92a2-48c0-aa61-ef031ae431e3_1679050425.241754.png)\\nIn the above example we are storing:\\n```\\n[\"an\", \"ant\", \"car\", \"can\", \"cup\"]\\n```\\nThe root is an empty string. Starting from the root node, each subsequent level represents a character in the word being stored. For example, the first level has two nodes, each representing one of the two possible starting characters of the words being stored: \\'a\\', and \\'c\\'.\\nThe end of a word is indicated by a special flag on the corresponding node. In this example, nodes for the end of \"an\", \"ant\", \"car\", \"can\" and \"cup\" have been marked as end nodes.\\n\\n# Approach\\nLet\\'s take an example of inserting one word into the Trie: \"can\"\\n\\nInitialize the Trie with an empty root node.\\n\\n#### Insert the word \"can\" into the Trie:\\n\\n- Start at the root node.\\n\\n- Insert the first character \\'c\\' into the Trie. Check if the child node representing \\'c\\' already exists. If it doesn\\'t exist, create a new child node representing \\'c\\'. Move the current node to the child node representing \\'c\\'.\\n\\n- Insert the second character \\'a\\' into the Trie. Check if the child node representing \\'a\\' already exists. If it doesn\\'t exist, create a new child node representing \\'a\\'. Move the current node to the child node representing \\'a\\'.\\n\\n- Insert the third character \\'n\\' into the Trie. Check if the child node representing \\'n\\' already exists. If it doesn\\'t exist, create a new child node representing \\'n\\'. Move the current node to the child node representing \\'n\\'.\\n\\n- Mark the last node as the end of the word \"can\".\\n\\n\\n#### Search for the word \"can\" in the Trie:\\n\\n- Start at the root node.\\n\\n- Follow the path for the characters \\'c\\', \\'a\\', and \\'n\\' in the Trie. If any one character doesn\\'t exist in the path, return false.\\n\\n- Check if the last node is marked as the end of a word. Since it is, return true. The word \"can\" is in the Trie.\\n\\n\\n#### Search for the prefix \"cab\" in the Trie:\\n\\n- Start at the root node.\\n\\n- Follow the path for the characters \\'c\\' and \\'a\\' in the Trie. As the node with \\'b\\' doesn\\'t exist, return false.\\n\\n\\n\\n# Code\\n```\\nstruct TrieNode {\\n    bool end; // Flag to indicate whether this node represents the end of a word or not\\n    vector<TrieNode*>children=vector<TrieNode*>(26,nullptr); // Vector of pointers to child nodes for each possible character in the alphabet (26 lowercase English letters)\\n};\\n\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    \\n    Trie() {\\n        root = new TrieNode();\\n    } \\n\\n    // Insert a word into the Trie\\n    void insert(string word) {\\n        TrieNode* start = this->root;\\n        for(int i=0; i<word.size(); ++i) {\\n            int index = word[i] - \\'a\\';\\n            if(!start->children[index]) {\\n                start->children[index] = new TrieNode();\\n            }\\n            start = start->children[index];\\n        }\\n        start->end = true; // Mark the last node as the end of a word\\n    }\\n    \\n    // Search for a word in the Trie\\n    bool search(string word) {\\n        TrieNode* start = this->root;\\n        for(int i=0; i<word.size(); ++i) {\\n            int index = word[i] - \\'a\\';\\n            if(!start->children[index]) {\\n                return false; // Word not found in the Trie\\n            }\\n            start = start->children[index];\\n        }\\n        return start->end; // Return true if the last node is marked as the end of a word\\n    }\\n    \\n    // Check if the Trie contains any word starting with the given prefix\\n    bool startsWith(string prefix) {\\n        TrieNode* start = this->root;\\n        for(int i=0; i<prefix.size(); i++) {\\n            int index = prefix[i] - \\'a\\';\\n            if(!start->children[index]) {\\n                return false; // No word in the Trie starts with the given prefix\\n            }\\n            start = start->children[index];\\n        }\\n        return true; // At least one word in the Trie starts with the given prefix\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Trie"
                ],
                "code": "```\\n[\"an\", \"ant\", \"car\", \"can\", \"cup\"]\\n```\n```\\nstruct TrieNode {\\n    bool end; // Flag to indicate whether this node represents the end of a word or not\\n    vector<TrieNode*>children=vector<TrieNode*>(26,nullptr); // Vector of pointers to child nodes for each possible character in the alphabet (26 lowercase English letters)\\n};\\n\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    \\n    Trie() {\\n        root = new TrieNode();\\n    } \\n\\n    // Insert a word into the Trie\\n    void insert(string word) {\\n        TrieNode* start = this->root;\\n        for(int i=0; i<word.size(); ++i) {\\n            int index = word[i] - \\'a\\';\\n            if(!start->children[index]) {\\n                start->children[index] = new TrieNode();\\n            }\\n            start = start->children[index];\\n        }\\n        start->end = true; // Mark the last node as the end of a word\\n    }\\n    \\n    // Search for a word in the Trie\\n    bool search(string word) {\\n        TrieNode* start = this->root;\\n        for(int i=0; i<word.size(); ++i) {\\n            int index = word[i] - \\'a\\';\\n            if(!start->children[index]) {\\n                return false; // Word not found in the Trie\\n            }\\n            start = start->children[index];\\n        }\\n        return start->end; // Return true if the last node is marked as the end of a word\\n    }\\n    \\n    // Check if the Trie contains any word starting with the given prefix\\n    bool startsWith(string prefix) {\\n        TrieNode* start = this->root;\\n        for(int i=0; i<prefix.size(); i++) {\\n            int index = prefix[i] - \\'a\\';\\n            if(!start->children[index]) {\\n                return false; // No word in the Trie starts with the given prefix\\n            }\\n            start = start->children[index];\\n        }\\n        return true; // At least one word in the Trie starts with the given prefix\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306213,
                "title": "simple-and-easy-to-understand-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nStore the count of strings in an unordered_map of string and int for searching.\\nUse unordered_map of char and vector of strings to store the words.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Trie {\\npublic:\\n unordered_map<string,int>wordcount; // to store the count of words\\n unordered_map<char,vector<string>>words; // to store strings\\n    Trie() {\\n        unordered_map<char,vector<string>>input;\\n        words=input;\\n    }\\n    \\n    void insert(string word) {\\n        words[word[0]].push_back(word); // pushing back starting letter of the word and entire word\\n        wordcount[word]++; // count \\n    }\\n    \\n    bool search(string word) {\\n        if(wordcount[word]>0){ // checks if the string is present\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n       bool startsWith(string prefix) {\\n        for (auto str : words[prefix[0]]) { // iterates over the string which starts with first letter of the prefix\\n            if (str.find(prefix) == 0) { // checks if the words has the prefix.\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n unordered_map<string,int>wordcount; // to store the count of words\\n unordered_map<char,vector<string>>words; // to store strings\\n    Trie() {\\n        unordered_map<char,vector<string>>input;\\n        words=input;\\n    }\\n    \\n    void insert(string word) {\\n        words[word[0]].push_back(word); // pushing back starting letter of the word and entire word\\n        wordcount[word]++; // count \\n    }\\n    \\n    bool search(string word) {\\n        if(wordcount[word]>0){ // checks if the string is present\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n       bool startsWith(string prefix) {\\n        for (auto str : words[prefix[0]]) { // iterates over the string which starts with first letter of the prefix\\n            if (str.find(prefix) == 0) { // checks if the words has the prefix.\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1858986,
                "title": "python-industry-oriented-code",
                "content": "\\tclass Node:\\n\\t\\tdef __init__(self):\\n\\t\\t\\tself.node=[None for i in range(26)]\\n\\t\\t\\tself.flag=False\\n\\t\\t\\t\\n\\t\\tdef nextNode(self,character):\\n\\t\\t\\treturn self.node[ord(character)-97]\\n\\t\\t\\n\\t\\tdef contains(self,character):\\n\\t\\t\\treturn self.node[ord(character)-97]!=None\\n\\t\\t\\t\\n\\t\\tdef insertNode(self,character,curr):\\n\\t\\t\\tself.node[ord(character)-97]=curr\\n\\t\\t\\t\\n\\t\\tdef setEnd(self):\\n\\t\\t\\tself.flag=True\\n\\t\\t\\n\\t\\tdef isEnd(self):\\n\\t\\t\\treturn self.flag==True\\n\\t\\t\\t\\t\\n\\tclass Trie:\\n\\t\\tdef __init__(self):\\n\\t\\t\\tself.root=Node()\\n\\t\\n\\t\\tdef insert(self, word: str) -> None:\\n\\t\\t\\tn=len(word)\\n\\t\\t\\tnode=self.root\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif not(node.contains(word[i])):\\n\\t\\t\\t\\t\\tnode.insertNode(word[i],Node())\\n\\t\\t\\t\\tnode=node.nextNode(word[i])\\n\\t\\t\\tnode.setEnd()\\n\\t\\n\\t\\tdef search(self, word: str) -> bool:\\n\\t\\t\\tn=len(word)\\n\\t\\t\\tnode=self.root\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif not(node.contains(word[i])):\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\tnode=node.nextNode(word[i])\\n\\t\\t\\treturn node.isEnd()\\n\\t\\n\\t\\tdef startsWith(self, prefix: str) -> bool:\\n\\t\\t\\tn=len(prefix)\\n\\t\\t\\tnode=self.root\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif not(node.contains(prefix[i])):\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\tnode=node.nextNode(prefix[i])\\n\\t\\t\\treturn True``",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Trie"
                ],
                "code": "\\tclass Node:\\n\\t\\tdef __init__(self):\\n\\t\\t\\tself.node=[None for i in range(26)]\\n\\t\\t\\tself.flag=False\\n\\t\\t\\t\\n\\t\\tdef nextNode(self,character):\\n\\t\\t\\treturn self.node[ord(character)-97]\\n\\t\\t\\n\\t\\tdef contains(self,character):\\n\\t\\t\\treturn self.node[ord(character)-97]!=None\\n\\t\\t\\t\\n\\t\\tdef insertNode(self,character,curr):\\n\\t\\t\\tself.node[ord(character)-97]=curr\\n\\t\\t\\t\\n\\t\\tdef setEnd(self):\\n\\t\\t\\tself.flag=True\\n\\t\\t\\n\\t\\tdef isEnd(self):\\n\\t\\t\\treturn self.flag==True\\n\\t\\t\\t\\t\\n\\tclass Trie:\\n\\t\\tdef __init__(self):\\n\\t\\t\\tself.root=Node()\\n\\t\\n\\t\\tdef insert(self, word: str) -> None:\\n\\t\\t\\tn=len(word)\\n\\t\\t\\tnode=self.root\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif not(node.contains(word[i])):\\n\\t\\t\\t\\t\\tnode.insertNode(word[i],Node())\\n\\t\\t\\t\\tnode=node.nextNode(word[i])\\n\\t\\t\\tnode.setEnd()\\n\\t\\n\\t\\tdef search(self, word: str) -> bool:\\n\\t\\t\\tn=len(word)\\n\\t\\t\\tnode=self.root\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif not(node.contains(word[i])):\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\tnode=node.nextNode(word[i])\\n\\t\\t\\treturn node.isEnd()\\n\\t\\n\\t\\tdef startsWith(self, prefix: str) -> bool:\\n\\t\\t\\tn=len(prefix)\\n\\t\\t\\tnode=self.root\\n\\t\\t\\tfor i in range(n):\\n\\t\\t\\t\\tif not(node.contains(prefix[i])):\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\tnode=node.nextNode(prefix[i])\\n\\t\\t\\treturn True``",
                "codeTag": "Java"
            },
            {
                "id": 1510557,
                "title": "scala-concise-solution",
                "content": "```scala\\nfinal class Trie {\\n    val chars = collection.mutable.Map.empty[Char, Trie]\\n    var term = false\\n\\n    def insert(word: String, i: Int = 0): Unit = \\n        if (i < word.length) \\n            chars.getOrElseUpdate(word(i), new Trie).insert(word, i + 1)  \\n        else term = true\\n    \\n    def search(word: String, prefix: Boolean = false , i: Int = 0): Boolean = \\n        if (i < word.length)\\n            chars.get(word(i)).exists(_.search(word, prefix, i + 1))\\n        else prefix || term\\n\\n    def startsWith(prefix: String): Boolean = search(prefix, true)\\n}\\n```",
                "solutionTags": [],
                "code": "```scala\\nfinal class Trie {\\n    val chars = collection.mutable.Map.empty[Char, Trie]\\n    var term = false\\n\\n    def insert(word: String, i: Int = 0): Unit = \\n        if (i < word.length) \\n            chars.getOrElseUpdate(word(i), new Trie).insert(word, i + 1)  \\n        else term = true\\n    \\n    def search(word: String, prefix: Boolean = false , i: Int = 0): Boolean = \\n        if (i < word.length)\\n            chars.get(word(i)).exists(_.search(word, prefix, i + 1))\\n        else prefix || term\\n\\n    def startsWith(prefix: String): Boolean = search(prefix, true)\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1401580,
                "title": "retrieving-list-of-words-starting-with-the-prefix",
                "content": "I tried to implement a function which can help in retrieving all of the words associated with the prefix,\\n1. Iterate through the prefix, return empty list if no match found in prefix\\n2. Check if the prefix itself forms a word. If yes, append to the list.\\n3. Iterate over rest of the children dict to return the words.\\n\\n```\\ndef wordStartsWith(self, prefix: str) -> []:\\n\\t#Iterate through the prefix\\n\\tcurr = self.trie\\n\\tfor c in prefix:\\n\\t\\tif c not in curr.children:\\n\\t\\t\\treturn []\\n\\t\\tcurr = curr.children[c]\\n\\n\\tlistOfWords = []\\n\\t# look if the prefix itself is a word\\n\\tif curr.endOfWord:\\n\\tlistOfWords.append(prefix)\\n\\n\\t#Form the Words\\n\\td = deque()\\n\\td.append((curr.children, prefix))\\n\\twhile d:\\n\\t\\tcurr, pre = d.popleft()\\n\\t\\tfor key in curr.keys():\\n\\t\\t\\ttemp = curr[key]\\n\\t\\t\\tif temp.endOfWord:\\n\\t\\t\\t\\tlistOfWords.append(pre+key)\\n\\t\\t\\td.append((temp.children, pre+key))\\n\\n\\treturn listOfWords\\n```",
                "solutionTags": [],
                "code": "```\\ndef wordStartsWith(self, prefix: str) -> []:\\n\\t#Iterate through the prefix\\n\\tcurr = self.trie\\n\\tfor c in prefix:\\n\\t\\tif c not in curr.children:\\n\\t\\t\\treturn []\\n\\t\\tcurr = curr.children[c]\\n\\n\\tlistOfWords = []\\n\\t# look if the prefix itself is a word\\n\\tif curr.endOfWord:\\n\\tlistOfWords.append(prefix)\\n\\n\\t#Form the Words\\n\\td = deque()\\n\\td.append((curr.children, prefix))\\n\\twhile d:\\n\\t\\tcurr, pre = d.popleft()\\n\\t\\tfor key in curr.keys():\\n\\t\\t\\ttemp = curr[key]\\n\\t\\t\\tif temp.endOfWord:\\n\\t\\t\\t\\tlistOfWords.append(pre+key)\\n\\t\\t\\td.append((temp.children, pre+key))\\n\\n\\treturn listOfWords\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 111445,
                "title": "easy-to-understand-basic-trie-in-python",
                "content": "```\\nclass TrieNode(object):\\n    def __init__(self):\\n        self.children = {}\\n        self.isEnd = False\\n        \\nclass Trie(object):\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        \\n\\n    def insert(self, word):\\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                node.children[c] = TrieNode()\\n            node = node.children[c]\\n        node.isEnd = True\\n        \\n        \"\"\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: void\\n        \"\"\"\\n        \\n\\n    def search(self, word):\\n        \\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return node.isEnd\\n    \\n        \"\"\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n    def startsWith(self, prefix):\\n        node = self.root\\n        for c in prefix:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return True\\n        \\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode(object):\\n    def __init__(self):\\n        self.children = {}\\n        self.isEnd = False\\n        \\nclass Trie(object):\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        \\n\\n    def insert(self, word):\\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                node.children[c] = TrieNode()\\n            node = node.children[c]\\n        node.isEnd = True\\n        \\n        \"\"\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: void\\n        \"\"\"\\n        \\n\\n    def search(self, word):\\n        \\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return node.isEnd\\n    \\n        \"\"\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n    def startsWith(self, prefix):\\n        node = self.root\\n        for c in prefix:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return True\\n        \\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \"\"\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3309949,
                "title": "easy-code-in-c",
                "content": "\\n\\n# Code\\n```\\nclass Trie {\\npublic:\\n    struct trieNode {\\n        bool isEndofWord;\\n        trieNode *children[26];\\n        \\n    };\\n    trieNode* getNode(){\\n        trieNode *newNode= new trieNode();\\n        newNode->isEndofWord=false;\\n        for(int i=0;i<26;i++){\\n            newNode->children[i]=NULL;\\n        }\\n        return newNode;\\n    }\\n    \\n    trieNode *root;\\n    \\n    Trie() {\\n        root=getNode();    \\n    }\\n    \\n    void insert(string word) {\\n        trieNode * crawler=root;\\n        for(char ch:word){\\n            int idx=ch-\\'a\\';\\n            if(crawler->children[idx]==NULL){\\n                crawler->children[idx]=getNode();\\n            }\\n            crawler=crawler->children[idx];\\n        }\\n        crawler->isEndofWord=true;\\n    }\\n    \\n    bool search(string word) {\\n         trieNode * crawler=root;\\n        for(char ch:word){\\n            int idx=ch-\\'a\\';\\n            if(crawler->children[idx]==NULL){\\n                return false;\\n            }\\n            crawler=crawler->children[idx];\\n        }\\n        \\n        if(crawler->isEndofWord==true)return true;\\n        \\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n         trieNode * crawler=root;\\n        int ct=0;\\n        for(char ch:prefix){\\n            ct++;\\n            int idx=ch-\\'a\\';\\n            if(crawler->children[idx]==NULL){\\n               return false;\\n            }\\n            crawler=crawler->children[idx];\\n        }\\n        if(ct==prefix.length())return true;\\n        return false;\\n    }\\n};\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "\\n\\n# Code\\n```\\nclass Trie {\\npublic:\\n    struct trieNode {\\n        bool isEndofWord;\\n        trieNode *children[26];\\n        \\n    };\\n    trieNode* getNode(){\\n        trieNode *newNode= new trieNode();\\n        newNode->isEndofWord=false;\\n        for(int i=0;i<26;i++){\\n            newNode->children[i]=NULL;\\n        }\\n        return newNode;\\n    }\\n    \\n    trieNode *root;\\n    \\n    Trie() {\\n        root=getNode();    \\n    }\\n    \\n    void insert(string word) {\\n        trieNode * crawler=root;\\n        for(char ch:word){\\n            int idx=ch-\\'a\\';\\n            if(crawler->children[idx]==NULL){\\n                crawler->children[idx]=getNode();\\n            }\\n            crawler=crawler->children[idx];\\n        }\\n        crawler->isEndofWord=true;\\n    }\\n    \\n    bool search(string word) {\\n         trieNode * crawler=root;\\n        for(char ch:word){\\n            int idx=ch-\\'a\\';\\n            if(crawler->children[idx]==NULL){\\n                return false;\\n            }\\n            crawler=crawler->children[idx];\\n        }\\n        \\n        if(crawler->isEndofWord==true)return true;\\n        \\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n         trieNode * crawler=root;\\n        int ct=0;\\n        for(char ch:prefix){\\n            ct++;\\n            int idx=ch-\\'a\\';\\n            if(crawler->children[idx]==NULL){\\n               return false;\\n            }\\n            crawler=crawler->children[idx];\\n        }\\n        if(ct==prefix.length())return true;\\n        return false;\\n    }\\n};\\n",
                "codeTag": "Java"
            },
            {
                "id": 3309255,
                "title": "short-and-easy-cpp-solution-using-unordered-set-hash-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Trie {\\npublic:\\n    unordered_set<string>st;\\n    Trie() {\\n        unordered_set<string>st;\\n    }\\n    \\n    void insert(string word) {\\n        st.insert(word);\\n    }\\n    \\n    bool search(string word) {\\n        if(st.find(word)!=st.end()) return 1;\\n        return 0;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        for(string str : st)\\n            if(str.find(prefix)==0)\\n                return 1;\\n        return 0;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n    unordered_set<string>st;\\n    Trie() {\\n        unordered_set<string>st;\\n    }\\n    \\n    void insert(string word) {\\n        st.insert(word);\\n    }\\n    \\n    bool search(string word) {\\n        if(st.find(word)!=st.end()) return 1;\\n        return 0;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        for(string str : st)\\n            if(str.find(prefix)==0)\\n                return 1;\\n        return 0;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308209,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass TrieNode {\\npublic:\\n    bool isWord;\\n    TrieNode* children[26];\\n    \\n    TrieNode() {\\n        isWord = false;\\n        memset(children, 0, sizeof(children)); // Initialize all children to null\\n    }\\n};\\n\\nclass Trie {\\nprivate:\\n    TrieNode* root;\\n    \\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                node->children[index] = new TrieNode();\\n            }\\n            node = node->children[index];\\n        }\\n        node->isWord = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return node->isWord;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* node = root;\\n        for (char c : prefix) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return true;\\n    }\\n};\\n\\n\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass TrieNode {\\npublic:\\n    bool isWord;\\n    TrieNode* children[26];\\n    \\n    TrieNode() {\\n        isWord = false;\\n        memset(children, 0, sizeof(children)); // Initialize all children to null\\n    }\\n};\\n\\nclass Trie {\\nprivate:\\n    TrieNode* root;\\n    \\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                node->children[index] = new TrieNode();\\n            }\\n            node = node->children[index];\\n        }\\n        node->isWord = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* node = root;\\n        for (char c : word) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return node->isWord;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* node = root;\\n        for (char c : prefix) {\\n            int index = c - \\'a\\';\\n            if (!node->children[index]) {\\n                return false;\\n            }\\n            node = node->children[index];\\n        }\\n        return true;\\n    }\\n};\\n\\n\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3305943,
                "title": "java-easy-solution-using-map-90-faster-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Trie {\\n\\nprivate TriesNode rootNode; \\n\\nclass TriesNode{\\n    \\n    private char key;\\n    private boolean isEnd;\\n    \\n    private Map<Character,TriesNode> preFixMap;\\n    \\n    public TriesNode(char key){\\n        this.key = key;\\n        preFixMap = new HashMap<>();\\n    }\\n}\\n\\npublic Trie() {\\n    rootNode = new TriesNode(\\'/\\');\\n}\\n\\npublic void insert(String word) {\\n    \\n    TriesNode tempNode = rootNode;\\n    for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              findNode=new TriesNode(c);\\n              tempNode.preFixMap.put(c,findNode);\\n          }\\n         tempNode = findNode;\\n    }\\n    tempNode.isEnd = true;\\n    \\n}\\n\\npublic boolean search(String word) {\\n    TriesNode searchNode = searchHelper(word);\\n    return searchNode != null && searchNode.isEnd; \\n}\\n\\npublic boolean startsWith(String prefix) {\\n      return searchHelper(prefix) != null;\\n}\\npublic TriesNode searchHelper(String word){\\n    \\n      TriesNode tempNode = rootNode; \\n     for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              return null;\\n          }\\n         tempNode = findNode;\\n    }\\n    return tempNode;\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Trie {\\n\\nprivate TriesNode rootNode; \\n\\nclass TriesNode{\\n    \\n    private char key;\\n    private boolean isEnd;\\n    \\n    private Map<Character,TriesNode> preFixMap;\\n    \\n    public TriesNode(char key){\\n        this.key = key;\\n        preFixMap = new HashMap<>();\\n    }\\n}\\n\\npublic Trie() {\\n    rootNode = new TriesNode(\\'/\\');\\n}\\n\\npublic void insert(String word) {\\n    \\n    TriesNode tempNode = rootNode;\\n    for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              findNode=new TriesNode(c);\\n              tempNode.preFixMap.put(c,findNode);\\n          }\\n         tempNode = findNode;\\n    }\\n    tempNode.isEnd = true;\\n    \\n}\\n\\npublic boolean search(String word) {\\n    TriesNode searchNode = searchHelper(word);\\n    return searchNode != null && searchNode.isEnd; \\n}\\n\\npublic boolean startsWith(String prefix) {\\n      return searchHelper(prefix) != null;\\n}\\npublic TriesNode searchHelper(String word){\\n    \\n      TriesNode tempNode = rootNode; \\n     for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              return null;\\n          }\\n         tempNode = findNode;\\n    }\\n    return tempNode;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3224511,
                "title": "208-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe TrieNode class represents a single node in the trie. Each node has a dictionary of its children, where the keys are characters and the values are the child nodes. The is_word attribute of each node is set to True if the node corresponds to the end of a word.\\n\\nThe Trie class represents the trie itself. It has a root node, which is the starting point for all searches and insertions.\\n\\nThe insert method inserts a word into the trie. It starts at the root node and iterates over each character in the word, creating a new child node if necessary. It sets the is_word attribute of the last node to True to mark the end of the word.\\n\\nThe search method searches for a word in the trie. It starts at the root node and iterates over each character in the word, returning False if a character is not found in the trie. If all characters are found, it returns True if the last node is marked as a word, and False otherwise.\\n\\nThe startsWith method checks if any word in the trie starts with the given prefix. It starts at the root node and iterates over each character in the prefix, returning False if a character is not found in the trie. If all characters are found, it returns True.\\n\\nOverall, this solution has a time complexity of O(L), where L is the length of the word or prefix being searched/inserted. The space complexity is O(M*L), where M is the maximum number of children for any node in the trie. In practice, this tends to be much smaller than the total number of words in the trie.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                node.children[c] = TrieNode()\\n            node = node.children[c]\\n        node.is_word = True\\n\\n    def search(self, word: str) -> bool:\\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return node.is_word\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        node = self.root\\n        for c in prefix:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "String",
                    "Design"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.is_word = False\\n\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                node.children[c] = TrieNode()\\n            node = node.children[c]\\n        node.is_word = True\\n\\n    def search(self, word: str) -> bool:\\n        node = self.root\\n        for c in word:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return node.is_word\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        node = self.root\\n        for c in prefix:\\n            if c not in node.children:\\n                return False\\n            node = node.children[c]\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2887335,
                "title": "c-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Using 2D Map\\n\\n# Code\\n```\\nclass Trie {\\npublic:\\n    unordered_map<int, unordered_map<int, int>> nxt;\\n    unordered_map<int, int> mark;\\n    int node = 0;\\n\\n    Trie() {\\n        \\n    }\\n    \\n    void insert(string word) {\\n        int now = 0;\\n        for(int i=0; i < word.size(); i++) {\\n            int id = word[i] - \\'a\\';\\n            if(nxt[now][id] == 0) {\\n                node++;\\n                nxt[now][id] = node;\\n            }\\n            now = nxt[now][id];\\n        }\\n        mark[now]=true;\\n    }\\n    \\n    bool search(string word) {\\n        int now = 0;\\n        for(int i=0; i < word.size(); i++) {\\n            int id = word[i]-\\'a\\';\\n            if(nxt[now][id] == 0) return false;\\n            now = nxt[now][id];\\n        }\\n        return mark[now];\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        int now = 0;\\n        for(int i=0; i < prefix.size(); i++) {\\n            int id = prefix[i]-\\'a\\';\\n            if(nxt[now][id] == 0) return false;\\n            now = nxt[now][id];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n    unordered_map<int, unordered_map<int, int>> nxt;\\n    unordered_map<int, int> mark;\\n    int node = 0;\\n\\n    Trie() {\\n        \\n    }\\n    \\n    void insert(string word) {\\n        int now = 0;\\n        for(int i=0; i < word.size(); i++) {\\n            int id = word[i] - \\'a\\';\\n            if(nxt[now][id] == 0) {\\n                node++;\\n                nxt[now][id] = node;\\n            }\\n            now = nxt[now][id];\\n        }\\n        mark[now]=true;\\n    }\\n    \\n    bool search(string word) {\\n        int now = 0;\\n        for(int i=0; i < word.size(); i++) {\\n            int id = word[i]-\\'a\\';\\n            if(nxt[now][id] == 0) return false;\\n            now = nxt[now][id];\\n        }\\n        return mark[now];\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        int now = 0;\\n        for(int i=0; i < prefix.size(); i++) {\\n            int id = prefix[i]-\\'a\\';\\n            if(nxt[now][id] == 0) return false;\\n            now = nxt[now][id];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2533354,
                "title": "very-simple-approch-explained-by-love-babbar-c",
                "content": "\\t\\n****upvote so other can find this solution too****\\n\\t\\n\\t\\n\\tclass TrieNode{\\n    public:\\n    char data;\\n    TrieNode*children[26];\\n    bool isTerminal;\\n    TrieNode(char ch)\\n    {\\n        data = ch;\\n        for(int i=0; i<26; i++)\\n        {\\n            children[i] = NULL;\\n        }\\n        isTerminal = false;\\n    }\\n\\t};\\n\\n\\tclass Trie {\\n\\tpublic:\\n    TrieNode*root;  // this trieNode * class will store 3 val a above ;\\n    Trie() {\\n        root = new TrieNode(\\'\\\\n\\');\\n    }\\n    \\n    void insertWord(TrieNode*root, string word)\\n    {\\n        if(word.length()== 0)\\n        {\\n            root->isTerminal = true;\\n            return ;\\n        }\\n        int index = word[0]-\\'a\\';\\n        TrieNode*child;\\n        // case 1 if word is present inside the trie; just shift the child to next \\n        if(root->children[index] != NULL)\\n        {\\n            child = root->children[index];\\n        }\\n        // case 2 we have to insert the word inside the trie; and then shift child to next node;\\n        else {\\n            child = new TrieNode(word[0]);\\n            root->children[index] = child;\\n        }\\n        insertWord(child,word.substr(1)); // recursion ;\\n        \\n    }\\n    \\n    void insert(string word) {\\n        insertWord(root,word);\\n            }\\n    \\n    // searchWord\\n    bool searchWord(TrieNode*root,string word)\\n    {\\n        if(word.length()== 0)\\n            return root->isTerminal;\\n        \\n        int index = word[0]-\\'a\\';\\n        TrieNode*child;\\n        // case 1 if perent then continue;\\n        if(root->children[index] != NULL)\\n        {\\n            child = root->children[index];\\n        }\\n        else return false;\\n        \\n        // recursion\\n        return searchWord(child,word.substr(1));\\n    }\\n    \\n    bool search(string word) {\\n        return searchWord(root,word);\\n        \\n    }\\n    \\n    bool code(TrieNode*root,string prefix)\\n    {\\n        if(prefix.length()==0)\\n        {\\n            return true;\\n        }\\n        int index = prefix[0]-\\'a\\';\\n        TrieNode*child;\\n        // case 1 if perent then continue;\\n        if(root->children[index] != NULL)\\n        {\\n            child = root->children[index];\\n        }\\n        else return false;\\n        \\n        // recursion\\n        return code(child,prefix.substr(1));\\n    }\\n    bool startsWith(string prefix) {\\n        return code(root,prefix);\\n    }\\n\\t};\\n\\t\\n\\t\\n\\t\\n****https://www.linkedin.com/in/meanilsuthar/****\\n****connect and feel free to ask anything****",
                "solutionTags": [
                    "C",
                    "Trie",
                    "Recursion"
                ],
                "code": "\\t\\n****upvote so other can find this solution too****\\n\\t\\n\\t\\n\\tclass TrieNode{\\n    public:\\n    char data;\\n    TrieNode*children[26];\\n    bool isTerminal;\\n    TrieNode(char ch)\\n    {\\n        data = ch;\\n        for(int i=0; i<26; i++)\\n        {\\n            children[i] = NULL;\\n        }\\n        isTerminal = false;\\n    }\\n\\t};\\n\\n\\tclass Trie {\\n\\tpublic:\\n    TrieNode*root;  // this trieNode * class will store 3 val a above ;\\n    Trie() {\\n        root = new TrieNode(\\'\\\\n\\');\\n    }\\n    \\n    void insertWord(TrieNode*root, string word)\\n    {\\n        if(word.length()== 0)\\n        {\\n            root->isTerminal = true;\\n            return ;\\n        }\\n        int index = word[0]-\\'a\\';\\n        TrieNode*child;\\n        // case 1 if word is present inside the trie; just shift the child to next \\n        if(root->children[index] != NULL)\\n        {\\n            child = root->children[index];\\n        }\\n        // case 2 we have to insert the word inside the trie; and then shift child to next node;\\n        else {\\n            child = new TrieNode(word[0]);\\n            root->children[index] = child;\\n        }\\n        insertWord(child,word.substr(1)); // recursion ;\\n        \\n    }\\n    \\n    void insert(string word) {\\n        insertWord(root,word);\\n            }\\n    \\n    // searchWord\\n    bool searchWord(TrieNode*root,string word)\\n    {\\n        if(word.length()== 0)\\n            return root->isTerminal;\\n        \\n        int index = word[0]-\\'a\\';\\n        TrieNode*child;\\n        // case 1 if perent then continue;\\n        if(root->children[index] != NULL)\\n        {\\n            child = root->children[index];\\n        }\\n        else return false;\\n        \\n        // recursion\\n        return searchWord(child,word.substr(1));\\n    }\\n    \\n    bool search(string word) {\\n        return searchWord(root,word);\\n        \\n    }\\n    \\n    bool code(TrieNode*root,string prefix)\\n    {\\n        if(prefix.length()==0)\\n        {\\n            return true;\\n        }\\n        int index = prefix[0]-\\'a\\';\\n        TrieNode*child;\\n        // case 1 if perent then continue;\\n        if(root->children[index] != NULL)\\n        {\\n            child = root->children[index];\\n        }\\n        else return false;\\n        \\n        // recursion\\n        return code(child,prefix.substr(1));\\n    }\\n    bool startsWith(string prefix) {\\n        return code(root,prefix);\\n    }\\n\\t};\\n\\t\\n\\t\\n\\t\\n****https://www.linkedin.com/in/meanilsuthar/****\\n****connect and feel free to ask anything****",
                "codeTag": "Java"
            },
            {
                "id": 1868953,
                "title": "rust-trie-implementation",
                "content": "A trie (also called a prefix tree) is a special data structure that is used for efficiently storing and retriving data with a significant amount of overlap. For example, if you were to store an English dictionary in memory, you could use an array or a hashset. However, since there is a significant amount of overlap in the English alphabet (only 26 letters in total), it would be much more efficient to store the dictionary in a tree-like structure where words that share a sequence of letters share a sequence of nodes. As a bonus, this structure allows you to search all words that begin with a given prefix like \\'run\\' yielding \\'runner\\', \\'runs\\', and \\'runway\\'.\\n  \\nEven though you could use an `char[26]` array to store the keys, I would recommend using a hashmap instead because using a char array restricts you to the English alphabet. \\n```rust\\n/*\\n    TrieNode Implemention\\n*/\\nstruct TrieNode {\\n    children: HashMap<char,TrieNode>,\\n    is_word: bool,\\n}\\n\\nimpl TrieNode {\\n    fn new() -> Self {\\n        TrieNode {children: HashMap::new(), is_word: false}\\n    }   \\n}\\n\\n\\n/*\\n    Trie Implementation\\n*/\\n\\nstruct Trie {\\n    root: TrieNode,\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    fn new() -> Self {\\n        Trie {root: TrieNode::new()}\\n    }\\n    \\n    fn insert(&mut self, word: String) {\\n        let mut current_node = &mut self.root;\\n        \\n        for c in word.chars() {\\n            let next_node = current_node.children.entry(c)\\n                            .or_insert(TrieNode::new());\\n            current_node = next_node;\\n        }\\n        current_node.is_word = true;\\n    }\\n    \\n    fn search(&self, word: String) -> bool {\\n        let mut current_node = &self.root;\\n        \\n        for c in word.chars() {\\n            match current_node.children.get(&c) {\\n                Some(next_node) => current_node = next_node,\\n                None => return false,\\n            }\\n        }\\n        \\n        return current_node.is_word;\\n    }\\n    \\n    fn starts_with(&self, prefix: String) -> bool {\\n        let mut current_node = &self.root;\\n        \\n        for c in prefix.chars() {\\n            match current_node.children.get(&c) {\\n                Some(next_node) => current_node = next_node,\\n                None => return false,\\n            }\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Trie"
                ],
                "code": "```rust\\n/*\\n    TrieNode Implemention\\n*/\\nstruct TrieNode {\\n    children: HashMap<char,TrieNode>,\\n    is_word: bool,\\n}\\n\\nimpl TrieNode {\\n    fn new() -> Self {\\n        TrieNode {children: HashMap::new(), is_word: false}\\n    }   \\n}\\n\\n\\n/*\\n    Trie Implementation\\n*/\\n\\nstruct Trie {\\n    root: TrieNode,\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    fn new() -> Self {\\n        Trie {root: TrieNode::new()}\\n    }\\n    \\n    fn insert(&mut self, word: String) {\\n        let mut current_node = &mut self.root;\\n        \\n        for c in word.chars() {\\n            let next_node = current_node.children.entry(c)\\n                            .or_insert(TrieNode::new());\\n            current_node = next_node;\\n        }\\n        current_node.is_word = true;\\n    }\\n    \\n    fn search(&self, word: String) -> bool {\\n        let mut current_node = &self.root;\\n        \\n        for c in word.chars() {\\n            match current_node.children.get(&c) {\\n                Some(next_node) => current_node = next_node,\\n                None => return false,\\n            }\\n        }\\n        \\n        return current_node.is_word;\\n    }\\n    \\n    fn starts_with(&self, prefix: String) -> bool {\\n        let mut current_node = &self.root;\\n        \\n        for c in prefix.chars() {\\n            match current_node.children.get(&c) {\\n                Some(next_node) => current_node = next_node,\\n                None => return false,\\n            }\\n        }\\n        \\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1856219,
                "title": "java-trie-clean-code-with-diagram-on-paper-with-comments",
                "content": "\\n### Explanation:\\nCheck the comments in code line by line. Note that, we created a class TrieNode as well.\\n\\n### Dry Run\\n**Note:** I had created this diagram for Tries for Leetcode question 1268. It can be used here as well, as it gives pretty good idea about how Tries look like and helps a lot writing the code implementation. \\n![image](https://assets.leetcode.com/users/images/3d739df0-b820-46f1-bad3-9da8dc528447_1647468669.632167.png)\\n\\n\\n### Code\\n\\tclass Trie {\\n\\n\\t\\tTrieNode root;\\n\\t\\tpublic Trie() {\\n\\t\\t\\troot = new TrieNode(\\' \\');                                               // This is to create root node. it will create TrieNode object with empty char.  \\n\\t\\t}\\n\\n\\t\\tpublic void insert(String word) {                                           // Let\\'s we are inserting word \"mobile\"\\n\\t\\t\\tTrieNode node = this.root; \\n\\t\\t\\tfor(int i = 0; i < word.length(); i++){                                 // loop through each char of word\\n\\t\\t\\t\\tchar ch = word.charAt(i);                                           // let\\'s say first char is \\'m\\' which is to be inserted\\n\\t\\t\\t\\tif(node.children[ch - \\'a\\'] == null){                                // if no child object exists at children[m - \\'a\\']  \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// i.e children[109 - 97] = children[12]    \\n\\t\\t\\t\\t\\tnode.children[ch - \\'a\\'] = new TrieNode(ch);                     // then insert new TrieNode object of value \\'m\\' at children[12] \\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode = node.children[ch - \\'a\\'];                                     // go to next node. Just like in binary tree, we next go to node\\'s left or right.\\n\\t\\t\\t}\\n\\t\\t\\tnode.isEnd = true;                                                      // at the last node, write isEnd = true, to mark that we formed a word.    \\n\\t\\t}\\n\\n\\t\\tpublic boolean search(String word) {                                        // search all characters of word in Trie\\n\\t\\t\\tTrieNode node = this.root; \\n\\t\\t\\tfor(int i = 0; i < word.length(); i++){\\n\\t\\t\\t\\tchar ch = word.charAt(i);\\n\\t\\t\\t\\tif(node.children[ch - \\'a\\'] == null){                                // return false, if at any point char does not exist in node\\'s children. \\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode = node.children[ch - \\'a\\'];                                     // go to next child node.\\n\\t\\t\\t}\\n\\t\\t\\treturn (node.isEnd) ? true : false;\\n\\t\\t}\\n\\n\\t\\tpublic boolean startsWith(String prefix) {  \\n\\t\\t\\tTrieNode node = this.root; \\n\\t\\t\\tfor(int i = 0; i < prefix.length(); i++){\\n\\t\\t\\t\\tchar ch = prefix.charAt(i);\\n\\t\\t\\t\\tif(node.children[ch - \\'a\\'] == null){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode = node.children[ch - \\'a\\'];            \\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\n\\t\\t// ------------------------- My implementation ------------------------- //    \\n\\t\\tstatic class TrieNode{\\n\\t\\t\\tchar val;                                                                         // node\\'s char value e.g. \\'m\\'\\n\\t\\t\\tTrieNode[] children;                                                              // each node can have upto 26 children. so create array for that  \\n\\t\\t\\tboolean isEnd = false;                                                            // to mark whether formed a word at this point, or not. In diagram, the name is \"isWord\"  \\n\\t\\t\\tTrieNode(char val){                                                               // pass val in the constructor              \\n\\t\\t\\t\\tthis.val = val;\\n\\t\\t\\t\\tchildren = new TrieNode[26];                                                  // initialize children array of size 26. because every child is of char type. We know we have 26 characters (either upper or lower case).         \\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// --------------------------------------------------------------------- //\\n\\t}\\n\\t\\nIf you like the explanation, do **UpVote** :)\\nIf you need more explanation or, if got even more optimized way, **comment** below.",
                "solutionTags": [
                    "Java",
                    "Trie"
                ],
                "code": "\\n### Explanation:\\nCheck the comments in code line by line. Note that, we created a class TrieNode as well.\\n\\n### Dry Run\\n**Note:** I had created this diagram for Tries for Leetcode question 1268. It can be used here as well, as it gives pretty good idea about how Tries look like and helps a lot writing the code implementation. \\n![image](https://assets.leetcode.com/users/images/3d739df0-b820-46f1-bad3-9da8dc528447_1647468669.632167.png)\\n\\n\\n### Code\\n\\tclass Trie {\\n\\n\\t\\tTrieNode root;\\n\\t\\tpublic Trie() {\\n\\t\\t\\troot = new TrieNode(\\' \\');                                               // This is to create root node. it will create TrieNode object with empty char.  \\n\\t\\t}\\n\\n\\t\\tpublic void insert(String word) {                                           // Let\\'s we are inserting word \"mobile\"\\n\\t\\t\\tTrieNode node = this.root; \\n\\t\\t\\tfor(int i = 0; i < word.length(); i++){                                 // loop through each char of word\\n\\t\\t\\t\\tchar ch = word.charAt(i);                                           // let\\'s say first char is \\'m\\' which is to be inserted\\n\\t\\t\\t\\tif(node.children[ch - \\'a\\'] == null){                                // if no child object exists at children[m - \\'a\\']  \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// i.e children[109 - 97] = children[12]    \\n\\t\\t\\t\\t\\tnode.children[ch - \\'a\\'] = new TrieNode(ch);                     // then insert new TrieNode object of value \\'m\\' at children[12] \\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode = node.children[ch - \\'a\\'];                                     // go to next node. Just like in binary tree, we next go to node\\'s left or right.\\n\\t\\t\\t}\\n\\t\\t\\tnode.isEnd = true;                                                      // at the last node, write isEnd = true, to mark that we formed a word.    \\n\\t\\t}\\n\\n\\t\\tpublic boolean search(String word) {                                        // search all characters of word in Trie\\n\\t\\t\\tTrieNode node = this.root; \\n\\t\\t\\tfor(int i = 0; i < word.length(); i++){\\n\\t\\t\\t\\tchar ch = word.charAt(i);\\n\\t\\t\\t\\tif(node.children[ch - \\'a\\'] == null){                                // return false, if at any point char does not exist in node\\'s children. \\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode = node.children[ch - \\'a\\'];                                     // go to next child node.\\n\\t\\t\\t}\\n\\t\\t\\treturn (node.isEnd) ? true : false;\\n\\t\\t}\\n\\n\\t\\tpublic boolean startsWith(String prefix) {  \\n\\t\\t\\tTrieNode node = this.root; \\n\\t\\t\\tfor(int i = 0; i < prefix.length(); i++){\\n\\t\\t\\t\\tchar ch = prefix.charAt(i);\\n\\t\\t\\t\\tif(node.children[ch - \\'a\\'] == null){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode = node.children[ch - \\'a\\'];            \\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\n\\t\\t// ------------------------- My implementation ------------------------- //    \\n\\t\\tstatic class TrieNode{\\n\\t\\t\\tchar val;                                                                         // node\\'s char value e.g. \\'m\\'\\n\\t\\t\\tTrieNode[] children;                                                              // each node can have upto 26 children. so create array for that  \\n\\t\\t\\tboolean isEnd = false;                                                            // to mark whether formed a word at this point, or not. In diagram, the name is \"isWord\"  \\n\\t\\t\\tTrieNode(char val){                                                               // pass val in the constructor              \\n\\t\\t\\t\\tthis.val = val;\\n\\t\\t\\t\\tchildren = new TrieNode[26];                                                  // initialize children array of size 26. because every child is of char type. We know we have 26 characters (either upper or lower case).         \\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// --------------------------------------------------------------------- //\\n\\t}\\n\\t\\nIf you like the explanation, do **UpVote** :)\\nIf you need more explanation or, if got even more optimized way, **comment** below.",
                "codeTag": "Java"
            },
            {
                "id": 1509750,
                "title": "c-basic-implementation-easy-to-understand",
                "content": "```\\nclass Trienode{ // Or could use struct\\npublic:\\n    bool word ;\\n    Trienode* children[26] ;\\n    Trienode(): word ( false )\\n    {\\n        memset( children, 0 , sizeof(children));\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    Trie() { // Initialise\\n        root = new Trienode() ;\\n    }\\n    \\n    void insert(string s) {\\n        Trienode* node = root ;\\n        for( int i = 0 ; i < s.size(); i++ )\\n        {\\n            if( node->children[s[i]-\\'a\\'] == NULL)\\n            {\\n                node->children[s[i]-\\'a\\'] = new Trienode();\\n            }\\n            node = node->children[s[i]-\\'a\\'] ;\\n        } \\n        node->word = true;\\n    }\\n    \\n    bool search(string s) {\\n        Trienode* node = leaf(s);\\n        return node != NULL && node->word == true ;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Trienode*  node = leaf( prefix );\\n        if( node != NULL )\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    private:\\n    Trienode* root;\\n    Trienode* leaf( string prefix )\\n    {\\n        Trienode* node = root;\\n        for( int i = 0 ; i < prefix.size() && node ; i++ )\\n        {\\n            node = node->children[prefix[i]-\\'a\\'];\\n        }\\n        return node;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```\\n**GITHUB REPO LINK:** [Here](https://github.com/bhaumikmaan/Competitve-Programming-Solutions/tree/main/LeetCode)",
                "solutionTags": [],
                "code": "```\\nclass Trienode{ // Or could use struct\\npublic:\\n    bool word ;\\n    Trienode* children[26] ;\\n    Trienode(): word ( false )\\n    {\\n        memset( children, 0 , sizeof(children));\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    Trie() { // Initialise\\n        root = new Trienode() ;\\n    }\\n    \\n    void insert(string s) {\\n        Trienode* node = root ;\\n        for( int i = 0 ; i < s.size(); i++ )\\n        {\\n            if( node->children[s[i]-\\'a\\'] == NULL)\\n            {\\n                node->children[s[i]-\\'a\\'] = new Trienode();\\n            }\\n            node = node->children[s[i]-\\'a\\'] ;\\n        } \\n        node->word = true;\\n    }\\n    \\n    bool search(string s) {\\n        Trienode* node = leaf(s);\\n        return node != NULL && node->word == true ;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Trienode*  node = leaf( prefix );\\n        if( node != NULL )\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    private:\\n    Trienode* root;\\n    Trienode* leaf( string prefix )\\n    {\\n        Trienode* node = root;\\n        for( int i = 0 ; i < prefix.size() && node ; i++ )\\n        {\\n            node = node->children[prefix[i]-\\'a\\'];\\n        }\\n        return node;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110993,
                "title": "c-44ms-99-classical-with-comments",
                "content": "Runtime: 44 ms, faster than 98.80% of C++ online submissions for Implement Trie (Prefix Tree).\\nMemory Usage: 44.9 MB, less than 74.04% of C++ online submissions for Implement Trie (Prefix Tree).\\n```\\nclass Trie {\\npublic:\\n  struct Node{\\n    bool eow;\\n    Node* nb[26];\\n    Node(){eow = false; for(int i=0;i!=26;i++) nb[i] = NULL;}\\n  };\\n  Node *root;\\n  \\n  /** Initialize your data structure here. */\\n  Trie() {\\n    root = new Node();\\n    root->eow = true;                                   //for string \"\"\\n  }\\n  \\n  /** Inserts a word into the trie. */\\n  void insert(string word) {\\n    Node *tmp = root;\\n    \\n    for(int j = 0;j < word.size(); j++){\\n      int idx = word[j] - \\'a\\';\\n      if(tmp->nb[idx]) tmp = tmp->nb[idx];              //if this node present\\n      else                                              //if not\\n        for(;j != word.size();j++){\\n          idx = word[j] - \\'a\\';\\n          tmp->nb[idx] = new Node();\\n          tmp = tmp->nb[idx];\\n        }\\n    }\\n    tmp->eow = true;\\n  }\\n    \\n  /** Returns if the word is in the trie. */\\n  bool search(string word) {\\n    Node *tmp = root;\\n    for(int j = 0;j < word.size(); j++){\\n      int idx = word[j] - \\'a\\';\\n      if(tmp->nb[idx]) tmp = tmp->nb[idx];              //if this node present\\n      else return false;                                //if not\\n    }\\n    if(tmp->eow) return true;                           //if our string is ended and in tree we have mark eow(end of word)\\n    else return false;\\n  }\\n    \\n  /** Returns if there is any word in the trie that starts with the given prefix. */\\n  bool startsWith(string prefix) {\\n     Node *tmp = root;\\n    for(int j = 0;j < prefix.size(); j++){\\n      int idx = prefix[j] - \\'a\\';\\n      if(tmp->nb[idx]) tmp = tmp->nb[idx];              //if this node present\\n      else return false;                                //if not\\n    }\\n    return true;                                        //if our prefix is ended and we dont have contradictions\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n  struct Node{\\n    bool eow;\\n    Node* nb[26];\\n    Node(){eow = false; for(int i=0;i!=26;i++) nb[i] = NULL;}\\n  };\\n  Node *root;\\n  \\n  /** Initialize your data structure here. */\\n  Trie() {\\n    root = new Node();\\n    root->eow = true;                                   //for string \"\"\\n  }\\n  \\n  /** Inserts a word into the trie. */\\n  void insert(string word) {\\n    Node *tmp = root;\\n    \\n    for(int j = 0;j < word.size(); j++){\\n      int idx = word[j] - \\'a\\';\\n      if(tmp->nb[idx]) tmp = tmp->nb[idx];              //if this node present\\n      else                                              //if not\\n        for(;j != word.size();j++){\\n          idx = word[j] - \\'a\\';\\n          tmp->nb[idx] = new Node();\\n          tmp = tmp->nb[idx];\\n        }\\n    }\\n    tmp->eow = true;\\n  }\\n    \\n  /** Returns if the word is in the trie. */\\n  bool search(string word) {\\n    Node *tmp = root;\\n    for(int j = 0;j < word.size(); j++){\\n      int idx = word[j] - \\'a\\';\\n      if(tmp->nb[idx]) tmp = tmp->nb[idx];              //if this node present\\n      else return false;                                //if not\\n    }\\n    if(tmp->eow) return true;                           //if our string is ended and in tree we have mark eow(end of word)\\n    else return false;\\n  }\\n    \\n  /** Returns if there is any word in the trie that starts with the given prefix. */\\n  bool startsWith(string prefix) {\\n     Node *tmp = root;\\n    for(int j = 0;j < prefix.size(); j++){\\n      int idx = prefix[j] - \\'a\\';\\n      if(tmp->nb[idx]) tmp = tmp->nb[idx];              //if this node present\\n      else return false;                                //if not\\n    }\\n    return true;                                        //if our prefix is ended and we dont have contradictions\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 633007,
                "title": "25-lines-python-use-50-less-code-than-c-should-i-change-to-python",
                "content": "Hi, guys, what is your suggestion to convert from c++ to python? How long does it take to become familiar with python?\\n\\n```\\nclass Trie(object):            \\n    def __init__(self):\\n        self.root = {} # TrieNode: is dict, or hashmap       \\n \\n    def insert(self, word):\\n        p = self.root\\n        for c in word:            \\n            if c not in p: \\n                p[c] = {}\\n            p = p[c]\\n        p[\\'#\\'] = True  # \\u2018#\\u2019 is a key indicating word bounday\\n \\n    def search(self, word):\\n        node = self.find(word)\\n        return node is not None and \\'#\\' in node        \\n \\n    def startsWith(self, prefix):\\n        return self.find(prefix) is not None\\n    \\n    def find(self, prefix):\\n        p = self.root\\n        for c in prefix:            \\n            if c not in p: return None\\n            p = p[c]\\n        return p\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie(object):            \\n    def __init__(self):\\n        self.root = {} # TrieNode: is dict, or hashmap       \\n \\n    def insert(self, word):\\n        p = self.root\\n        for c in word:            \\n            if c not in p: \\n                p[c] = {}\\n            p = p[c]\\n        p[\\'#\\'] = True  # \\u2018#\\u2019 is a key indicating word bounday\\n \\n    def search(self, word):\\n        node = self.find(word)\\n        return node is not None and \\'#\\' in node        \\n \\n    def startsWith(self, prefix):\\n        return self.find(prefix) is not None\\n    \\n    def find(self, prefix):\\n        p = self.root\\n        for c in prefix:            \\n            if c not in p: return None\\n            p = p[c]\\n        return p\\n```",
                "codeTag": "Java"
            },
            {
                "id": 600925,
                "title": "swift-implementation-beats-100",
                "content": "```\\nclass TrieNode {\\n    var word = \"\"\\n    var children = [Character : TrieNode]()\\n}\\n\\nclass Trie {\\n    var root = TrieNode()\\n\\n    func insert(_ word: String) {\\n        var currentNode = root \\n        \\n        for char in word {\\n            if let node = currentNode.children[char] {\\n                currentNode = node\\n            } else {\\n                let newNode = TrieNode()\\n                currentNode.children[char] = newNode\\n                currentNode = newNode\\n            }\\n        }\\n        currentNode.word = word \\n    }\\n    \\n    func search(_ word: String) -> Bool {\\n        var currentNode = root\\n        \\n        for char in word {\\n            if let node = currentNode.children[char] {\\n                currentNode = node\\n            } else {\\n                return false\\n            }\\n        }\\n        \\n        return currentNode.word.isEmpty ? false : true \\n    }\\n    \\n    func startsWith(_ prefix: String) -> Bool {\\n        var currentNode = root\\n        \\n        for char in prefix {\\n            if let node = currentNode.children[char] {\\n                currentNode = node\\n            } else {\\n                return false\\n            }\\n        }\\n        return currentNode.children.isEmpty && currentNode.word.isEmpty ? false : true \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode {\\n    var word = \"\"\\n    var children = [Character : TrieNode]()\\n}\\n\\nclass Trie {\\n    var root = TrieNode()\\n\\n    func insert(_ word: String) {\\n        var currentNode = root \\n        \\n        for char in word {\\n            if let node = currentNode.children[char] {\\n                currentNode = node\\n            } else {\\n                let newNode = TrieNode()\\n                currentNode.children[char] = newNode\\n                currentNode = newNode\\n            }\\n        }\\n        currentNode.word = word \\n    }\\n    \\n    func search(_ word: String) -> Bool {\\n        var currentNode = root\\n        \\n        for char in word {\\n            if let node = currentNode.children[char] {\\n                currentNode = node\\n            } else {\\n                return false\\n            }\\n        }\\n        \\n        return currentNode.word.isEmpty ? false : true \\n    }\\n    \\n    func startsWith(_ prefix: String) -> Bool {\\n        var currentNode = root\\n        \\n        for char in prefix {\\n            if let node = currentNode.children[char] {\\n                currentNode = node\\n            } else {\\n                return false\\n            }\\n        }\\n        return currentNode.children.isEmpty && currentNode.word.isEmpty ? false : true \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 539955,
                "title": "implementation-in-java-using-hashmap",
                "content": "```\\nclass TrieNode{\\n    Map<Character,TrieNode> children;\\n    boolean endOfWord = false;\\n    TrieNode(){\\n        children = new HashMap<>();\\n    }\\n}\\n\\n\\nclass Trie {\\n\\n    /** Initialize your data structure here. */\\n    private TrieNode root;\\n    public Trie() {\\n        \\n        root = new TrieNode();\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        \\n        TrieNode current = root;\\n        for(int i=0;i<word.length();i++){\\n            if(!current.children.containsKey(word.charAt(i))){\\n                TrieNode childOfCurrentNode = new TrieNode();\\n                current.children.put(word.charAt(i),childOfCurrentNode);\\n            }\\n            current = current.children.get(word.charAt(i));\\n        }\\n        current.endOfWord=true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public boolean search(String word) {\\n        TrieNode current = root;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            char c = word.charAt(i);\\n            if(current.children.containsKey(c)){\\n                current = current.children.get(c);\\n            }\\n            else return false;\\n        }\\n        if(current.endOfWord==true) return true;\\n        return false;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) {\\n        TrieNode current = root;\\n        for(int i=0;i<prefix.length();i++)\\n        {\\n            char c = prefix.charAt(i);\\n            if(current.children.containsKey(c)){\\n                current = current.children.get(c);\\n            }\\n            else return false;\\n        }\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode{\\n    Map<Character,TrieNode> children;\\n    boolean endOfWord = false;\\n    TrieNode(){\\n        children = new HashMap<>();\\n    }\\n}\\n\\n\\nclass Trie {\\n\\n    /** Initialize your data structure here. */\\n    private TrieNode root;\\n    public Trie() {\\n        \\n        root = new TrieNode();\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        \\n        TrieNode current = root;\\n        for(int i=0;i<word.length();i++){\\n            if(!current.children.containsKey(word.charAt(i))){\\n                TrieNode childOfCurrentNode = new TrieNode();\\n                current.children.put(word.charAt(i),childOfCurrentNode);\\n            }\\n            current = current.children.get(word.charAt(i));\\n        }\\n        current.endOfWord=true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public boolean search(String word) {\\n        TrieNode current = root;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            char c = word.charAt(i);\\n            if(current.children.containsKey(c)){\\n                current = current.children.get(c);\\n            }\\n            else return false;\\n        }\\n        if(current.endOfWord==true) return true;\\n        return false;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) {\\n        TrieNode current = root;\\n        for(int i=0;i<prefix.length();i++)\\n        {\\n            char c = prefix.charAt(i);\\n            if(current.children.containsKey(c)){\\n                current = current.children.get(c);\\n            }\\n            else return false;\\n        }\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 486020,
                "title": "python-using-dictionary",
                "content": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = {} \\n        self.end = \\'*\\'\\n\\n    def insert(self, word: str) -> None:\\n        node = self.root\\n        for l in word:\\n            if l not in node:\\n                node[l] = {}\\n                node = node[l]\\n            else: node = node[l]\\n        node[self.end] = True   \\n\\n    def search(self, word: str) -> bool:\\n        node = self.root\\n        for l in word:\\n            if l not in node: return False\\n            else: node = node[l]\\n        return self.end in node\\n        \\n    def startsWith(self, prefix: str) -> bool:\\n        node = self.root\\n        for l in prefix:\\n            if l not in node: return False\\n            else: node = node[l]\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = {} \\n        self.end = \\'*\\'\\n\\n    def insert(self, word: str) -> None:\\n        node = self.root\\n        for l in word:\\n            if l not in node:\\n                node[l] = {}\\n                node = node[l]\\n            else: node = node[l]\\n        node[self.end] = True   \\n\\n    def search(self, word: str) -> bool:\\n        node = self.root\\n        for l in word:\\n            if l not in node: return False\\n            else: node = node[l]\\n        return self.end in node\\n        \\n    def startsWith(self, prefix: str) -> bool:\\n        node = self.root\\n        for l in prefix:\\n            if l not in node: return False\\n            else: node = node[l]\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 315849,
                "title": "c-solution-64ms-faster-than-95-31-of-cpp-submissions",
                "content": "```\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie *children[26];\\n    bool isEndOfWord;\\n    \\n    Trie() {\\n        this->isEndOfWord = false;\\n        for (int i = 0; i < 26; i++)\\n\\t\\t\\tthis->children[i] = NULL;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        Trie *node = this;\\n        for(int i = 0; i < word.size(); i++) {\\n            int index = word[i] - \\'a\\';\\n            if(!node->children[index])\\n                node->children[index] = new Trie();\\n            node = node->children[index];\\n        }\\n        //mark end of word as true\\n        node->isEndOfWord = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        Trie *node = this;\\n        for(int i = 0; i < word.size(); i++) {\\n            int index = word[i] - \\'a\\';\\n            if(!node->children[index]) return false;\\n            node = node->children[index];\\n        } \\n\\t\\t//return true only if the given node is the end of the word\\n        return node->isEndOfWord;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        Trie *node = this;\\n        for(int i = 0; i < prefix.size(); i++) {\\n            int index = prefix[i] - \\'a\\';\\n            if(!node->children[index]) return false;\\n            node = node->children[index];\\n        } \\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie *children[26];\\n    bool isEndOfWord;\\n    \\n    Trie() {\\n        this->isEndOfWord = false;\\n        for (int i = 0; i < 26; i++)\\n\\t\\t\\tthis->children[i] = NULL;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        Trie *node = this;\\n        for(int i = 0; i < word.size(); i++) {\\n            int index = word[i] - \\'a\\';\\n            if(!node->children[index])\\n                node->children[index] = new Trie();\\n            node = node->children[index];\\n        }\\n        //mark end of word as true\\n        node->isEndOfWord = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        Trie *node = this;\\n        for(int i = 0; i < word.size(); i++) {\\n            int index = word[i] - \\'a\\';\\n            if(!node->children[index]) return false;\\n            node = node->children[index];\\n        } \\n\\t\\t//return true only if the given node is the end of the word\\n        return node->isEndOfWord;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        Trie *node = this;\\n        for(int i = 0; i < prefix.size(); i++) {\\n            int index = prefix[i] - \\'a\\';\\n            if(!node->children[index]) return false;\\n            node = node->children[index];\\n        } \\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 301435,
                "title": "rust-solution-8ms-beats-100-00",
                "content": "#### This is 8ms\\n```\\n#[derive(Default)]\\nstruct Trie {\\n    is_end: bool,\\n    nodes: [Option<Box<Trie>>; 26],\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    fn insert(&mut self, word: String) {\\n       let mut curr = self; \\n        for i in word.chars().map(|char| (char as u8 - \\'a\\' as u8) as usize) {\\n            curr = curr.nodes[i].get_or_insert_with(|| Box::new(Trie::new()));\\n        }\\n        curr.is_end = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    fn search(&self, word: String) -> bool {\\n       let mut curr = self;\\n        for i in word.chars().map(|char| (char as u8 - \\'a\\' as u8) as usize) {\\n            match curr.nodes[i].as_ref() {\\n                Some(node) => { curr = node; },\\n                None => { return false; },\\n            }\\n        }\\n        curr.is_end\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fn starts_with(&self, prefix: String) -> bool {\\n       let mut curr = self;\\n        for i in prefix.chars().map(|char| (char as u8 - \\'a\\' as u8) as usize) {\\n            match curr.nodes[i].as_ref() {\\n                Some(node) => { curr = node; },\\n                None => { return false; },\\n            }\\n        }\\n        true\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie::new();\\n * obj.insert(word);\\n * let ret_2: bool = obj.search(word);\\n * let ret_3: bool = obj.starts_with(prefix);\\n */\\n ```\\n \\n #### This is 56 ms\\n ```\\n use std::collections::HashMap;\\n\\n#[derive(Default)]\\nstruct Trie {\\n    is_word: bool,\\n    next: HashMap<char, Trie>,\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    fn insert(&mut self, word: String) {\\n       let mut curr = self; \\n        for ch in word.chars() { \\n            curr = curr.next.entry(ch).or_insert(Trie::new());\\n        }\\n        curr.is_word = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    fn search(&self, word: String) -> bool {\\n       self.find(word).map_or(false, |t| t.is_word)\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fn starts_with(&self, prefix: String) -> bool {\\n        self.find(prefix).is_some()\\n    }\\n    \\n    fn find(&self, word: String) -> Option<&Trie> {\\n        let mut curr = self;\\n        for ch in word.chars() {\\n            curr = curr.next.get(&ch)?;\\n        }\\n        Some(curr)\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie::new();\\n * obj.insert(word);\\n * let ret_2: bool = obj.search(word);\\n * let ret_3: bool = obj.starts_with(prefix);\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\n#[derive(Default)]\\nstruct Trie {\\n    is_end: bool,\\n    nodes: [Option<Box<Trie>>; 26],\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    fn insert(&mut self, word: String) {\\n       let mut curr = self; \\n        for i in word.chars().map(|char| (char as u8 - \\'a\\' as u8) as usize) {\\n            curr = curr.nodes[i].get_or_insert_with(|| Box::new(Trie::new()));\\n        }\\n        curr.is_end = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    fn search(&self, word: String) -> bool {\\n       let mut curr = self;\\n        for i in word.chars().map(|char| (char as u8 - \\'a\\' as u8) as usize) {\\n            match curr.nodes[i].as_ref() {\\n                Some(node) => { curr = node; },\\n                None => { return false; },\\n            }\\n        }\\n        curr.is_end\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fn starts_with(&self, prefix: String) -> bool {\\n       let mut curr = self;\\n        for i in prefix.chars().map(|char| (char as u8 - \\'a\\' as u8) as usize) {\\n            match curr.nodes[i].as_ref() {\\n                Some(node) => { curr = node; },\\n                None => { return false; },\\n            }\\n        }\\n        true\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie::new();\\n * obj.insert(word);\\n * let ret_2: bool = obj.search(word);\\n * let ret_3: bool = obj.starts_with(prefix);\\n */\\n ```\n```\\n use std::collections::HashMap;\\n\\n#[derive(Default)]\\nstruct Trie {\\n    is_word: bool,\\n    next: HashMap<char, Trie>,\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    fn insert(&mut self, word: String) {\\n       let mut curr = self; \\n        for ch in word.chars() { \\n            curr = curr.next.entry(ch).or_insert(Trie::new());\\n        }\\n        curr.is_word = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    fn search(&self, word: String) -> bool {\\n       self.find(word).map_or(false, |t| t.is_word)\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fn starts_with(&self, prefix: String) -> bool {\\n        self.find(prefix).is_some()\\n    }\\n    \\n    fn find(&self, word: String) -> Option<&Trie> {\\n        let mut curr = self;\\n        for ch in word.chars() {\\n            curr = curr.next.get(&ch)?;\\n        }\\n        Some(curr)\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie::new();\\n * obj.insert(word);\\n * let ret_2: bool = obj.search(word);\\n * let ret_3: bool = obj.starts_with(prefix);\\n */\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 142574,
                "title": "javascript-es6-solution-easy-to-understand",
                "content": "```\\nclass TrieNode {\\n\\tconstructor() {\\n\\t\\tthis.children = new Array(26) //can be a map, can be of different length based on requirement.\\n\\t\\tthis.isWordEnd = false;\\n\\t\\t//Store key if you wish to.\\n\\t}\\n}\\n\\nconst searchPrefix = (root, word) => {\\n\\tlet offset = \\'a\\'.charCodeAt(0);\\n\\tfor (let i=0; i<word.length; i++) {\\n\\t\\tlet index = word[i].charCodeAt(0) - offset;\\n\\t\\tif(!root.children[index]) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\troot = root.children[index];\\n\\t}\\n\\treturn root;\\n};\\n\\nclass Trie {\\n\\tconstructor() {\\n\\t\\tthis.root = new TrieNode();\\n\\t}\\n\\n\\tinsert(word) {\\n\\t\\tlet curr = this.root,\\n\\t\\t\\toffset = \\'a\\'.charCodeAt(0);\\n\\t\\tfor(let i =0; i< word.length; i++) {\\n\\t\\t\\tlet index = word[i].charCodeAt(0) - offset;\\n\\t\\t\\tif(!curr.children[index]) {\\n\\t\\t\\t\\tcurr.children[index] = new TrieNode();\\n\\t\\t\\t}\\n\\t\\t\\tcurr = curr.children[index];\\n\\t\\t}\\n\\t\\tcurr.isWordEnd = true;\\n\\t}\\n\\n\\n\\tsearch(word) {\\n\\t\\tlet node = searchPrefix(this.root, word);\\n\\t\\treturn node != null && node.isWordEnd;\\n\\t}\\n\\n\\tstartsWith(word) {\\n\\t\\tlet node = searchPrefix(this.root, word);\\n\\t\\treturn node != null;\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass TrieNode {\\n\\tconstructor() {\\n\\t\\tthis.children = new Array(26) //can be a map, can be of different length based on requirement.\\n\\t\\tthis.isWordEnd = false;\\n\\t\\t//Store key if you wish to.\\n\\t}\\n}\\n\\nconst searchPrefix = (root, word) => {\\n\\tlet offset = \\'a\\'.charCodeAt(0);\\n\\tfor (let i=0; i<word.length; i++) {\\n\\t\\tlet index = word[i].charCodeAt(0) - offset;\\n\\t\\tif(!root.children[index]) {\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\troot = root.children[index];\\n\\t}\\n\\treturn root;\\n};\\n\\nclass Trie {\\n\\tconstructor() {\\n\\t\\tthis.root = new TrieNode();\\n\\t}\\n\\n\\tinsert(word) {\\n\\t\\tlet curr = this.root,\\n\\t\\t\\toffset = \\'a\\'.charCodeAt(0);\\n\\t\\tfor(let i =0; i< word.length; i++) {\\n\\t\\t\\tlet index = word[i].charCodeAt(0) - offset;\\n\\t\\t\\tif(!curr.children[index]) {\\n\\t\\t\\t\\tcurr.children[index] = new TrieNode();\\n\\t\\t\\t}\\n\\t\\t\\tcurr = curr.children[index];\\n\\t\\t}\\n\\t\\tcurr.isWordEnd = true;\\n\\t}\\n\\n\\n\\tsearch(word) {\\n\\t\\tlet node = searchPrefix(this.root, word);\\n\\t\\treturn node != null && node.isWordEnd;\\n\\t}\\n\\n\\tstartsWith(word) {\\n\\t\\tlet node = searchPrefix(this.root, word);\\n\\t\\treturn node != null;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 139156,
                "title": "custom-case-bug",
                "content": "I cannot really understand what is happening. When i run custom case on exact input it returns right output. Put when i submit it is outputting wrong result. I need some one to take a look at it.\\n\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/bdunubold/image_1528954032.png)\\n\\n```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.Node = TrieNode()\\n        \\n\\n    def insert(self, word):\\n        \"\"\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: void\\n        \"\"\"\\n        node = self.Node\\n        for i in word:\\n            if not node.contains_key(i):\\n                node.put(i, TrieNode())\\n            node = node.get(i)\\n        node.set_end()\\n        \\n    def default_search(self, word):\\n        node = self.Node\\n\\n        for i in word:\\n            if not node.contains_key(i):\\n                return None\\n            node = node.get(i)\\n        return node\\n\\n    def search(self, word):\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        node = self.default_search(word)\\n        \\n        return node and node.is_end\\n        \\n\\n    def startsWith(self, prefix):\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \"\"\"\\n        node = self.default_search(prefix)\\n        return node is not None\\n\\nclass TrieNode:\\n    is_end = False\\n    links = [None]*26\\n    \\n    def put(self, char, Node):\\n        self.links[ord(char) - ord(\\'a\\')] = Node\\n    \\n    def contains_key(self, char):\\n        return self.links[ord(char) - ord(\\'a\\')] != None\\n\\n    def get(self, char):\\n        return self.links[ord(char) - ord(\\'a\\')]\\n    \\n    def set_end(self):\\n        self.is_end = True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.Node = TrieNode()\\n        \\n\\n    def insert(self, word):\\n        \"\"\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: void\\n        \"\"\"\\n        node = self.Node\\n        for i in word:\\n            if not node.contains_key(i):\\n                node.put(i, TrieNode())\\n            node = node.get(i)\\n        node.set_end()\\n        \\n    def default_search(self, word):\\n        node = self.Node\\n\\n        for i in word:\\n            if not node.contains_key(i):\\n                return None\\n            node = node.get(i)\\n        return node\\n\\n    def search(self, word):\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        node = self.default_search(word)\\n        \\n        return node and node.is_end\\n        \\n\\n    def startsWith(self, prefix):\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \"\"\"\\n        node = self.default_search(prefix)\\n        return node is not None\\n\\nclass TrieNode:\\n    is_end = False\\n    links = [None]*26\\n    \\n    def put(self, char, Node):\\n        self.links[ord(char) - ord(\\'a\\')] = Node\\n    \\n    def contains_key(self, char):\\n        return self.links[ord(char) - ord(\\'a\\')] != None\\n\\n    def get(self, char):\\n        return self.links[ord(char) - ord(\\'a\\')]\\n    \\n    def set_end(self):\\n        self.is_end = True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58835,
                "title": "12-lines-python-code",
                "content": "```\\nfrom collections import defaultdict\\nfrom functools import reduce\\nTrieNode = lambda: defaultdict(TrieNode)\\nclass Trie:\\n    def __init__(self):\\n        self.trie = TrieNode()\\n    def insert(self, word):\\n        reduce(dict.__getitem__, word, self.trie)['end'] = True\\n    def search(self, word):\\n        return reduce(lambda d,k: d[k] if k in d else TrieNode(), word, self.trie).get('end', False)\\n    def startsWith(self, word):\\n        return bool(reduce(lambda d,k: d[k] if k in d else TrieNode(), word, self.trie).keys())\\n```",
                "solutionTags": [],
                "code": "```\\nfrom collections import defaultdict\\nfrom functools import reduce\\nTrieNode = lambda: defaultdict(TrieNode)\\nclass Trie:\\n    def __init__(self):\\n        self.trie = TrieNode()\\n    def insert(self, word):\\n        reduce(dict.__getitem__, word, self.trie)['end'] = True\\n    def search(self, word):\\n        return reduce(lambda d,k: d[k] if k in d else TrieNode(), word, self.trie).get('end', False)\\n    def startsWith(self, word):\\n        return bool(reduce(lambda d,k: d[k] if k in d else TrieNode(), word, self.trie).keys())\\n```",
                "codeTag": "Java"
            },
            {
                "id": 59019,
                "title": "56ms-c-solution",
                "content": "    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode():isWord(false){\\n            memset(Next,0,sizeof(TrieNode*)*26);\\n    \\n        }\\n        TrieNode(char _c):c(_c),isWord(false) {\\n            memset(Next,0,sizeof(TrieNode*)*26);\\n        }\\n        TrieNode* Next[26];\\n        char c;\\n        bool isWord;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            TrieNode*p = root;\\n            int index;\\n            \\n            for(char c:word)\\n            {\\n                index = c - 'a';\\n                if(p->Next[index] == NULL)\\n                    p->Next[index] = new TrieNode(c);\\n                p = p->Next[index];\\n            }\\n            p->isWord = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n            TrieNode*p = root;\\n            int index;\\n            \\n            for(char c:word)\\n            {\\n                index = c - 'a';\\n                if(p->Next[index] == NULL)\\n                    return false;\\n                p = p->Next[index];\\n            }\\n            return p->isWord;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            TrieNode*p = root;\\n            int index;\\n            \\n            for(char c:prefix)\\n            {\\n                index = c - 'a';\\n                if(p->Next[index] == NULL)\\n                    return false;\\n                p = p->Next[index];\\n            }\\n            return true;\\n        }\\n    \\n    private:\\n        TrieNode* root;\\n    };\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie;\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "solutionTags": [],
                "code": "    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode():isWord(false){\\n            memset(Next,0,sizeof(TrieNode*)*26);\\n    \\n        }\\n        TrieNode(char _c):c(_c),isWord(false) {\\n            memset(Next,0,sizeof(TrieNode*)*26);\\n        }\\n        TrieNode* Next[26];\\n        char c;\\n        bool isWord;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            TrieNode*p = root;\\n            int index;\\n            \\n            for(char c:word)\\n            {\\n                index = c - 'a';\\n                if(p->Next[index] == NULL)\\n                    p->Next[index] = new TrieNode(c);\\n                p = p->Next[index];\\n            }\\n            p->isWord = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n            TrieNode*p = root;\\n            int index;\\n            \\n            for(char c:word)\\n            {\\n                index = c - 'a';\\n                if(p->Next[index] == NULL)\\n                    return false;\\n                p = p->Next[index];\\n            }\\n            return p->isWord;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            TrieNode*p = root;\\n            int index;\\n            \\n            for(char c:prefix)\\n            {\\n                index = c - 'a';\\n                if(p->Next[index] == NULL)\\n                    return false;\\n                p = p->Next[index];\\n            }\\n            return true;\\n        }\\n    \\n    private:\\n        TrieNode* root;\\n    };\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie;\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "codeTag": "Java"
            },
            {
                "id": 58990,
                "title": "simple-java-solution",
                "content": "    class TrieNode {\\n    \\n        boolean isWordEnd;\\n        Map<Character, TrieNode> children;\\n    \\n        // Initialize your data structure here.\\n        public TrieNode() {\\n            children = new HashMap<Character, TrieNode>();\\n        }\\n    }\\n    \\n    public class Trie {\\n    \\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            char[] s = word.toCharArray();\\n            TrieNode p = root;\\n            int i = 0;\\n            int n = s.length;\\n    \\n            // travers existing\\n            while (i < n) {\\n                TrieNode next = p.children.get(s[i]);\\n                if (next != null) {\\n                    p = next;\\n                    i++;\\n                } else {\\n                    break;\\n                }\\n            }\\n    \\n            // append new nodes\\n            while (i < n) {\\n                TrieNode newTrie = new TrieNode();\\n                p.children.put(s[i], newTrie);\\n                p = newTrie;\\n                i = i + 1;\\n            }\\n    \\n            // set word end\\n            p.isWordEnd = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            TrieNode p = find(root, word);\\n            return p != null && p.isWordEnd;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            TrieNode p = find(root, prefix);\\n            return p != null;\\n        }\\n    \\n        TrieNode find(TrieNode root, String word) {\\n            TrieNode p = root;\\n            for (int i = 0; i < word.length(); i++) {\\n                char c = word.charAt(i);\\n                TrieNode child = p.children.get(c);\\n                if (child == null) {\\n                    return null;\\n                } else {\\n                    p = child;\\n                }\\n            }\\n            return p;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    class TrieNode {\\n    \\n        boolean isWordEnd;\\n        Map<Character, TrieNode> children;\\n    \\n        // Initialize your data structure here.\\n        public TrieNode() {\\n            children = new HashMap<Character, TrieNode>();\\n        }\\n    }\\n    \\n    public class Trie {\\n    \\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            char[] s = word.toCharArray();\\n            TrieNode p = root;\\n            int i = 0;\\n            int n = s.length;\\n    \\n            // travers existing\\n            while (i < n) {\\n                TrieNode next = p.children.get(s[i]);\\n                if (next != null) {\\n                    p = next;\\n                    i++;\\n                } else {\\n                    break;\\n                }\\n            }\\n    \\n            // append new nodes\\n            while (i < n) {\\n                TrieNode newTrie = new TrieNode();\\n                p.children.put(s[i], newTrie);\\n                p = newTrie;\\n                i = i + 1;\\n            }\\n    \\n            // set word end\\n            p.isWordEnd = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            TrieNode p = find(root, word);\\n            return p != null && p.isWordEnd;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            TrieNode p = find(root, prefix);\\n            return p != null;\\n        }\\n    \\n        TrieNode find(TrieNode root, String word) {\\n            TrieNode p = root;\\n            for (int i = 0; i < word.length(); i++) {\\n                char c = word.charAt(i);\\n                TrieNode child = p.children.get(c);\\n                if (child == null) {\\n                    return null;\\n                } else {\\n                    p = child;\\n                }\\n            }\\n            return p;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 59063,
                "title": "ac-java-solution-using-map-for-next",
                "content": "This implementation uses Map for next. No stack or recursion is used.\\n\\n    class TrieNode {\\n        // Initialize your data structure here.\\n        public boolean isWord;\\n        public Map<Character, TrieNode> next; // HashMap\\n        public TrieNode() {\\n            isWord = false;\\n            next = new HashMap<>();\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            TrieNode node = root;\\n            for (Character c : word.toCharArray()) {\\n                if (!node.next.containsKey(c)) {\\n                    node.next.put(c, new TrieNode());\\n                }\\n                node = node.next.get(c);\\n            }\\n            node.isWord = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            TrieNode node = get(word);\\n            return node != null && node.isWord;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            TrieNode node = get(prefix);\\n            return node != null;\\n        }\\n        \\n        //\\n        private TrieNode get(String key) {\\n            TrieNode node = root;\\n            for (Character c : key.toCharArray()) {\\n                node = node.next.get(c);\\n                if (node == null) return null;\\n            }\\n            return node;\\n        }\\n    }",
                "solutionTags": [],
                "code": "This implementation uses Map for next. No stack or recursion is used.\\n\\n    class TrieNode {\\n        // Initialize your data structure here.\\n        public boolean isWord;\\n        public Map<Character, TrieNode> next; // HashMap\\n        public TrieNode() {\\n            isWord = false;\\n            next = new HashMap<>();\\n        }\\n    }\\n    \\n    public class Trie {\\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            TrieNode node = root;\\n            for (Character c : word.toCharArray()) {\\n                if (!node.next.containsKey(c)) {\\n                    node.next.put(c, new TrieNode());\\n                }\\n                node = node.next.get(c);\\n            }\\n            node.isWord = true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            TrieNode node = get(word);\\n            return node != null && node.isWord;\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            TrieNode node = get(prefix);\\n            return node != null;\\n        }\\n        \\n        //\\n        private TrieNode get(String key) {\\n            TrieNode node = root;\\n            for (Character c : key.toCharArray()) {\\n                node = node.next.get(c);\\n                if (node == null) return null;\\n            }\\n            return node;\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3358925,
                "title": "easy-python3-solution-explanation-beats-90-only-dictionaries-no-user-defined-classes",
                "content": "# What is a Trie? \\nA trie is virtually the same a normal tree, but with one important property, each node has a **maximum** of 26 children, one for each letter of the alphabet.\\n\\n## How Do We Store Words With a Trie?\\nLet\\'s walk through an example using the word `apple`\\n\\nThe letter `a` is followed by `p`, which is followed by `p`, which is followed by `l`, which is followed by `e` and for reasons which will be more apparent later, we will add to the end of every word an arbitrary special character such as an asterisk `*` \\n\\nThus, the resulting trie structure will look something like this:\\n\\n```\\na\\n|\\np\\n|\\np\\n|\\nl\\n|\\ne\\n|\\n*\\n```\\nNow, what if we were to add the words `apt` and `apples`?\\n\\nTo avoid having to repeatedly store the same characters in separate trie\\'s we can add to the existing trie. \\n\\nThus, our updated trie would look like this:\\n\\n```\\n    a\\n    |\\n    p\\n   / \\\\\\n  p   t\\n  |   |\\n  l   *\\n  |\\n  e\\n / \\\\\\ns   *\\n|\\n*\\n```\\n\\nThe last problem we have to consider is what if we wanted to store a word that does not start with an `a`? For example, the word `hi`\\n\\nThen we would need a separate trie, but note that due to the size of the alphabet, there would only ever be at most 26 separate trie\\'s.\\n\\nThus, the updated list of trie\\'s would look like this:\\n\\n```\\n    a         h\\n    |         |\\n    p         i\\n   / \\\\        |\\n  p   t       *\\n  |   |\\n  l   *\\n  |\\n  e\\n / \\\\\\ns   *\\n|\\n*\\n```\\n\\n## How Do We Find Words in a Trie?\\nWith the structure of our trie down, its fairly simple to find if a word exists. \\n\\nSimply iterate through the characters in a word and see if there\\'s a corresponding trie branch, with one additional step.\\n\\nRemember the asterisk that was added to the end of each word? Now we have to add a check to see if the there\\'s an asterisk after the last letter in our word. Otherwise we might return `True` when asked if the word `app` is in our trie when, in fact, only the word `apple` was added. \\n\\n## How Do We Find Prefixes in a Trie?\\nThe same way we find words, except this time we purposely leave out the check for an asterisk at the end of the prefix, because we aren\\'t searching for complete words anymore.\\n\\nSo in this case, we would return `True` if we\\'re looking for the prefix `app` and `apple` had been added.\\n\\n# Approach\\n## How Do We Implement Trie\\'s in Python?\\nLuckily, Python has a simple and intuitive way to implement trie\\'s and it\\'s to use nested dictionaries. \\n\\nTake for example, the word `apple`\\n\\nOur initial dictionary will store the `a` as a key and a dictionary containing its children as the value\\n\\n`{a : {}}`\\n\\nIf we continue iterating through every letter, the resulting dictionary will look a little something like this:\\n\\n`{a : {p : {p : {l : {e : {* : None}}}}}}`\\n\\nIf this looks confusing, don\\'t try too hard to wrap your head around the syntax. Instead, just try to picture the trie diagrams from before and know that these are just those diagrams converted into a nested dictionary \\n\\n(Side note: the asterisk, `*`, is associated with a None value rather than another dictionary since its the end of the word and won\\'t have any other children).\\n\\n# Implementation\\n## \\\\_\\\\_init__()\\n```Python\\nclass Trie:\\n    def __init__(self):\\n        self.trie = {}\\n```\\nWhen initializing trie, all we need is a dictionary to hold the word sub-trie\\'s (also stored as dictionaries).\\n\\n## insert()\\n```Python\\ndef insert(self, word: str) -> None:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                trie[char] = {}\\n            trie = trie[char]\\n        trie[\\'*\\'] = None # add an asterisk to mark the end of a word\\n```\\nWhen inserting a word, we first set a variable `trie` to refer to our overall trie. As we iterate through each character, we check to see if the character is already a child node by simply seeing if it exists in the current trie dictionary. If it does we set reassign `trie` variable to refer to nested dictionary assigned to that character. Otherwise, we create an empty dictionary and assign it to the character, then reassign our `trie` variable the same way.\\n\\nWhen we\\'ve reached the end of the word we will add an asterisk character which has a corresponding value of `None` as there will be no more characters to follow.\\n\\n## search()\\n```Python\\ndef search(self, word: str) -> bool:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return \\'*\\' in trie\\n```\\nWhen searching for a word, we again set a `trie` variable to the root trie and iterate through the characters of the word. Each time we will check to see if the character is in the current trie dictionary. If it is, we update the `trie` variable. Otherwise we return `False`. Lastly we check that an asterisk exists to signify the end of a word and return `True` if so and `False` otherwise.\\n\\n## startsWith()\\n```Python\\ndef startsWith(self, prefix: str) -> bool:\\n        trie = self.trie\\n        for char in prefix:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return True\\n```\\nIn similar fashion to `search`, we do almost everything the same **except** for the final line in which we return `True` regardless of whether there\\'s an asterisk or not.\\n\\n# Complexity\\n## Time complexity:\\n- insert: **\\u0398(L)** where L is the length of the word being inserted.\\n  - Tight upper and lower bound because each letter has to be processed regardless of if its in the trie or not.\\n- search: **O(L)** where L is the length of the word being searched.\\n- startsWith: **O(L)** where L is the length of the prefix being searched.\\n\\n## Space complexity: \\n- **O(N*L)** where N is the number of words and L is the length of the longest word\\n  - Since we only need to add a new node if there isn\\'t already an existing child node, then in the worst case there would be N*L nodes.\\n  - More accurately, we can write O(S) where S is the total number of characters in all the words stored within the trie,\\n\\n# Code\\n```Python\\nclass Trie:\\n    def __init__(self):\\n        self.trie = {}\\n        \\n    def insert(self, word: str) -> None:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                trie[char] = {}\\n            trie = trie[char]\\n        trie[\\'*\\'] = None # add an asterisk to mark the end of a word\\n\\n    def search(self, word: str) -> bool:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return \\'*\\' in trie\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        trie = self.trie\\n        for char in prefix:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Trie"
                ],
                "code": "```\\na\\n|\\np\\n|\\np\\n|\\nl\\n|\\ne\\n|\\n*\\n```\n```\\n    a\\n    |\\n    p\\n   / \\\\\\n  p   t\\n  |   |\\n  l   *\\n  |\\n  e\\n / \\\\\\ns   *\\n|\\n*\\n```\n```\\n    a         h\\n    |         |\\n    p         i\\n   / \\\\        |\\n  p   t       *\\n  |   |\\n  l   *\\n  |\\n  e\\n / \\\\\\ns   *\\n|\\n*\\n```\n```Python\\nclass Trie:\\n    def __init__(self):\\n        self.trie = {}\\n```\n```Python\\ndef insert(self, word: str) -> None:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                trie[char] = {}\\n            trie = trie[char]\\n        trie[\\'*\\'] = None # add an asterisk to mark the end of a word\\n```\n```Python\\ndef search(self, word: str) -> bool:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return \\'*\\' in trie\\n```\n```Python\\ndef startsWith(self, prefix: str) -> bool:\\n        trie = self.trie\\n        for char in prefix:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return True\\n```\n```Python\\nclass Trie:\\n    def __init__(self):\\n        self.trie = {}\\n        \\n    def insert(self, word: str) -> None:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                trie[char] = {}\\n            trie = trie[char]\\n        trie[\\'*\\'] = None # add an asterisk to mark the end of a word\\n\\n    def search(self, word: str) -> bool:\\n        trie = self.trie\\n        for char in word:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return \\'*\\' in trie\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        trie = self.trie\\n        for char in prefix:\\n            if char not in trie:\\n                return False\\n            trie = trie[char]\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306859,
                "title": "rust-4-simple-oneline-functions-using-iterators-beats-78",
                "content": "# Code\\n```\\nuse std::collections::HashMap;\\n\\n#[derive(Default)]\\nstruct Trie {\\n    children: HashMap<char, Trie>,\\n    is_leaf: bool,\\n}\\n\\nimpl Trie {\\n    fn new() -> Self {\\n        Trie::default()\\n    }\\n\\n    fn insert(&mut self, word: String) {\\n        word.chars()\\n            .fold(self, |node, c| node.children.entry(c).or_default())\\n            .is_leaf = true;\\n    }\\n\\n    fn get(&self, word: String) -> Option<&Trie> {\\n        word.chars().try_fold(self, |node, c| node.children.get(&c))\\n    }\\n\\n    fn search(&self, word: String) -> bool {\\n        self.get(word).map_or(false, |node| node.is_leaf)\\n    }\\n\\n    fn starts_with(&self, prefix: String) -> bool {\\n        self.get(prefix).is_some()\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashMap;\\n\\n#[derive(Default)]\\nstruct Trie {\\n    children: HashMap<char, Trie>,\\n    is_leaf: bool,\\n}\\n\\nimpl Trie {\\n    fn new() -> Self {\\n        Trie::default()\\n    }\\n\\n    fn insert(&mut self, word: String) {\\n        word.chars()\\n            .fold(self, |node, c| node.children.entry(c).or_default())\\n            .is_leaf = true;\\n    }\\n\\n    fn get(&self, word: String) -> Option<&Trie> {\\n        word.chars().try_fold(self, |node, c| node.children.get(&c))\\n    }\\n\\n    fn search(&self, word: String) -> bool {\\n        self.get(word).map_or(false, |node| node.is_leaf)\\n    }\\n\\n    fn starts_with(&self, prefix: String) -> bool {\\n        self.get(prefix).is_some()\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3306286,
                "title": "c-2-hasesets-beats-95-94",
                "content": "# Intuition\\n2 hashsets to store prefix keys and whole strings values\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\npublic class Trie\\n{\\n  HashSet<string> values;\\n  HashSet<string> keys;\\n  public Trie()\\n  {\\n    values = new HashSet<string>();\\n    keys = new HashSet<string>();\\n  }\\n    \\n  public void Insert(string word)\\n  {\\n    if (!values.Contains(word))\\n      values.Add(word);\\n    for (var i = word.Length; i > 0; i--)\\n    {\\n      if (!keys.Contains(word.Substring(0,i)))\\n        keys.Add(word.Substring(0,i));\\n      else\\n        break;// all prev string are in KEYS\\n    }\\n  }\\n    \\n  public bool Search(string word)\\n  {\\n    return values.Contains(word);\\n  }\\n    \\n  public bool StartsWith(string prefix)\\n  {\\n    return keys.Contains(prefix);\\n  }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Trie\\n{\\n  HashSet<string> values;\\n  HashSet<string> keys;\\n  public Trie()\\n  {\\n    values = new HashSet<string>();\\n    keys = new HashSet<string>();\\n  }\\n    \\n  public void Insert(string word)\\n  {\\n    if (!values.Contains(word))\\n      values.Add(word);\\n    for (var i = word.Length; i > 0; i--)\\n    {\\n      if (!keys.Contains(word.Substring(0,i)))\\n        keys.Add(word.Substring(0,i));\\n      else\\n        break;// all prev string are in KEYS\\n    }\\n  }\\n    \\n  public bool Search(string word)\\n  {\\n    return values.Contains(word);\\n  }\\n    \\n  public bool StartsWith(string prefix)\\n  {\\n    return keys.Contains(prefix);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306214,
                "title": "interview-level-trie-implementation-very-easy-c",
                "content": "\\n\\n# Code\\n```\\nclass Node{\\nprivate:\\n    Node* links[26];\\n    bool flag=false;\\npublic:\\n    bool containsKey(char ch){\\n        return links[ch-\\'a\\']!=NULL;\\n    }\\n    void put(char ch, Node* node){\\n        links[ch-\\'a\\'] = node;\\n    }\\n    Node* get(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    void setEnd(){\\n        flag=true;\\n    }\\n\\n    bool getEnd(){\\n        return flag;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    Node* root;\\n    Trie() {\\n        root=new Node();\\n    }\\n    \\n    void insert(string word) {\\n        Node* temp=root;\\n        for(auto &ch:word){\\n            if(!temp->containsKey(ch)){\\n                temp->put(ch, new Node());\\n            }\\n            temp = temp->get(ch);\\n        }\\n        temp->setEnd();;\\n    }\\n    \\n    bool search(string word) {\\n        Node* temp=root;\\n        for(auto &ch:word){\\n            if(!temp->containsKey(ch)){\\n                return false;\\n            }\\n            temp = temp->get(ch);\\n        }\\n        return temp->getEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* temp=root;\\n        for(auto &ch:prefix){\\n            if(!temp->containsKey(ch)){\\n                return false;\\n            }\\n            temp = temp->get(ch);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Node{\\nprivate:\\n    Node* links[26];\\n    bool flag=false;\\npublic:\\n    bool containsKey(char ch){\\n        return links[ch-\\'a\\']!=NULL;\\n    }\\n    void put(char ch, Node* node){\\n        links[ch-\\'a\\'] = node;\\n    }\\n    Node* get(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    void setEnd(){\\n        flag=true;\\n    }\\n\\n    bool getEnd(){\\n        return flag;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    Node* root;\\n    Trie() {\\n        root=new Node();\\n    }\\n    \\n    void insert(string word) {\\n        Node* temp=root;\\n        for(auto &ch:word){\\n            if(!temp->containsKey(ch)){\\n                temp->put(ch, new Node());\\n            }\\n            temp = temp->get(ch);\\n        }\\n        temp->setEnd();;\\n    }\\n    \\n    bool search(string word) {\\n        Node* temp=root;\\n        for(auto &ch:word){\\n            if(!temp->containsKey(ch)){\\n                return false;\\n            }\\n            temp = temp->get(ch);\\n        }\\n        return temp->getEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* temp=root;\\n        for(auto &ch:prefix){\\n            if(!temp->containsKey(ch)){\\n                return false;\\n            }\\n            temp = temp->get(ch);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306065,
                "title": "swift-minimal",
                "content": "**Basic Trie Implementation (accepted answer)**\\n```\\nclass Trie {\\n    class Node {\\n        var sentinel = false\\n        var children = [Character:Node]()\\n    }\\n    \\n    var root = Node()\\n\\n    func insert(_ word: String) {\\n        var node = root\\n        for ch in word {\\n            node.children[ch] = node.children[ch] ?? Node()    \\n            node = node.children[ch]!\\n        }\\n        node.sentinel = true\\n    }\\n\\n    func search(_ word: String) -> Bool {\\n        lookup(word).sentinel\\n    }\\n\\n    func startsWith(_ prefix: String) -> Bool {\\n        lookup(prefix) !== root\\n    }\\n    \\n    private func lookup(_ word: String) -> Node {\\n        var node = root\\n        for ch in word {\\n            guard let next = node.children[ch] else { return root }\\n            node = next\\n        }\\n        return node\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Trie {\\n    class Node {\\n        var sentinel = false\\n        var children = [Character:Node]()\\n    }\\n    \\n    var root = Node()\\n\\n    func insert(_ word: String) {\\n        var node = root\\n        for ch in word {\\n            node.children[ch] = node.children[ch] ?? Node()    \\n            node = node.children[ch]!\\n        }\\n        node.sentinel = true\\n    }\\n\\n    func search(_ word: String) -> Bool {\\n        lookup(word).sentinel\\n    }\\n\\n    func startsWith(_ prefix: String) -> Bool {\\n        lookup(prefix) !== root\\n    }\\n    \\n    private func lookup(_ word: String) -> Node {\\n        var node = root\\n        for ch in word {\\n            guard let next = node.children[ch] else { return root }\\n            node = next\\n        }\\n        return node\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3221594,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nstruct Node{\\n  Node *a[26];\\n\\tbool flag;\\n};\\nclass Trie {\\npublic:\\n\\tNode* root;\\n\\tTrie() {\\n\\t\\troot = new Node();\\n\\t}\\n\\n\\tvoid insert(string word) {\\n\\t\\tNode* p = root;\\n\\t\\tfor(int i=0;i<word.length();++i){\\n\\t\\t\\tif(p->a[word[i]-97]==NULL){\\n\\t\\t\\t\\tp->a[word[i]-97] = new Node();\\n\\t\\t\\t}\\n\\t\\t\\tp = p->a[word[i]-97];\\n\\t\\t}\\n\\t\\tp->flag = true;\\n\\t}\\n\\n\\tbool search(string word) {\\n\\t\\tNode* p = root;\\n\\t\\tfor(int i=0;i<word.length() && p!=NULL;++i){\\n\\t\\t\\tif(p->a[word[i]-97]==NULL){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tp = p->a[word[i]-97];\\n\\t\\t}\\n\\t\\treturn p->flag;\\n\\t}\\n\\n\\tbool startsWith(string prefix) {\\n\\t\\tNode* p = root;\\n\\t\\tfor(int i=0;i<prefix.length() && p!=NULL;++i){\\n\\t\\t\\tif(!p->a[prefix[i]-97]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tp = p->a[prefix[i]-97];\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nstruct Node{\\n  Node *a[26];\\n\\tbool flag;\\n};\\nclass Trie {\\npublic:\\n\\tNode* root;\\n\\tTrie() {\\n\\t\\troot = new Node();\\n\\t}\\n\\n\\tvoid insert(string word) {\\n\\t\\tNode* p = root;\\n\\t\\tfor(int i=0;i<word.length();++i){\\n\\t\\t\\tif(p->a[word[i]-97]==NULL){\\n\\t\\t\\t\\tp->a[word[i]-97] = new Node();\\n\\t\\t\\t}\\n\\t\\t\\tp = p->a[word[i]-97];\\n\\t\\t}\\n\\t\\tp->flag = true;\\n\\t}\\n\\n\\tbool search(string word) {\\n\\t\\tNode* p = root;\\n\\t\\tfor(int i=0;i<word.length() && p!=NULL;++i){\\n\\t\\t\\tif(p->a[word[i]-97]==NULL){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tp = p->a[word[i]-97];\\n\\t\\t}\\n\\t\\treturn p->flag;\\n\\t}\\n\\n\\tbool startsWith(string prefix) {\\n\\t\\tNode* p = root;\\n\\t\\tfor(int i=0;i<prefix.length() && p!=NULL;++i){\\n\\t\\t\\tif(!p->a[prefix[i]-97]){\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t\\t\\tp = p->a[prefix[i]-97];\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3044440,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass TrieNode {\\npublic:\\n    bool is_word;\\n    TrieNode *children[26];\\n    \\n    TrieNode() {\\n        is_word = false;\\n        \\n        for (int i = 0; i < 26; i++)\\n            children[i] = NULL;\\n    }\\n};\\nclass Trie {\\npublic:\\n    Trie() {\\n         root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode *cur = root;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            int k=word[i]-\\'a\\';\\n            if(cur->children[k]==NULL)\\n                cur->children[k]=new TrieNode();\\n            cur=cur->children[k];\\n        }\\n        cur->is_word=true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode *cur = root;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            int k=word[i]-\\'a\\';\\n            if(cur->children[k]==NULL)\\n                return false;\\n            cur=cur->children[k];\\n        }\\n        return cur->is_word;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode *cur = root;\\n        for(int i=0;i<prefix.size();i++)\\n        {\\n            int k=prefix[i]-\\'a\\';\\n            if(cur->children[k]==NULL)\\n                return false;\\n            cur=cur->children[k];\\n        }\\n        return true;\\n    }\\n    private:\\n    TrieNode* root;\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass TrieNode {\\npublic:\\n    bool is_word;\\n    TrieNode *children[26];\\n    \\n    TrieNode() {\\n        is_word = false;\\n        \\n        for (int i = 0; i < 26; i++)\\n            children[i] = NULL;\\n    }\\n};\\nclass Trie {\\npublic:\\n    Trie() {\\n         root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode *cur = root;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            int k=word[i]-\\'a\\';\\n            if(cur->children[k]==NULL)\\n                cur->children[k]=new TrieNode();\\n            cur=cur->children[k];\\n        }\\n        cur->is_word=true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode *cur = root;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            int k=word[i]-\\'a\\';\\n            if(cur->children[k]==NULL)\\n                return false;\\n            cur=cur->children[k];\\n        }\\n        return cur->is_word;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode *cur = root;\\n        for(int i=0;i<prefix.size();i++)\\n        {\\n            int k=prefix[i]-\\'a\\';\\n            if(cur->children[k]==NULL)\\n                return false;\\n            cur=cur->children[k];\\n        }\\n        return true;\\n    }\\n    private:\\n    TrieNode* root;\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2756198,
                "title": "c-easy-approach-two-approaches",
                "content": "Here is my c++ code for this problem.\\nFirst approach (descriptive way):-\\n\\'\\'\\'\\nclass Node{\\n    public:\\n\\t\\n    Node* links[26];\\n    bool flag=false;\\n    bool cont(char ch){\\n        return (links[ch-\\'a\\']!=NULL);\\n    }\\n    void put(char ch, Node* node){\\n        links[ch-\\'a\\']=node;\\n    }\\n    Node* geto(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    void endh(){\\n        flag=true;\\n    }\\n    bool res(){\\n        return flag;\\n    }\\n};\\nclass Trie {\\npublic:\\n\\n    Node* root;\\n    Trie() {\\n        root=new Node();\\n    }\\n    \\n    void insert(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->cont(word[i])){\\n                node->put(word[i], new Node());\\n            }\\n            node=node->geto(word[i]); \\n        }\\n        node->endh();    \\n    }\\n    \\n    bool search(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->cont(word[i])){\\n                return false;\\n            }\\n            node=node->geto(word[i]);\\n        }\\n        return node->res();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* node=root;\\n        for(int i=0; i<prefix.size(); i++){\\n            if(!node->cont(prefix[i])){\\n                return false;\\n            }\\n            node=node->geto(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n \\n\\'\\'\\'\\nSecond approach (short code):-\\n\\'\\'\\'\\n \\nclass Node{\\npublic:\\n\\t\\n    Node* links[26];\\n    bool flag=false;\\n};\\nclass Trie {\\npublic:\\n\\n    Node* root;\\n    Trie() {\\n        root=new Node();\\n    }\\n    \\n    void insert(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->links[word[i]-\\'a\\']){\\n                node->links[word[i]-\\'a\\']=new Node();\\n            }\\n            node=node->links[word[i]-\\'a\\'];\\n        }\\n        node->flag=true;\\n    }\\n    \\n    bool search(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->links[word[i]-\\'a\\']){\\n                return false;\\n            }\\n            node=node->links[word[i]-\\'a\\'];\\n        }\\n        return node->flag;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* node=root;\\n        for(int i=0; i<prefix.size(); i++){\\n            if(!node->links[prefix[i]-\\'a\\']){\\n                return false;\\n            }\\n            node=node->links[prefix[i]-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n*/\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "Here is my c++ code for this problem.\\nFirst approach (descriptive way):-\\n\\'\\'\\'\\nclass Node{\\n    public:\\n\\t\\n    Node* links[26];\\n    bool flag=false;\\n    bool cont(char ch){\\n        return (links[ch-\\'a\\']!=NULL);\\n    }\\n    void put(char ch, Node* node){\\n        links[ch-\\'a\\']=node;\\n    }\\n    Node* geto(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    void endh(){\\n        flag=true;\\n    }\\n    bool res(){\\n        return flag;\\n    }\\n};\\nclass Trie {\\npublic:\\n\\n    Node* root;\\n    Trie() {\\n        root=new Node();\\n    }\\n    \\n    void insert(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->cont(word[i])){\\n                node->put(word[i], new Node());\\n            }\\n            node=node->geto(word[i]); \\n        }\\n        node->endh();    \\n    }\\n    \\n    bool search(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->cont(word[i])){\\n                return false;\\n            }\\n            node=node->geto(word[i]);\\n        }\\n        return node->res();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* node=root;\\n        for(int i=0; i<prefix.size(); i++){\\n            if(!node->cont(prefix[i])){\\n                return false;\\n            }\\n            node=node->geto(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n \\n\\'\\'\\'\\nSecond approach (short code):-\\n\\'\\'\\'\\n \\nclass Node{\\npublic:\\n\\t\\n    Node* links[26];\\n    bool flag=false;\\n};\\nclass Trie {\\npublic:\\n\\n    Node* root;\\n    Trie() {\\n        root=new Node();\\n    }\\n    \\n    void insert(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->links[word[i]-\\'a\\']){\\n                node->links[word[i]-\\'a\\']=new Node();\\n            }\\n            node=node->links[word[i]-\\'a\\'];\\n        }\\n        node->flag=true;\\n    }\\n    \\n    bool search(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.size(); i++){\\n            if(!node->links[word[i]-\\'a\\']){\\n                return false;\\n            }\\n            node=node->links[word[i]-\\'a\\'];\\n        }\\n        return node->flag;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* node=root;\\n        for(int i=0; i<prefix.size(); i++){\\n            if(!node->links[prefix[i]-\\'a\\']){\\n                return false;\\n            }\\n            node=node->links[prefix[i]-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n*/\\n\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 2621873,
                "title": "simple-c-solution-using-trie-ds-clean-code",
                "content": "```\\nclass TrieNode{\\npublic :\\n    bool end = false;\\n    TrieNode * childs[26];\\n    TrieNode(){\\n        for(int i = 0; i <26; i++)\\n            childs[i] = NULL;\\n    }\\n};\\n\\nclass Trie {\\n    TrieNode *root;\\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        int idx = 0;\\n        TrieNode *node = root;\\n        for(auto c: word) {\\n            idx = c-\\'a\\';\\n            if(!node->childs[idx])\\n                node->childs[idx] = new TrieNode();\\n            node = node->childs[idx];\\n        }\\n        node->end = true;\\n    }\\n    \\n    bool search(string word) {\\n        int idx = 0;\\n        TrieNode *node = root;\\n        for(auto c : word) {\\n            idx = c-\\'a\\';\\n            if(!node->childs[idx])\\n                return false;\\n            node = node->childs[idx];\\n        }\\n        return node->end;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        int idx = 0;\\n        TrieNode *node = root;\\n        for(auto c : prefix) {\\n            idx = c-\\'a\\';\\n            if(!node->childs[idx])\\n                return false;\\n            node = node->childs[idx];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Trie"
                ],
                "code": "```\\nclass TrieNode{\\npublic :\\n    bool end = false;\\n    TrieNode * childs[26];\\n    TrieNode(){\\n        for(int i = 0; i <26; i++)\\n            childs[i] = NULL;\\n    }\\n};\\n\\nclass Trie {\\n    TrieNode *root;\\npublic:\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        int idx = 0;\\n        TrieNode *node = root;\\n        for(auto c: word) {\\n            idx = c-\\'a\\';\\n            if(!node->childs[idx])\\n                node->childs[idx] = new TrieNode();\\n            node = node->childs[idx];\\n        }\\n        node->end = true;\\n    }\\n    \\n    bool search(string word) {\\n        int idx = 0;\\n        TrieNode *node = root;\\n        for(auto c : word) {\\n            idx = c-\\'a\\';\\n            if(!node->childs[idx])\\n                return false;\\n            node = node->childs[idx];\\n        }\\n        return node->end;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        int idx = 0;\\n        TrieNode *node = root;\\n        for(auto c : prefix) {\\n            idx = c-\\'a\\';\\n            if(!node->childs[idx])\\n                return false;\\n            node = node->childs[idx];\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2174237,
                "title": "c-recursion-trie",
                "content": "```\\nclass TrieNode{\\n  public:\\n    char data;\\n    TrieNode* children[26];\\n    bool isTerminal;\\n    \\n    TrieNode(char ch)\\n    {\\n        data=ch;\\n        for(int i=0;i<26;i++) children[i]=NULL;\\n        isTerminal=false;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    \\n    Trie() {\\n        root=new TrieNode(\\'\\\\0\\');\\n    }\\n    \\n    //Insertion---------------------------------------------\\n    void insertHelper(TrieNode* root, string word)\\n    {\\n        if(word.length()==0)\\n        {\\n            root->isTerminal=true;\\n            return;\\n        }\\n        char c=word[0];\\n        \\n        if(root->children[c-\\'a\\'])\\n            insertHelper(root->children[c-\\'a\\'],word.substr(1));\\n        else\\n        {\\n            TrieNode *child=new TrieNode(c);\\n            root->children[c-\\'a\\']=child;\\n            insertHelper(child,word.substr(1));\\n        }\\n        \\n    }\\n    \\n    void insert(string word) {\\n        insertHelper(root,word);\\n    }\\n    \\n    //Searching---------------------------------------------\\n    bool searchHelper(TrieNode* root, string word)\\n    {\\n        if(word.length()==0)\\n            return root->isTerminal;\\n        \\n        char c=word[0];\\n        \\n        if(root->children[c-\\'a\\']==NULL)\\n            return false;\\n        else{\\n            return searchHelper(root->children[c-\\'a\\'],word.substr(1));\\n        }\\n    }\\n    \\n    bool search(string word) {\\n        return searchHelper(root,word);\\n        \\n    }\\n    \\n    \\n    //Prefix----------------------------\\n    bool startsWithHelper(TrieNode* root, string prefix)\\n    {\\n        if(prefix.length()==0)\\n            return true;\\n        \\n        char c=prefix[0];\\n        if(root->children[c-\\'a\\']==NULL)\\n            return false;\\n        else{\\n            return startsWithHelper(root->children[c-\\'a\\'],prefix.substr(1));\\n        }\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        return startsWithHelper(root,prefix);\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Trie",
                    "Recursion"
                ],
                "code": "```\\nclass TrieNode{\\n  public:\\n    char data;\\n    TrieNode* children[26];\\n    bool isTerminal;\\n    \\n    TrieNode(char ch)\\n    {\\n        data=ch;\\n        for(int i=0;i<26;i++) children[i]=NULL;\\n        isTerminal=false;\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    \\n    Trie() {\\n        root=new TrieNode(\\'\\\\0\\');\\n    }\\n    \\n    //Insertion---------------------------------------------\\n    void insertHelper(TrieNode* root, string word)\\n    {\\n        if(word.length()==0)\\n        {\\n            root->isTerminal=true;\\n            return;\\n        }\\n        char c=word[0];\\n        \\n        if(root->children[c-\\'a\\'])\\n            insertHelper(root->children[c-\\'a\\'],word.substr(1));\\n        else\\n        {\\n            TrieNode *child=new TrieNode(c);\\n            root->children[c-\\'a\\']=child;\\n            insertHelper(child,word.substr(1));\\n        }\\n        \\n    }\\n    \\n    void insert(string word) {\\n        insertHelper(root,word);\\n    }\\n    \\n    //Searching---------------------------------------------\\n    bool searchHelper(TrieNode* root, string word)\\n    {\\n        if(word.length()==0)\\n            return root->isTerminal;\\n        \\n        char c=word[0];\\n        \\n        if(root->children[c-\\'a\\']==NULL)\\n            return false;\\n        else{\\n            return searchHelper(root->children[c-\\'a\\'],word.substr(1));\\n        }\\n    }\\n    \\n    bool search(string word) {\\n        return searchHelper(root,word);\\n        \\n    }\\n    \\n    \\n    //Prefix----------------------------\\n    bool startsWithHelper(TrieNode* root, string prefix)\\n    {\\n        if(prefix.length()==0)\\n            return true;\\n        \\n        char c=prefix[0];\\n        if(root->children[c-\\'a\\']==NULL)\\n            return false;\\n        else{\\n            return startsWithHelper(root->children[c-\\'a\\'],prefix.substr(1));\\n        }\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        return startsWithHelper(root,prefix);\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2021273,
                "title": "python-solution",
                "content": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.child = {}\\n\\n    def insert(self, word: str) -> None:\\n        curr = self.child\\n        for c in word:\\n            if c not in curr:\\n                curr[c] = {}\\n            curr = curr[c]\\n        curr[\"#\"] = 1\\n\\n    def search(self, word: str) -> bool:\\n        curr = self.child \\n        for c in word:\\n            if c not in curr:\\n                return False\\n            curr = curr[c]\\n        return \"#\" in curr\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr = self.child \\n        for c in prefix:\\n            if c not in curr:\\n                return False\\n            curr = curr[c]\\n        return True\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Trie"
                ],
                "code": "```\\nclass Trie:\\n\\n    def __init__(self):\\n        self.child = {}\\n\\n    def insert(self, word: str) -> None:\\n        curr = self.child\\n        for c in word:\\n            if c not in curr:\\n                curr[c] = {}\\n            curr = curr[c]\\n        curr[\"#\"] = 1\\n\\n    def search(self, word: str) -> bool:\\n        curr = self.child \\n        for c in word:\\n            if c not in curr:\\n                return False\\n            curr = curr[c]\\n        return \"#\" in curr\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr = self.child \\n        for c in prefix:\\n            if c not in curr:\\n                return False\\n            curr = curr[c]\\n        return True\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1849050,
                "title": "golang-simple-solution-using-tree",
                "content": "```\\ntype Node struct {\\n    Val  string\\n    Left *Node\\n    Right *Node\\n}\\n\\nfunc insert(root *Node, newVal string) *Node {\\n    if root == nil {\\n        fmt.Println(\"search lan dau roi nha\")\\n        return &Node{\\n            Val: newVal,\\n        }\\n    }\\n    \\n    if newVal < root.Val {\\n        root.Left = insert(root.Left, newVal)\\n    } else {\\n        root.Right = insert(root.Right, newVal)\\n    }\\n    \\n    return root\\n}\\n\\ntype Trie struct {\\n    Root *Node\\n}\\n\\nfunc Constructor() Trie {\\n    return Trie{}\\n}\\n\\nfunc (this *Trie) Insert(word string)  {\\n    this.Root = insert(this.Root, word)\\n}\\n\\nfunc (this *Trie) Search(word string) bool {\\n    return search(this.Root, word)\\n}\\n\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    return startsWith(this.Root, prefix)\\n}\\n\\nfunc startsWith(root *Node, prefix string) bool {\\n    if root == nil {\\n        return false\\n    }\\n    \\n    if strings.Index(root.Val, prefix) == 0 {\\n        return true\\n    }\\n    \\n    return startsWith(root.Left, prefix) || startsWith(root.Right, prefix)\\n}\\n\\nfunc search(root *Node, word string) bool {\\n    if root == nil {\\n        return false\\n    }\\n    \\n    if root.Val == word {\\n        return true\\n    }\\n    \\n    return search(root.Left, word) || search(root.Right, word)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Node struct {\\n    Val  string\\n    Left *Node\\n    Right *Node\\n}\\n\\nfunc insert(root *Node, newVal string) *Node {\\n    if root == nil {\\n        fmt.Println(\"search lan dau roi nha\")\\n        return &Node{\\n            Val: newVal,\\n        }\\n    }\\n    \\n    if newVal < root.Val {\\n        root.Left = insert(root.Left, newVal)\\n    } else {\\n        root.Right = insert(root.Right, newVal)\\n    }\\n    \\n    return root\\n}\\n\\ntype Trie struct {\\n    Root *Node\\n}\\n\\nfunc Constructor() Trie {\\n    return Trie{}\\n}\\n\\nfunc (this *Trie) Insert(word string)  {\\n    this.Root = insert(this.Root, word)\\n}\\n\\nfunc (this *Trie) Search(word string) bool {\\n    return search(this.Root, word)\\n}\\n\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    return startsWith(this.Root, prefix)\\n}\\n\\nfunc startsWith(root *Node, prefix string) bool {\\n    if root == nil {\\n        return false\\n    }\\n    \\n    if strings.Index(root.Val, prefix) == 0 {\\n        return true\\n    }\\n    \\n    return startsWith(root.Left, prefix) || startsWith(root.Right, prefix)\\n}\\n\\nfunc search(root *Node, word string) bool {\\n    if root == nil {\\n        return false\\n    }\\n    \\n    if root.Val == word {\\n        return true\\n    }\\n    \\n    return search(root.Left, word) || search(root.Right, word)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1848937,
                "title": "golang-simple-solution-using-list",
                "content": "```\\ntype Trie struct {\\n    List []string\\n}\\n\\nfunc Constructor() Trie {\\n    return Trie{}\\n}\\n\\nfunc (this *Trie) Insert(word string)  {\\n    this.List = append(this.List, word)\\n}\\n\\nfunc (this *Trie) Search(word string) bool {\\n    for _, item := range this.List {\\n        if item == word {\\n            return true\\n        }\\n    }\\n    \\n    return false\\n}\\n\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    for _, item := range this.List {\\n        if strings.Index(item, prefix) == 0 {\\n            return true\\n        }\\n    }\\n    \\n    return false\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Trie struct {\\n    List []string\\n}\\n\\nfunc Constructor() Trie {\\n    return Trie{}\\n}\\n\\nfunc (this *Trie) Insert(word string)  {\\n    this.List = append(this.List, word)\\n}\\n\\nfunc (this *Trie) Search(word string) bool {\\n    for _, item := range this.List {\\n        if item == word {\\n            return true\\n        }\\n    }\\n    \\n    return false\\n}\\n\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    for _, item := range this.List {\\n        if strings.Index(item, prefix) == 0 {\\n            return true\\n        }\\n    }\\n    \\n    return false\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1513261,
                "title": "c-unordered-map",
                "content": "```\\nstruct TrieNode {\\n  \\n    bool isEndOfWord;\\n  \\n    unordered_map<char, TrieNode*> mp;\\n};\\nclass Trie{\\npublic:\\n    Trie() {\\n        root= new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        struct TrieNode* ch= root;\\n        for(char c: word)\\n        {\\n            int i = c - \\'a\\';\\n            if(ch->mp[i] == NULL) \\n                ch->mp[i] = new TrieNode();\\n            ch = ch->mp[i];\\n        }\\n        ch->isEndOfWord = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* ch = root;\\n        for(auto c : word)\\n        {\\n            int i = c - \\'a\\';\\n            if(ch->mp[i] == NULL) \\n                return false;\\n            ch = ch->mp[i];\\n        }\\n        return ch->isEndOfWord;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* ch = root;\\n        for(auto c : prefix)\\n        {\\n            int i = c - \\'a\\';\\n            if(ch->mp[i] == NULL) \\n                return false;\\n            ch = ch->mp[i];\\n        }\\n        return true;\\n    }\\n    TrieNode* root;\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n ```\\n",
                "solutionTags": [],
                "code": "```\\nstruct TrieNode {\\n  \\n    bool isEndOfWord;\\n  \\n    unordered_map<char, TrieNode*> mp;\\n};\\nclass Trie{\\npublic:\\n    Trie() {\\n        root= new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        struct TrieNode* ch= root;\\n        for(char c: word)\\n        {\\n            int i = c - \\'a\\';\\n            if(ch->mp[i] == NULL) \\n                ch->mp[i] = new TrieNode();\\n            ch = ch->mp[i];\\n        }\\n        ch->isEndOfWord = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* ch = root;\\n        for(auto c : word)\\n        {\\n            int i = c - \\'a\\';\\n            if(ch->mp[i] == NULL) \\n                return false;\\n            ch = ch->mp[i];\\n        }\\n        return ch->isEndOfWord;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* ch = root;\\n        for(auto c : prefix)\\n        {\\n            int i = c - \\'a\\';\\n            if(ch->mp[i] == NULL) \\n                return false;\\n            ch = ch->mp[i];\\n        }\\n        return true;\\n    }\\n    TrieNode* root;\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 1510615,
                "title": "python-trie-simple-solution",
                "content": "```\\nclass TrieNode:\\n    \\n    def __init__(self):\\n        self.children = [None] * 26\\n        self.endOfWord = False\\n        \\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = self.getNode()\\n        \\n    def getNode(self):\\n        return TrieNode()\\n    \\n    def _charToIndex(self, ch):\\n        return ord(ch) - ord(\\'a\\')\\n\\n    def insert(self, word: str) -> None:\\n        p = self.root\\n        for w in word:\\n            index = self._charToIndex(w)\\n            # If current char is not present\\n            if not p.children[index]:\\n                p.children[index] = self.getNode()\\n            p = p.children[index]\\n        p.endOfWord = True        \\n\\n    def search(self, word: str) -> bool:\\n        p = self.root\\n        for w in word:\\n            index = self._charToIndex(w)\\n            # If current char is not present\\n            if not p.children[index]:\\n                return False\\n            p = p.children[index]\\n        return p.endOfWord\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        p = self.root\\n        for w in prefix:\\n            index = self._charToIndex(w)\\n            # If current char is not present\\n            if not p.children[index]:\\n                return False\\n            p = p.children[index]\\n        return True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python",
                    "Trie"
                ],
                "code": "```\\nclass TrieNode:\\n    \\n    def __init__(self):\\n        self.children = [None] * 26\\n        self.endOfWord = False\\n        \\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = self.getNode()\\n        \\n    def getNode(self):\\n        return TrieNode()\\n    \\n    def _charToIndex(self, ch):\\n        return ord(ch) - ord(\\'a\\')\\n\\n    def insert(self, word: str) -> None:\\n        p = self.root\\n        for w in word:\\n            index = self._charToIndex(w)\\n            # If current char is not present\\n            if not p.children[index]:\\n                p.children[index] = self.getNode()\\n            p = p.children[index]\\n        p.endOfWord = True        \\n\\n    def search(self, word: str) -> bool:\\n        p = self.root\\n        for w in word:\\n            index = self._charToIndex(w)\\n            # If current char is not present\\n            if not p.children[index]:\\n                return False\\n            p = p.children[index]\\n        return p.endOfWord\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        p = self.root\\n        for w in prefix:\\n            index = self._charToIndex(w)\\n            # If current char is not present\\n            if not p.children[index]:\\n                return False\\n            p = p.children[index]\\n        return True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1507870,
                "title": "python-cleaner-code",
                "content": "```\\nimport collections\\n\\nclass Trie:\\n    def __init__(self):\\n        self.children = collections.defaultdict(Trie)\\n        self.end = False\\n        \\n    def insert(self, word: str) -> None:\\n        curr = self\\n        for char in word:\\n            curr = curr.children[char]\\n        curr.end = True \\n        \\n    def search(self, word: str) -> bool:\\n        curr = self\\n        for char in word:\\n            if char not in curr.children: return False\\n            curr = curr.children[char]\\n        return curr.end\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr = self\\n        for char in prefix:\\n            if char not in curr.children: return False\\n            curr = curr.children[char]\\n        return True\\n   \\n```",
                "solutionTags": [],
                "code": "```\\nimport collections\\n\\nclass Trie:\\n    def __init__(self):\\n        self.children = collections.defaultdict(Trie)\\n        self.end = False\\n        \\n    def insert(self, word: str) -> None:\\n        curr = self\\n        for char in word:\\n            curr = curr.children[char]\\n        curr.end = True \\n        \\n    def search(self, word: str) -> bool:\\n        curr = self\\n        for char in word:\\n            if char not in curr.children: return False\\n            curr = curr.children[char]\\n        return curr.end\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr = self\\n        for char in prefix:\\n            if char not in curr.children: return False\\n            curr = curr.children[char]\\n        return True\\n   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1383755,
                "title": "c-simple-code-with-memory-management",
                "content": "Most people would have constructed a Trie at least once before attempting this question. So, what is there to take away by solving it again? For C++ users, writing a **destructor** and deleting all initialized recursive nodes/tries is a key takeaway, and may be asked in an interview. Moreover, the way to delete is also clever since it requires recursive deletion, and lower nodes have to be cleared before higher nodes. \\n\\nAnother important point is using array instead of vector to save on memory. I frequently use vectors everywhere instead of classic arrays but in tries due to the large number of children nodes, arrays can save on memory. \\n\\nI use TrieNode based implementation as I have learnt it that way and the code seems most clear to me as such. I also did not use an auxiliary function for search prefix method.\\n\\n```\\nclass TrieNode{\\n    public:\\n    bool endOfWord;\\n    TrieNode* children[26];\\n    \\n    TrieNode()\\n    {\\n        endOfWord = false;\\n        memset(children, NULL, sizeof(children));\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    \\n    TrieNode* root;\\n    \\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    ~Trie(){\\n        clear(root);\\n    }\\n    \\n    void clear(TrieNode* root)\\n    {\\n        for(int i = 0; i<26; i++)\\n        {\\n            if(root->children[i] != NULL)\\n            {\\n                clear(root->children[i]);\\n            }\\n        }\\n        \\n        delete root;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        TrieNode* curr = root;\\n        \\n        for(int i = 0; i<word.size(); i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            \\n            if(curr->children[index] == NULL)\\n            {\\n                curr->children[index] = new TrieNode();\\n            }\\n            \\n            curr = curr->children[index];\\n        }\\n        \\n        curr->endOfWord = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        TrieNode* curr = root;\\n        \\n        \\n        for(int i = 0; i<word.size(); i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            \\n            if(curr->children[index] == NULL)\\n            {\\n                return false;\\n            }\\n            \\n            curr = curr->children[index];\\n        }\\n        \\n        return curr->endOfWord;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        TrieNode* curr = root;\\n        \\n        for(int i = 0; i<prefix.size(); i++)\\n        {\\n            int index = prefix[i] - \\'a\\';\\n            \\n            if(curr->children[index] == NULL)\\n            {\\n                return false;\\n            }\\n            \\n            curr = curr->children[index];\\n        }\\n        \\n        if(curr->endOfWord)\\n        {\\n            return true;\\n        }\\n        else\\n        {   \\n            for(int i = 0; i<26; i++)\\n            {\\n                if(curr->children[i] != NULL)\\n                {\\n                    return true;\\n                }\\n            }\\n            \\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass TrieNode{\\n    public:\\n    bool endOfWord;\\n    TrieNode* children[26];\\n    \\n    TrieNode()\\n    {\\n        endOfWord = false;\\n        memset(children, NULL, sizeof(children));\\n    }\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    \\n    TrieNode* root;\\n    \\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    ~Trie(){\\n        clear(root);\\n    }\\n    \\n    void clear(TrieNode* root)\\n    {\\n        for(int i = 0; i<26; i++)\\n        {\\n            if(root->children[i] != NULL)\\n            {\\n                clear(root->children[i]);\\n            }\\n        }\\n        \\n        delete root;\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        TrieNode* curr = root;\\n        \\n        for(int i = 0; i<word.size(); i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            \\n            if(curr->children[index] == NULL)\\n            {\\n                curr->children[index] = new TrieNode();\\n            }\\n            \\n            curr = curr->children[index];\\n        }\\n        \\n        curr->endOfWord = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        TrieNode* curr = root;\\n        \\n        \\n        for(int i = 0; i<word.size(); i++)\\n        {\\n            int index = word[i] - \\'a\\';\\n            \\n            if(curr->children[index] == NULL)\\n            {\\n                return false;\\n            }\\n            \\n            curr = curr->children[index];\\n        }\\n        \\n        return curr->endOfWord;\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        TrieNode* curr = root;\\n        \\n        for(int i = 0; i<prefix.size(); i++)\\n        {\\n            int index = prefix[i] - \\'a\\';\\n            \\n            if(curr->children[index] == NULL)\\n            {\\n                return false;\\n            }\\n            \\n            curr = curr->children[index];\\n        }\\n        \\n        if(curr->endOfWord)\\n        {\\n            return true;\\n        }\\n        else\\n        {   \\n            for(int i = 0; i<26; i++)\\n            {\\n                if(curr->children[i] != NULL)\\n                {\\n                    return true;\\n                }\\n            }\\n            \\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1237227,
                "title": "simple-js-solution-using-arrays-w-explanations-and-comments",
                "content": "```\\n// Time: O(n)\\n// Space: O(n)\\n\\n// Note: This problem is basically written like a class with constructors but they wrote it differently using functions. But I never modified or added anything outside the given problem.\\n\\n// I used arrays and charCode of each letter for best practice since this problem has only lower case letters, therefore theres a constant amount of space for each letter, I don\\'t use any \"new Map()\" or \\u201Cnew Set()\\u201D or object literals.\\n\\n// I insert the (charCode of a letter) - 97 in each children\\'s array. And I give each children\\'s array a size of 26 to represent all the lower case letters from a-z.\\n\\n// So the only way to know what letters is present in a Trie is to know the charCode of that specific letter - 97, and that you would know the index of that letter in the Children Array\\n\\n\\n\\n\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    // acts as a constructor, for constructing its properties when used with \"new Trie()\"\\n    \\n    this.children = new Array(26)\\n    \\n    // override the values of children that default to undefined into null\\n    for (let i=0; i<this.children.length; i++) {\\n        this.children[i] = null\\n    }\\n    \\n    this.isWord = false\\n};\\n\\n\\n\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    // node refers to the current trie\\n    let node = this\\n    \\n    // put every letter of the word into the Trie\\n    for (let i=0; i<word.length; i++) {\\n        let letterCharCodeIdx = word[i].charCodeAt(0)-97\\n        if (node.children[letterCharCodeIdx] === null) {\\n            \\n            // if the letter doesn\\'t exist in the Trie, then add a new Trie into it\\n            node.children[letterCharCodeIdx] = new Trie()\\n        }    \\n        \\n        // go to the newly or just created node in the Trie\\n        node = node.children[letterCharCodeIdx]\\n    }\\n    \\n    // default set the specific node\\'s isWord to true, Since if the for loop ends, it means the entire word is added into the Trie, so the last letter should be given the value true for the property isWord\\n    node.isWord = true\\n};\\n\\n\\n\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    // node refers to the current trie\\n    let node = this\\n    \\n    for (let i=0; i<word.length; i++) {\\n        let letterCharCodeIdx = word[i].charCodeAt(0)-97\\n        \\n        // if the idx doesn\\'t exist, it means the letter doesn\\'t exist in the Trie therefore return false\\n        if (node.children[letterCharCodeIdx] === null) {\\n            return false\\n        }\\n        // console.log(word[i])\\n        // console.log(node)\\n        \\n        // go deeper into the Trie\\n        node = node.children[letterCharCodeIdx]\\n    }\\n    \\n    // if it made it to the end, return the isWord boolean. If it is the end of a word that is inserted into the Trie, it would be true. If not then it would be false\\n    return node.isWord\\n};\\n\\n\\n\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    // node refers to the current trie\\n    let node = this\\n    \\n    for (let i=0; i<prefix.length; i++) {\\n        let letterCharCodeIdx = prefix[i].charCodeAt(0)-97\\n        \\n        // if the idx doesn\\'t exist, it means the letter doesn\\'t exist in the Trie therefore return false\\n        if (node.children[letterCharCodeIdx] === null) {\\n            return false\\n        }\\n        \\n        // go deeper into the Trie\\n        node = node.children[letterCharCodeIdx]\\n    }\\n    \\n    // if it made it to the end, return true. Since if all the letters exist in the Trie of the prefix, then its true that theres a prefix in the Trie\\n    return true\\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n// Time: O(n)\\n// Space: O(n)\\n\\n// Note: This problem is basically written like a class with constructors but they wrote it differently using functions. But I never modified or added anything outside the given problem.\\n\\n// I used arrays and charCode of each letter for best practice since this problem has only lower case letters, therefore theres a constant amount of space for each letter, I don\\'t use any \"new Map()\" or \\u201Cnew Set()\\u201D or object literals.\\n\\n// I insert the (charCode of a letter) - 97 in each children\\'s array. And I give each children\\'s array a size of 26 to represent all the lower case letters from a-z.\\n\\n// So the only way to know what letters is present in a Trie is to know the charCode of that specific letter - 97, and that you would know the index of that letter in the Children Array\\n\\n\\n\\n\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    // acts as a constructor, for constructing its properties when used with \"new Trie()\"\\n    \\n    this.children = new Array(26)\\n    \\n    // override the values of children that default to undefined into null\\n    for (let i=0; i<this.children.length; i++) {\\n        this.children[i] = null\\n    }\\n    \\n    this.isWord = false\\n};\\n\\n\\n\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    // node refers to the current trie\\n    let node = this\\n    \\n    // put every letter of the word into the Trie\\n    for (let i=0; i<word.length; i++) {\\n        let letterCharCodeIdx = word[i].charCodeAt(0)-97\\n        if (node.children[letterCharCodeIdx] === null) {\\n            \\n            // if the letter doesn\\'t exist in the Trie, then add a new Trie into it\\n            node.children[letterCharCodeIdx] = new Trie()\\n        }    \\n        \\n        // go to the newly or just created node in the Trie\\n        node = node.children[letterCharCodeIdx]\\n    }\\n    \\n    // default set the specific node\\'s isWord to true, Since if the for loop ends, it means the entire word is added into the Trie, so the last letter should be given the value true for the property isWord\\n    node.isWord = true\\n};\\n\\n\\n\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    // node refers to the current trie\\n    let node = this\\n    \\n    for (let i=0; i<word.length; i++) {\\n        let letterCharCodeIdx = word[i].charCodeAt(0)-97\\n        \\n        // if the idx doesn\\'t exist, it means the letter doesn\\'t exist in the Trie therefore return false\\n        if (node.children[letterCharCodeIdx] === null) {\\n            return false\\n        }\\n        // console.log(word[i])\\n        // console.log(node)\\n        \\n        // go deeper into the Trie\\n        node = node.children[letterCharCodeIdx]\\n    }\\n    \\n    // if it made it to the end, return the isWord boolean. If it is the end of a word that is inserted into the Trie, it would be true. If not then it would be false\\n    return node.isWord\\n};\\n\\n\\n\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    // node refers to the current trie\\n    let node = this\\n    \\n    for (let i=0; i<prefix.length; i++) {\\n        let letterCharCodeIdx = prefix[i].charCodeAt(0)-97\\n        \\n        // if the idx doesn\\'t exist, it means the letter doesn\\'t exist in the Trie therefore return false\\n        if (node.children[letterCharCodeIdx] === null) {\\n            return false\\n        }\\n        \\n        // go deeper into the Trie\\n        node = node.children[letterCharCodeIdx]\\n    }\\n    \\n    // if it made it to the end, return true. Since if all the letters exist in the Trie of the prefix, then its true that theres a prefix in the Trie\\n    return true\\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1235094,
                "title": "clean-javascript-solution-comments-included",
                "content": "```\\nclass Trie {\\n    constructor() {\\n        this.root = {}; \\n        this.endOfWord = false; \\n    }\\n    \\n    insert(word) {\\n        let node = this.root; \\n        for (const char of word) {\\n            // Does the character exist ? No, then we need to add it to our hash map \\n            if (!(char in node)) node[char] = {}; \\n            // Character exist, then skip that node\\n            node = node[char]; \\n        }\\n        // Word is complete set to true\\n        node[this.endOfWord] = true; \\n    }\\n    \\n    search(word) {\\n        let node = this.root; \\n        for (const char of word) {\\n            // Does the character exist ? No, so its not in our trie we need to return false\\n            if (!(char in node)) return false; \\n            // Node exist, so skip that character and check next \\n            node = node[char]; \\n        }\\n        // All the words have been checked, so just return if the endOfword is in the node\\n       return this.endOfWord in node\\n        \\n    }\\n    \\n    startsWith(prefix) {\\n        let node = this.root; \\n        for (const char of prefix) {\\n            // Does prefix exist in trie? No, so return false\\n            if (!(char in node)) return false; \\n            // Check next node\\n            node = node[char];\\n        }\\n        // All nodes have been checked return false\\n        return true;\\n    };\\n}\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Trie"
                ],
                "code": "```\\nclass Trie {\\n    constructor() {\\n        this.root = {}; \\n        this.endOfWord = false; \\n    }\\n    \\n    insert(word) {\\n        let node = this.root; \\n        for (const char of word) {\\n            // Does the character exist ? No, then we need to add it to our hash map \\n            if (!(char in node)) node[char] = {}; \\n            // Character exist, then skip that node\\n            node = node[char]; \\n        }\\n        // Word is complete set to true\\n        node[this.endOfWord] = true; \\n    }\\n    \\n    search(word) {\\n        let node = this.root; \\n        for (const char of word) {\\n            // Does the character exist ? No, so its not in our trie we need to return false\\n            if (!(char in node)) return false; \\n            // Node exist, so skip that character and check next \\n            node = node[char]; \\n        }\\n        // All the words have been checked, so just return if the endOfword is in the node\\n       return this.endOfWord in node\\n        \\n    }\\n    \\n    startsWith(prefix) {\\n        let node = this.root; \\n        for (const char of prefix) {\\n            // Does prefix exist in trie? No, so return false\\n            if (!(char in node)) return false; \\n            // Check next node\\n            node = node[char];\\n        }\\n        // All nodes have been checked return false\\n        return true;\\n    };\\n}\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 932517,
                "title": "python3-simple-implementation-using-dict-and-custom-trienode-class",
                "content": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.word = False     \\n\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.root = TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        cur = self.root\\n        \\n        for idx, letter in enumerate(word):\\n            \\n            if letter not in cur.children:\\n                cur.children[letter] = TrieNode()\\n                \\n            cur = cur.children[letter]\\n        \\n        cur.word = True\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        cur = self.root\\n        \\n        for letter in word:\\n            if letter not in cur.children:\\n                return False\\n            \\n            cur = cur.children[letter]\\n            \\n        return cur.word\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        cur = self.root\\n        \\n        for letter in prefix:\\n            if letter not in cur.children:\\n                return False\\n            \\n            cur = cur.children[letter]\\n            \\n        return cur.word or len(cur.children) > 0\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.word = False     \\n\\nclass Trie:\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.root = TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        \"\"\"\\n        Inserts a word into the trie.\\n        \"\"\"\\n        cur = self.root\\n        \\n        for idx, letter in enumerate(word):\\n            \\n            if letter not in cur.children:\\n                cur.children[letter] = TrieNode()\\n                \\n            cur = cur.children[letter]\\n        \\n        cur.word = True\\n\\n    def search(self, word: str) -> bool:\\n        \"\"\"\\n        Returns if the word is in the trie.\\n        \"\"\"\\n        cur = self.root\\n        \\n        for letter in word:\\n            if letter not in cur.children:\\n                return False\\n            \\n            cur = cur.children[letter]\\n            \\n        return cur.word\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \"\"\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \"\"\"\\n        cur = self.root\\n        \\n        for letter in prefix:\\n            if letter not in cur.children:\\n                return False\\n            \\n            cur = cur.children[letter]\\n            \\n        return cur.word or len(cur.children) > 0\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 853762,
                "title": "c-efficient-2-classes-implementation-explained-100-time-55-space",
                "content": "Okay, it looks like I have gained enough experience to mostly go in auto-pilot with trie-related problems: [Es ist noch kein Meister vom Himmel gefallen](https://en.wiktionary.org/wiki/es_ist_noch_kein_Meister_von_Himmel_gefallen), indeed.\\n\\nIn this case I decided to split the logic into 2 parts:\\n* a struct `TrieNode` which would store all the data we need;\\n* the actual `Trie` class with the methods to perform the required tasks.\\n\\nI did so in order to avoid unnecessary memory wastage: when we build our tree structure from each characer of each inserted string, no point in duplicating also every method.\\n\\nComing to `TrieNode`, all that we need in this struct are:\\n* `children`, an array of pointers to other `TrieNode` instances, with size set to 26, since the specs clearly mention only lowercase letters;\\n* `eow` which is a boolean flag to mark a node as matching the last character of a given word.\\n\\nGoing back to the `Trie` class, I declare a `TrieNode` `trie` element as a class variable and can then confidently skip declaring a constructor.\\n\\nThe `insert` method will just take the value of `trie`, assign it to `curr` and proceed to loop through each character in the provided string, normalise said character `c` to be in the necessary `0 - 25` range and then we have 2 options:\\n* `curr->children[c]` exists and thus it becomes our new `curr`;\\n* `curr->children[c]` does not exist, so we need to create one before making it our next `curr`.\\n\\nOnce we are done looping through the characters, we flag the `eow` property of the last node (the most recent value of `curr`) to be `true`.\\n\\n`search` will follow a somehow specular logic, initialising `curr` with the value of `trie` and then looking for normalised each character `c` in the provided string, but when `curr->children[c]` is not found, we just return `false` (meaning we met a branch which has not been recorder - ie: no word matching that path was ever inserted); if we go out of the loop, we return the value of `returnResult || curr->eow`.\\n\\nNow, you might have wondered why I added an extra parameter to `search` and defaulted it to `false` in this case.\\n\\nWell, it was just to avoid code duplication, since `startsWith` does exactly all the same, but will always return `true` if we manage to exit the loop with all the characters provide, so all that this method needs to do is to run `search` with the provided word and the second variable set to `true` and we are done :)\\n\\nThe code:\\n\\n```cpp\\n// separate struct, to save memory\\nstruct TrieNode {\\n    TrieNode *children[26] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};\\n    bool eow = false;\\n};\\n\\nclass Trie {\\n    // private, because we are pros!\\n    TrieNode *trie = new TrieNode();\\npublic:\\n    // constructor not really needed here\\n    \\n    void insert(string word) {\\n        TrieNode *curr = trie;\\n        for (char c: word) {\\n            // normalising c in the 0 - 25 range\\n            c -= \\'a\\';\\n            // adding nodes as we need them\\n            if (!curr->children[c]) curr->children[c] = new TrieNode();\\n            // updating curr, deeper in the trie\\n            curr = curr->children[c];\\n        }\\n        // flagging the last node as the end of a word\\n        curr->eow = true;\\n    }\\n    \\n    bool search(string word, bool returnResult = false) {\\n        TrieNode *curr = trie;\\n        // search char by char\\n        for (char c: word) {\\n            c -= \\'a\\';\\n            // at the first missing branch, we quit\\n            if (!curr->children[c]) return false;\\n            curr = curr->children[c];\\n        }\\n        // we return either returnResult or if the word was complete\\n        return returnResult || curr->eow;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        // just running a search, with a different variable\\n        return search(prefix, true);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Graph",
                    "Trie"
                ],
                "code": "```cpp\\n// separate struct, to save memory\\nstruct TrieNode {\\n    TrieNode *children[26] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};\\n    bool eow = false;\\n};\\n\\nclass Trie {\\n    // private, because we are pros!\\n    TrieNode *trie = new TrieNode();\\npublic:\\n    // constructor not really needed here\\n    \\n    void insert(string word) {\\n        TrieNode *curr = trie;\\n        for (char c: word) {\\n            // normalising c in the 0 - 25 range\\n            c -= \\'a\\';\\n            // adding nodes as we need them\\n            if (!curr->children[c]) curr->children[c] = new TrieNode();\\n            // updating curr, deeper in the trie\\n            curr = curr->children[c];\\n        }\\n        // flagging the last node as the end of a word\\n        curr->eow = true;\\n    }\\n    \\n    bool search(string word, bool returnResult = false) {\\n        TrieNode *curr = trie;\\n        // search char by char\\n        for (char c: word) {\\n            c -= \\'a\\';\\n            // at the first missing branch, we quit\\n            if (!curr->children[c]) return false;\\n            curr = curr->children[c];\\n        }\\n        // we return either returnResult or if the word was complete\\n        return returnResult || curr->eow;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        // just running a search, with a different variable\\n        return search(prefix, true);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 631810,
                "title": "c-simple-o-k-time-o-n-space-solution",
                "content": "```\\npublic class Trie {\\n    private TrieNode _head;\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        _head = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void Insert(string word) {\\n        var current = _head;\\n        foreach (char c in word) {\\n            current = current[c] ??= new TrieNode();\\n        }\\n        current.Tail = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public bool Search(string word) {\\n        var node = ToTail(word);\\n        return node != null ? node.Tail : false;     \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public bool StartsWith(string prefix) {\\n        return ToTail(prefix) != null;      \\n    }\\n    \\n    private TrieNode ToTail(string prefix) {\\n        var current = _head;\\n        foreach (char c in prefix) {\\n            current = current[c];\\n            if (current == null)\\n                return current;\\n        }\\n        return current;        \\n    }\\n    \\n    class TrieNode {\\n        private TrieNode[] _suffixes = new TrieNode[26];\\n        internal TrieNode this[char c] {\\n            get => _suffixes[c-\\'a\\']; \\n            set => _suffixes[c-\\'a\\'] = value;\\n        }\\n        internal bool Tail { get; set; } = false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Trie {\\n    private TrieNode _head;\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        _head = new TrieNode();\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void Insert(string word) {\\n        var current = _head;\\n        foreach (char c in word) {\\n            current = current[c] ??= new TrieNode();\\n        }\\n        current.Tail = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public bool Search(string word) {\\n        var node = ToTail(word);\\n        return node != null ? node.Tail : false;     \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public bool StartsWith(string prefix) {\\n        return ToTail(prefix) != null;      \\n    }\\n    \\n    private TrieNode ToTail(string prefix) {\\n        var current = _head;\\n        foreach (char c in prefix) {\\n            current = current[c];\\n            if (current == null)\\n                return current;\\n        }\\n        return current;        \\n    }\\n    \\n    class TrieNode {\\n        private TrieNode[] _suffixes = new TrieNode[26];\\n        internal TrieNode this[char c] {\\n            get => _suffixes[c-\\'a\\']; \\n            set => _suffixes[c-\\'a\\'] = value;\\n        }\\n        internal bool Tail { get; set; } = false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 631565,
                "title": "javascript",
                "content": "```\\nvar Trie = function() {\\n    this.trie = {};\\n};\\n\\nTrie.prototype.insert = function(word) {\\n    let trie = this.trie;\\n    for (let letter of word) {\\n        !trie[letter] && ( trie[letter] = {} );\\n        trie = trie[letter];\\n    };\\n    trie[\\'.\\'] = null;\\n};\\n\\nTrie.prototype.search = function(word) {\\n    let trie = this.trie;\\n    for (let letter of word) {\\n        if (!trie[letter]) {\\n            return false;\\n        };\\n        trie = trie[letter];\\n    };\\n    return \\'.\\' in trie;\\n};\\n\\nTrie.prototype.startsWith = function(prefix) {\\n    let trie = this.trie;\\n    for (let letter of prefix) {\\n        if (!trie[letter]) {\\n            return false;\\n        }\\n        trie = trie[letter];\\n    };\\n    return Object.keys(trie).length !== 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar Trie = function() {\\n    this.trie = {};\\n};\\n\\nTrie.prototype.insert = function(word) {\\n    let trie = this.trie;\\n    for (let letter of word) {\\n        !trie[letter] && ( trie[letter] = {} );\\n        trie = trie[letter];\\n    };\\n    trie[\\'.\\'] = null;\\n};\\n\\nTrie.prototype.search = function(word) {\\n    let trie = this.trie;\\n    for (let letter of word) {\\n        if (!trie[letter]) {\\n            return false;\\n        };\\n        trie = trie[letter];\\n    };\\n    return \\'.\\' in trie;\\n};\\n\\nTrie.prototype.startsWith = function(prefix) {\\n    let trie = this.trie;\\n    for (let letter of prefix) {\\n        if (!trie[letter]) {\\n            return false;\\n        }\\n        trie = trie[letter];\\n    };\\n    return Object.keys(trie).length !== 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 630361,
                "title": "ruby-solution",
                "content": "```\\nclass Trie\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n       @root = {}\\n       @end = \"#\"\\n    end\\n\\n\\n=begin\\n    Inserts a word into the trie.\\n    :type word: String\\n    :rtype: Void\\n=end\\n    def insert(word)\\n        node = @root\\n        \\n        0.upto(word.length-1) do |i|\\n            char = word[i]\\n            if not node[char]\\n                node[char] = {}\\n            end\\n            node = node[char] \\n        end\\n       \\n        node[@end] = true\\n    end\\n\\n\\n=begin\\n    Returns if the word is in the trie.\\n    :type word: String\\n    :rtype: Boolean\\n=end\\n    def search(word)\\n        node = @root\\n        0.upto(word.length-1) do |i|\\n            char = word[i]\\n            if not node[char]\\n                return false\\n            end\\n            node = node[char]\\n        end\\n        node[@end] == true\\n    end\\n\\n\\n=begin\\n    Returns if there is any word in the trie that starts with the given prefix.\\n    :type prefix: String\\n    :rtype: Boolean\\n=end\\n    def starts_with(prefix)\\n        node = @root\\n        0.upto(prefix.length-1) do |i|\\n            char = prefix[i] \\n            if not node[char]\\n                return false\\n            end\\n            node = node[char]\\n        end\\n        true\\n    end\\n\\n\\nend\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie.new()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.starts_with(prefix)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n       @root = {}\\n       @end = \"#\"\\n    end\\n\\n\\n=begin\\n    Inserts a word into the trie.\\n    :type word: String\\n    :rtype: Void\\n=end\\n    def insert(word)\\n        node = @root\\n        \\n        0.upto(word.length-1) do |i|\\n            char = word[i]\\n            if not node[char]\\n                node[char] = {}\\n            end\\n            node = node[char] \\n        end\\n       \\n        node[@end] = true\\n    end\\n\\n\\n=begin\\n    Returns if the word is in the trie.\\n    :type word: String\\n    :rtype: Boolean\\n=end\\n    def search(word)\\n        node = @root\\n        0.upto(word.length-1) do |i|\\n            char = word[i]\\n            if not node[char]\\n                return false\\n            end\\n            node = node[char]\\n        end\\n        node[@end] == true\\n    end\\n\\n\\n=begin\\n    Returns if there is any word in the trie that starts with the given prefix.\\n    :type prefix: String\\n    :rtype: Boolean\\n=end\\n    def starts_with(prefix)\\n        node = @root\\n        0.upto(prefix.length-1) do |i|\\n            char = prefix[i] \\n            if not node[char]\\n                return false\\n            end\\n            node = node[char]\\n        end\\n        true\\n    end\\n\\n\\nend\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie.new()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.starts_with(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 613676,
                "title": "javascript-simple-solution-92-80",
                "content": "Runtime: 168 ms, faster than 91.94% of JavaScript online submissions for Implement Trie (Prefix Tree).\\nMemory Usage: 60.6 MB, less than 80.00% of JavaScript online submissions for Implement Trie (Prefix Tree).\\n\\n```\\nclass Node {\\n  constructor(ch) {\\n    this.val = ch;\\n    this.children = new Map();\\n    this.isEnd = false;\\n  }\\n}\\n\\nclass Trie {\\n  constructor() {\\n    this.root = new Node();\\n  }\\n  \\n  insert(word) {\\n    let index = this.root;\\n    for (let ch of word) {\\n      const node = index.children.get(ch) || new Node(ch);\\n      index.children.set(ch, node);\\n      index = node;\\n    }\\n    index.isEnd = true;\\n  }\\n  \\n  search(word) {\\n    let index = this.root;\\n    for (let ch of word) {\\n      index = index.children.get(ch);\\n      if (!index) return false;\\n    }\\n    return index.isEnd === true;\\n  }\\n  \\n  startsWith(prefix) {\\n    let index = this.root;\\n    for (let ch of prefix) {\\n      index = index.children.get(ch);\\n      if (!index) return false;\\n    }\\n    return true;\\n  }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass Node {\\n  constructor(ch) {\\n    this.val = ch;\\n    this.children = new Map();\\n    this.isEnd = false;\\n  }\\n}\\n\\nclass Trie {\\n  constructor() {\\n    this.root = new Node();\\n  }\\n  \\n  insert(word) {\\n    let index = this.root;\\n    for (let ch of word) {\\n      const node = index.children.get(ch) || new Node(ch);\\n      index.children.set(ch, node);\\n      index = node;\\n    }\\n    index.isEnd = true;\\n  }\\n  \\n  search(word) {\\n    let index = this.root;\\n    for (let ch of word) {\\n      index = index.children.get(ch);\\n      if (!index) return false;\\n    }\\n    return index.isEnd === true;\\n  }\\n  \\n  startsWith(prefix) {\\n    let index = this.root;\\n    for (let ch of prefix) {\\n      index = index.children.get(ch);\\n      if (!index) return false;\\n    }\\n    return true;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 577899,
                "title": "java-solution",
                "content": "```\\nclass Trie {\\n    private final TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode current = root;\\n        \\n        for (int i = 0; i < word.length(); i++) {\\n            char currentChar = word.charAt(i);\\n            if (current.getChild(currentChar) == null) {\\n                current.insert(currentChar);\\n            }\\n            current = current.getChild(currentChar);\\n        }\\n        current.setWord(true);\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = find(word);\\n        return node != null && node.isWord();\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        return find(prefix) != null;\\n    }\\n    \\n    private TrieNode find(String prefix) {\\n        TrieNode current = root;\\n        \\n        for (int i = 0; i < prefix.length(); i++) {\\n            char currentChar = prefix.charAt(i);\\n            if (current.getChild(currentChar) == null) return null;\\n            current = current.getChild(currentChar);\\n        }\\n        return current;\\n    } \\n    \\n    private class TrieNode {\\n        private final TrieNode[] characters;\\n        private boolean isWord;\\n        \\n        public TrieNode() {\\n            characters = new TrieNode[26];\\n            isWord = false;\\n        }\\n        \\n        public void insert(char c) {\\n            characters[c - \\'a\\'] = new TrieNode();\\n        }\\n        \\n        public TrieNode getChild(char c) {\\n            return characters[c - \\'a\\'];\\n        }\\n        \\n        public void setWord(boolean isWord) {\\n            this.isWord = isWord;\\n        }\\n        \\n        public boolean isWord() {\\n            return isWord;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Trie"
                ],
                "code": "```\\nclass Trie {\\n    private final TrieNode root;\\n    \\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode current = root;\\n        \\n        for (int i = 0; i < word.length(); i++) {\\n            char currentChar = word.charAt(i);\\n            if (current.getChild(currentChar) == null) {\\n                current.insert(currentChar);\\n            }\\n            current = current.getChild(currentChar);\\n        }\\n        current.setWord(true);\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = find(word);\\n        return node != null && node.isWord();\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        return find(prefix) != null;\\n    }\\n    \\n    private TrieNode find(String prefix) {\\n        TrieNode current = root;\\n        \\n        for (int i = 0; i < prefix.length(); i++) {\\n            char currentChar = prefix.charAt(i);\\n            if (current.getChild(currentChar) == null) return null;\\n            current = current.getChild(currentChar);\\n        }\\n        return current;\\n    } \\n    \\n    private class TrieNode {\\n        private final TrieNode[] characters;\\n        private boolean isWord;\\n        \\n        public TrieNode() {\\n            characters = new TrieNode[26];\\n            isWord = false;\\n        }\\n        \\n        public void insert(char c) {\\n            characters[c - \\'a\\'] = new TrieNode();\\n        }\\n        \\n        public TrieNode getChild(char c) {\\n            return characters[c - \\'a\\'];\\n        }\\n        \\n        public void setWord(boolean isWord) {\\n            this.isWord = isWord;\\n        }\\n        \\n        public boolean isWord() {\\n            return isWord;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 433655,
                "title": "clear-concise-c-solution-using-trie",
                "content": "Runtime: 72 ms, faster than 79.67% of C++ online submissions for Implement Trie (Prefix Tree).\\nMemory Usage: 44.7 MB, less than 56.67% of C++ online submissions for Implement Trie (Prefix Tree).\\n\\n```\\nstruct Node\\n{\\n    char ch;\\n    Node* children[26] = {nullptr};\\n    bool isWord;\\n    Node(char c) : ch(c), children(), isWord() {};\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Node* root;\\n    Trie() {\\n        root = new Node(\\' \\');\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        \\n        Node* ptr = root;\\n        for(char ch : word)\\n        {\\n            if(ptr->children[ch-\\'a\\'] == nullptr)\\n                ptr->children[ch-\\'a\\'] = new Node(ch);\\n            ptr = ptr->children[ch-\\'a\\'];\\n        }\\n        ptr->isWord = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        Node* ptr = root;\\n        for(char ch : word)\\n        {\\n            if(ptr->children[ch-\\'a\\'] == nullptr)\\n                return false;\\n            ptr = ptr->children[ch-\\'a\\'];\\n        }\\n        return (ptr->isWord);\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        Node* ptr = root;\\n        for(char ch : prefix)\\n        {\\n            if(ptr->children[ch-\\'a\\'] == nullptr)\\n                return false;\\n            ptr = ptr->children[ch-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */",
                "solutionTags": [
                    "Trie"
                ],
                "code": "Runtime: 72 ms, faster than 79.67% of C++ online submissions for Implement Trie (Prefix Tree).\\nMemory Usage: 44.7 MB, less than 56.67% of C++ online submissions for Implement Trie (Prefix Tree).\\n\\n```\\nstruct Node\\n{\\n    char ch;\\n    Node* children[26] = {nullptr};\\n    bool isWord;\\n    Node(char c) : ch(c), children(), isWord() {};\\n};\\n\\nclass Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Node* root;\\n    Trie() {\\n        root = new Node(\\' \\');\\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        \\n        Node* ptr = root;\\n        for(char ch : word)\\n        {\\n            if(ptr->children[ch-\\'a\\'] == nullptr)\\n                ptr->children[ch-\\'a\\'] = new Node(ch);\\n            ptr = ptr->children[ch-\\'a\\'];\\n        }\\n        ptr->isWord = true;\\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        Node* ptr = root;\\n        for(char ch : word)\\n        {\\n            if(ptr->children[ch-\\'a\\'] == nullptr)\\n                return false;\\n            ptr = ptr->children[ch-\\'a\\'];\\n        }\\n        return (ptr->isWord);\\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        Node* ptr = root;\\n        for(char ch : prefix)\\n        {\\n            if(ptr->children[ch-\\'a\\'] == nullptr)\\n                return false;\\n            ptr = ptr->children[ch-\\'a\\'];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 58879,
                "title": "ac-95-javascript-solution",
                "content": "1. Create a TriNode class, with next which contains next char, and word, which is the end of the word.\\n\\n2. Create a Trie class, with one root TriNode.\\n\\n3. Upon Insert, we check through each TriNode through next, if the next node is undefined, we create a new node, and assign word to the leaf node.\\n\\n4. Upon Search, we check through each node through next, just like Insert. However when we don't see a next node, we return false; until the leaf node, we check if word was assigned or null.\\n\\n5. Similar to Search, startsWith has the same logic, until the last part, we don't check if the node contains the prefix or not --- we don't care.\\n \\nNote:  'a'.charCodeAt(0) === 97, which I don't really assign to a variable in the code.\\n\\n```\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    this.root = new TriNode();\\n};\\n\\nvar TriNode = function () {\\n    this.next = new Array(26);\\n    this.word = null;\\n}\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n    for (let i = 0; i < word.length; i++) {\\n        if (!curr.next[word[i].charCodeAt(0) - 97]) {\\n            curr.next[word[i].charCodeAt(0) - 97] = new TriNode();\\n        }\\n        curr = curr.next[word[i].charCodeAt(0) - 97];\\n    }\\n    curr.word = word;\\n};\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let i = 0; i < word.length; i++) {\\n        if (!curr.next[word[i].charCodeAt(0) - 97]) return false;\\n        curr = curr.next[word[i].charCodeAt(0) - 97];\\n    }\\n    if (curr.word === word) return true;\\n    return false;\\n};\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let i = 0; i < prefix.length; i++) {\\n        if (!curr.next[prefix[i].charCodeAt(0) - 97]) return false;\\n        curr = curr.next[prefix[i].charCodeAt(0) - 97];\\n    }\\n    return true;\\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = Object.create(Trie).createNew()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    this.root = new TriNode();\\n};\\n\\nvar TriNode = function () {\\n    this.next = new Array(26);\\n    this.word = null;\\n}\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n    for (let i = 0; i < word.length; i++) {\\n        if (!curr.next[word[i].charCodeAt(0) - 97]) {\\n            curr.next[word[i].charCodeAt(0) - 97] = new TriNode();\\n        }\\n        curr = curr.next[word[i].charCodeAt(0) - 97];\\n    }\\n    curr.word = word;\\n};\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let i = 0; i < word.length; i++) {\\n        if (!curr.next[word[i].charCodeAt(0) - 97]) return false;\\n        curr = curr.next[word[i].charCodeAt(0) - 97];\\n    }\\n    if (curr.word === word) return true;\\n    return false;\\n};\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let i = 0; i < prefix.length; i++) {\\n        if (!curr.next[prefix[i].charCodeAt(0) - 97]) return false;\\n        curr = curr.next[prefix[i].charCodeAt(0) - 97];\\n    }\\n    return true;\\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = Object.create(Trie).createNew()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 58943,
                "title": "c-implementation",
                "content": "C# Implementation, refer https://discuss.leetcode.com/topic/33972/java-my-solution-with-brief-explanations-15ms-beats-95\\n\\n```\\n    class TrieNode\\n    {\\n        public bool isEnd = false;\\n        public TrieNode[] children =  new TrieNode[26];\\n\\n        public TrieNode()\\n        {\\n        }\\n    }\\n\\n    class Trie\\n    {\\n        private TrieNode root;\\n\\n        public Trie()\\n        {\\n            root = new TrieNode();\\n        }\\n\\n        public void Insert(string word)\\n        {\\n            TrieNode cur = root;\\n\\n            for (int i = 0; i < word.Length; i++)\\n            {\\n                int id = word[i] - 'a';\\n                if (cur.children[id] == null)\\n                {\\n                    cur.children[id] = new TrieNode();\\n                }\\n\\n                cur = cur.children[id];\\n            }\\n\\n            cur.isEnd = true;\\n        }\\n\\n        public bool Search(string word)\\n        {\\n            TrieNode node = SearchNode(word);\\n            return node != null && node.isEnd;\\n        }\\n\\n        public bool StartsWith(string word)\\n        {\\n            TrieNode node = SearchNode(word);\\n            return node != null;\\n        }\\n\\n        private TrieNode SearchNode(string word)\\n        {\\n            TrieNode cur = root;\\n            int i = 0;\\n\\n            while (i < word.Length)\\n            {\\n                cur = cur.children[word[i++] - 'a'];\\n                if (cur == null)\\n                {\\n                    return null;\\n                }\\n            }\\n\\n            return cur;\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    class TrieNode\\n    {\\n        public bool isEnd = false;\\n        public TrieNode[] children =  new TrieNode[26];\\n\\n        public TrieNode()\\n        {\\n        }\\n    }\\n\\n    class Trie\\n    {\\n        private TrieNode root;\\n\\n        public Trie()\\n        {\\n            root = new TrieNode();\\n        }\\n\\n        public void Insert(string word)\\n        {\\n            TrieNode cur = root;\\n\\n            for (int i = 0; i < word.Length; i++)\\n            {\\n                int id = word[i] - 'a';\\n                if (cur.children[id] == null)\\n                {\\n                    cur.children[id] = new TrieNode();\\n                }\\n\\n                cur = cur.children[id];\\n            }\\n\\n            cur.isEnd = true;\\n        }\\n\\n        public bool Search(string word)\\n        {\\n            TrieNode node = SearchNode(word);\\n            return node != null && node.isEnd;\\n        }\\n\\n        public bool StartsWith(string word)\\n        {\\n            TrieNode node = SearchNode(word);\\n            return node != null;\\n        }\\n\\n        private TrieNode SearchNode(string word)\\n        {\\n            TrieNode cur = root;\\n            int i = 0;\\n\\n            while (i < word.Length)\\n            {\\n                cur = cur.children[word[i++] - 'a'];\\n                if (cur == null)\\n                {\\n                    return null;\\n                }\\n            }\\n\\n            return cur;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 58978,
                "title": "recommend-for-beginners-clean-c-implementation-with-detailed-explanation",
                "content": "    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode():isWord(false) {}\\n        unordered_map<char, TrieNode*> children;\\n        bool isWord;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            if(word.size()<=0)  return;\\n            TrieNode* node=root;\\n            for(int i=0; i<word.size(); i++){\\n                if(node->children.find(word[i])==node->children.end()){\\n                    node->children[word[i]]=new TrieNode();\\n                }\\n                node=node->children[word[i]];\\n            }\\n            node->isWord=true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n            return retrieve(word, true);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            return retrieve(prefix, false);\\n        }\\n    \\n    private:\\n        inline bool retrieve(const string& key, bool isWord){\\n            if(key.size()<=0)  return false;\\n            TrieNode *node=root;\\n            for(int i=0; i<key.size(); i++){\\n                if(node->children.find(key[i])==node->children.end())\\n                    return false;\\n                node=node->children[key[i]];\\n            }\\n            return isWord ? node->isWord : true;\\n        }\\n        \\n        TrieNode* root;\\n    };\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie;\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "solutionTags": [],
                "code": "    class TrieNode {\\n    public:\\n        // Initialize your data structure here.\\n        TrieNode():isWord(false) {}\\n        unordered_map<char, TrieNode*> children;\\n        bool isWord;\\n    };\\n    \\n    class Trie {\\n    public:\\n        Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        void insert(string word) {\\n            if(word.size()<=0)  return;\\n            TrieNode* node=root;\\n            for(int i=0; i<word.size(); i++){\\n                if(node->children.find(word[i])==node->children.end()){\\n                    node->children[word[i]]=new TrieNode();\\n                }\\n                node=node->children[word[i]];\\n            }\\n            node->isWord=true;\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        bool search(string word) {\\n            return retrieve(word, true);\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        bool startsWith(string prefix) {\\n            return retrieve(prefix, false);\\n        }\\n    \\n    private:\\n        inline bool retrieve(const string& key, bool isWord){\\n            if(key.size()<=0)  return false;\\n            TrieNode *node=root;\\n            for(int i=0; i<key.size(); i++){\\n                if(node->children.find(key[i])==node->children.end())\\n                    return false;\\n                node=node->children[key[i]];\\n            }\\n            return isWord ? node->isWord : true;\\n        }\\n        \\n        TrieNode* root;\\n    };\\n    \\n    // Your Trie object will be instantiated and called as such:\\n    // Trie trie;\\n    // trie.insert(\"somestring\");\\n    // trie.search(\"key\");",
                "codeTag": "Java"
            },
            {
                "id": 59050,
                "title": "optimized-clear-solution-by-using-an-array-java",
                "content": "    public class Trie {\\n        \\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            if(word != null){\\n                TrieNode temp = root;\\n                //from top to down\\n                for(int i = 0; i < word.length(); i ++){\\n                    char c = word.charAt(i);\\n                    if(temp.next[c - 97] == null){\\n                        temp.next[c - 97] = new TrieNode();\\n                    }\\n                    temp = temp.next[c - 97];\\n                }\\n                //end char of the string(end point of the string)\\n                temp.endPoint = true;\\n            }\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            if(word == null){\\n                return false;\\n            }\\n            TrieNode temp = root;\\n            for(int i = 0; i < word.length(); i ++){\\n                char c = word.charAt(i);\\n                if(temp.next[c - 97] == null){\\n                    return false;\\n                }\\n                else{\\n                    temp = temp.next[c - 97];\\n                }\\n            }\\n            //check if last node is an end point\\n            if(temp.endPoint){\\n                return true;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            if(prefix == null){\\n                return false;\\n            }\\n            TrieNode temp = root;\\n            for(int i = 0; i < prefix.length(); i ++){\\n                char c = prefix.charAt(i);\\n                if(temp.next[c - 97] == null){\\n                    return false;\\n                }\\n                else{\\n                    temp = temp.next[c - 97];\\n                }\\n            }\\n            return true;\\n        }\\n        \\n        //inner class\\n        protected class TrieNode {\\n            // Initialize your data structure here.\\n            public boolean endPoint;\\n            public TrieNode[] next;\\n        \\n            public TrieNode() {\\n                endPoint = false;\\n                next = new TrieNode[26];\\n            }\\n        \\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public class Trie {\\n        \\n        private TrieNode root;\\n    \\n        public Trie() {\\n            root = new TrieNode();\\n        }\\n    \\n        // Inserts a word into the trie.\\n        public void insert(String word) {\\n            if(word != null){\\n                TrieNode temp = root;\\n                //from top to down\\n                for(int i = 0; i < word.length(); i ++){\\n                    char c = word.charAt(i);\\n                    if(temp.next[c - 97] == null){\\n                        temp.next[c - 97] = new TrieNode();\\n                    }\\n                    temp = temp.next[c - 97];\\n                }\\n                //end char of the string(end point of the string)\\n                temp.endPoint = true;\\n            }\\n        }\\n    \\n        // Returns if the word is in the trie.\\n        public boolean search(String word) {\\n            if(word == null){\\n                return false;\\n            }\\n            TrieNode temp = root;\\n            for(int i = 0; i < word.length(); i ++){\\n                char c = word.charAt(i);\\n                if(temp.next[c - 97] == null){\\n                    return false;\\n                }\\n                else{\\n                    temp = temp.next[c - 97];\\n                }\\n            }\\n            //check if last node is an end point\\n            if(temp.endPoint){\\n                return true;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n    \\n        // Returns if there is any word in the trie\\n        // that starts with the given prefix.\\n        public boolean startsWith(String prefix) {\\n            if(prefix == null){\\n                return false;\\n            }\\n            TrieNode temp = root;\\n            for(int i = 0; i < prefix.length(); i ++){\\n                char c = prefix.charAt(i);\\n                if(temp.next[c - 97] == null){\\n                    return false;\\n                }\\n                else{\\n                    temp = temp.next[c - 97];\\n                }\\n            }\\n            return true;\\n        }\\n        \\n        //inner class\\n        protected class TrieNode {\\n            // Initialize your data structure here.\\n            public boolean endPoint;\\n            public TrieNode[] next;\\n        \\n            public TrieNode() {\\n                endPoint = false;\\n                next = new TrieNode[26];\\n            }\\n        \\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3926419,
                "title": "trie-implementation-easy-conceptual-solution-beats-90",
                "content": "\\n# Code\\n```\\nclass TrieNode{\\n    TrieNode child[] = new TrieNode[26];\\n    boolean flag = false;\\n\\n    public boolean containsKey(char ch){\\n        return (child[ch-\\'a\\'] != null);\\n    }\\n    public TrieNode get(char ch){\\n        return child[ch-\\'a\\'];\\n    }\\n    public void put(char ch, TrieNode node){\\n        child[ch-\\'a\\'] = node;\\n    }\\n    public void setEnd(){\\n        flag = true;\\n    }\\n    public boolean isEnd(){\\n        return flag;\\n    }\\n}\\nclass Trie {\\n    TrieNode root;\\n\\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node = root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!node.containsKey(word.charAt(i))){\\n                node.put(word.charAt(i), new TrieNode());\\n            }\\n            node = node.get(word.charAt(i));\\n        }\\n        node.setEnd();\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root; \\n        for(int i = 0;i<word.length();i++) {\\n            if(!node.containsKey(word.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(word.charAt(i)); \\n        }\\n        if(node.isEnd()) {\\n            return true; \\n        }\\n        return false; \\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root; \\n        for(int i = 0;i<prefix.length();i++) {\\n            if(!node.containsKey(prefix.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(prefix.charAt(i)); \\n        }\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass TrieNode{\\n    TrieNode child[] = new TrieNode[26];\\n    boolean flag = false;\\n\\n    public boolean containsKey(char ch){\\n        return (child[ch-\\'a\\'] != null);\\n    }\\n    public TrieNode get(char ch){\\n        return child[ch-\\'a\\'];\\n    }\\n    public void put(char ch, TrieNode node){\\n        child[ch-\\'a\\'] = node;\\n    }\\n    public void setEnd(){\\n        flag = true;\\n    }\\n    public boolean isEnd(){\\n        return flag;\\n    }\\n}\\nclass Trie {\\n    TrieNode root;\\n\\n    public Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node = root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!node.containsKey(word.charAt(i))){\\n                node.put(word.charAt(i), new TrieNode());\\n            }\\n            node = node.get(word.charAt(i));\\n        }\\n        node.setEnd();\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root; \\n        for(int i = 0;i<word.length();i++) {\\n            if(!node.containsKey(word.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(word.charAt(i)); \\n        }\\n        if(node.isEnd()) {\\n            return true; \\n        }\\n        return false; \\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root; \\n        for(int i = 0;i<prefix.length();i++) {\\n            if(!node.containsKey(prefix.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(prefix.charAt(i)); \\n        }\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3566716,
                "title": "easy-c-solution",
                "content": "TRI\\n\\n# Code\\n```\\nnamespace my{\\n    class TreeNode{\\n        private:\\n            bool end;\\n            vector<TreeNode*> child;\\n        public:\\n            TreeNode(){\\n                this->end = false;\\n                child.resize(26,NULL);\\n            }\\n\\n            void setEnd(){\\n                this->end = true;\\n            }\\n\\n            void setNode(char ch){\\n                child[ch-\\'a\\'] = new TreeNode();\\n            }\\n\\n            bool isEnd(){\\n                return this->end;\\n            }\\n\\n            bool isSet(char ch){\\n                return child[ch-\\'a\\'] != NULL;\\n            }\\n\\n            TreeNode* getNode(char ch){\\n                return child[ch-\\'a\\'];\\n            }\\n    };\\n}\\n\\n\\nclass Trie {\\nprivate:\\n    my::TreeNode* root;\\npublic:\\n    Trie() {\\n        root = new my::TreeNode();\\n    }\\n    \\n    void insert(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                p->setNode(ch);\\n                p = p->getNode(ch);\\n            }\\n        }\\n        p->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return p->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < prefix.size(); i++){\\n            char ch = prefix[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Trie"
                ],
                "code": "```\\nnamespace my{\\n    class TreeNode{\\n        private:\\n            bool end;\\n            vector<TreeNode*> child;\\n        public:\\n            TreeNode(){\\n                this->end = false;\\n                child.resize(26,NULL);\\n            }\\n\\n            void setEnd(){\\n                this->end = true;\\n            }\\n\\n            void setNode(char ch){\\n                child[ch-\\'a\\'] = new TreeNode();\\n            }\\n\\n            bool isEnd(){\\n                return this->end;\\n            }\\n\\n            bool isSet(char ch){\\n                return child[ch-\\'a\\'] != NULL;\\n            }\\n\\n            TreeNode* getNode(char ch){\\n                return child[ch-\\'a\\'];\\n            }\\n    };\\n}\\n\\n\\nclass Trie {\\nprivate:\\n    my::TreeNode* root;\\npublic:\\n    Trie() {\\n        root = new my::TreeNode();\\n    }\\n    \\n    void insert(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                p->setNode(ch);\\n                p = p->getNode(ch);\\n            }\\n        }\\n        p->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < word.size(); i++){\\n            char ch = word[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return p->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        my::TreeNode* p = root;\\n        for(int i = 0; i < prefix.size(); i++){\\n            char ch = prefix[i];\\n            if(p->isSet(ch)){\\n                p = p->getNode(ch);\\n            }else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3309181,
                "title": "easy-to-understand-code-with-comments",
                "content": "```\\nstruct Node{\\n    Node* trie[26];\\n    bool flag = false;\\n    \\n    \\n    bool containsChar(char c){          // Checks whether the Node exists in Trie\\n        return trie[c-\\'a\\'] != NULL;\\n    }\\n    \\n    void addNewChar(char c, Node* ref){ // Adds a new child Trie Node; \\n        trie[c-\\'a\\'] = ref;\\n    }\\n    Node* getToNode(char c){    // returns the address of the child Trie Node for the char c\\n        return trie[c-\\'a\\'];\\n    }\\n    \\n    void setEnd(){              // this sets the flag marking the end of the string \\n        flag = true;\\n    }\\n    bool isEnd(){               // returns whether any string ends at the current Node.\\n        return flag;\\n    }\\n};\\n\\nclass Trie {\\nprivate:\\n    Node* root; \\npublic:\\n    Trie() {\\n        root = new Node();a\\n    }\\n    \\n    void insert(string word) {\\n        Node *head = root;\\n        int n = word.length();\\n        for(int i = 0; i < n; i++){\\n            if(!head->containsChar(word[i]))\\n                head->addNewChar(word[i], new Node());\\n            head = head->getToNode(word[i]);\\n        }\\n        head->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        Node* head = root;\\n        int n = word.length();\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(!head->containsChar(word[i])) return false;\\n            head = head->getToNode(word[i]);\\n        }\\n        return (head->isEnd());\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* head = root;\\n        int n = prefix.length();\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(!head->containsChar(prefix[i])) return false;\\n            head = head->getToNode(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C",
                    "Trie"
                ],
                "code": "```\\nstruct Node{\\n    Node* trie[26];\\n    bool flag = false;\\n    \\n    \\n    bool containsChar(char c){          // Checks whether the Node exists in Trie\\n        return trie[c-\\'a\\'] != NULL;\\n    }\\n    \\n    void addNewChar(char c, Node* ref){ // Adds a new child Trie Node; \\n        trie[c-\\'a\\'] = ref;\\n    }\\n    Node* getToNode(char c){    // returns the address of the child Trie Node for the char c\\n        return trie[c-\\'a\\'];\\n    }\\n    \\n    void setEnd(){              // this sets the flag marking the end of the string \\n        flag = true;\\n    }\\n    bool isEnd(){               // returns whether any string ends at the current Node.\\n        return flag;\\n    }\\n};\\n\\nclass Trie {\\nprivate:\\n    Node* root; \\npublic:\\n    Trie() {\\n        root = new Node();a\\n    }\\n    \\n    void insert(string word) {\\n        Node *head = root;\\n        int n = word.length();\\n        for(int i = 0; i < n; i++){\\n            if(!head->containsChar(word[i]))\\n                head->addNewChar(word[i], new Node());\\n            head = head->getToNode(word[i]);\\n        }\\n        head->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        Node* head = root;\\n        int n = word.length();\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(!head->containsChar(word[i])) return false;\\n            head = head->getToNode(word[i]);\\n        }\\n        return (head->isEnd());\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* head = root;\\n        int n = prefix.length();\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(!head->containsChar(prefix[i])) return false;\\n            head = head->getToNode(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308724,
                "title": "java-solution-trie-implementation-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUses Simple Trie Data Structure\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n        O(word_length)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Node{\\n    Node links[]=new Node[26];\\n    boolean flag=false;\\n    \\n    public Node(){\\n\\n    }\\n\\n    public boolean containsKey(char ch)\\n    {\\n        return (links[ch-\\'a\\'] != null);\\n    }\\n\\n    Node get(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n\\n    void put(char ch , Node node){\\n        links[ch-\\'a\\']=node;\\n    }\\n\\n    void setEnd(){\\n        flag=true;\\n    }\\n\\n    boolean isEnd(){\\n        return flag;\\n    }\\n}\\nclass Trie {\\n    Node root;\\n    public Trie() {\\n        root=new Node();\\n    }\\n    \\n    \\n    public void insert(String word) {\\n        \\n        Node node=root;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            if(!node.containsKey(word.charAt(i))){\\n                node.put(word.charAt(i),new Node());\\n            }\\n            node=node.get(word.charAt(i));\\n        }\\n\\n        node.setEnd();\\n    }\\n    \\n    public boolean search(String words) {\\n        \\n        Node node= root;\\n\\n        for(int i=0;i<words.length();i++)\\n        {\\n            if(!node.containsKey(words.charAt(i)))\\n                return false;\\n\\n            node=node.get(words.charAt(i));\\n        }\\n        if(node.isEnd())\\n            return true;\\n        \\n        return false;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        Node node= root;\\n\\n        for(int i=0;i<prefix.length();i++)\\n        {\\n            if(!node.containsKey(prefix.charAt(i)))\\n                return false;\\n\\n            node=node.get(prefix.charAt(i));\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Trie"
                ],
                "code": "```\\nclass Node{\\n    Node links[]=new Node[26];\\n    boolean flag=false;\\n    \\n    public Node(){\\n\\n    }\\n\\n    public boolean containsKey(char ch)\\n    {\\n        return (links[ch-\\'a\\'] != null);\\n    }\\n\\n    Node get(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n\\n    void put(char ch , Node node){\\n        links[ch-\\'a\\']=node;\\n    }\\n\\n    void setEnd(){\\n        flag=true;\\n    }\\n\\n    boolean isEnd(){\\n        return flag;\\n    }\\n}\\nclass Trie {\\n    Node root;\\n    public Trie() {\\n        root=new Node();\\n    }\\n    \\n    \\n    public void insert(String word) {\\n        \\n        Node node=root;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            if(!node.containsKey(word.charAt(i))){\\n                node.put(word.charAt(i),new Node());\\n            }\\n            node=node.get(word.charAt(i));\\n        }\\n\\n        node.setEnd();\\n    }\\n    \\n    public boolean search(String words) {\\n        \\n        Node node= root;\\n\\n        for(int i=0;i<words.length();i++)\\n        {\\n            if(!node.containsKey(words.charAt(i)))\\n                return false;\\n\\n            node=node.get(words.charAt(i));\\n        }\\n        if(node.isEnd())\\n            return true;\\n        \\n        return false;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        Node node= root;\\n\\n        for(int i=0;i<prefix.length();i++)\\n        {\\n            if(!node.containsKey(prefix.charAt(i)))\\n                return false;\\n\\n            node=node.get(prefix.charAt(i));\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308291,
                "title": "python-shortest-1-liner-methods-functional-programming",
                "content": "# Complexity\\nFor all functions, i.e, `insert`, `search`, `startsWith`:\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\nwhere, `n is length of input word or prefix`.\\n\\n# Code\\n```python\\nclass Trie:\\n\\n    class Node:\\n        def __init__(self, children: dict = None, is_end: bool = False) -> None:\\n            self.children = defaultdict(Trie.Node) if children is None else children\\n            self.is_end = is_end\\n\\n    f = lambda a, x: a.children[x]\\n    g = lambda a, x: x not in a.children\\n\\n    def __init__(self):\\n        self.root = Trie.Node()\\n\\n    def insert(self, word: str) -> None:\\n        reduceM(Trie.f, word, self.root).is_end = True\\n\\n    def search(self, word: str) -> bool:\\n        return (n := reduceM(Trie.f, word, self.root, Trie.g)) is not None and n.is_end\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        return reduceM(Trie.f, prefix, self.root, Trie.g)\\n\\n\\nT = TypeVar(\\'T\\')\\nA = TypeVar(\\'A\\')\\nMapper = Callable[[A, T], A]\\nPredicate  = Callable[[A, T], bool]\\n\\ndef reduceM(f: Mapper, xs: Iterable[T], init: A | None = None, g: Predicate = lambda *_: False) -> A | None:\\n    \"\"\"Similar to functools.reduce, but terminates early if the predicate g(A, T) is True\"\"\"\\n    xs = iter(xs)\\n    a = next(xs) if init is None else init\\n    for x in xs:\\n        if g(a, x): return\\n        a = f(a, x)\\n    return a\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Design",
                    "Trie"
                ],
                "code": "```python\\nclass Trie:\\n\\n    class Node:\\n        def __init__(self, children: dict = None, is_end: bool = False) -> None:\\n            self.children = defaultdict(Trie.Node) if children is None else children\\n            self.is_end = is_end\\n\\n    f = lambda a, x: a.children[x]\\n    g = lambda a, x: x not in a.children\\n\\n    def __init__(self):\\n        self.root = Trie.Node()\\n\\n    def insert(self, word: str) -> None:\\n        reduceM(Trie.f, word, self.root).is_end = True\\n\\n    def search(self, word: str) -> bool:\\n        return (n := reduceM(Trie.f, word, self.root, Trie.g)) is not None and n.is_end\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        return reduceM(Trie.f, prefix, self.root, Trie.g)\\n\\n\\nT = TypeVar(\\'T\\')\\nA = TypeVar(\\'A\\')\\nMapper = Callable[[A, T], A]\\nPredicate  = Callable[[A, T], bool]\\n\\ndef reduceM(f: Mapper, xs: Iterable[T], init: A | None = None, g: Predicate = lambda *_: False) -> A | None:\\n    \"\"\"Similar to functools.reduce, but terminates early if the predicate g(A, T) is True\"\"\"\\n    xs = iter(xs)\\n    a = next(xs) if init is None else init\\n    for x in xs:\\n        if g(a, x): return\\n        a = f(a, x)\\n    return a\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308086,
                "title": "hashset-approach-easiest",
                "content": "```\\nclass Trie {\\n\\n    HashSet<String> set;\\n    \\n    public Trie() {\\n    set=new HashSet<>();\\n    }\\n    \\n    public void insert(String word) {\\n       set.add(word);\\n    }\\n    \\n    public boolean search(String word) {\\n        if(set.contains(word)==false)return false;\\n        return true;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        \\n        for(String s:set){\\n            if(s.indexOf(prefix)==0)return true;\\n            \\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Trie {\\n\\n    HashSet<String> set;\\n    \\n    public Trie() {\\n    set=new HashSet<>();\\n    }\\n    \\n    public void insert(String word) {\\n       set.add(word);\\n    }\\n    \\n    public boolean search(String word) {\\n        if(set.contains(word)==false)return false;\\n        return true;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        \\n        for(String s:set){\\n            if(s.indexOf(prefix)==0)return true;\\n            \\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308019,
                "title": "simple-implementation-in-java",
                "content": "# Trie-node structure:\\n\\n![image.png](https://assets.leetcode.com/users/images/8332f565-dc24-4ef1-8c2f-bf056068a951_1679065816.1477323.png)\\n\\n\\n---\\n\\n# Solution:\\n``` \\nclass Trie {\\n    // Trie Node class\\n    class TrieNode {\\n        // to mark the last letter of a string as true\\n        // that yes, a word ends at this letter\\n        boolean isComplete; \\n        // a node array of size 26 \\n        // to store nodes for 26 lowercase alphabets\\n        TrieNode[] children;\\n        public TrieNode() {\\n            isComplete = false;\\n            children = new TrieNode[26];\\n        }\\n    }\\n\\n    TrieNode root;  // Declare the root node\\n    public Trie() {\\n        root = new TrieNode();  // initialize the root node\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node  = root;  // start traversing from the root\\n        for (char c : word.toCharArray()) {\\n            // if the node index for the character is empty\\n            if (node.children[c - \\'a\\'] == null) {\\n                // create a new node at that index\\n                node.children[c - \\'a\\'] = new TrieNode();\\n            }\\n            // jump to that node\\n            node = node.children[c - \\'a\\'];\\n        }\\n        // mark the last letter as true\\n        // means a word ends at this letter\\n        node.isComplete = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            // if the node index for the character is empty\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;   // means word doesn\\'t exist\\n            }\\n            // jump to the character node\\n            node = node.children[c - \\'a\\'];\\n        }\\n        // return if the last letter is marked as true/false\\n        // if true -> a word ends at this character otherwise not\\n        // if this exact word were inserted, we would have marked \\n        // the last character as true for sure\\n        return node.isComplete;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root;\\n        for (char c : prefix.toCharArray()) {\\n            // if the node index for the character is empty\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;\\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        // all the character nodes were found in the tree\\n        return true;    // means prefix exists\\n    }\\n}\\n```\\n---\\n#### Clean solution:\\n```\\nclass Trie {\\n    class TrieNode {\\n        boolean isComplete; \\n        TrieNode[] children;\\n        public TrieNode() {\\n            isComplete = false;\\n            children = new TrieNode[26];\\n        }\\n    }\\n\\n    TrieNode root;\\n    public Trie() {\\n        root = new TrieNode();  \\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node  = root;  \\n        for (char c : word.toCharArray()) {\\n            if (node.children[c - \\'a\\'] == null) {\\n                node.children[c - \\'a\\'] = new TrieNode();\\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        node.isComplete = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;  \\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        return node.isComplete;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root;\\n        for (char c : prefix.toCharArray()) {\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;\\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        return true;   \\n    }\\n}\\n```\\n---\\n### Complexity analysis:\\n##### Time complexity: $$O(n)$$\\n> Let $$n$$ be the size of the word.\\n> In all the $$3$$ methods, we iterate over the word which takes $$O(3.n)$$ time.\\n\\n##### Space complexity: $$O(n)$$\\n> For each character in the string, we are creating a TrieNode array of size $$26$$ (in `insert()` method). Assuming there are $$n$$ characters in our string, we end up consuming a space of $$O(26.n)$$ which can be boiled down to $$O(n)$$.\\n---\\n                            Do comment if you have any doubt \\uD83D\\uDC4D\\uD83C\\uDFFB",
                "solutionTags": [
                    "Java",
                    "String",
                    "Design",
                    "Trie"
                ],
                "code": "``` \\nclass Trie {\\n    // Trie Node class\\n    class TrieNode {\\n        // to mark the last letter of a string as true\\n        // that yes, a word ends at this letter\\n        boolean isComplete; \\n        // a node array of size 26 \\n        // to store nodes for 26 lowercase alphabets\\n        TrieNode[] children;\\n        public TrieNode() {\\n            isComplete = false;\\n            children = new TrieNode[26];\\n        }\\n    }\\n\\n    TrieNode root;  // Declare the root node\\n    public Trie() {\\n        root = new TrieNode();  // initialize the root node\\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node  = root;  // start traversing from the root\\n        for (char c : word.toCharArray()) {\\n            // if the node index for the character is empty\\n            if (node.children[c - \\'a\\'] == null) {\\n                // create a new node at that index\\n                node.children[c - \\'a\\'] = new TrieNode();\\n            }\\n            // jump to that node\\n            node = node.children[c - \\'a\\'];\\n        }\\n        // mark the last letter as true\\n        // means a word ends at this letter\\n        node.isComplete = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            // if the node index for the character is empty\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;   // means word doesn\\'t exist\\n            }\\n            // jump to the character node\\n            node = node.children[c - \\'a\\'];\\n        }\\n        // return if the last letter is marked as true/false\\n        // if true -> a word ends at this character otherwise not\\n        // if this exact word were inserted, we would have marked \\n        // the last character as true for sure\\n        return node.isComplete;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root;\\n        for (char c : prefix.toCharArray()) {\\n            // if the node index for the character is empty\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;\\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        // all the character nodes were found in the tree\\n        return true;    // means prefix exists\\n    }\\n}\\n```\n```\\nclass Trie {\\n    class TrieNode {\\n        boolean isComplete; \\n        TrieNode[] children;\\n        public TrieNode() {\\n            isComplete = false;\\n            children = new TrieNode[26];\\n        }\\n    }\\n\\n    TrieNode root;\\n    public Trie() {\\n        root = new TrieNode();  \\n    }\\n    \\n    public void insert(String word) {\\n        TrieNode node  = root;  \\n        for (char c : word.toCharArray()) {\\n            if (node.children[c - \\'a\\'] == null) {\\n                node.children[c - \\'a\\'] = new TrieNode();\\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        node.isComplete = true;\\n    }\\n    \\n    public boolean search(String word) {\\n        TrieNode node = root;\\n        for (char c : word.toCharArray()) {\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;  \\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        return node.isComplete;\\n    }\\n    \\n    public boolean startsWith(String prefix) {\\n        TrieNode node = root;\\n        for (char c : prefix.toCharArray()) {\\n            if (node.children[c - \\'a\\'] == null) {\\n                return false;\\n            }\\n            node = node.children[c - \\'a\\'];\\n        }\\n        return true;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306987,
                "title": "easy-solution-in-c",
                "content": "# Code\\n### PLease Upvote if u liked my Solution\\uD83E\\uDD17\\n```\\nclass TrieNode{\\n    public:\\n        bool isComplete;\\n        TrieNode* children[26];\\n\\n        TrieNode(){\\n            isComplete = false;\\n            memset(children,0,sizeof(children));\\n        }\\n};\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* node = root;\\n        for(auto it:word){\\n            int ind = it - \\'a\\';\\n            if(node->children[ind] == NULL)\\n                node->children[ind] = new TrieNode();\\n            node = node->children[ind];\\n        }\\n        node->isComplete = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* node = root;\\n        for(auto it:word){\\n            int ind = it - \\'a\\';\\n            if(node->children[ind] == NULL)\\n                return false;\\n            node = node->children[ind];\\n        }\\n        return node->isComplete;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* node = root;\\n        for(auto it:prefix){\\n            int ind = it - \\'a\\';\\n            if(node->children[ind] == NULL)\\n                return false;\\n            node = node->children[ind];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Design",
                    "Trie"
                ],
                "code": "```\\nclass TrieNode{\\n    public:\\n        bool isComplete;\\n        TrieNode* children[26];\\n\\n        TrieNode(){\\n            isComplete = false;\\n            memset(children,0,sizeof(children));\\n        }\\n};\\nclass Trie {\\npublic:\\n    TrieNode* root;\\n    Trie() {\\n        root = new TrieNode();\\n    }\\n    \\n    void insert(string word) {\\n        TrieNode* node = root;\\n        for(auto it:word){\\n            int ind = it - \\'a\\';\\n            if(node->children[ind] == NULL)\\n                node->children[ind] = new TrieNode();\\n            node = node->children[ind];\\n        }\\n        node->isComplete = true;\\n    }\\n    \\n    bool search(string word) {\\n        TrieNode* node = root;\\n        for(auto it:word){\\n            int ind = it - \\'a\\';\\n            if(node->children[ind] == NULL)\\n                return false;\\n            node = node->children[ind];\\n        }\\n        return node->isComplete;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        TrieNode* node = root;\\n        for(auto it:prefix){\\n            int ind = it - \\'a\\';\\n            if(node->children[ind] == NULL)\\n                return false;\\n            node = node->children[ind];\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306623,
                "title": "short-sweet-easy-to-understand-c-code-using-trie-90-faster",
                "content": "```\\nclass Trie {\\npublic:\\n    class trienode{\\n        public:\\n            bool end;\\n            trienode* v[26];\\n            trienode(){\\n                end = false;\\n                for(int i = 0; i < 26; i++){\\n                    v[i] = NULL;\\n                }\\n            }\\n    };\\n    trienode* ans = new trienode();\\n    Trie() {\\n        \\n    }\\n    \\n    void insert(string word) {\\n        trienode* p = ans;\\n        for(int i = 0; i < word.length(); i++){\\n            if(p->v[word[i]-\\'a\\']==NULL){\\n                p->v[word[i]-\\'a\\'] = new trienode();\\n            }\\n            p = p->v[word[i]-\\'a\\'];\\n        }\\n        p->end = true;\\n    }\\n    \\n    bool search(string word) {\\n        trienode* p = ans;\\n        int i;\\n        for(i = 0; i < word.length(); i++){\\n            if(p->v[word[i]-\\'a\\']==NULL){\\n                return false;\\n            }\\n            p = p->v[word[i]-\\'a\\'];\\n        }\\n        return p->end;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        trienode* p = ans;\\n        int i;\\n        for(i = 0; i < prefix.length(); i++){\\n            if(p->v[prefix[i]-\\'a\\']==NULL){\\n                return false;\\n            }\\n            p = p->v[prefix[i]-\\'a\\'];\\n        }\\n        return i==prefix.length();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Trie"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n    class trienode{\\n        public:\\n            bool end;\\n            trienode* v[26];\\n            trienode(){\\n                end = false;\\n                for(int i = 0; i < 26; i++){\\n                    v[i] = NULL;\\n                }\\n            }\\n    };\\n    trienode* ans = new trienode();\\n    Trie() {\\n        \\n    }\\n    \\n    void insert(string word) {\\n        trienode* p = ans;\\n        for(int i = 0; i < word.length(); i++){\\n            if(p->v[word[i]-\\'a\\']==NULL){\\n                p->v[word[i]-\\'a\\'] = new trienode();\\n            }\\n            p = p->v[word[i]-\\'a\\'];\\n        }\\n        p->end = true;\\n    }\\n    \\n    bool search(string word) {\\n        trienode* p = ans;\\n        int i;\\n        for(i = 0; i < word.length(); i++){\\n            if(p->v[word[i]-\\'a\\']==NULL){\\n                return false;\\n            }\\n            p = p->v[word[i]-\\'a\\'];\\n        }\\n        return p->end;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        trienode* p = ans;\\n        int i;\\n        for(i = 0; i < prefix.length(); i++){\\n            if(p->v[prefix[i]-\\'a\\']==NULL){\\n                return false;\\n            }\\n            p = p->v[prefix[i]-\\'a\\'];\\n        }\\n        return i==prefix.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3306123,
                "title": "simple-approach-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Trie {\\npublic:\\n    unordered_map<char,vector<string>>mp;\\n    unordered_map<string,int>src;\\n    Trie() {\\n        unordered_map<char,vector<string>>ip;\\n        mp=ip;\\n    }\\n    \\n    void insert(string word) {\\n        mp[word[0]].push_back(word);\\n        src[word]++;\\n        \\n    }\\n    \\n    bool search(string word) {\\n        if(src[word]>0) return true;\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        for(auto x:mp[prefix[0]]){\\n            if(x.find(prefix)==0) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Trie {\\npublic:\\n    unordered_map<char,vector<string>>mp;\\n    unordered_map<string,int>src;\\n    Trie() {\\n        unordered_map<char,vector<string>>ip;\\n        mp=ip;\\n    }\\n    \\n    void insert(string word) {\\n        mp[word[0]].push_back(word);\\n        src[word]++;\\n        \\n    }\\n    \\n    bool search(string word) {\\n        if(src[word]>0) return true;\\n        return false;\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        for(auto x:mp[prefix[0]]){\\n            if(x.find(prefix)==0) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3305812,
                "title": "java-clean-code-beats-72",
                "content": "# Code\\n```\\nclass Trie {\\n  class Node {\\n    Node[] letters;\\n    boolean isWord;\\n\\n    Node() {\\n      letters = new Node[26];\\n    }\\n  }\\n  private Node root;\\n\\n  public Trie() {\\n    root = new Node();\\n  }\\n  \\n  public void insert(String word) {\\n    var node = root;\\n\\n    for (var c : word.toCharArray()) {\\n      if (node.letters[c - \\'a\\'] == null)\\n        node.letters[c - \\'a\\'] = new Node();\\n\\n      node = node.letters[c - \\'a\\'];\\n    }\\n    node.isWord = true;\\n  }\\n\\n  private Node traverse(String word) {\\n    var node = root;\\n\\n    for (var i=0; i < word.length() && node != null; i++)\\n      node = node.letters[word.charAt(i) - \\'a\\'];\\n    \\n    return node;\\n  }\\n  \\n  public boolean search(String word) {\\n    var node = traverse(word);\\n    return node != null && node.isWord;\\n  }\\n  \\n  public boolean startsWith(String prefix) {\\n    return traverse(prefix) != null;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Trie"
                ],
                "code": "```\\nclass Trie {\\n  class Node {\\n    Node[] letters;\\n    boolean isWord;\\n\\n    Node() {\\n      letters = new Node[26];\\n    }\\n  }\\n  private Node root;\\n\\n  public Trie() {\\n    root = new Node();\\n  }\\n  \\n  public void insert(String word) {\\n    var node = root;\\n\\n    for (var c : word.toCharArray()) {\\n      if (node.letters[c - \\'a\\'] == null)\\n        node.letters[c - \\'a\\'] = new Node();\\n\\n      node = node.letters[c - \\'a\\'];\\n    }\\n    node.isWord = true;\\n  }\\n\\n  private Node traverse(String word) {\\n    var node = root;\\n\\n    for (var i=0; i < word.length() && node != null; i++)\\n      node = node.letters[word.charAt(i) - \\'a\\'];\\n    \\n    return node;\\n  }\\n  \\n  public boolean search(String word) {\\n    var node = traverse(word);\\n    return node != null && node.isWord;\\n  }\\n  \\n  public boolean startsWith(String prefix) {\\n    return traverse(prefix) != null;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3119576,
                "title": "c-trie-well-commented",
                "content": "# Complexity\\nFor all 3 functions (insert, search, startsWith)\\n**Time complexity : O(n)**\\nWhere n is the length of word\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n//question on TRIE\\n//3 functions in TRIE - insert, search, startsWith\\n\\nstruct Node {\\n\\tNode *links[26];\\n\\tbool flag = false;\\n\\t//checks if the reference trie is present or not\\n\\tbool containKey(char ch) {\\n\\t\\treturn (links[ch - \\'a\\'] != NULL);\\n\\t}\\n\\t//creating reference trie\\n\\tvoid put(char ch, Node *node) {\\n\\t\\tlinks[ch - \\'a\\'] = node;\\n\\t}\\n\\t//to get the next node for traversal\\n\\tNode *get(char ch) {\\n\\t\\treturn links[ch - \\'a\\'];\\n\\t}\\n\\t//setting flag to true at the end of the word\\n\\tvoid setEnd() {\\n\\t\\tflag = true;\\n\\t}\\n\\t//checking if the word is completed or not\\n\\tbool isEnd() {\\n\\t\\treturn flag;\\n\\t}\\n};\\n\\nclass Trie {\\nprivate: \\n    Node* root; //starting trie with root\\n\\npublic:\\n    Trie() {\\n        root=new Node();   //for every reference variable we have, we need a new node for each one, with flag=false initially\\n    }\\n    \\n    //TC for insert, search and startsWith : O(n)\\n    //where n is length of word\\n\\n    void insert(string word) {\\n        Node* node=root; //dummy node pointing to root\\n        for(int i=0; i<word.length(); i++){\\n            //chars in word exist in trie or not? => function - bool containsKey\\n            if(!node->containKey(word[i])){\\n                //doesnt contain the key\\n                node->put(word[i], new Node()); //at current node\\n            }\\n            //moves to reference trie\\n            node=node->get(word[i]);\\n        }\\n        node->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!node->containKey(word[i])){\\n                return false;\\n            }\\n            node=node->get(word[i]);\\n        }\\n        return node->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* node=root;\\n        for(int i=0; i<prefix.length(); i++){\\n            if(!node->containKey(prefix[i])){\\n                return false;\\n            }\\n            node=node->get(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Trie"
                ],
                "code": "```\\n//question on TRIE\\n//3 functions in TRIE - insert, search, startsWith\\n\\nstruct Node {\\n\\tNode *links[26];\\n\\tbool flag = false;\\n\\t//checks if the reference trie is present or not\\n\\tbool containKey(char ch) {\\n\\t\\treturn (links[ch - \\'a\\'] != NULL);\\n\\t}\\n\\t//creating reference trie\\n\\tvoid put(char ch, Node *node) {\\n\\t\\tlinks[ch - \\'a\\'] = node;\\n\\t}\\n\\t//to get the next node for traversal\\n\\tNode *get(char ch) {\\n\\t\\treturn links[ch - \\'a\\'];\\n\\t}\\n\\t//setting flag to true at the end of the word\\n\\tvoid setEnd() {\\n\\t\\tflag = true;\\n\\t}\\n\\t//checking if the word is completed or not\\n\\tbool isEnd() {\\n\\t\\treturn flag;\\n\\t}\\n};\\n\\nclass Trie {\\nprivate: \\n    Node* root; //starting trie with root\\n\\npublic:\\n    Trie() {\\n        root=new Node();   //for every reference variable we have, we need a new node for each one, with flag=false initially\\n    }\\n    \\n    //TC for insert, search and startsWith : O(n)\\n    //where n is length of word\\n\\n    void insert(string word) {\\n        Node* node=root; //dummy node pointing to root\\n        for(int i=0; i<word.length(); i++){\\n            //chars in word exist in trie or not? => function - bool containsKey\\n            if(!node->containKey(word[i])){\\n                //doesnt contain the key\\n                node->put(word[i], new Node()); //at current node\\n            }\\n            //moves to reference trie\\n            node=node->get(word[i]);\\n        }\\n        node->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        Node* node=root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!node->containKey(word[i])){\\n                return false;\\n            }\\n            node=node->get(word[i]);\\n        }\\n        return node->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        Node* node=root;\\n        for(int i=0; i<prefix.length(); i++){\\n            if(!node->containKey(prefix[i])){\\n                return false;\\n            }\\n            node=node->get(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3080808,
                "title": "implementing-a-trie-prefix-tree-data-structure-in-javascript-a-step-by-step-guide",
                "content": "# Approach\\n\\nThe solution uses an object `n` to represent the trie and a boolean $$isWord$$ to indicate if the current node is the end of a word.\\nThe insert(word) method iterates through each character of the word, creating a new Trie object for the character if it doesn\\'t exist and moving to the next node. At the end of the loop, the $$isWord$$ property of the last node is set to true.\\nThe $$search(word)$$ method iterates through the characters of the word, returning false if a character is not found in the trie. It returns the $$isWord$$ property of the last node if the loop completes.\\nThe startsWith(prefix) method is similar to the $$search(word)$$ method, but it returns true if the loop completes without returning false.\\n\\nOverall, this implementation of Trie class in javascript is an elegant and efficient solution to the given problem as it uses object for representing trie and also uses recursion to search and check prefix, this makes code more readable and easy to understand.\\n\\n<!-- Describe your approach to solving the problem. -->\\n```\\nTrie() Initializes the trie object.\\nvoid insert(String word) Inserts the string word into the trie.\\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\\n\\n```\\n\\n# Code\\n```\\n\\nvar Trie = function() {\\n    this.n = {};  \\n    this.isWord = false;\\n    return this;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this;\\n    for (let i = 0; i < word.length; i++) {\\n        if (!curr.n[word[i]]) {\\n            curr.n[word[i]] = new Trie(word[i]);\\n        }\\n        curr = curr.n[word[i]];\\n    }\\n    curr.isWord = true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this;\\n    for (let i = 0; i < word.length; i++) {\\n        let char = word[i];\\n        if (!curr.n[char]) {\\n            return false;\\n        }\\n        curr = curr.n[char];\\n    }\\n    return curr.isWord;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this;\\n    for (let i = 0; i < prefix.length; i++) {\\n        let char = prefix[i];\\n        if (!curr.n[char]) {\\n            return false;\\n        }\\n        curr = curr.n[char];\\n    }\\n    return true;\\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String",
                    "Trie",
                    "String Matching"
                ],
                "code": "```\\nTrie() Initializes the trie object.\\nvoid insert(String word) Inserts the string word into the trie.\\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\\n\\n```\n```\\n\\nvar Trie = function() {\\n    this.n = {};  \\n    this.isWord = false;\\n    return this;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this;\\n    for (let i = 0; i < word.length; i++) {\\n        if (!curr.n[word[i]]) {\\n            curr.n[word[i]] = new Trie(word[i]);\\n        }\\n        curr = curr.n[word[i]];\\n    }\\n    curr.isWord = true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this;\\n    for (let i = 0; i < word.length; i++) {\\n        let char = word[i];\\n        if (!curr.n[char]) {\\n            return false;\\n        }\\n        curr = curr.n[char];\\n    }\\n    return curr.isWord;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this;\\n    for (let i = 0; i < prefix.length; i++) {\\n        let char = prefix[i];\\n        if (!curr.n[char]) {\\n            return false;\\n        }\\n        curr = curr.n[char];\\n    }\\n    return true;\\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2892729,
                "title": "beginner-friendly-py3",
                "content": "```\\nclass Trie:\\n    def __init__(self):\\n        self.v = []\\n\\n    def insert(self, word: str) -> None:\\n        self.v.append(word)\\n\\n    def search(self, word: str) -> bool:\\n        return word in self.v\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        for word in self.v:\\n            if word.startswith(prefix):\\n                return True\\n        return False\\n        \\n\\'\\'\\'\\nThe time complexity of the insert(), search(), and startsWith() methods in the brute force solution is all O(n), where n is the number of words in the trie. This means that the solution will not perform well for large inputs, since the time taken to perform these operations will increase as the size of the input increases.\\n\\nThe space complexity of the solution is also O(n), since the trie is stored in a list and the size of the list will grow linearly with the number of words in the trie. This means that the solution will not be efficient in terms of memory usage for large inputs.\\n\\'\\'\\'\\n```\\n\\n1. not using python built-in\\n```\\nclass Trie:\\n    def __init__(self):\\n        self.data = []\\n\\n    def insert(self, word: str) -> None:\\n        self.data.append(word)\\n\\n    def search(self, word: str) -> bool:\\n        return word in self.data\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        for word in self.data:\\n            if len(word) < len(prefix):\\n                continue\\n            match = True\\n            for i in range(len(prefix)):\\n                if word[i] != prefix[i]:\\n                    match = False\\n                    break\\n            if match:\\n                return True\\n        return False\\n        \\n\\'\\'\\'\\nThe time complexity of the insert(), search(), and startsWith() methods in the brute force solution is all O(n), where n is the number of words in the trie. This means that the solution will not perform well for large inputs, since the time taken to perform these operations will increase as the size of the input increases.\\n\\nThe space complexity of the solution is also O(n), since the trie is stored in a list and the size of the list will grow linearly with the number of words in the trie. This means that the solution will not be efficient in terms of memory usage for large inputs.\\n\\'\\'\\'\\n```\\n\\n2.\\n```\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        currentNode = self.root\\n        for char in word:\\n            if char not in currentNode.children:\\n                currentNode.children[char] = TrieNode()\\n                \\n            currentNode = currentNode.children[char]\\n        currentNode.endOfWord = True\\n\\n    def search(self, word: str) -> bool:\\n        currentNode = self.root\\n        for char in word:\\n            if not char in currentNode.children:\\n                return False\\n            currentNode = currentNode.children[char]\\n        return currentNode.endOfWord\\n           \\n    def startsWith(self, prefix: str) -> bool:\\n        currentNode = self.root\\n        for char in prefix:\\n            if not char in currentNode.children:\\n                return False\\n            currentNode = currentNode.children[char]\\n        return True\\n    \\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.endOfWord = False\\n        \\n\\'\\'\\'\\n time complexity of O(L), where L is the length of the searched word or prefix. The insert operation has a time complexity of O(L) as it needs to iterate over each character in the inserted word.\\nThe search operation has a time complexity of O(L) as it needs to iterate over each character in the searched word. \\n\\nThe space complexity is O(N * L), as it needs to store all the characters in the inserted words.\\n\\'\\'\\'\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie:\\n    def __init__(self):\\n        self.v = []\\n\\n    def insert(self, word: str) -> None:\\n        self.v.append(word)\\n\\n    def search(self, word: str) -> bool:\\n        return word in self.v\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        for word in self.v:\\n            if word.startswith(prefix):\\n                return True\\n        return False\\n        \\n\\'\\'\\'\\nThe time complexity of the insert(), search(), and startsWith() methods in the brute force solution is all O(n), where n is the number of words in the trie. This means that the solution will not perform well for large inputs, since the time taken to perform these operations will increase as the size of the input increases.\\n\\nThe space complexity of the solution is also O(n), since the trie is stored in a list and the size of the list will grow linearly with the number of words in the trie. This means that the solution will not be efficient in terms of memory usage for large inputs.\\n\\'\\'\\'\\n```\n```\\nclass Trie:\\n    def __init__(self):\\n        self.data = []\\n\\n    def insert(self, word: str) -> None:\\n        self.data.append(word)\\n\\n    def search(self, word: str) -> bool:\\n        return word in self.data\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        for word in self.data:\\n            if len(word) < len(prefix):\\n                continue\\n            match = True\\n            for i in range(len(prefix)):\\n                if word[i] != prefix[i]:\\n                    match = False\\n                    break\\n            if match:\\n                return True\\n        return False\\n        \\n\\'\\'\\'\\nThe time complexity of the insert(), search(), and startsWith() methods in the brute force solution is all O(n), where n is the number of words in the trie. This means that the solution will not perform well for large inputs, since the time taken to perform these operations will increase as the size of the input increases.\\n\\nThe space complexity of the solution is also O(n), since the trie is stored in a list and the size of the list will grow linearly with the number of words in the trie. This means that the solution will not be efficient in terms of memory usage for large inputs.\\n\\'\\'\\'\\n```\n```\\nclass Trie:\\n    def __init__(self):\\n        self.root = TrieNode()\\n\\n    def insert(self, word: str) -> None:\\n        currentNode = self.root\\n        for char in word:\\n            if char not in currentNode.children:\\n                currentNode.children[char] = TrieNode()\\n                \\n            currentNode = currentNode.children[char]\\n        currentNode.endOfWord = True\\n\\n    def search(self, word: str) -> bool:\\n        currentNode = self.root\\n        for char in word:\\n            if not char in currentNode.children:\\n                return False\\n            currentNode = currentNode.children[char]\\n        return currentNode.endOfWord\\n           \\n    def startsWith(self, prefix: str) -> bool:\\n        currentNode = self.root\\n        for char in prefix:\\n            if not char in currentNode.children:\\n                return False\\n            currentNode = currentNode.children[char]\\n        return True\\n    \\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.endOfWord = False\\n        \\n\\'\\'\\'\\n time complexity of O(L), where L is the length of the searched word or prefix. The insert operation has a time complexity of O(L) as it needs to iterate over each character in the inserted word.\\nThe search operation has a time complexity of O(L) as it needs to iterate over each character in the searched word. \\n\\nThe space complexity is O(N * L), as it needs to store all the characters in the inserted words.\\n\\'\\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807328,
                "title": "python-trie-or-prefix-tree-easy-to-understand",
                "content": "# Intuition\\nTrie node by using dict for storing characters. Nested dict\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass TrieNode:\\n    def __init__(self):\\n        self.childrens = {}\\n        self.isWord = False\\n\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        curr = self.root\\n        for i in word:\\n            if i not in curr.childrens:\\n                curr.childrens[i] = TrieNode()\\n            curr = curr.childrens[i]\\n        curr.isWord = True\\n\\n        \\n    def search(self, word: str) -> bool:\\n        curr = self.root\\n        for s in word:\\n            if s not in curr.childrens:\\n                return False\\n            curr = curr.childrens[s]\\n        return curr.isWord\\n            \\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr = self.root\\n        for s in prefix:\\n            if s not in curr.childrens:\\n                return False\\n            curr = curr.childrens[s]\\n        return True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.childrens = {}\\n        self.isWord = False\\n\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        curr = self.root\\n        for i in word:\\n            if i not in curr.childrens:\\n                curr.childrens[i] = TrieNode()\\n            curr = curr.childrens[i]\\n        curr.isWord = True\\n\\n        \\n    def search(self, word: str) -> bool:\\n        curr = self.root\\n        for s in word:\\n            if s not in curr.childrens:\\n                return False\\n            curr = curr.childrens[s]\\n        return curr.isWord\\n            \\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr = self.root\\n        for s in prefix:\\n            if s not in curr.childrens:\\n                return False\\n            curr = curr.childrens[s]\\n        return True\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2728558,
                "title": "implement-trie-java-well-commented-well-explained",
                "content": "# Trie\\n\\n#### How to implement the trie data structure.\\n1. data - store the character.\\n2. child - store the child, that starts with particular character.\\n3. wordEnd - Number of word that end at that character.\\n\\n**Searching/inserting in O(word length) time**\\n```java\\nclass Trie {\\n\\n\\tchar data;\\n\\t// to store all the children\\n\\tTrie[] child;\\n\\t// number of word that end at this character.\\n\\tint wordEnd;\\n\\n\\tpublic Trie() {\\n\\t\\tthis.data = \\'-\\';\\n\\t\\tthis.child = new Trie[26];\\n\\t\\tthis.wordEnd = 0;\\n\\n\\t}\\n\\n\\tpublic void insert(String word) {\\n\\t\\tTrie cur = this;\\n\\t\\tfor (char ch : word.toCharArray()) {\\n\\t\\t\\t// if no child with character ch, create a new child.\\n\\t\\t\\tif (cur.child[ch - \\'a\\'] == null) {\\n\\t\\t\\t\\tTrie newChild = new Trie();\\n\\t\\t\\t\\tnewChild.data = ch;\\n\\t\\t\\t\\t// assign the new child to the current node.\\n\\t\\t\\t\\tcur.child[ch - \\'a\\'] = newChild;\\n\\t\\t\\t\\t// move to the child node.\\n\\t\\t\\t\\tcur = newChild;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if there is a child, then move to the child node\\n\\t\\t\\t\\tcur = cur.child[ch - \\'a\\'];\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\t// increment the number of word that end at the last character of word.\\n\\t\\tcur.wordEnd += 1;\\n\\n\\t}\\n\\n\\tpublic boolean search(String word) {\\n\\t\\tTrie cur = this;\\n\\t\\tfor (char ch : word.toCharArray()) {\\n\\t\\t\\t// if there is no child for character ch, then word doesn\\'t exits.\\n\\t\\t\\tif (cur.child[ch - \\'a\\'] == null) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// move to the child node.\\n\\t\\t\\t\\tcur = cur.child[ch - \\'a\\'];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// if wordEnd is >=1 means one or more word end at current character.\\n\\t\\treturn cur.wordEnd != 0 ? true : false;\\n\\t}\\n\\n\\tpublic boolean startsWith(String prefix) {\\n\\t\\tTrie cur = this;\\n\\t\\tfor (char ch : prefix.toCharArray()) {\\n\\t\\t\\t// if there is no path for character ch, then prefix doesn\\'t exists.\\n\\t\\t\\tif (cur.child[ch - \\'a\\'] == null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t// if there is a path move to the next node.\\n\\t\\t\\telse\\n\\t\\t\\t\\tcur = cur.child[ch - \\'a\\'];\\n\\t\\t}\\n\\t\\t// if we are able to traverse all the character of prefix, then prefix exists.\\n\\t\\treturn true;\\n\\t}\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Trie"
                ],
                "code": "```java\\nclass Trie {\\n\\n\\tchar data;\\n\\t// to store all the children\\n\\tTrie[] child;\\n\\t// number of word that end at this character.\\n\\tint wordEnd;\\n\\n\\tpublic Trie() {\\n\\t\\tthis.data = \\'-\\';\\n\\t\\tthis.child = new Trie[26];\\n\\t\\tthis.wordEnd = 0;\\n\\n\\t}\\n\\n\\tpublic void insert(String word) {\\n\\t\\tTrie cur = this;\\n\\t\\tfor (char ch : word.toCharArray()) {\\n\\t\\t\\t// if no child with character ch, create a new child.\\n\\t\\t\\tif (cur.child[ch - \\'a\\'] == null) {\\n\\t\\t\\t\\tTrie newChild = new Trie();\\n\\t\\t\\t\\tnewChild.data = ch;\\n\\t\\t\\t\\t// assign the new child to the current node.\\n\\t\\t\\t\\tcur.child[ch - \\'a\\'] = newChild;\\n\\t\\t\\t\\t// move to the child node.\\n\\t\\t\\t\\tcur = newChild;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if there is a child, then move to the child node\\n\\t\\t\\t\\tcur = cur.child[ch - \\'a\\'];\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\t// increment the number of word that end at the last character of word.\\n\\t\\tcur.wordEnd += 1;\\n\\n\\t}\\n\\n\\tpublic boolean search(String word) {\\n\\t\\tTrie cur = this;\\n\\t\\tfor (char ch : word.toCharArray()) {\\n\\t\\t\\t// if there is no child for character ch, then word doesn\\'t exits.\\n\\t\\t\\tif (cur.child[ch - \\'a\\'] == null) {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// move to the child node.\\n\\t\\t\\t\\tcur = cur.child[ch - \\'a\\'];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// if wordEnd is >=1 means one or more word end at current character.\\n\\t\\treturn cur.wordEnd != 0 ? true : false;\\n\\t}\\n\\n\\tpublic boolean startsWith(String prefix) {\\n\\t\\tTrie cur = this;\\n\\t\\tfor (char ch : prefix.toCharArray()) {\\n\\t\\t\\t// if there is no path for character ch, then prefix doesn\\'t exists.\\n\\t\\t\\tif (cur.child[ch - \\'a\\'] == null)\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t// if there is a path move to the next node.\\n\\t\\t\\telse\\n\\t\\t\\t\\tcur = cur.child[ch - \\'a\\'];\\n\\t\\t}\\n\\t\\t// if we are able to traverse all the character of prefix, then prefix exists.\\n\\t\\treturn true;\\n\\t}\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2614092,
                "title": "python-trie-using-hashmap",
                "content": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.endofword = False\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        cur = self.root\\n        for c in word:\\n            if c not in cur.children:\\n                cur.children[c] = TrieNode()\\n            cur = cur.children[c]\\n        cur.endofword = True\\n\\n    def search(self, word: str) -> bool:\\n        cur = self.root\\n        for c in word:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return cur.endofword == True\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        cur = self.root\\n        for c in prefix:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return True\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "solutionTags": [
                    "Python",
                    "Trie"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children = {}\\n        self.endofword = False\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root = TrieNode()\\n        \\n\\n    def insert(self, word: str) -> None:\\n        cur = self.root\\n        for c in word:\\n            if c not in cur.children:\\n                cur.children[c] = TrieNode()\\n            cur = cur.children[c]\\n        cur.endofword = True\\n\\n    def search(self, word: str) -> bool:\\n        cur = self.root\\n        for c in word:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return cur.endofword == True\\n\\n    def startsWith(self, prefix: str) -> bool:\\n        cur = self.root\\n        for c in prefix:\\n            if c not in cur.children:\\n                return False\\n            cur = cur.children[c]\\n        return True\\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2447812,
                "title": "test-case-failed-during-submit-but-passed-when-check-as-input",
                "content": "![image](https://assets.leetcode.com/users/images/5a2d9e0c-dd3d-4865-b7cc-eb6347e055de_1660892509.405763.png)\\n",
                "solutionTags": [
                    "Trie"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/5a2d9e0c-dd3d-4865-b7cc-eb6347e055de_1660892509.405763.png)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2400355,
                "title": "go-trienode-with-map",
                "content": "```\\ntype trieNode struct {\\n\\tchildren map[byte]*trieNode\\n\\tisEnd    bool\\n}\\n\\nfunc newTrieNode() *trieNode {\\n\\treturn &trieNode{\\n\\t\\tchildren: make(map[byte]*trieNode),\\n\\t\\tisEnd:    false,\\n\\t}\\n}\\n\\ntype Trie struct {\\n\\troot *trieNode\\n}\\n\\nfunc Constructor() Trie {\\n\\treturn Trie{\\n\\t\\troot: newTrieNode(),\\n\\t}\\n}\\n\\nfunc (this *Trie) Insert(word string) {\\n\\tcurr := this.root\\n\\tfor i := range word {\\n\\t\\tif _, ok := curr.children[word[i]]; !ok {\\n\\t\\t\\tcurr.children[word[i]] = newTrieNode()\\n\\t\\t}\\n\\n\\t\\tcurr = curr.children[word[i]]\\n\\t}\\n\\n\\tcurr.isEnd = true\\n}\\n\\nfunc (this *Trie) Search(word string) bool {\\n\\tcurr := this.root\\n\\n\\tfor i := range word {\\n\\t\\tif _, ok := curr.children[word[i]]; !ok {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t\\tcurr = curr.children[word[i]]\\n\\t}\\n\\treturn curr.isEnd\\n}\\n\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n\\tcurr := this.root\\n\\n\\tfor i := range prefix {\\n\\t\\tif _, ok := curr.children[prefix[i]]; !ok {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t\\tcurr = curr.children[prefix[i]]\\n\\t}\\n\\n\\treturn true\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype trieNode struct {\\n\\tchildren map[byte]*trieNode\\n\\tisEnd    bool\\n}\\n\\nfunc newTrieNode() *trieNode {\\n\\treturn &trieNode{\\n\\t\\tchildren: make(map[byte]*trieNode),\\n\\t\\tisEnd:    false,\\n\\t}\\n}\\n\\ntype Trie struct {\\n\\troot *trieNode\\n}\\n\\nfunc Constructor() Trie {\\n\\treturn Trie{\\n\\t\\troot: newTrieNode(),\\n\\t}\\n}\\n\\nfunc (this *Trie) Insert(word string) {\\n\\tcurr := this.root\\n\\tfor i := range word {\\n\\t\\tif _, ok := curr.children[word[i]]; !ok {\\n\\t\\t\\tcurr.children[word[i]] = newTrieNode()\\n\\t\\t}\\n\\n\\t\\tcurr = curr.children[word[i]]\\n\\t}\\n\\n\\tcurr.isEnd = true\\n}\\n\\nfunc (this *Trie) Search(word string) bool {\\n\\tcurr := this.root\\n\\n\\tfor i := range word {\\n\\t\\tif _, ok := curr.children[word[i]]; !ok {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t\\tcurr = curr.children[word[i]]\\n\\t}\\n\\treturn curr.isEnd\\n}\\n\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n\\tcurr := this.root\\n\\n\\tfor i := range prefix {\\n\\t\\tif _, ok := curr.children[prefix[i]]; !ok {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\t\\tcurr = curr.children[prefix[i]]\\n\\t}\\n\\n\\treturn true\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2385442,
                "title": "java-100-faster-code",
                "content": "```\\nclass Trie {\\n\\nprivate TriesNode rootNode; \\n\\nclass TriesNode{\\n    \\n    private char key;\\n    private boolean isEnd;\\n    \\n    private Map<Character,TriesNode> preFixMap;\\n    \\n    public TriesNode(char key){\\n        this.key = key;\\n        preFixMap = new HashMap<>();\\n    }\\n}\\n\\npublic Trie() {\\n    rootNode = new TriesNode(\\'/\\');\\n}\\n\\npublic void insert(String word) {\\n    \\n    TriesNode tempNode = rootNode;\\n    for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              findNode=new TriesNode(c);\\n              tempNode.preFixMap.put(c,findNode);\\n          }\\n         tempNode = findNode;\\n    }\\n    tempNode.isEnd = true;\\n    \\n}\\n\\npublic boolean search(String word) {\\n    TriesNode searchNode = searchHelper(word);\\n    return searchNode != null && searchNode.isEnd; \\n}\\n\\npublic boolean startsWith(String prefix) {\\n      return searchHelper(prefix) != null;\\n}\\npublic TriesNode searchHelper(String word){\\n    \\n      TriesNode tempNode = rootNode; \\n     for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              return null;\\n          }\\n         tempNode = findNode;\\n    }\\n    return tempNode;\\n}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Trie {\\n\\nprivate TriesNode rootNode; \\n\\nclass TriesNode{\\n    \\n    private char key;\\n    private boolean isEnd;\\n    \\n    private Map<Character,TriesNode> preFixMap;\\n    \\n    public TriesNode(char key){\\n        this.key = key;\\n        preFixMap = new HashMap<>();\\n    }\\n}\\n\\npublic Trie() {\\n    rootNode = new TriesNode(\\'/\\');\\n}\\n\\npublic void insert(String word) {\\n    \\n    TriesNode tempNode = rootNode;\\n    for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              findNode=new TriesNode(c);\\n              tempNode.preFixMap.put(c,findNode);\\n          }\\n         tempNode = findNode;\\n    }\\n    tempNode.isEnd = true;\\n    \\n}\\n\\npublic boolean search(String word) {\\n    TriesNode searchNode = searchHelper(word);\\n    return searchNode != null && searchNode.isEnd; \\n}\\n\\npublic boolean startsWith(String prefix) {\\n      return searchHelper(prefix) != null;\\n}\\npublic TriesNode searchHelper(String word){\\n    \\n      TriesNode tempNode = rootNode; \\n     for(int i = 0 ; i <word.length();i++){\\n          char c = word.charAt(i);\\n          TriesNode findNode = tempNode.preFixMap.get(c);\\n          if(findNode == null){\\n              return null;\\n          }\\n         tempNode = findNode;\\n    }\\n    return tempNode;\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2172983,
                "title": "python-solution-fast-and-efficient-using-dictonaries",
                "content": "We have to create a Trie data Structure which is actually efficient in word searching ,and has so many daily life uses. \\nSo in init method we will create a root , which will have \"*\" as start and in insert function , we will check for every letter if it is present in the dictonary or not if it is present then we will just continue, else we will create a new dictionary for that letter , and at last after the word is done, we will add a \"*\" to indicate the word is completed.\\nFor searchWord function and startsWith function ,\\nWe will take root and we will check if each letter is present in the trie or not , if not present we will return False ,We will continue till the end,\\nAfter the word is done for statsWith function we will just return True as we need only prefix,\\nfor searchWord function we will return True if \"*\" is present at the end else False\\n\\'\\'\\'\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root={\"*\":\"*\"}  \\n\\n    def insert(self, word: str) -> None:\\n        curr_node=self.root\\n        for i in word:\\n            if i not in curr_node:\\n                curr_node[i]={}\\n            curr_node=curr_node[i]\\n        curr_node[\"*\"]=\"*\"\\n\\n    def search(self, word: str) -> bool:\\n        curr_node=self.root\\n        for i in word:\\n            if i in curr_node:\\n                curr_node=curr_node[i]\\n            else:\\n                return False\\n        return \"*\" in curr_node\\n            \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr_node=self.root\\n        for i in prefix:\\n            if i in curr_node:\\n                curr_node=curr_node[i]\\n            else:\\n                return False\\n        return True\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "We have to create a Trie data Structure which is actually efficient in word searching ,and has so many daily life uses. \\nSo in init method we will create a root , which will have \"*\" as start and in insert function , we will check for every letter if it is present in the dictonary or not if it is present then we will just continue, else we will create a new dictionary for that letter , and at last after the word is done, we will add a \"*\" to indicate the word is completed.\\nFor searchWord function and startsWith function ,\\nWe will take root and we will check if each letter is present in the trie or not , if not present we will return False ,We will continue till the end,\\nAfter the word is done for statsWith function we will just return True as we need only prefix,\\nfor searchWord function we will return True if \"*\" is present at the end else False\\n\\'\\'\\'\\nclass Trie:\\n\\n    def __init__(self):\\n        self.root={\"*\":\"*\"}  \\n\\n    def insert(self, word: str) -> None:\\n        curr_node=self.root\\n        for i in word:\\n            if i not in curr_node:\\n                curr_node[i]={}\\n            curr_node=curr_node[i]\\n        curr_node[\"*\"]=\"*\"\\n\\n    def search(self, word: str) -> bool:\\n        curr_node=self.root\\n        for i in word:\\n            if i in curr_node:\\n                curr_node=curr_node[i]\\n            else:\\n                return False\\n        return \"*\" in curr_node\\n            \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        curr_node=self.root\\n        for i in prefix:\\n            if i in curr_node:\\n                curr_node=curr_node[i]\\n            else:\\n                return False\\n        return True\\n\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 2144735,
                "title": "c-explanation-in-detail-readable-code",
                "content": "```\\nstruct node{\\n    node* links[26];\\n    bool flag = false;\\n    \\n    bool iscontain(char ch){\\n        return links[ch-\\'a\\'] != NULL;\\n    }\\n    \\n    void put(char ch, node* temp){\\n        links[ch-\\'a\\'] = temp;\\n    }\\n    \\n    node* next(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    \\n    void setEnd(){\\n        flag = true;\\n    }\\n    \\n    bool isEnd(){\\n        return flag;\\n    }\\n};\\n\\nclass Trie {\\nprivate:    node* root;\\npublic:\\n    Trie() {\\n        root = new node();\\n    }\\n    \\n    \\n    // O(Lenth Of The String)\\n    void insert(string word) {\\n        node* temp = root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!temp->iscontain(word[i])){\\n                temp->put(word[i], new node());\\n            }\\n            temp = temp->next(word[i]);\\n        }\\n        temp->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        node* temp = root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!temp->iscontain(word[i])){\\n                return false;\\n            }\\n            temp = temp->next(word[i]);\\n        }\\n        return temp->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        node* temp = root;\\n        for(int i=0; i<prefix.length(); i++){\\n            if(!temp->iscontain(prefix[i])){\\n                return false;\\n            }\\n            temp = temp->next(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstruct node{\\n    node* links[26];\\n    bool flag = false;\\n    \\n    bool iscontain(char ch){\\n        return links[ch-\\'a\\'] != NULL;\\n    }\\n    \\n    void put(char ch, node* temp){\\n        links[ch-\\'a\\'] = temp;\\n    }\\n    \\n    node* next(char ch){\\n        return links[ch-\\'a\\'];\\n    }\\n    \\n    void setEnd(){\\n        flag = true;\\n    }\\n    \\n    bool isEnd(){\\n        return flag;\\n    }\\n};\\n\\nclass Trie {\\nprivate:    node* root;\\npublic:\\n    Trie() {\\n        root = new node();\\n    }\\n    \\n    \\n    // O(Lenth Of The String)\\n    void insert(string word) {\\n        node* temp = root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!temp->iscontain(word[i])){\\n                temp->put(word[i], new node());\\n            }\\n            temp = temp->next(word[i]);\\n        }\\n        temp->setEnd();\\n    }\\n    \\n    bool search(string word) {\\n        node* temp = root;\\n        for(int i=0; i<word.length(); i++){\\n            if(!temp->iscontain(word[i])){\\n                return false;\\n            }\\n            temp = temp->next(word[i]);\\n        }\\n        return temp->isEnd();\\n    }\\n    \\n    bool startsWith(string prefix) {\\n        node* temp = root;\\n        for(int i=0; i<prefix.length(); i++){\\n            if(!temp->iscontain(prefix[i])){\\n                return false;\\n            }\\n            temp = temp->next(prefix[i]);\\n        }\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2106067,
                "title": "striver-s-c-code",
                "content": "\\tstruct Node{\\n\\n\\t\\tNode *links[26];\\n\\t\\tbool flag=false;\\n\\n\\t\\tbool containsKey(char ch){\\n\\t\\t\\treturn links[ch-\\'a\\']!=NULL;\\n\\t\\t}\\n\\t\\tvoid put(char ch,Node *node){\\n\\t\\t\\tlinks[ch-\\'a\\']=node;\\n\\t\\t}\\n\\t\\tNode *get(char ch){\\n\\t\\t\\treturn links[ch-\\'a\\'];\\n\\t\\t}\\n\\t\\tvoid setEnd(){\\n\\t\\t\\tflag=true;\\n\\t\\t}\\n\\t\\tbool isEnd(){\\n\\t\\t\\treturn flag;\\n\\t\\t}\\n\\t};\\n\\n\\tclass Trie {\\n\\n\\tprivate: Node *root;\\n\\n\\tpublic:\\n\\t\\tTrie() {\\n\\t\\t\\troot = new Node();\\n\\t\\t}\\n\\n\\t\\tvoid insert(string word) {\\n\\t\\t\\tNode *node=root;\\n\\t\\t\\tfor(int i=0;i<word.size();i++){\\n\\t\\t\\t\\tif(!node->containsKey(word[i])){\\n\\t\\t\\t\\t\\tnode->put(word[i],new Node());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode=node->get(word[i]);\\n\\t\\t\\t}\\n\\t\\t\\tnode->setEnd();\\n\\t\\t}\\n\\n\\t\\tbool search(string word) {\\n\\t\\t\\tNode *node=root;\\n\\t\\t\\tfor(int i=0;i<word.size();i++){\\n\\t\\t\\t\\tif(!node->containsKey(word[i])){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode=node->get(word[i]);\\n\\t\\t\\t}\\n\\t\\t\\treturn node->isEnd();\\n\\t\\t}\\n\\n\\t\\tbool startsWith(string prefix) {\\n\\t\\t\\tNode *node=root;\\n\\t\\t\\tfor(int i=0;i<prefix.size();i++){\\n\\t\\t\\t\\tif(!node->containsKey(prefix[i])){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode=node->get(prefix[i]);\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "\\tstruct Node{\\n\\n\\t\\tNode *links[26];\\n\\t\\tbool flag=false;\\n\\n\\t\\tbool containsKey(char ch){\\n\\t\\t\\treturn links[ch-\\'a\\']!=NULL;\\n\\t\\t}\\n\\t\\tvoid put(char ch,Node *node){\\n\\t\\t\\tlinks[ch-\\'a\\']=node;\\n\\t\\t}\\n\\t\\tNode *get(char ch){\\n\\t\\t\\treturn links[ch-\\'a\\'];\\n\\t\\t}\\n\\t\\tvoid setEnd(){\\n\\t\\t\\tflag=true;\\n\\t\\t}\\n\\t\\tbool isEnd(){\\n\\t\\t\\treturn flag;\\n\\t\\t}\\n\\t};\\n\\n\\tclass Trie {\\n\\n\\tprivate: Node *root;\\n\\n\\tpublic:\\n\\t\\tTrie() {\\n\\t\\t\\troot = new Node();\\n\\t\\t}\\n\\n\\t\\tvoid insert(string word) {\\n\\t\\t\\tNode *node=root;\\n\\t\\t\\tfor(int i=0;i<word.size();i++){\\n\\t\\t\\t\\tif(!node->containsKey(word[i])){\\n\\t\\t\\t\\t\\tnode->put(word[i],new Node());\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode=node->get(word[i]);\\n\\t\\t\\t}\\n\\t\\t\\tnode->setEnd();\\n\\t\\t}\\n\\n\\t\\tbool search(string word) {\\n\\t\\t\\tNode *node=root;\\n\\t\\t\\tfor(int i=0;i<word.size();i++){\\n\\t\\t\\t\\tif(!node->containsKey(word[i])){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode=node->get(word[i]);\\n\\t\\t\\t}\\n\\t\\t\\treturn node->isEnd();\\n\\t\\t}\\n\\n\\t\\tbool startsWith(string prefix) {\\n\\t\\t\\tNode *node=root;\\n\\t\\t\\tfor(int i=0;i<prefix.size();i++){\\n\\t\\t\\t\\tif(!node->containsKey(prefix[i])){\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tnode=node->get(prefix[i]);\\n\\t\\t\\t}\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t};",
                "codeTag": "Java"
            },
            {
                "id": 2026606,
                "title": "simple-js-solution-w-comments",
                "content": "```\\n/**\\n * *Time: O(N), where N = length of key\\n * *Time: O(N)\\n */\\n// Runtime: 240 ms, faster than 73.22% of JavaScript online submissions for Implement Trie (Prefix Tree).\\n// Memory Usage: 56.3 MB, less than 89.38% of JavaScript online submissions for Implement Trie (Prefix Tree).\\nclass Trie {\\n  constructor() {\\n    this.root = {};\\n  }\\n\\n  insert(word) {\\n    let node = this.root; // starting from root\\n\\n\\t// add each character to trie\\n    for (const char of word) {\\n\\t\\n\\t// if char DNE, add\\n      if (!node[char]) node[char] = {};\\n\\n      node = node[char]; // move on no next char node\\n    }\\n\\n    node.isEnd = true; // set isEnd true to mark that we reach end of current word\\n  }\\n\\n  search(word) {\\n    let node = this.root;\\n\\n    for (const char of word) {\\n\\t// if char we are looking for DNE, return false\\n      if (!node[char]) return false;\\n\\n      node = node[char]; // move on to next node\\n    }\\n\\n    return node.isEnd || false; // if is a word, return true. Else, false\\n  }\\n\\n  startsWith(prefix) {\\n    let node = this.root;\\n\\n    for (const char of prefix) {\\n\\t// if char DNE, invalid prefix. Does not start with given prefix\\n      if (!node[char]) return false;\\n\\n      node = node[char]; // move on to next node\\n    }\\n\\n    return true;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * *Time: O(N), where N = length of key\\n * *Time: O(N)\\n */\\n// Runtime: 240 ms, faster than 73.22% of JavaScript online submissions for Implement Trie (Prefix Tree).\\n// Memory Usage: 56.3 MB, less than 89.38% of JavaScript online submissions for Implement Trie (Prefix Tree).\\nclass Trie {\\n  constructor() {\\n    this.root = {};\\n  }\\n\\n  insert(word) {\\n    let node = this.root; // starting from root\\n\\n\\t// add each character to trie\\n    for (const char of word) {\\n\\t\\n\\t// if char DNE, add\\n      if (!node[char]) node[char] = {};\\n\\n      node = node[char]; // move on no next char node\\n    }\\n\\n    node.isEnd = true; // set isEnd true to mark that we reach end of current word\\n  }\\n\\n  search(word) {\\n    let node = this.root;\\n\\n    for (const char of word) {\\n\\t// if char we are looking for DNE, return false\\n      if (!node[char]) return false;\\n\\n      node = node[char]; // move on to next node\\n    }\\n\\n    return node.isEnd || false; // if is a word, return true. Else, false\\n  }\\n\\n  startsWith(prefix) {\\n    let node = this.root;\\n\\n    for (const char of prefix) {\\n\\t// if char DNE, invalid prefix. Does not start with given prefix\\n      if (!node[char]) return false;\\n\\n      node = node[char]; // move on to next node\\n    }\\n\\n    return true;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1804957,
                "title": "python-3-easy-solution",
                "content": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children={}\\n        self.isEnd=False\\n        \\nclass Trie:\\n    def __init__(self):\\n        self.root=TrieNode()\\n        \\n    def insert(self, word):\\n        node=self.root #initialize node iterator\\n        for char in word:\\n            if char not in node.children:\\n                node.children[char] = TrieNode() #insert char by char\\n            node=node.children[char]   #increment\\n        node.isEnd=True\\n        \\n    \\n    def search(self, word):\\n        node=self.root\\n        for char in word:\\n            if char not in node.children:\\n                return False\\n            node=node.children[char]  #iterate when prior char is found in the trie\\n        return node.isEnd              # returns True if arrived at end\\n    \\n    def startsWith(self, prefix):\\n        node=self.root\\n        for char in prefix:\\n            if char not in node.children:\\n                return False\\n            node=node.children[char]\\n        return True\\n    \\n    def delete(self, word):\\n        def recursive(node, word, i):\\n            if i==len(word):\\n                if not node.isEnd: # word is not in trie\\n                    return False \\n                node.isEnd=False # delete word via changing isEnd be False\\n                return len(node.children)==0\\n                \\n            if word[i] not in node.children: # word is not in trie\\n                return False\\n                \\n            need_delete = recursive(node.children[word[i]], word, i + 1)   #to iterate forward node.children[word[i]]\\n            \\n            if need_delete:\\n                node.children.pop(word[i])\\n                return len(node.children)==0\\n                \\n            return False\\n            \\n        recursive(self.root, word, 0)\\n  ```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass TrieNode:\\n    def __init__(self):\\n        self.children={}\\n        self.isEnd=False\\n        \\nclass Trie:\\n    def __init__(self):\\n        self.root=TrieNode()\\n        \\n    def insert(self, word):\\n        node=self.root #initialize node iterator\\n        for char in word:\\n            if char not in node.children:\\n                node.children[char] = TrieNode() #insert char by char\\n            node=node.children[char]   #increment\\n        node.isEnd=True\\n        \\n    \\n    def search(self, word):\\n        node=self.root\\n        for char in word:\\n            if char not in node.children:\\n                return False\\n            node=node.children[char]  #iterate when prior char is found in the trie\\n        return node.isEnd              # returns True if arrived at end\\n    \\n    def startsWith(self, prefix):\\n        node=self.root\\n        for char in prefix:\\n            if char not in node.children:\\n                return False\\n            node=node.children[char]\\n        return True\\n    \\n    def delete(self, word):\\n        def recursive(node, word, i):\\n            if i==len(word):\\n                if not node.isEnd: # word is not in trie\\n                    return False \\n                node.isEnd=False # delete word via changing isEnd be False\\n                return len(node.children)==0\\n                \\n            if word[i] not in node.children: # word is not in trie\\n                return False\\n                \\n            need_delete = recursive(node.children[word[i]], word, i + 1)   #to iterate forward node.children[word[i]]\\n            \\n            if need_delete:\\n                node.children.pop(word[i])\\n                return len(node.children)==0\\n                \\n            return False\\n            \\n        recursive(self.root, word, 0)\\n  ```",
                "codeTag": "Java"
            },
            {
                "id": 1770574,
                "title": "java-code-trie",
                "content": "```\\nclass Node {\\n    Node links[] = new Node[26]; \\n    boolean flag = false; \\n    \\n    public Node() {\\n        \\n    }\\n    \\n    boolean containsKey(char ch) {\\n        return (links[ch - \\'a\\'] != null); \\n    }\\n    Node get(char ch) {\\n        return links[ch-\\'a\\']; \\n    }\\n    void put(char ch, Node node) {\\n        links[ch-\\'a\\'] = node; \\n    }\\n    void setEnd() {\\n        flag = true; \\n    }\\n    boolean isEnd() {\\n        return flag; \\n    }\\n};\\npublic class Trie {\\n    private static Node root; \\n\\n    //Initialize your data structure here\\n\\n    Trie() {\\n        root = new Node(); \\n    }\\n\\n\\n    //Inserts a word into the trie\\n\\n    public static void insert(String word) {\\n        Node node = root;\\n        for(int i = 0;i<word.length();i++) {\\n            if(!node.containsKey(word.charAt(i))) {\\n                node.put(word.charAt(i), new Node()); \\n            }\\n            node = node.get(word.charAt(i)); \\n        }\\n        node.setEnd(); \\n    }\\n\\n\\n    //Returns if the word is in the trie\\n\\n    public static boolean search(String word) {\\n        Node node = root; \\n        for(int i = 0;i<word.length();i++) {\\n            if(!node.containsKey(word.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(word.charAt(i)); \\n        }\\n        if(node.isEnd()) {\\n            return true; \\n        }\\n        return false; \\n    }\\n\\n    \\n    //Returns if there is any word in the trie that starts with the given prefix\\n\\n    public static boolean startsWith(String prefix) {\\n        Node node = root; \\n        for(int i = 0;i<prefix.length();i++) {\\n            if(!node.containsKey(prefix.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(prefix.charAt(i)); \\n        }\\n        return true; \\n    }\\n}\\n```\\n\\n**Notes Link**\\n\\nhttps://github.com/rizonkumar/LeetCode-Notes/blob/main/208.pdf\\n",
                "solutionTags": [
                    "Trie"
                ],
                "code": "```\\nclass Node {\\n    Node links[] = new Node[26]; \\n    boolean flag = false; \\n    \\n    public Node() {\\n        \\n    }\\n    \\n    boolean containsKey(char ch) {\\n        return (links[ch - \\'a\\'] != null); \\n    }\\n    Node get(char ch) {\\n        return links[ch-\\'a\\']; \\n    }\\n    void put(char ch, Node node) {\\n        links[ch-\\'a\\'] = node; \\n    }\\n    void setEnd() {\\n        flag = true; \\n    }\\n    boolean isEnd() {\\n        return flag; \\n    }\\n};\\npublic class Trie {\\n    private static Node root; \\n\\n    //Initialize your data structure here\\n\\n    Trie() {\\n        root = new Node(); \\n    }\\n\\n\\n    //Inserts a word into the trie\\n\\n    public static void insert(String word) {\\n        Node node = root;\\n        for(int i = 0;i<word.length();i++) {\\n            if(!node.containsKey(word.charAt(i))) {\\n                node.put(word.charAt(i), new Node()); \\n            }\\n            node = node.get(word.charAt(i)); \\n        }\\n        node.setEnd(); \\n    }\\n\\n\\n    //Returns if the word is in the trie\\n\\n    public static boolean search(String word) {\\n        Node node = root; \\n        for(int i = 0;i<word.length();i++) {\\n            if(!node.containsKey(word.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(word.charAt(i)); \\n        }\\n        if(node.isEnd()) {\\n            return true; \\n        }\\n        return false; \\n    }\\n\\n    \\n    //Returns if there is any word in the trie that starts with the given prefix\\n\\n    public static boolean startsWith(String prefix) {\\n        Node node = root; \\n        for(int i = 0;i<prefix.length();i++) {\\n            if(!node.containsKey(prefix.charAt(i))) {\\n                return false; \\n            }\\n            node = node.get(prefix.charAt(i)); \\n        }\\n        return true; \\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564819,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834792,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1567424,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1835188,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834766,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1967942,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1570116,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834738,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1568094,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834878,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1564819,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834792,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1567424,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1835188,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834766,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1967942,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1570116,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834738,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1568094,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1834878,
                "content": [
                    {
                        "username": "simonzhu91",
                        "content": "Admin, it would be really nice to also implement delete method and include delete test cases for this question!"
                    },
                    {
                        "username": "joseph261059",
                        "content": "Perhaps, it is part II of the question"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Leetcode should give **more** such questions as daily problems so that apart from tricky questions, we can also revise baisc concepts of data structures"
                    },
                    {
                        "username": "arvin4181",
                        "content": "When I run following test case from Console, it passes, but it fails when I submit my code.\\n\\n[\"Trie\",\"startsWith\"]\\n[[],[\"a\"]]\\n\\n"
                    },
                    {
                        "username": "magorin22",
                        "content": "Had the same issue, got a popup that helped me realized what happened. The problem in my case was a mutable default argument (`children={}`). Apparently this is an antipattern and leads to unexpected behaviour in Python! See here: https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "I guess the problem is from initializing an array by memset or sth similar..."
                    },
                    {
                        "username": "sumanthnaik1",
                        "content": "[@LEGENDZQH](/LEGENDZQH) Using children as default param is the issue. Its only initialised once which will cause issues when its called multiple times. https://stackoverflow.com/questions/13087344/python-function-default-parameter-is-evaluated-only-once"
                    },
                    {
                        "username": "LEGENDZQH",
                        "content": "I can repro here:\\nSame body code inside, the only difference is my TrieNode constructor:\\n\\nFailed one:\\nclass TrieNode(object):\\n\\n    def __init__(self, has_word = False, children = {}):\\n        self.has_word = has_word\\n        self.children = children\\n\\nWhen I print the startsWith to debug, it said that my root already has 4 children called: a, p, o, e.\\n\\nPassed one:\\nclass TrieNode(object):\\n\\n    def __init__(self):\\n        self.has_word = False\\n        self.children = {}\\n\\nNot sure what\\'s happening."
                    },
                    {
                        "username": "DhruvSabharwal",
                        "content": "Did you find a fix?"
                    },
                    {
                        "username": "varshini-S",
                        "content": "agree if this question is supposed to be mentioned as HARD"
                    },
                    {
                        "username": "daniel_9650",
                        "content": "I don\\'t know if its as HARD as it is TEDIOUS, honestly"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The brute force solution is accepted. That alone makes it not hard."
                    },
                    {
                        "username": "sergei99",
                        "content": "It\\'s not hard whatsoever. Just look at top execution time solutions - few lines of code per method."
                    },
                    {
                        "username": "MOVAPS",
                        "content": "Nawh pree easy"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I don\\'t think it\\'s that hard. I think most people (including me) just haven\\'t done a lot of these \\'Design\\' questions, so it takes a while to understand how you can write it properly. The logic itself is pretty basic if you know what a trie is (https://en.wikipedia.org/wiki/Trie). I just build an N-array tree, because that is what that wikipedia image looked like to me. Most hard problems are a lot more difficult, medium fits well here. "
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "I was able to solve it just by using vector or strings and using brute force. The constraints should be designed tougher to pass such methods in order to solve the purpose of the question."
                    },
                    {
                        "username": "CaptainKidd",
                        "content": "Future readers please do not rely on this style of implementing the Trie Tree data structure as anything other than academic purity. Use a hashmap instead so you don\\'t blow your interview time writing a 30 line boilerplate component for a TrieNode when you could do the same in two lines. "
                    },
                    {
                        "username": "CodingBeastOfficial",
                        "content": "https://youtu.be/Kqfckuz0pcw\\n\\nI have tried to explain Trie data structure simply but in detail from scratch. \\nIf you like my work please do consider subscribing to my YouTube channel.\\n\\nDisclaimer: The language of the video is Hindi because I can best express myself in my native language."
                    },
                    {
                        "username": "dumb_me",
                        "content": "Finally Learned Trie Thank You leetcode ......\\n"
                    },
                    {
                        "username": "gucciGang",
                        "content": "For people who encounter this error, it is one of those errors that doesn\\'t really tell you anything, and it can\\'t really be debugged properly since it will not occur when pressing \"run code\", but only when submitting. \\n\\nTo fix this error, you need to run your code on a local machine with valgrind and make sure there are no memory leaks. It seems that when you run out of total memory that LeetCode gives you for the judging process, you will get this error, even though it says nothing about the issue. I had this error when I used a \"new\" call to allocate the children pointers, and did not bother to free them. After creating a destructor to delete the allocated memory, the problem was resolved. \\n\\nHope this helps at least some people!"
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "Should have been an easy!"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got in on an interview (c)"
                    }
                ]
            },
            {
                "id": 1567224,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 1834627,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 1803483,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 1835250,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2076621,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2072586,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2060927,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2054463,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2044311,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2036890,
                "content": [
                    {
                        "username": "chenkai036",
                        "content": "A canonical solution employs *vector or C-array for alphabet lookup*, these implementations usually give a runtime of **64ms ~ 76ms** if correctly implemented.\\n\\nRemember that contiguous memory structure like vector/array always has a better memory/cache locality than list-based structure, which gets a better performance as a result.  Consider that our previous implementations are exactly all based on list, therefore we can improve the runtime even further.\\n\\nInstead of allocating TrieNode on ad-hoc, *a preserved vector of TrieNode is used*.  The elements of next array in TrieNode just point to nodes in that vector.  Next time a new TrieNode shall be created, we emplace back into the vector.  This trick gives me **56ms** in runtime, very nice.  Another benefit is that we don't need to worry about reclaiming the memory.  One caveat though is that the size of vector must be large enough in pre-allocation, otherwise all pointers in TrieNode become invalidated once some emplace back triggers the vector to resize.\\n\\nThe code can be found [here][1]\\n\\nHow did you achieved <= 56ms in C++ for this problem?  Your comments are highly welcomed.\\n\\n  [1]: https://leetcode.com/submissions/detail/34123726/"
                    },
                    {
                        "username": "BROOKnim",
                        "content": "somehow got 45ms in java. used a bst  . https://leetcode.com/problems/implement-trie-prefix-tree/submissions/852387319/"
                    },
                    {
                        "username": "dongliang14",
                        "content": "This is medium? Store everything into array, solve it on first try. Expect TLE for the very long test case though ..."
                    },
                    {
                        "username": "sushi27",
                        "content": "that\\'s where you get wrong bro. This question is about implementing and learning the functionality of Trie DS and its uses."
                    },
                    {
                        "username": "Ianthetryer",
                        "content": "Dang, all but one test passed. Of course they made the last one ridiculously long."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "why i am addicted to leetcode discussion panel"
                    },
                    {
                        "username": "uniqs",
                        "content": "I just want to know why my code failed a whole night\\n```\\n\\nstruct _TrieNode {\\n    string curr;\\n    bool leaf = false;\\n    vector<_TrieNode*> children;\\n    _TrieNode(string v) : curr(v) {}\\n    _TrieNode(string v, bool leaf) : curr(v), leaf(leaf) {}\\n};\\n\\nclass Trie {\\n    _TrieNode root;\\n\\n    void _insert_children(_TrieNode* root, const string& word) {\\n        for (auto child : root->children) {\\n            int same = 0, msize = min(word.size(), child->curr.size());\\n            while (same < msize && word[same] == child->curr[same]) ++same;\\n            if (same == 0) continue;\\n            if (same == child->curr.size()) {\\n                if (word.size() > child->curr.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n                child->leaf = true;\\n            } else {\\n                _TrieNode* grandson = new _TrieNode(child->curr.substr(same));\\n                grandson->children = child->children;\\n                grandson->leaf = child->leaf;\\n                child->children = {grandson};\\n                child->curr = child->curr.substr(0, same);\\n                child->leaf = same == word.size();\\n                if (same < word.size()) {\\n                    _insert_children(child, word.substr(same));\\n                }\\n            }\\n            return;\\n        }\\n        root->children.emplace_back(new _TrieNode(word, true));\\n    }\\n    bool _search(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same < root->curr.size()) return false;\\n        if (root->curr.size() == word.size()) return root->leaf;\\n        for (auto c : root->children) {\\n            if (_search(c, word.substr(same))) return true;\\n        }\\n        return false;\\n    }\\n    bool _startsWith(_TrieNode* root, const string& word) const {\\n        int same = 0, msize = min(root->curr.size(), word.size());\\n        while (same < msize && root->curr[same] == word[same]) ++same;\\n        if (same == word.size()) return true;\\n        if (same == root->curr.size()) {\\n            for (auto c : root->children) {\\n                if (_startsWith(c, word.substr(same))) return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n   public:\\n    Trie() : root(\"\") {}\\n\\n    void insert(string word) {\\n        if (root.children.empty()) {\\n            root.children.emplace_back(new _TrieNode(word, true));\\n            return;\\n        }\\n        _insert_children(&root, word);\\n    }\\n\\n    bool search(string word) const {\\n        for (auto c : root.children) {\\n            if (_search(c, word)) return true;\\n        }\\n        return false;\\n    }\\n\\n    bool startsWith(string prefix) const {\\n        for (auto c : root.children) {\\n            if (_startsWith(c, prefix)) return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "What\\'s wrong this code?\\n\\nWhy would case 14 with long [aaaaaaaaa] failed? \\n\\n\\n```\\nlet Node = function(val, childrenMap={}, isEnded=false) {\\n  return {\\n    [val]: childrenMap,\\n    isEnded,   \\n    }\\n}\\n\\n\\nvar Trie = function() {\\n    this.root = {}\\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    let curr = this.root;\\n\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            curr[char] = new Node(char);\\n        } \\n        curr = curr[char];\\n    }\\n    curr.isEnded= true;\\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    let curr = this.root;\\n    for (let char of word) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    if (curr.isEnded) {\\n        return true;\\n    }\\n    return false;\\n};\\n\\n/** \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    let curr = this.root;\\n    for (let char of prefix) {\\n        if (!curr[char]) {\\n            return false;\\n        }\\n        curr = curr[char];\\n    }\\n    return true;\\n};\\n\\n```"
                    },
                    {
                        "username": "liyang2",
                        "content": "Fixed it. Looks like Node() is not needed.\\n\\nSimply   curr[char] = {} ; will fix it. \\n"
                    },
                    {
                        "username": "mcfarlandjb",
                        "content": "In C++, I can beat >90% on speed with 26-entry array, but it clocks in ~40% on mem.  If I use a map<> instead... >90% on mem, ~40% on speed.  Any ideas how to get top ranks in both?"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Can you think of a **tree-like** structure where the nodes represent the characters and the edges transition between one another? `Hint`\n\nNeed more inspiration? Check the image! 👇\n\n![Tree](https://lh3.googleusercontent.com/u/0/drive-viewer/AITFw-z0NnKyyVkvzInAxqjnroDAHpX78pLzvXKH-ZiEzJGu-gZ4eQ3JgXJM2iRMcbO398B_tFwHNTtU8YOR0ZpfLVCZpdBZmw=w1920-h965)"
                    },
                    {
                        "username": "yasun",
                        "content": "Python version of the tests uses one Trie for all tests which leads to errors"
                    },
                    {
                        "username": "sergei99",
                        "content": "Came up with two trie implementations after all:\n28ms 23.91 Mb with two node sizes (1 initially and expanded to 26 when 2nd element get added)\n23ms 34.9 Mb with max node size and no reallocation\n\nThe 23ms one competes with the former top speed solution, however, the former 23ms winner produces memory leaks, while my Trie cleans up after itself (using a custom allocator, so memory freeing overhead is minimal and doesn't involve scanning the entire Trie).\nThe winner of 22.9 Mb is not actually a trie, but a simple binary tree, which is 4-5 times slower. So it shouldn't count.\n\nAnd who said Trie is not memory efficient? It is, if it's just implemented properly."
                    }
                ]
            },
            {
                "id": 2036215,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 2001936,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1965594,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1941823,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1941801,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1933434,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1835450,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1835399,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1835234,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            },
            {
                "id": 1835148,
                "content": [
                    {
                        "username": "sergei99",
                        "content": "The two top memory efficient solutions (C++) are regular binary trees, not tries.\\nThere are plenty of hashtable-based solutions, again not tries.\\nThey have crawling runtime, but some of them occupy memory efficiency top."
                    },
                    {
                        "username": "chahine_nejma",
                        "content": "can someone help me with recursively calling a class function on elements that are not self, for example I had self.val={\\'condition\\':condition,\\'a\\': Trie()} and I tried to use self.val[\\'a\\'].insert and it worked just fine but self.val[\\'a\\'].search did not "
                    },
                    {
                        "username": "ashagg",
                        "content": "What\\'s your take on \"List vs Dictionary\" for managing children at a node?"
                    },
                    {
                        "username": "ashagg",
                        "content": "[@MOVAPS](/MOVAPS) any thoughts in general on the comparison? I see this as a good follow up question in the interview"
                    },
                    {
                        "username": "MOVAPS",
                        "content": "used a simple array of 26."
                    },
                    {
                        "username": "ktnaneri",
                        "content": "I was able to solve it easily, but I guess I am missing something - I simply iterate over the whole list of words and compare each of them. I am in the bottom 5% in terms of time and in top 99% in terms of memory. "
                    },
                    {
                        "username": "pjain043",
                        "content": "This is an easy one if you implemented a trie on your own while learning the data structure, which is according should be a must for gaining deeper understanding on it\\'s structure."
                    },
                    {
                        "username": "layyy",
                        "content": "BST for each letter"
                    },
                    {
                        "username": "KovDimaY",
                        "content": "I knew nothing about this Tries thing and my first idea about how to approach this problem was dumb as hell, but it actually worked out \\uD83D\\uDE48\\n\\n1. On initialising, create 2 sets: one for  the \"inserted\" words and one for all possible prefixes\\n2. When inserting, add the whole word to the \"inserted\" set and add all possible prefixes of this word to the \"prefixes\" set\\n3. When searching, just return if the \"inserted\" set has the word provided, is O(1) complexity\\n4. When running startsWith, just return if the \"prefixes\" set has the prefix provided, is also O(1) complexity\\n\\nMaybe it is not the most performant solution, but it is simple as hell and requires less than 10 lines of code. If this kind of solutions is acceptable, maybe this problem should not be considered a MEDIUM but rather an EASY one \\uD83E\\uDD37\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "t_Mz",
                        "content": "Finally I understood basic of trie. Thankyou Leetcode for such question in daily challenge."
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the Explanation:-\\n\\n- The Trie class is a data structure that stores a set of strings. It\\'s like a dictionary where each word is a key, and the Trie allows you to efficiently look up words and prefixes.\\n- The Trie is made up of TrieNode objects. Each TrieNode represents a letter in a word, and can have up to 26 child nodes (one for each letter of the alphabet).\\n- When inserting a word into the Trie, the characters of the word are inserted one by one into the Trie as TrieNode objects. The last node in the word is marked as complete to indicate that the word has been fully inserted.\\n- When searching for a word or prefix in the Trie, the characters of the word or prefix are looked up one by one in the Trie. If a TrieNode is missing for a character, then the word or prefix is not in the Trie. If all characters are found, the last node is checked to see if it is marked as complete to determine if the word or prefix is in the Trie.\\n- Overall, the Trie data structure is an efficient way to store and look up large sets of strings."
                    },
                    {
                        "username": "hendrywiranto",
                        "content": "got error on this testcase, is this correct testcase?\\n```\\nInput\\n[\"Trie\",\"insert\",\"search\",\"startsWith\"]\\n[[],[\"a\"],[\"a\"],[\"a\"]]\\n\\nOutput\\n[null,null,true,false]\\nExpected\\n[null,null,true,true]\\n```\\nbecause \"a\" should not have the prefix \"a\" itself right?"
                    },
                    {
                        "username": "Abdelslam_77",
                        "content": "[@olzh06](/olzh06) Thank you, I was think it is a wrong test case"
                    },
                    {
                        "username": "olzh06",
                        "content": "That\\'s what I thought, but it seems the whole word is also considered as a valid prefix"
                    }
                ]
            }
        ]
    },
    {
        "title": "Range Sum Query 2D - Mutable",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1572079,
                "content": [
                    {
                        "username": "invkrh",
                        "content": "According to the top voted posts, I find there are two good solutions.\\n\\nTime complexity:\\n\\nOne uses BIT\\nupdate => O(log(n) * log(m))\\nrangeSum => O(log(n) * log(m))\\n\\nThe other maintains a presum array for each row\\nupdate => O(m)\\nrangeSum => O(n)\\n\\nHowever I can not tell which complexity is better O(m + n) or O(log(n) * log(m)) ?\\nAny help is highly appreciated"
                    },
                    {
                        "username": "AlexSavo",
                        "content": "[@sumukh14](/sumukh14) You\\'re right! Also log(n) * log(m) = log(m + n), so you compare (m + n) vs log(m + n)"
                    },
                    {
                        "username": "sumukh14",
                        "content": "O(log(n) * log(m)) is better.\\nlog functions don\\'t grow nearly at the rate of linear functions."
                    },
                    {
                        "username": "ymgcksge",
                        "content": "why sum range[0,0,0,0]should be 0 instead of the value of matrix[0][0]\ncuz the sum range [1,1,1,1] is the value of matrix[1][1] and this works for the other parameter other than [0,0,0,0]"
                    },
                    {
                        "username": "yangwudi398",
                        "content": "Similar to 307 but needs to implement a 2D segment tree.\\nIt took me 2 hours to write a solution and debug it."
                    },
                    {
                        "username": "omaewamou",
                        "content": "The input size constraints for this problem are misleading. The problem statement states that the input matrix size (both N and M) are bounded by 200 (the max size). However, \"Test Case 15\" input matrix has 225 rows, which exceeds the problem statement constraints. Please fix."
                    }
                ]
            },
            {
                "id": 1986488,
                "content": [
                    {
                        "username": "invkrh",
                        "content": "According to the top voted posts, I find there are two good solutions.\\n\\nTime complexity:\\n\\nOne uses BIT\\nupdate => O(log(n) * log(m))\\nrangeSum => O(log(n) * log(m))\\n\\nThe other maintains a presum array for each row\\nupdate => O(m)\\nrangeSum => O(n)\\n\\nHowever I can not tell which complexity is better O(m + n) or O(log(n) * log(m)) ?\\nAny help is highly appreciated"
                    },
                    {
                        "username": "AlexSavo",
                        "content": "[@sumukh14](/sumukh14) You\\'re right! Also log(n) * log(m) = log(m + n), so you compare (m + n) vs log(m + n)"
                    },
                    {
                        "username": "sumukh14",
                        "content": "O(log(n) * log(m)) is better.\\nlog functions don\\'t grow nearly at the rate of linear functions."
                    },
                    {
                        "username": "ymgcksge",
                        "content": "why sum range[0,0,0,0]should be 0 instead of the value of matrix[0][0]\ncuz the sum range [1,1,1,1] is the value of matrix[1][1] and this works for the other parameter other than [0,0,0,0]"
                    },
                    {
                        "username": "yangwudi398",
                        "content": "Similar to 307 but needs to implement a 2D segment tree.\\nIt took me 2 hours to write a solution and debug it."
                    },
                    {
                        "username": "omaewamou",
                        "content": "The input size constraints for this problem are misleading. The problem statement states that the input matrix size (both N and M) are bounded by 200 (the max size). However, \"Test Case 15\" input matrix has 225 rows, which exceeds the problem statement constraints. Please fix."
                    }
                ]
            },
            {
                "id": 1837874,
                "content": [
                    {
                        "username": "invkrh",
                        "content": "According to the top voted posts, I find there are two good solutions.\\n\\nTime complexity:\\n\\nOne uses BIT\\nupdate => O(log(n) * log(m))\\nrangeSum => O(log(n) * log(m))\\n\\nThe other maintains a presum array for each row\\nupdate => O(m)\\nrangeSum => O(n)\\n\\nHowever I can not tell which complexity is better O(m + n) or O(log(n) * log(m)) ?\\nAny help is highly appreciated"
                    },
                    {
                        "username": "AlexSavo",
                        "content": "[@sumukh14](/sumukh14) You\\'re right! Also log(n) * log(m) = log(m + n), so you compare (m + n) vs log(m + n)"
                    },
                    {
                        "username": "sumukh14",
                        "content": "O(log(n) * log(m)) is better.\\nlog functions don\\'t grow nearly at the rate of linear functions."
                    },
                    {
                        "username": "ymgcksge",
                        "content": "why sum range[0,0,0,0]should be 0 instead of the value of matrix[0][0]\ncuz the sum range [1,1,1,1] is the value of matrix[1][1] and this works for the other parameter other than [0,0,0,0]"
                    },
                    {
                        "username": "yangwudi398",
                        "content": "Similar to 307 but needs to implement a 2D segment tree.\\nIt took me 2 hours to write a solution and debug it."
                    },
                    {
                        "username": "omaewamou",
                        "content": "The input size constraints for this problem are misleading. The problem statement states that the input matrix size (both N and M) are bounded by 200 (the max size). However, \"Test Case 15\" input matrix has 225 rows, which exceeds the problem statement constraints. Please fix."
                    }
                ]
            },
            {
                "id": 1737555,
                "content": [
                    {
                        "username": "invkrh",
                        "content": "According to the top voted posts, I find there are two good solutions.\\n\\nTime complexity:\\n\\nOne uses BIT\\nupdate => O(log(n) * log(m))\\nrangeSum => O(log(n) * log(m))\\n\\nThe other maintains a presum array for each row\\nupdate => O(m)\\nrangeSum => O(n)\\n\\nHowever I can not tell which complexity is better O(m + n) or O(log(n) * log(m)) ?\\nAny help is highly appreciated"
                    },
                    {
                        "username": "AlexSavo",
                        "content": "[@sumukh14](/sumukh14) You\\'re right! Also log(n) * log(m) = log(m + n), so you compare (m + n) vs log(m + n)"
                    },
                    {
                        "username": "sumukh14",
                        "content": "O(log(n) * log(m)) is better.\\nlog functions don\\'t grow nearly at the rate of linear functions."
                    },
                    {
                        "username": "ymgcksge",
                        "content": "why sum range[0,0,0,0]should be 0 instead of the value of matrix[0][0]\ncuz the sum range [1,1,1,1] is the value of matrix[1][1] and this works for the other parameter other than [0,0,0,0]"
                    },
                    {
                        "username": "yangwudi398",
                        "content": "Similar to 307 but needs to implement a 2D segment tree.\\nIt took me 2 hours to write a solution and debug it."
                    },
                    {
                        "username": "omaewamou",
                        "content": "The input size constraints for this problem are misleading. The problem statement states that the input matrix size (both N and M) are bounded by 200 (the max size). However, \"Test Case 15\" input matrix has 225 rows, which exceeds the problem statement constraints. Please fix."
                    }
                ]
            }
        ]
    },
    {
        "title": "Valid Word Abbreviation",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1568633,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1565566,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1565909,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1567038,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 2034887,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1568648,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1569614,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1575776,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1738510,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1994556,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1568633,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1565566,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1565909,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1567038,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 2034887,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1568648,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1569614,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1575776,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1738510,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            },
            {
                "id": 1994556,
                "content": [
                    {
                        "username": "Antarab",
                        "content": "Is this \"easy category ? \\nMakes me feel depressed and believing that I am a fool!"
                    },
                    {
                        "username": "EricYXing",
                        "content": "The description is misleading, leading zeros are NOT allowed here."
                    },
                    {
                        "username": "Shirleyyy123",
                        "content": "it\\'s riduculous to give the example \"substitution\", \"s010n\" (leading zeros in numbers are allowed) as true, yet judge it as false in the test case......\\n![image](https://assets.leetcode.com/users/images/4a8183e2-9c94-44b9-b097-498f6ed9c81f_1632103996.6665206.png)\\n"
                    },
                    {
                        "username": "donpablo1",
                        "content": "`s10n` is true but `s010n` is false"
                    },
                    {
                        "username": "jerryl1",
                        "content": "simply mimic an abbr string would be TLE \\nand a & 01 should not match \\nsuch constrains should not be applied a easy one"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem is not difficult to understand or solve, however edge cases are frustrating and section on leading zeroes is poorly described. It is still very good practice."
                    },
                    {
                        "username": "peterx123",
                        "content": "Bad question for its edge cases. Easy but trivial."
                    },
                    {
                        "username": "obiwon84",
                        "content": "Imagine if you were being interviewed and you got this problem. I think a very small percentage of people would solve it successfully. Most I feel would try to find an elegant solutions using stringstream (in C++) or try and pick a language that makes the problem easier and end up wasting there time. Some would just sit there dumbfounded that they were asked such a janky question and secondguess applying to this company. I would feel bad for the people who tried to be creative and failed. I would also feel bad for the people that solved it because they showed no creativeity really. I would regret failing the people that know this problem is terrible for interviews.\\n\\nRegardless of the outcome I would know little about how the candidate thinks, there creatively,  and would not see any interesting solutions because there is nothing to work with here. This problem should not be asked in an interview in my opinion but I was curious what others thought."
                    },
                    {
                        "username": "zack592",
                        "content": "![image](https://assets.leetcode.com/users/images/1fbb134e-b78d-45d6-a60f-59ec7d665770_1632260123.8877907.png)\\n![image](https://assets.leetcode.com/users/images/7e53ea89-32bf-45ef-9ffc-746112fc5ef7_1632260140.6381636.png)\\n\\n"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Hint: expand \"abbr\" and compare it with word. (at least this is my algorithm:)"
                    },
                    {
                        "username": "kos2kos",
                        "content": "[@fkie4](/fkie4) yes, in an interview setting I would go with this approach first bc it is a lot easier to debug and will get you to a working solution faster. Then you can optimize. You will get more points that way. Going into the 2 pointer approach is quite tedious and prone to more bugs with off by counts etc."
                    },
                    {
                        "username": "fkie4",
                        "content": "this solution takes lots of memory. if you have something like \"a9999999b\""
                    },
                    {
                        "username": "Overmachine",
                        "content": "This is not an easy!"
                    }
                ]
            }
        ]
    }
]