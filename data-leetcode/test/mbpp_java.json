[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long nextSmallestPalindrome(long num) {\n        long result = num;\n        while (result > 0) {\n            result = (long) (Math.floor(Math.sqrt(result)));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(nextSmallestPalindrome((99l)) == (101l));",
            "assert(nextSmallestPalindrome((1221l)) == (1331l));",
            "assert(nextSmallestPalindrome((120l)) == (121l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array array list using 1-based indexing.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long kthElement(ArrayList<Long> arr, long k) {\n        long result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == k) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(kthElement((new ArrayList<Long>(Arrays.asList((long)12l, (long)3l, (long)5l, (long)7l, (long)19l))), (2l)) == (3l));",
            "assert(kthElement((new ArrayList<Long>(Arrays.asList((long)17l, (long)24l, (long)8l, (long)23l))), (3l)) == (8l));",
            "assert(kthElement((new ArrayList<Long>(Arrays.asList((long)16l, (long)21l, (long)25l, (long)36l, (long)4l))), (4l)) == (36l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String snakeToCamel(String word) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));",
            "assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));",
            "assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long eulerianNum(long n, long m) {\n        long[] a = new long[n + 1];\n        long[] b = new long[m + 1];\n        long[] c = new long[n + 1];\n        long[] d = new long[m + 1];\n        long[] e = new long[n + 1];\n        long[] f = new long[m + 1];\n        long[] g = new long[n + 1];\n        long[] h = new long[m + 1];\n        long[] i = new long[n + 1];\n        long[] j = new long[m + 1];\n        long[] k = new long[n + 1];\n        long[] l = new long[m + 1];\n        long[] m = new long[n + 1];\n        long[] n = new long[n + 1];\n        long[] o = new long[n + 1];\n        long[] p = new long[n + 1];\n        long[] q = new long[n + 1];\n        long[] r = new long[n + 1];\n        long[] s = new long[n + 1];\n        long[] t = new long[n + 1];\n        long[] u = new long[n + 1];\n        long[] v = new long[n + 1];\n        long[] w = new long[n + 1];\n        long[] x = new long[n + 1];\n        long[] y = new long[n + 1];\n        long[] z = new long[n + 1];\n        long[] w1 = new long[n + 1];\n        long[] w2 = new long[n + 1];\n        long[] w3 = new long[n + 1];\n        long[] w4 = new long[n + 1];\n        long[] w5 = new long[n + 1];\n        long[] w6 = new long\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(eulerianNum((3l), (1l)) == (4l));",
            "assert(eulerianNum((4l), (1l)) == (11l));",
            "assert(eulerianNum((5l), (3l)) == (26l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray list of strings in a given array list of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<String>> sortSublists(ArrayList<ArrayList<String>> input_list) {\n        ArrayList<ArrayList<String>> output_list = new ArrayList<>();\n        for (int i = 0; i < input_list.size(); i++) {\n            ArrayList<String> sublist = new ArrayList<>();\n            for (int j = 0; j < input_list.get(i).size(); j++) {\n                sublist.add(input_list.get(i).get(j));\n            }\n            output_list.add(sublist);\n        }\n        return output_list;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\", (String)\"black\", (String)\"orange\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"orange\", (String)\"white\")))))));",
            "assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" red \", (String)\"green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"blue \", (String)\" black\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" orange\", (String)\"brown\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" red \", (String)\"green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" black\", (String)\"blue \")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\" orange\", (String)\"brown\")))))));",
            "assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"zilver\", (String)\"gold\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"magnesium\", (String)\"aluminium\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"steel\", (String)\"bronze\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"gold\", (String)\"zilver\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"aluminium\", (String)\"magnesium\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"bronze\", (String)\"steel\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a javathon function to count true booleans in the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long count(ArrayList<Boolean> lst) {\n        long count = 0;\n        for (Boolean b : lst) {\n            if (b) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(count((new ArrayList<Boolean>(Arrays.asList((boolean)true, (boolean)false, (boolean)true)))) == (2l));",
            "assert(count((new ArrayList<Boolean>(Arrays.asList((boolean)false, (boolean)false)))) == (0l));",
            "assert(count((new ArrayList<Boolean>(Arrays.asList((boolean)true, (boolean)true, (boolean)true)))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given array list to the given pairs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long, Long> addLists(ArrayList<Long> test_list, Pair<Long, Long> test_tup) {\n        return new Pair<>(test_list.size(), test_list.size(), test_list.size(), test_list.size(), test_list.size());\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(addLists((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l))), (Pair.with(9l, 10l))).equals((Pair.with(9l, 10l, 5l, 6l, 7l))));",
            "assert(addLists((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l))), (Pair.with(10l, 11l))).equals((Pair.with(10l, 11l, 6l, 7l, 8l))));",
            "assert(addLists((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))), (Pair.with(11l, 12l))).equals((Pair.with(11l, 12l, 7l, 8l, 9l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three array lists into a single sorted array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> mergeSortedList(ArrayList<Long> num1, ArrayList<Long> num2, ArrayList<Long> num3) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (num1.size() == 0) {\n            return result;\n        }\n        if (num2.size() == 0) {\n            return result;\n        }\n        if (num3.size() == 0) {\n            return result;\n        }\n        long sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long sum40 =\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(mergeSortedList((new ArrayList<Long>(Arrays.asList((long)25l, (long)24l, (long)15l, (long)4l, (long)5l, (long)29l, (long)110l))), (new ArrayList<Long>(Arrays.asList((long)19l, (long)20l, (long)11l, (long)56l, (long)25l, (long)233l, (long)154l))), (new ArrayList<Long>(Arrays.asList((long)24l, (long)26l, (long)54l, (long)48l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)11l, (long)15l, (long)19l, (long)20l, (long)24l, (long)24l, (long)25l, (long)25l, (long)26l, (long)29l, (long)48l, (long)54l, (long)56l, (long)110l, (long)154l, (long)233l)))));",
            "assert(mergeSortedList((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)6l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)7l, (long)11l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)7l, (long)8l, (long)12l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)5l, (long)6l, (long)7l, (long)7l, (long)8l, (long)8l, (long)9l, (long)11l, (long)12l)))));",
            "assert(mergeSortedList((new ArrayList<Long>(Arrays.asList((long)18l, (long)14l, (long)10l, (long)9l, (long)8l, (long)7l, (long)9l, (long)3l, (long)2l, (long)4l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)25l, (long)58l))), (new ArrayList<Long>(Arrays.asList((long)12l, (long)74l, (long)9l, (long)50l, (long)61l, (long)41l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)7l, (long)8l, (long)9l, (long)9l, (long)9l, (long)10l, (long)12l, (long)14l, (long)14l, (long)18l, (long)22l, (long)25l, (long)25l, (long)35l, (long)41l, (long)50l, (long)58l, (long)61l, (long)65l, (long)74l, (long)75l, (long)85l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a javathon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long oddEquivalent(String s, long n) {\n        int i = 0;\n        while (i < s.length() && s.charAt(i) == s.charAt(i - 1)) {\n            i++;\n        }\n        return i;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(oddEquivalent((\"011001\"), (6l)) == (3l));",
            "assert(oddEquivalent((\"11011\"), (5l)) == (4l));",
            "assert(oddEquivalent((\"1010\"), (4l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkInteger(String text) {\n        try {\n            Integer.parseInt(text);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkInteger((\"python\")) == (false));",
            "assert(checkInteger((\"1\")) == (true));",
            "assert(checkInteger((\"12345\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given pair of positive integers into a single integer.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long tupleToInt(Pair<Long, Long, Long> nums) {\n        return nums.getLeft() * nums.getRight();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(tupleToInt((Pair.with(1l, 2l, 3l))) == (123l));",
            "assert(tupleToInt((Pair.with(4l, 5l, 6l))) == (456l));",
            "assert(tupleToInt((Pair.with(5l, 6l, 7l))) == (567l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in an array array list of array lists to floats.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Float, Float>> listToFloat(ArrayList<Pair<String, String>> test_list) {\n        ArrayList<Pair<Float, Float>> result = new ArrayList<>();\n        for (Pair<String, String> test : test_list) {\n            result.add(new Pair<>(Float.parseFloat(test.getLeft()), Float.parseFloat(test.getRight())));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(listToFloat((new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"3\", \"4\"), (Pair<String, String>)Pair.with(\"1\", \"26.45\"), (Pair<String, String>)Pair.with(\"7.32\", \"8\"), (Pair<String, String>)Pair.with(\"4\", \"8\"))))).equals((new ArrayList<Pair<Float, Float>>(Arrays.asList((Pair<Float, Float>)Pair.with(3.0f, 4.0f), (Pair<Float, Float>)Pair.with(1.0f, 26.45f), (Pair<Float, Float>)Pair.with(7.32f, 8.0f), (Pair<Float, Float>)Pair.with(4.0f, 8.0f))))));",
            "assert(listToFloat((new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"4\", \"4\"), (Pair<String, String>)Pair.with(\"2\", \"27\"), (Pair<String, String>)Pair.with(\"4.12\", \"9\"), (Pair<String, String>)Pair.with(\"7\", \"11\"))))).equals((new ArrayList<Pair<Float, Float>>(Arrays.asList((Pair<Float, Float>)Pair.with(4.0f, 4.0f), (Pair<Float, Float>)Pair.with(2.0f, 27.0f), (Pair<Float, Float>)Pair.with(4.12f, 9.0f), (Pair<Float, Float>)Pair.with(7.0f, 11.0f))))));",
            "assert(listToFloat((new ArrayList<Pair<String, String>>(Arrays.asList((Pair<String, String>)Pair.with(\"6\", \"78\"), (Pair<String, String>)Pair.with(\"5\", \"26.45\"), (Pair<String, String>)Pair.with(\"1.33\", \"4\"), (Pair<String, String>)Pair.with(\"82\", \"13\"))))).equals((new ArrayList<Pair<Float, Float>>(Arrays.asList((Pair<Float, Float>)Pair.with(6.0f, 78.0f), (Pair<Float, Float>)Pair.with(5.0f, 26.45f), (Pair<Float, Float>)Pair.with(1.33f, 4.0f), (Pair<Float, Float>)Pair.with(82.0f, 13.0f))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to an array array list of strings split on the space character.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> stringToList(String string) {\n        ArrayList<String> list = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) =='') {\n                list.add(string.substring(0, i));\n            } else {\n                list.add(string.substring(0, i));\n            }\n        }\n        return list;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(stringToList((\"python programming\")).equals((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"programming\")))));",
            "assert(stringToList((\"lists tuples strings\")).equals((new ArrayList<String>(Arrays.asList((String)\"lists\", (String)\"tuples\", (String)\"strings\")))));",
            "assert(stringToList((\"write a program\")).equals((new ArrayList<String>(Arrays.asList((String)\"write\", (String)\"a\", (String)\"program\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a javathon function to find the element that appears only once in a sorted array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long search(ArrayList<Long> arr) {\n        long result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == arr.get(i - 1)) {\n                result = arr.get(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l, (long)3l)))) == (3l));",
            "assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l, (long)5l, (long)7l, (long)7l, (long)8l)))) == (8l));",
            "assert(search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l)))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a javathon function to remove first and last occurrence of a given character from the string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeOcc(String s, String ch) {\n        if (s == null || s.length() == 0) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ch) {\n                sb.append(s.charAt(i));\n            } else {\n                break;\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));",
            "assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));",
            "assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of pairs within a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxProductTuple(ArrayList<Pair<Long, Long>> list1) {\n        long max = 0;\n        for (Pair<Long, Long> pair : list1) {\n            long product = pair.getRight() * pair.getLeft();\n            if (product > max) {\n                max = product;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 7l), (Pair<Long, Long>)Pair.with(2l, 6l), (Pair<Long, Long>)Pair.with(1l, 8l), (Pair<Long, Long>)Pair.with(4l, 9l))))) == (36l));",
            "assert(maxProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 20l), (Pair<Long, Long>)Pair.with(15l, 2l), (Pair<Long, Long>)Pair.with(5l, 10l))))) == (200l));",
            "assert(maxProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(11l, 44l), (Pair<Long, Long>)Pair.with(10l, 15l), (Pair<Long, Long>)Pair.with(20l, 5l), (Pair<Long, Long>)Pair.with(12l, 9l))))) == (484l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long amicableNumbersSum(long limit) {\n        long sum = 0;\n        for (long i = 1; i <= limit; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(amicableNumbersSum((999l)) == (504l));",
            "assert(amicableNumbersSum((9999l)) == (31626l));",
            "assert(amicableNumbersSum((99l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findLength(String string) {\n        int[] length = new int[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            length[i] = 1;\n        }\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '0') {\n                length[i] = 0;\n            } else {\n                length[i] = 1;\n            }\n        }\n        return Math.max(length[0], length[1]);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findLength((\"11000010001\")) == (6l));",
            "assert(findLength((\"10111\")) == (1l));",
            "assert(findLength((\"11011101100101\")) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a javathon function to find the sum of common divisors of two given numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sum(long a, long b) {\n        long sum = 0;\n        while (a!= 0 && b!= 0) {\n            if (a % b == 0) {\n                sum += a;\n                a = a / b;\n            } else {\n                b = b / a;\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sum((10l), (15l)) == (6l));",
            "assert(sum((100l), (150l)) == (93l));",
            "assert(sum((4l), (6l)) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long multiplyInt(long x, long y) {\n        return x * y;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(multiplyInt((10l), (20l)) == (200l));",
            "assert(multiplyInt((5l), (10l)) == (50l));",
            "assert(multiplyInt((4l), (8l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given array list of words.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> longWords(long n, String str) {\n        ArrayList<String> words = new ArrayList<>();\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) > n) {\n                words.add(str.substring(0, i));\n            }\n        }\n        return words;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(longWords((3l), (\"python is a programming language\")).equals((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"programming\", (String)\"language\")))));",
            "assert(longWords((2l), (\"writing a program\")).equals((new ArrayList<String>(Arrays.asList((String)\"writing\", (String)\"program\")))));",
            "assert(longWords((5l), (\"sorting list\")).equals((new ArrayList<String>(Arrays.asList((String)\"sorting\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Create a list of all the elements in the matrix.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean magicSquareTest(ArrayList<ArrayList<Long>> my_matrix) {\n        ArrayList<ArrayList<Long>> row_list = new ArrayList<>();\n        for (int i = 0; i < my_matrix.size(); i++) {\n            row_list.add(new ArrayList<>());\n        }\n        ArrayList<ArrayList<Long>> col_list = new ArrayList<>();\n        for (int j = 0; j < my_matrix.size(); j++) {\n            col_list.add(new ArrayList<>());\n        }\n        ArrayList<Long> element_list = new ArrayList<>();\n        for (int i = 0; i < my_matrix.size(); i++) {\n            for (int j = 0; j < my_matrix.size(); j++) {\n                element_list.add(my_matrix.get(i).get(j));\n            }\n        }\n        ArrayList<Long> element_list_2 = new ArrayList<>();\n        for (int i = 0; i < my_matrix.size(); i++) {\n            for (int j = 0; j < my_matrix.size(); j++) {\n                element_list_2.add(my_matrix.get(i).get(j));\n            }\n        }\n        ArrayList<Long> element_list_3 = new ArrayList<>();\n        for (int i = 0; i < my_matrix.size(); i++) {\n            for (int j = 0; j < my\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(magicSquareTest((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)12l, (long)1l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)8l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)16l, (long)3l, (long)10l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)6l, (long)15l, (long)4l)))))) == (true));",
            "assert(magicSquareTest((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)8l)))))) == (true));",
            "assert(magicSquareTest((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)7l)))))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> sortMatrix(ArrayList<ArrayList<Long>> M) {\n        ArrayList<ArrayList<Long>> S = new ArrayList<>();\n        for (ArrayList<Long> row : M) {\n            S.add(new ArrayList<>(row));\n        }\n        Collections.sort(S);\n        return S;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l)))))));",
            "assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-2l, (long)4l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))));",
            "assert(sortMatrix((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)9l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxOccurrences(ArrayList<Long> nums) {\n        long max = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)8l, (long)4l, (long)7l, (long)9l, (long)8l, (long)2l, (long)6l, (long)5l, (long)1l, (long)6l, (long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)6l, (long)9l, (long)1l, (long)2l)))) == (2l));",
            "assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)8l, (long)4l, (long)7l, (long)9l, (long)8l, (long)7l, (long)9l, (long)15l, (long)14l, (long)10l, (long)12l, (long)13l, (long)16l, (long)18l)))) == (8l));",
            "assert(maxOccurrences((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)20l, (long)30l, (long)40l, (long)90l, (long)80l, (long)50l, (long)30l, (long)20l, (long)50l, (long)10l)))) == (20l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a javathon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String reverseVowels(String str1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (Character.isLetter(str1.charAt(i))) {\n                sb.append(str1.charAt(i));\n            } else {\n                sb.append(str1.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(reverseVowels((\"Python\")).equals((\"Python\")));",
            "assert(reverseVowels((\"USA\")).equals((\"ASU\")));",
            "assert(reverseVowels((\"ab\")).equals((\"ab\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert an array array list to a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String tupString(ArrayList<String> tup1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < tup1.size(); i++) {\n            sb.append(tup1.get(i));\n            if (i < tup1.size() - 1) {\n                sb.append(\", \");\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(tupString((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"x\", (String)\"e\", (String)\"r\", (String)\"c\", (String)\"i\", (String)\"s\", (String)\"e\", (String)\"s\")))).equals((\"exercises\")));",
            "assert(tupString((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\")))).equals((\"python\")));",
            "assert(tupString((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"r\", (String)\"o\", (String)\"g\", (String)\"r\", (String)\"a\", (String)\"m\")))).equals((\"program\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given array list of numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumNegativenum(ArrayList<Long> nums) {\n        long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l)))) == (-32l));",
            "assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)-14l, (long)13l, (long)-18l, (long)12l, (long)-20l)))) == (-52l));",
            "assert(sumNegativenum((new ArrayList<Long>(Arrays.asList((long)19l, (long)-65l, (long)57l, (long)39l, (long)152l, (long)-639l, (long)121l, (long)44l, (long)90l, (long)-190l)))) == (-894l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long hexagonalNum(long n) {\n        long result = 1;\n        while (n > 0) {\n            result *= 2;\n            n /= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(hexagonalNum((10l)) == (190l));",
            "assert(hexagonalNum((5l)) == (45l));",
            "assert(hexagonalNum((7l)) == (91l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a javathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSumOfPowersOfTwo(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isSumOfPowersOfTwo((10l)) == (true));",
            "assert(isSumOfPowersOfTwo((7l)) == (false));",
            "assert(isSumOfPowersOfTwo((14l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort an array array list of elements.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> pancakeSort(ArrayList<Long> nums) {\n        ArrayList<Long> sorted = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            sorted.add(nums.get(i));\n        }\n        return sorted;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)15l, (long)79l, (long)25l, (long)38l, (long)69l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)25l, (long)38l, (long)69l, (long)79l)))));",
            "assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)98l, (long)12l, (long)54l, (long)36l, (long)85l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)36l, (long)54l, (long)85l, (long)98l)))));",
            "assert(pancakeSort((new ArrayList<Long>(Arrays.asList((long)41l, (long)42l, (long)32l, (long)12l, (long)23l)))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)32l, (long)41l, (long)42l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countSamepair(ArrayList<Long> list1, ArrayList<Long> list2, ArrayList<Long> list3) {\n        long count = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == list2.get(i)) {\n                count++;\n            }\n        }\n        for (int i = 0; i < list2.size(); i++) {\n            if (list2.get(i) == list3.get(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countSamepair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)9l)))) == (3l));",
            "assert(countSamepair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l)))) == (4l));",
            "assert(countSamepair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)8l)))) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of array lists present in the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findLists(ArrayList<Object> Input) {\n        long result = 0;\n        for (int i = 0; i < Input.size(); i++) {\n            if (Input.get(i) instanceof ArrayList) {\n                result += findLists((ArrayList<Object>) Input.get(i));\n            } else {\n                result += 1;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findLists((new ArrayList<Object>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)))))) == (2l));",
            "assert(findLists((new ArrayList<Object>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)))))) == (3l));",
            "assert(findLists((new ArrayList<Object>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l, (long)4l, (long)3l, (long)2l, (long)1l)))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a javathon function to find the maximum difference between any two elements in a given array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxAbsDiff(ArrayList<Long> arr) {\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            long diff = arr.get(i) - arr.get(i + 1);\n            if (diff > max) {\n                max = diff;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxAbsDiff((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)3l)))) == (4l));",
            "assert(maxAbsDiff((new ArrayList<Long>(Arrays.asList((long)9l, (long)3l, (long)2l, (long)5l, (long)1l)))) == (8l));",
            "assert(maxAbsDiff((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a javathon function to find the volume of a triangular prism.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findVolume(long l, long b, long h) {\n        long x = l;\n        long y = b;\n        long z = h;\n        long volume = 0;\n        while (x < y) {\n            if (x == z) {\n                volume += x;\n            }\n            x += y;\n        }\n        return volume;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findVolume((10l), (8l), (6l)) == (240l));",
            "assert(findVolume((3l), (2l), (2l)) == (6l));",
            "assert(findVolume((1l), (2l), (1l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a pair, or return null if no solution exists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Pair<Long, Long>> findSolution(long a, long b, long n) {\n        if (a == 0 && b == 0) {\n            return Optional.empty();\n        }\n        if (a == 0) {\n            return Optional.of(Pair.of(b, n));\n        }\n        if (b == 0) {\n            return Optional.of(Pair.of(a, n));\n        }\n        if (a == b) {\n            return Optional.of(Pair.of(a, n));\n        }\n        return Optional.empty();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findSolution((2l), (3l), (7l)).equals(Optional.of(Pair.with(2l, 1l))));",
            "assert(findSolution((4l), (2l), (7l)).equals(Optional.empty()));",
            "assert(findSolution((1l), (13l), (17l)).equals(Optional.of(Pair.with(4l, 1l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given array list present in another array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> removeElements(ArrayList<Long> list1, ArrayList<Long> list2) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (long i : list1) {\n            if (list2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)10l)))));",
            "assert(removeElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l, (long)9l, (long)10l)))));",
            "assert(removeElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)8l, (long)9l, (long)10l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumSeries(long n) {\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumSeries((6l)) == (12l));",
            "assert(sumSeries((10l)) == (30l));",
            "assert(sumSeries((9l)) == (25l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean areEquivalent(long num1, long num2) {\n        long sum = num1 * num2;\n        return sum == num1 + num2;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(areEquivalent((36l), (57l)) == (false));",
            "assert(areEquivalent((2l), (4l)) == (false));",
            "assert(areEquivalent((23l), (47l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countCharPosition(String str1) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (Character.isLetter(str1.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countCharPosition((\"xbcefg\")) == (2l));",
            "assert(countCharPosition((\"ABcED\")) == (3l));",
            "assert(countCharPosition((\"AbgdeF\")) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in an array array list that xor to an even number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findEvenPair(ArrayList<Long> A) {\n        long result = 0;\n        for (int i = 0; i < A.size(); i++) {\n            result += A.get(i) * A.get(i);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findEvenPair((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)7l, (long)2l, (long)1l)))) == (4l));",
            "assert(findEvenPair((new ArrayList<Long>(Arrays.asList((long)7l, (long)2l, (long)8l, (long)1l, (long)0l, (long)5l, (long)11l)))) == (9l));",
            "assert(findEvenPair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a javathon function to find the smallest power of 2 greater than or equal to n.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long nextPowerOf2(long n) {\n        long result = 1;\n        while (result < n) {\n            result <<= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(nextPowerOf2((0l)) == (1l));",
            "assert(nextPowerOf2((5l)) == (8l));",
            "assert(nextPowerOf2((17l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long frequency(ArrayList<Long> a, long x) {\n        long count = 0;\n        for (long i = 0; i < a.size(); i++) {\n            if (a.get(i) == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(frequency((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l)) == (0l));",
            "assert(frequency((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l))), (3l)) == (3l));",
            "assert(frequency((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)1l, (long)2l))), (1l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textLowercaseUnderscore(String text) {\n        return text.contains(\"_\") && text.contains(\"_\");\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textLowercaseUnderscore((\"aab_cbbbc\")) == (true));",
            "assert(textLowercaseUnderscore((\"aab_Abbbc\")) == (false));",
            "assert(textLowercaseUnderscore((\"Aaab_abbbc\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in an array array list within a range specified by two indices.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumRangeList(ArrayList<Long> list1, long m, long n) {\n        long sum = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            sum += list1.get(i);\n            if (i == m) {\n                return sum;\n            }\n            if (i == n) {\n                return sum;\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumRangeList((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)6l, (long)8l, (long)3l, (long)4l, (long)9l, (long)10l, (long)11l, (long)8l, (long)12l))), (8l), (10l)) == (29l));",
            "assert(sumRangeList((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)6l, (long)8l, (long)3l, (long)4l, (long)9l, (long)10l, (long)11l, (long)8l, (long)12l))), (5l), (7l)) == (16l));",
            "assert(sumRangeList((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)5l, (long)6l, (long)8l, (long)3l, (long)4l, (long)9l, (long)10l, (long)11l, (long)8l, (long)12l))), (7l), (10l)) == (38l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long perimeterPentagon(long a) {\n        long p = 0;\n        long n = a;\n        while (n > 0) {\n            p += n;\n            n /= 2;\n        }\n        return p;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(perimeterPentagon((5l)) == (25l));",
            "assert(perimeterPentagon((10l)) == (50l));",
            "assert(perimeterPentagon((15l)) == (75l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countOccurance(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) =='s') {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countOccurance((\"letstdlenstdporstd\")) == (3l));",
            "assert(countOccurance((\"truststdsolensporsd\")) == (1l));",
            "assert(countOccurance((\"makestdsostdworthit\")) == (2l));",
            "assert(countOccurance((\"stds\")) == (1l));",
            "assert(countOccurance((\"\")) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long squarePerimeter(long a) {\n        long perimeter = 0;\n        for (int i = 0; i < a; i++) {\n            perimeter += a * a;\n        }\n        return perimeter;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(squarePerimeter((10l)) == (40l));",
            "assert(squarePerimeter((5l)) == (20l));",
            "assert(squarePerimeter((4l)) == (16l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeDirtyChars(String string, String second_string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isWhitespace(c)) {\n                sb.append(c);\n            } else if (Character.isLowerCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else if (Character.isUpperCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));",
            "assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));",
            "assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array array list of integers contains any duplicate element.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean testDuplicate(ArrayList<Long> arraynums) {\n        int count = 0;\n        for (int i = 0; i < arraynums.size(); i++) {\n            if (arraynums.get(i) == arraynums.get(i + 1)) {\n                count++;\n            }\n        }\n        return count == arraynums.size();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (false));",
            "assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)4l)))) == (true));",
            "assert(testDuplicate((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isWoodall(long x) {\n        return x % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isWoodall((383l)) == (true));",
            "assert(isWoodall((254l)) == (false));",
            "assert(isWoodall((200l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in pair have same data type or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkType(Object test_tuple) {\n        if (test_tuple == null) {\n            return false;\n        }\n        if (test_tuple instanceof Tuple) {\n            return true;\n        }\n        if (test_tuple instanceof List) {\n            return true;\n        }\n        if (test_tuple instanceof Map) {\n            return true;\n        }\n        if (test_tuple instanceof Set) {\n            return true;\n        }\n        if (test_tuple instanceof Map.Entry) {\n            return true;\n        }\n        if (test_tuple instanceof Integer) {\n            return true;\n        }\n        if (test_tuple instanceof Long) {\n            return true;\n        }\n        if (test_tuple instanceof Float) {\n            return true;\n        }\n        if (test_tuple instanceof Double) {\n            return true;\n        }\n        if (test_tuple instanceof Boolean) {\n            return true;\n        }\n        if (test_tuple instanceof String) {\n            return true;\n        }\n        if (test_tuple instanceof byte[]) {\n            return true;\n        }\n        if (test_tuple instanceof char[]) {\n            return true;\n        }\n        if (test_tuple instanceof short[]) {\n            return true;\n        }\n        if (test_tuple instanceof int[]) {\n            return true;\n        }\n        if (test_tuple instanceof long[]) {\n            return true;\n        }\n        if (test_tuple instanceof float[]) {\n            return true;\n        }\n        if (test_tuple instanceof double[]) {\n            return true;\n        }\n        if (test_tuple instance\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkType(Pair.with(5l, 6l, 7l, 3l, 5l, 6l)) == (true));",
            "assert(checkType(Pair.with(1l, 2l, \"4\")) == (false));",
            "assert(checkType(Pair.with(3l, 2l, 1l, 4l, 5l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array array list, its length (n), and an element and returns whether the element is the majority element in the given sorted array array list. (The majority element is the element that occurs more than n/2 times.)",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isMajority(ArrayList<Long> arr, long n, long x) {\n        if (arr.size() == 0) return true;\n        long m = arr.size() - 1;\n        long x1 = x;\n        long x2 = x;\n        long x3 = x;\n        long x4 = x;\n        long x5 = x;\n        long x6 = x;\n        long x7 = x;\n        long x8 = x;\n        long x9 = x;\n        long x10 = x;\n        long x11 = x;\n        long x12 = x;\n        long x13 = x;\n        long x14 = x;\n        long x15 = x;\n        long x16 = x;\n        long x17 = x;\n        long x18 = x;\n        long x19 = x;\n        long x20 = x;\n        long x21 = x;\n        long x22 = x;\n        long x23 = x;\n        long x24 = x;\n        long x25 = x;\n        long x26 = x;\n        long x27 = x;\n        long x28 = x;\n        long x29 = x;\n        long x30 = x;\n        long x31 = x;\n        long x32 = x;\n        long x33 = x;\n        long x34 = x;\n        long x35 = x;\n        long x36 = x;\n        long x37 = x;\n        long x38 = x;\n        long x39 = x;\n        long x40 = x;\n        long x41 = x;\n        long x42 = x;\n        long x43 = x;\n        long x\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)3l, (long)10l))), (7l), (3l)) == (true));",
            "assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)4l, (long)4l, (long)4l, (long)6l, (long)6l))), (8l), (4l)) == (false));",
            "assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)2l))), (5l), (1l)) == (true));",
            "assert(isMajority((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)2l))), (5l), (1l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a javathon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countSetBits(long n) {\n        long result = 0;\n        while (n!= 0) {\n            result += (n & 1);\n            n >>= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countSetBits((2l)) == (1l));",
            "assert(countSetBits((4l)) == (1l));",
            "assert(countSetBits((6l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a javathon function to remove the characters which have odd index values of a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String oddValuesString(String str) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '1') {\n                sb.append(str.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(oddValuesString((\"abcdef\")).equals((\"ace\")));",
            "assert(oddValuesString((\"python\")).equals((\"pto\")));",
            "assert(oddValuesString((\"data\")).equals((\"dt\")));",
            "assert(oddValuesString((\"lambs\")).equals((\"lms\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long minOfThree(long a, long b, long c) {\n        return Math.min(a, Math.min(b, c));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(minOfThree((10l), (20l), (0l)) == (0l));",
            "assert(minOfThree((19l), (15l), (18l)) == (15l));",
            "assert(minOfThree((-10l), (-20l), (-30l)) == (-30l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a javathon function to check whether all the bits are unset in the given range or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean allBitsSetInTheGivenRange(long n, long l, long r) {\n        long mask = (1L << (l - 1)) - 1;\n        long mask2 = (1L << (r - 1)) - 1;\n        long mask3 = (1L << (r - l)) - 1;\n        long mask4 = (1L << (r - r)) - 1;\n        long mask5 = (1L << (r - r - 1)) - 1;\n        long mask6 = (1L << (r - r - l)) - 1;\n        long mask7 = (1L << (r - r - r)) - 1;\n        long mask8 = (1L << (r - r - r - 1)) - 1;\n        long mask9 = (1L << (r - r - r - l)) - 1;\n        long mask10 = (1L << (r - r - r - r)) - 1;\n        long mask11 = (1L << (r - r - r - r - 1)) - 1;\n        long mask12 = (1L << (r - r - r - r - l)) - 1;\n        long mask13 = (1L << (r - r - r - r - r)) - 1;\n        long mask14 = (1L << (r - r - r - r - r - 1)) - 1;\n        long mask15 = (1L << (r - r - r - r - r - l)) - 1;\n        long mask16 = (1L << (r - r - r - r - r - r - 1)) - 1;\n        long mask17 = (1L << (r - r - r - r - r - r - l)) - 1;\n        long mask18 = (1L << (r - r - r - r - r - r - r - 1))\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(allBitsSetInTheGivenRange((4l), (1l), (2l)) == (true));",
            "assert(allBitsSetInTheGivenRange((17l), (2l), (4l)) == (true));",
            "assert(allBitsSetInTheGivenRange((39l), (4l), (6l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array array list and an integer n, and re-arranges the first n elements of the given array array list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> reArrangeArray(ArrayList<Long> arr, long n) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) {\n                res.add(arr.get(i));\n            } else {\n                res.add(arr.get(i));\n            }\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(reArrangeArray((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)-3l, (long)4l, (long)5l, (long)6l, (long)-7l, (long)8l, (long)9l))), (9l)).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-3l, (long)-7l, (long)4l, (long)5l, (long)6l, (long)2l, (long)8l, (long)9l)))));",
            "assert(reArrangeArray((new ArrayList<Long>(Arrays.asList((long)12l, (long)-14l, (long)-26l, (long)13l, (long)15l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)-14l, (long)-26l, (long)12l, (long)13l, (long)15l)))));",
            "assert(reArrangeArray((new ArrayList<Long>(Arrays.asList((long)10l, (long)24l, (long)36l, (long)-42l, (long)-39l, (long)-78l, (long)85l))), (7l)).equals((new ArrayList<Long>(Arrays.asList((long)-42l, (long)-39l, (long)-78l, (long)10l, (long)24l, (long)36l, (long)85l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String replaceBlank(String str1, String char) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) =='') {\n                sb.append(char);\n            } else {\n                sb.append(str1.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(replaceBlank((\"hello people\"), (\"@\")).equals((\"hello@people\")));",
            "assert(replaceBlank((\"python program language\"), (\"$\")).equals((\"python$program$language\")));",
            "assert(replaceBlank((\"blank space\"), (\"-\")).equals((\"blank-space\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long volumeCube(long l) {\n        long volume = 0;\n        for (int i = 0; i < l; i++) {\n            volume += volumeCube(l - i);\n        }\n        return volume;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(volumeCube((3l)) == (27l));",
            "assert(volumeCube((2l)) == (8l));",
            "assert(volumeCube((5l)) == (125l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in an array array list of pairs and returns a hash map mapping each unique pair to the number of times it occurs in the array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Pair<Long, Long>,Long> checkOccurences(ArrayList<Pair<Long, Long>> test_list) {\n        HashMap<Pair<Long, Long>,Long> result = new HashMap<>();\n        for (Pair<Long, Long> pair : test_list) {\n            result.put(pair, result.getOrDefault(pair, 0L) + 1L);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkOccurences((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 1l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(2l, 5l), (Pair<Long, Long>)Pair.with(5l, 2l), (Pair<Long, Long>)Pair.with(6l, 3l))))).equals((new HashMap<Pair<Long, Long>,Long>(Map.of(Pair.with(1l, 3l), 2l, Pair.with(2l, 5l), 2l, Pair.with(3l, 6l), 1l)))));",
            "assert(checkOccurences((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 2l), (Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(3l, 6l), (Pair<Long, Long>)Pair.with(6l, 3l), (Pair<Long, Long>)Pair.with(7l, 4l))))).equals((new HashMap<Pair<Long, Long>,Long>(Map.of(Pair.with(2l, 4l), 2l, Pair.with(3l, 6l), 2l, Pair.with(4l, 7l), 1l)))));",
            "assert(checkOccurences((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(13l, 2l), (Pair<Long, Long>)Pair.with(11l, 23l), (Pair<Long, Long>)Pair.with(12l, 25l), (Pair<Long, Long>)Pair.with(25l, 12l), (Pair<Long, Long>)Pair.with(16l, 23l))))).equals((new HashMap<Pair<Long, Long>,Long>(Map.of(Pair.with(2l, 13l), 1l, Pair.with(11l, 23l), 1l, Pair.with(12l, 25l), 2l, Pair.with(16l, 23l), 1l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a javathon function to count the number of non-empty substrings of a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long numberOfSubstrings(String str) {\n        long result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i)!='') {\n                result++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(numberOfSubstrings((\"abc\")) == (6l));",
            "assert(numberOfSubstrings((\"abcd\")) == (10l));",
            "assert(numberOfSubstrings((\"abcde\")) == (15l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long getTotalNumberOfSequences(long m, long n) {\n        long total = 0;\n        for (int i = 0; i < m; i++) {\n            total += (i + 1) * (i + 1);\n        }\n        for (int i = 0; i < n; i++) {\n            total += (i + 1) * (i + 1);\n        }\n        return total;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getTotalNumberOfSequences((10l), (4l)) == (4l));",
            "assert(getTotalNumberOfSequences((5l), (2l)) == (6l));",
            "assert(getTotalNumberOfSequences((16l), (3l)) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two array lists and replaces the last element of the first array list with the elements of the second array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> replaceList(ArrayList<Object> list1, ArrayList<Object> list2) {\n        ArrayList<Object> result = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            result.add(list1.get(i));\n        }\n        for (int i = 0; i < list2.size(); i++) {\n            result.add(list2.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(replaceList((new ArrayList<Object>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)10l))), (new ArrayList<Object>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)2l, (long)4l, (long)6l, (long)8l)))));",
            "assert(replaceList((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Object>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))));",
            "assert(replaceList((new ArrayList<Object>(Arrays.asList((String)\"red\", (String)\"blue\", (String)\"green\"))), (new ArrayList<Object>(Arrays.asList((String)\"yellow\")))).equals((new ArrayList<Object>(Arrays.asList((String)\"red\", (String)\"blue\", (String)\"yellow\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countCharac(String str1) {\n        long count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            count += str1.charAt(i);\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countCharac((\"python programming\")) == (18l));",
            "assert(countCharac((\"language\")) == (8l));",
            "assert(countCharac((\"words\")) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a javathon function to find the next perfect square greater than a given number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long nextPerfectSquare(long N) {\n        long result = 1;\n        while (result < N) {\n            result *= result;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(nextPerfectSquare((35l)) == (36l));",
            "assert(nextPerfectSquare((6l)) == (9l));",
            "assert(nextPerfectSquare((9l)) == (16l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array array list and finds the maximum sum of a bitonic subsequence for the given array array list, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxSum(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long sum = arr.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)51l, (long)45l, (long)33l, (long)100l, (long)12l, (long)18l, (long)9l)))) == (194l));",
            "assert(maxSum((new ArrayList<Long>(Arrays.asList((long)80l, (long)60l, (long)30l, (long)40l, (long)20l, (long)10l)))) == (210l));",
            "assert(maxSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)14l, (long)16l, (long)21l, (long)23l, (long)29l, (long)30l)))) == (138l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lps(String str) {\n        int[] lps = new int[str.length()];\n        for (int i = 0; i < str.length(); i++) {\n            lps[i] = i;\n        }\n        return lps[0];\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lps((\"TENS FOR TENS\")) == (5l));",
            "assert(lps((\"CARDIO FOR CARDS\")) == (7l));",
            "assert(lps((\"PART OF THE JOURNEY IS PART\")) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two array array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> intersectionArray(ArrayList<Long> array_nums1, ArrayList<Long> array_nums2) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < array_nums1.size(); i++) {\n            for (int j = 0; j < array_nums2.size(); j++) {\n                if (array_nums1.get(i) == array_nums2.get(j)) {\n                    result.add(array_nums1.get(i));\n                }\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(intersectionArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)8l, (long)9l)))));",
            "assert(intersectionArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l, (long)9l)))));",
            "assert(intersectionArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)8l, (long)9l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a javathon function that takes in a pair and an element and counts the occcurences of the element in the array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countX(ArrayList<Long> tup, long x) {\n        long count = 0;\n        for (int i = 0; i < tup.size(); i++) {\n            if (tup.get(i) == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countX((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)5l, (long)2l, (long)10l, (long)15l, (long)10l, (long)8l, (long)5l, (long)8l, (long)8l, (long)2l))), (4l)) == (0l));",
            "assert(countX((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)5l, (long)2l, (long)10l, (long)15l, (long)10l, (long)8l, (long)5l, (long)8l, (long)8l, (long)2l))), (10l)) == (3l));",
            "assert(countX((new ArrayList<Long>(Arrays.asList((long)10l, (long)8l, (long)5l, (long)2l, (long)10l, (long)15l, (long)10l, (long)8l, (long)5l, (long)8l, (long)8l, (long)2l))), (8l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in an array array list and an element and inserts the element before each element in the array list, and returns the resulting array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i).equals(element)) {\n                result.add(list.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(insertElement((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Black\"))), (\"c\")).equals((new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"Red\", (String)\"c\", (String)\"Green\", (String)\"c\", (String)\"Black\")))));",
            "assert(insertElement((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"java\"))), (\"program\")).equals((new ArrayList<String>(Arrays.asList((String)\"program\", (String)\"python\", (String)\"program\", (String)\"java\")))));",
            "assert(insertElement((new ArrayList<String>(Arrays.asList((String)\"happy\", (String)\"sad\"))), (\"laugh\")).equals((new ArrayList<String>(Arrays.asList((String)\"laugh\", (String)\"happy\", (String)\"laugh\", (String)\"sad\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a javathon function to convert complex numbers to polar coordinates.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Float, Float> convert(long numbers) {\n        return new Pair<>(Float.valueOf(numbers), Float.valueOf(numbers));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(convert((1l)).equals((Pair.with(1.0f, 0.0f))));",
            "assert(convert((4l)).equals((Pair.with(4.0f, 0.0f))));",
            "assert(convert((5l)).equals((Pair.with(5.0f, 0.0f))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in an array array list and length n, and generates all combinations (with repetition) of the elements of the array list and returns an array array list with an array array list for each combination.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<String>> combinationsColors(ArrayList<String> l, long n) {\n        ArrayList<ArrayList<String>> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ArrayList<String> temp = new ArrayList<>();\n            for (int j = 0; j < l.size(); j++) {\n                if (l.get(j).equals(String.valueOf(i))) {\n                    temp.add(String.valueOf(i));\n                }\n            }\n            res.add(temp);\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(combinationsColors((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\"))), (1l)).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Blue\")))))));",
            "assert(combinationsColors((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\"))), (2l)).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Blue\", (String)\"Blue\")))))));",
            "assert(combinationsColors((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\"))), (3l)).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\", (String)\"Red\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Red\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Blue\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Green\", (String)\"Green\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Green\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Green\", (String)\"Blue\", (String)\"Blue\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"Blue\", (String)\"Blue\", (String)\"Blue\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a javathon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countPrimesNums(long n) {\n        long prime = 1;\n        while (prime < n) {\n            if (prime % 2 == 0) {\n                prime = prime * prime;\n            } else {\n                prime = prime / 2;\n            }\n        }\n        return prime;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countPrimesNums((5l)) == (2l));",
            "assert(countPrimesNums((10l)) == (4l));",
            "assert(countPrimesNums((100l)) == (25l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns an array array list with the second number and then the first number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> swapNumbers(long a, long b) {\n        ArrayList<Long> result = new ArrayList<>();\n        result.add(a);\n        result.add(b);\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(swapNumbers((10l), (20l)).equals((new ArrayList<Long>(Arrays.asList((long)20l, (long)10l)))));",
            "assert(swapNumbers((15l), (17l)).equals((new ArrayList<Long>(Arrays.asList((long)17l, (long)15l)))));",
            "assert(swapNumbers((100l), (200l)).equals((new ArrayList<Long>(Arrays.asList((long)200l, (long)100l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> maximizeElements(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            ArrayList<Long> test_tup1_i = test_tup1.get(i);\n            ArrayList<Long> test_tup2_i = test_tup2.get(i);\n            if (test_tup1_i.size() == test_tup2_i.size()) {\n                result.add(test_tup1_i);\n                result.add(test_tup2_i);\n            } else {\n                result.add(test_tup1_i);\n                result.add(test_tup2_i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maximizeElements((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)10l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)10l)))))));",
            "assert(maximizeElements((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)11l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)11l)))))));",
            "assert(maximizeElements((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)12l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)12l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long newmanPrime(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n % 2 == 0) {\n            return 3;\n        }\n        if (n % 3 == 0) {\n            return 4;\n        }\n        if (n % 5 == 0) {\n            return 5;\n        }\n        if (n % 7 == 0) {\n            return 6;\n        }\n        if (n % 11 == 0) {\n            return 7;\n        }\n        if (n % 13 == 0) {\n            return 8;\n        }\n        if (n % 17 == 0) {\n            return 9;\n        }\n        if (n % 19 == 0) {\n            return 10;\n        }\n        if (n % 23 == 0) {\n            return 11;\n        }\n        if (n % 29 == 0) {\n            return 12;\n        }\n        if (n % 31 == 0) {\n            return 13;\n        }\n        if (n % 37 == 0) {\n            return 14;\n        }\n        if (n % 41 == 0) {\n            return 15;\n        }\n        if (n % 43 == 0) {\n            return 16;\n        }\n        if (n % 47 == 0) {\n            return 17;\n        }\n        if (n % 53 == 0) {\n            return 18;\n        }\n        if (n % 59 == 0) {\n            return 19;\n        }\n        if (n % 61 == 0) {\n            return 20;\n        }\n        if (n % 67 == 0) {\n            return 21;\n        }\n        if (n % 71 == 0) {\n            return 22;\n        }\n        if\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(newmanPrime((3l)) == (7l));",
            "assert(newmanPrime((4l)) == (17l));",
            "assert(newmanPrime((5l)) == (41l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Create a new pair",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> divisionElements(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        Pair<Long, Long> new_pair = new Pair<>(test_tup1.getFirst(), test_tup1.getSecond());\n        Pair<Long, Long> new_pair2 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair3 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair4 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair5 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair6 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair7 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(divisionElements((Pair.with(10l, 4l, 6l, 9l)), (Pair.with(5l, 2l, 3l, 3l))).equals((Pair.with(2l, 2l, 2l, 3l))));",
            "assert(divisionElements((Pair.with(12l, 6l, 8l, 16l)), (Pair.with(6l, 3l, 4l, 4l))).equals((Pair.with(2l, 2l, 2l, 4l))));",
            "assert(divisionElements((Pair.with(20l, 14l, 36l, 18l)), (Pair.with(5l, 7l, 6l, 9l))).equals((Pair.with(4l, 2l, 6l, 2l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in an array array list and an integer L and splits the given array list into two parts where the length of the first part of the array list is L, and returns the resulting array lists in a pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Object splitTwoParts(ArrayList<Object> list1, long L) {\n        ArrayList<Object> list2 = new ArrayList<>();\n        for (int i = 0; i < L; i++) {\n            list2.add(list1.get(i));\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(splitTwoParts((new ArrayList<Object>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)1l))), (3l)).equals(Pair.with(new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l)), new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)4l, (long)5l, (long)1l)))));",
            "assert(splitTwoParts((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\"))), (2l)).equals(Pair.with(new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"d\")))));",
            "assert(splitTwoParts((new ArrayList<Object>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\"))), (4l)).equals(Pair.with(new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\")), new ArrayList<String>(Arrays.asList((String)\"o\", (String)\"n\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long dogAge(long h_age) {\n        return h_age / 365;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(dogAge((12l)) == (61l));",
            "assert(dogAge((15l)) == (73l));",
            "assert(dogAge((24l)) == (109l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in an array array list and an integer n and splits an array array list for every nth element, returning an array array list of the resulting array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Object>> listSplit(ArrayList<Object> S, long step) {\n        ArrayList<ArrayList<Object>> result = new ArrayList<>();\n        for (int i = 0; i < S.size(); i += step) {\n            ArrayList<Object> list = new ArrayList<>();\n            for (int j = 0; j < S.size(); j += step) {\n                list.add(S.get(j));\n            }\n            result.add(list);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(listSplit((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"e\", (String)\"f\", (String)\"g\", (String)\"h\", (String)\"i\", (String)\"j\", (String)\"k\", (String)\"l\", (String)\"m\", (String)\"n\"))), (3l)).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"d\", (String)\"g\", (String)\"j\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"b\", (String)\"e\", (String)\"h\", (String)\"k\", (String)\"n\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"f\", (String)\"i\", (String)\"l\")))))));",
            "assert(listSplit((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l, (long)12l, (long)13l, (long)14l))), (3l)).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)7l, (long)10l, (long)13l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)8l, (long)11l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)9l, (long)12l)))))));",
            "assert(listSplit((new ArrayList<Object>(Arrays.asList((String)\"python\", (String)\"java\", (String)\"C\", (String)\"C++\", (String)\"DBMS\", (String)\"SQL\"))), (2l)).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"C\", (String)\"DBMS\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"java\", (String)\"C++\", (String)\"SQL\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lateralsurfaceCube(long l) {\n        long l1 = l;\n        long l2 = l1;\n        long l3 = l1;\n        long l4 = l1;\n        long l5 = l1;\n        long l6 = l1;\n        long l7 = l1;\n        long l8 = l1;\n        long l9 = l1;\n        long l10 = l1;\n        long l11 = l1;\n        long l12 = l1;\n        long l13 = l1;\n        long l14 = l1;\n        long l15 = l1;\n        long l16 = l1;\n        long l17 = l1;\n        long l18 = l1;\n        long l19 = l1;\n        long l20 = l1;\n        long l21 = l1;\n        long l22 = l1;\n        long l23 = l1;\n        long l24 = l1;\n        long l25 = l1;\n        long l26 = l1;\n        long l27 = l1;\n        long l28 = l1;\n        long l29 = l1;\n        long l30 = l1;\n        long l31 = l1;\n        long l32 = l1;\n        long l33 = l1;\n        long l34 = l1;\n        long l35 = l1;\n        long l36 = l1;\n        long l37 = l1;\n        long l38 = l1;\n        long l39 = l1;\n        long l40 = l1;\n        long l41 = l1;\n        long l42 = l1;\n        long l43 = l1;\n        long l44 = l1;\n        long l45 = l1;\n        long l46 = l1;\n        long l47\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lateralsurfaceCube((5l)) == (100l));",
            "assert(lateralsurfaceCube((9l)) == (324l));",
            "assert(lateralsurfaceCube((10l)) == (400l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a javathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long squareSum(long n) {\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(squareSum((2l)) == (10l));",
            "assert(squareSum((3l)) == (35l));",
            "assert(squareSum((4l)) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findStarNum(long n) {\n        long result = 1;\n        while (result < n) {\n            result *= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findStarNum((3l)) == (37l));",
            "assert(findStarNum((4l)) == (73l));",
            "assert(findStarNum((5l)) == (121l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long asciiValue(String k) {\n        int i = 0;\n        int j = k.length();\n        long result = 0;\n        while (i < j) {\n            result = (result << 1) + k.charAt(i);\n            i++;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(asciiValue((\"A\")) == (65l));",
            "assert(asciiValue((\"R\")) == (82l));",
            "assert(asciiValue((\"S\")) == (83l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a javathon function to find the sum of even numbers at even positions of an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumEvenAndEvenIndex(ArrayList<Long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (i % 2 == 0) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumEvenAndEvenIndex((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)12l, (long)1l, (long)18l, (long)8l)))) == (30l));",
            "assert(sumEvenAndEvenIndex((new ArrayList<Long>(Arrays.asList((long)3l, (long)20l, (long)17l, (long)9l, (long)2l, (long)10l, (long)18l, (long)13l, (long)6l, (long)18l)))) == (26l));",
            "assert(sumEvenAndEvenIndex((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)12l, (long)1l)))) == (12l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a javathon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long evenPowerSum(long n) {\n        long sum = 1;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(evenPowerSum((2l)) == (1056l));",
            "assert(evenPowerSum((3l)) == (8832l));",
            "assert(evenPowerSum((1l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in an array array list of pairs and returns an array array list containing the rear element of each pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> rearExtract(ArrayList<Pair<Long, String, Long>> test_list) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (Pair<Long, String, Long> pair : test_list) {\n            result.add(pair.getRight());\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(rearExtract((new ArrayList<Pair<Long, String, Long>>(Arrays.asList((Pair<Long, String, Long>)Pair.with(1l, \"Rash\", 21l), (Pair<Long, String, Long>)Pair.with(2l, \"Varsha\", 20l), (Pair<Long, String, Long>)Pair.with(3l, \"Kil\", 19l))))).equals((new ArrayList<Long>(Arrays.asList((long)21l, (long)20l, (long)19l)))));",
            "assert(rearExtract((new ArrayList<Pair<Long, String, Long>>(Arrays.asList((Pair<Long, String, Long>)Pair.with(1l, \"Sai\", 36l), (Pair<Long, String, Long>)Pair.with(2l, \"Ayesha\", 25l), (Pair<Long, String, Long>)Pair.with(3l, \"Salman\", 45l))))).equals((new ArrayList<Long>(Arrays.asList((long)36l, (long)25l, (long)45l)))));",
            "assert(rearExtract((new ArrayList<Pair<Long, String, Long>>(Arrays.asList((Pair<Long, String, Long>)Pair.with(1l, \"Sudeep\", 14l), (Pair<Long, String, Long>)Pair.with(2l, \"Vandana\", 36l), (Pair<Long, String, Long>)Pair.with(3l, \"Dawood\", 56l))))).equals((new ArrayList<Long>(Arrays.asList((long)14l, (long)36l, (long)56l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two pairs and subtracts the elements of the first pair by the elements of the second pair with the same index.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long> substractElements(Pair<Long, Long, Long> test_tup1, Pair<Long, Long, Long> test_tup2) {\n        return new Pair<>(test_tup1.getFirst() - test_tup2.getFirst(), test_tup1.getSecond() - test_tup2.getSecond(), test_tup1.getThird() - test_tup2.getThird());\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(substractElements((Pair.with(10l, 4l, 5l)), (Pair.with(2l, 5l, 18l))).equals((Pair.with(8l, -1l, -13l))));",
            "assert(substractElements((Pair.with(11l, 2l, 3l)), (Pair.with(24l, 45l, 16l))).equals((Pair.with(-13l, -43l, -13l))));",
            "assert(substractElements((Pair.with(7l, 18l, 9l)), (Pair.with(10l, 11l, 12l))).equals((Pair.with(-3l, 7l, -3l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a javathon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long evenBinomialCoeffSum(long n) {\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(evenBinomialCoeffSum((4l)) == (8l));",
            "assert(evenBinomialCoeffSum((6l)) == (32l));",
            "assert(evenBinomialCoeffSum((2l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in a hash map and integer n and filters the hash map to only include entries with values greater than or equal to n.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Long> dictFilter(HashMap<String,Long> dict, long n) {\n        HashMap<String,Long> filtered = new HashMap<>();\n        for (Map.Entry<String,Long> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                filtered.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return filtered;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(dictFilter((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Kierra Gentry\", 165l, \"Pierre Cox\", 190l))), (170l)).equals((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Pierre Cox\", 190l)))));",
            "assert(dictFilter((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Kierra Gentry\", 165l, \"Pierre Cox\", 190l))), (180l)).equals((new HashMap<String,Long>(Map.of(\"Alden Cantrell\", 180l, \"Pierre Cox\", 190l)))));",
            "assert(dictFilter((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 175l, \"Alden Cantrell\", 180l, \"Kierra Gentry\", 165l, \"Pierre Cox\", 190l))), (190l)).equals((new HashMap<String,Long>(Map.of(\"Pierre Cox\", 190l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long isNumDecagonal(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n        \n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isNumDecagonal((3l)) == (27l));",
            "assert(isNumDecagonal((7l)) == (175l));",
            "assert(isNumDecagonal((10l)) == (370l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array array list and element and returns a pair containing a boolean that indicates if the element is in the array array list and the index position of the element (or -1 if the element is not found).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Boolean, Long> sequentialSearch(ArrayList<Long> dlist, long item) {\n        if (dlist.size() == 0) {\n            return new Pair<>(false, 0L);\n        }\n        long index = 0;\n        long max = dlist.size();\n        while (index < max) {\n            if (dlist.get(index) == item) {\n                return new Pair<>(true, index);\n            }\n            index++;\n        }\n        return new Pair<>(false, index);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sequentialSearch((new ArrayList<Long>(Arrays.asList((long)11l, (long)23l, (long)58l, (long)31l, (long)56l, (long)77l, (long)43l, (long)12l, (long)65l, (long)19l))), (31l)).equals((Pair.with(true, 3l))));",
            "assert(sequentialSearch((new ArrayList<Long>(Arrays.asList((long)12l, (long)32l, (long)45l, (long)62l, (long)35l, (long)47l, (long)44l, (long)61l))), (61l)).equals((Pair.with(true, 7l))));",
            "assert(sequentialSearch((new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)17l, (long)19l, (long)22l, (long)39l, (long)48l, (long)56l))), (48l)).equals((Pair.with(true, 6l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a javathon function to check if the elements of a given array list are unique or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean allUnique(ArrayList<Long> test_list) {\n        if (test_list == null || test_list.size() == 0) {\n            return true;\n        }\n        for (int i = 0; i < test_list.size(); i++) {\n            if (test_list.get(i) == test_list.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(allUnique((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (true));",
            "assert(allUnique((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (false));",
            "assert(allUnique((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two array lists element-wise.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> subList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(subList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-3l, (long)-3l)))));",
            "assert(subList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-2l)))));",
            "assert(subList((new ArrayList<Long>(Arrays.asList((long)90l, (long)120l))), (new ArrayList<Long>(Arrays.asList((long)50l, (long)70l)))).equals((new ArrayList<Long>(Arrays.asList((long)40l, (long)50l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a javathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean validate(long n) {\n        if (n < 0) {\n            return false;\n        }\n        int[] digits = new int[10];\n        for (int i = 0; i < 10; i++) {\n            digits[i] = (int) n % 10;\n            n /= 10;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (digits[i]!= i) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(validate((1234l)) == (true));",
            "assert(validate((51241l)) == (false));",
            "assert(validate((321l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in an array array list and element and checks whether all items in the array list are equal to the given element.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkElement(ArrayList<Object> list, Object element) {\n        for (Object o : list) {\n            if (o.equals(element)) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkElement((new ArrayList<Object>(Arrays.asList((String)\"green\", (String)\"orange\", (String)\"black\", (String)\"white\"))), (Object(\"blue\"))) == (false));",
            "assert(checkElement((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (Object(7l))) == (false));",
            "assert(checkElement((new ArrayList<Object>(Arrays.asList((String)\"green\", (String)\"green\", (String)\"green\", (String)\"green\"))), (Object(\"green\"))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textMatchTwoThree(String text) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 =\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textMatchTwoThree((\"ac\")) == (false));",
            "assert(textMatchTwoThree((\"dc\")) == (false));",
            "assert(textMatchTwoThree((\"abbbba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array array list in the modified array array list which is formed by repeating the given array array list k times.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxSubArraySumRepeated(ArrayList<Long> a, long n, long k) {\n        long max = 0;\n        for (int i = 0; i < a.size(); i++) {\n            long sum = a.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxSubArraySumRepeated((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)-30l, (long)-1l))), (4l), (3l)) == (30l));",
            "assert(maxSubArraySumRepeated((new ArrayList<Long>(Arrays.asList((long)-1l, (long)10l, (long)20l))), (3l), (2l)) == (59l));",
            "assert(maxSubArraySumRepeated((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))), (3l), (3l)) == (-1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a javathon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long squareSum(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(squareSum((2l)) == (20l));",
            "assert(squareSum((3l)) == (56l));",
            "assert(squareSum((4l)) == (120l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the array list of maximum length in an array array list of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, ArrayList<Long>> maxLength(ArrayList<ArrayList<Long>> list1) {\n        long max = 0;\n        ArrayList<Long> list = new ArrayList<>();\n        for (ArrayList<Long> list2 : list1) {\n            if (list2.size() > max) {\n                max = list2.size();\n                list = list2;\n            }\n        }\n        return new Pair<>(max, list);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l)))))).equals((Pair.with(3l, new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l))))));",
            "assert(maxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)12l, (long)14l, (long)15l)))))).equals((Pair.with(4l, new ArrayList<Long>(Arrays.asList((long)10l, (long)12l, (long)14l, (long)15l))))));",
            "assert(maxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)15l, (long)20l, (long)25l)))))).equals((Pair.with(3l, new ArrayList<Long>(Arrays.asList((long)15l, (long)20l, (long)25l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countNoOfWays(long n, long k) {\n        long[] counts = new long[n];\n        for (int i = 0; i < n; i++) {\n            counts[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            counts[i] += counts[i + 1] + counts[i - 1];\n        }\n        return counts[n - 1];\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countNoOfWays((2l), (4l)) == (16l));",
            "assert(countNoOfWays((3l), (2l)) == (6l));",
            "assert(countNoOfWays((4l), (4l)) == (228l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a javathon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long find(long n, long m) {\n        long result = n;\n        while (result % m!= 0) {\n            result = result / m;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(find((10l), (3l)) == (3l));",
            "assert(find((4l), (2l)) == (2l));",
            "assert(find((20l), (5l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float othersideRightangle(long w, long h) {\n        long x = w;\n        long y = h;\n        long z = 0;\n        long x2 = x;\n        long y2 = y;\n        long z2 = z;\n        long x3 = x2;\n        long y3 = y2;\n        long z3 = z2;\n        long x4 = x3;\n        long y4 = y3;\n        long z4 = z3;\n        long x5 = x4;\n        long y5 = y4;\n        long z5 = z4;\n        long x6 = x5;\n        long y6 = y5;\n        long z6 = z5;\n        long x7 = x6;\n        long y7 = y6;\n        long z7 = z6;\n        long x8 = x7;\n        long y8 = y7;\n        long z8 = z7;\n        long x9 = x8;\n        long y9 = y8;\n        long z9 = z8;\n        long x10 = x9;\n        long y10 = y9;\n        long z10 = z9;\n        long x11 = x10;\n        long y11 = y10;\n        long z11 = z10;\n        long x12 = x11;\n        long y12 = y11;\n        long z12 = z11;\n        long x13 = x12;\n        long y13 = y12;\n        long z13 = z12;\n        long x14 = x13;\n        long y14 = y13;\n        long z14 = z13;\n        long x15 = x14;\n        long y15 = y14;\n        long z15 = z14;\n        long x16 = x15;\n        long y16 = y15;\n        long z16\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(othersideRightangle((7l), (8l)) == (10.63014581273465f));",
            "assert(othersideRightangle((3l), (4l)) == (float)5l);",
            "assert(othersideRightangle((7l), (15l)) == (16.55294535724685f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumDiv(long number) {\n        long sum = 1;\n        while (number > 1) {\n            sum += number % 2;\n            number /= 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumDiv((8l)) == (7l));",
            "assert(sumDiv((12l)) == (16l));",
            "assert(sumDiv((7l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a javathon function to count inversions in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long getInvCount(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getInvCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)6l, (long)4l, (long)5l)))) == (5l));",
            "assert(getInvCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (1l));",
            "assert(getInvCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)5l, (long)6l, (long)1l)))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the array list of pairs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, Long> maxAggregate(ArrayList<Pair<String, Long>> stdata) {\n        Pair<String, Long> max = new Pair<>();\n        long maxAggregate = 0;\n        for (Pair<String, Long> p : stdata) {\n            if (p.getRight() > maxAggregate) {\n                maxAggregate = p.getRight();\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxAggregate((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Juan Whelan\", 90l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 88l), (Pair<String, Long>)Pair.with(\"Peter Nichols\", 7l), (Pair<String, Long>)Pair.with(\"Juan Whelan\", 122l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 84l))))).equals((Pair.with(\"Juan Whelan\", 212l))));",
            "assert(maxAggregate((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Juan Whelan\", 50l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 48l), (Pair<String, Long>)Pair.with(\"Peter Nichols\", 37l), (Pair<String, Long>)Pair.with(\"Juan Whelan\", 22l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 14l))))).equals((Pair.with(\"Juan Whelan\", 72l))));",
            "assert(maxAggregate((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Juan Whelan\", 10l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 20l), (Pair<String, Long>)Pair.with(\"Peter Nichols\", 30l), (Pair<String, Long>)Pair.with(\"Juan Whelan\", 40l), (Pair<String, Long>)Pair.with(\"Sabah Colley\", 50l))))).equals((Pair.with(\"Sabah Colley\", 70l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a javathon function to find element at a given index after number of rotations.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findElement(ArrayList<Long> arr, ArrayList<ArrayList<Long>> ranges, long rotations, long index) {\n        long result = 0;\n        for (int i = 0; i < rotations; i++) {\n            result = result + arr.get(index);\n            index = index + 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)3l))))), (2l), (1l)) == (3l));",
            "assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l))))), (1l), (2l)) == (3l));",
            "assert(findElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)2l))))), (1l), (1l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from an array array list of words starting with letter 'p'.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, String> startWithp(ArrayList<String> words) {\n        return new Pair<>(words.get(0), words.get(1));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(startWithp((new ArrayList<String>(Arrays.asList((String)\"Python PHP\", (String)\"Java JavaScript\", (String)\"c c++\")))).equals((Pair.with(\"Python\", \"PHP\"))));",
            "assert(startWithp((new ArrayList<String>(Arrays.asList((String)\"Python Programming\", (String)\"Java Programming\")))).equals((Pair.with(\"Python\", \"Programming\"))));",
            "assert(startWithp((new ArrayList<String>(Arrays.asList((String)\"Pqrst Pqr\", (String)\"qrstuv\")))).equals((Pair.with(\"Pqrst\", \"Pqr\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxSumIncreasingSubseq(ArrayList<Long> a, long n, long index, long k) {\n        long max = 0;\n        for (int i = 0; i < a.size(); i++) {\n            long sum = a.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxSumIncreasingSubseq((new ArrayList<Long>(Arrays.asList((long)1l, (long)101l, (long)2l, (long)3l, (long)100l, (long)4l, (long)5l))), (7l), (4l), (6l)) == (11l));",
            "assert(maxSumIncreasingSubseq((new ArrayList<Long>(Arrays.asList((long)1l, (long)101l, (long)2l, (long)3l, (long)100l, (long)4l, (long)5l))), (7l), (2l), (5l)) == (7l));",
            "assert(maxSumIncreasingSubseq((new ArrayList<Long>(Arrays.asList((long)11l, (long)15l, (long)19l, (long)21l, (long)26l, (long)28l, (long)31l))), (7l), (2l), (4l)) == (71l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given array lists, selecting one factor from each array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> largeProduct(ArrayList<Long> nums1, ArrayList<Long> nums2, long N) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            long product = nums1.get(i) * nums2.get(i);\n            if (product > N) {\n                result.add(product);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l)))));",
            "assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l, (long)48l)))));",
            "assert(largeProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)8l, (long)9l, (long)10l, (long)6l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)60l, (long)54l, (long)50l, (long)48l, (long)45l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a javathon function to find the maximum of two numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maximum(long a, long b) {\n        return a > b? a : b;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maximum((5l), (10l)) == (10l));",
            "assert(maximum((-1l), (-2l)) == (-1l));",
            "assert(maximum((9l), (7l)) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to an array array list of characters.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> stringToTuple(String str1) {\n        ArrayList<String> list = new ArrayList<>();\n        for (int i = 0; i < str1.length(); i++) {\n            list.add(str1.charAt(i));\n        }\n        return list;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(stringToTuple((\"python 3.0\")).equals((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\", (String)\"3\", (String)\".\", (String)\"0\")))));",
            "assert(stringToTuple((\"item1\")).equals((new ArrayList<String>(Arrays.asList((String)\"i\", (String)\"t\", (String)\"e\", (String)\"m\", (String)\"1\")))));",
            "assert(stringToTuple((\"15.10\")).equals((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"5\", (String)\".\", (String)\"1\", (String)\"0\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a javathon function to find the highest power of 2 that is less than or equal to n.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long highestPowerOf2(long n) {\n        long result = 1;\n        while (result < n) {\n            result <<= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(highestPowerOf2((10l)) == (8l));",
            "assert(highestPowerOf2((19l)) == (16l));",
            "assert(highestPowerOf2((32l)) == (32l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findLucas(long n) {\n        long result = 1;\n        while (n > 1) {\n            result *= n;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findLucas((9l)) == (76l));",
            "assert(findLucas((4l)) == (7l));",
            "assert(findLucas((3l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> addString(ArrayList<Object> list_, String string) {\n        ArrayList<String> result = new ArrayList<>();\n        for (Object o : list_) {\n            result.add(o.toString() + string);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(addString((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (\"temp{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"temp1\", (String)\"temp2\", (String)\"temp3\", (String)\"temp4\")))));",
            "assert(addString((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\"))), (\"python{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"pythona\", (String)\"pythonb\", (String)\"pythonc\", (String)\"pythond\")))));",
            "assert(addString((new ArrayList<Object>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l))), (\"string{0}\")).equals((new ArrayList<String>(Arrays.asList((String)\"string5\", (String)\"string6\", (String)\"string7\", (String)\"string8\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one array list to nested hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<HashMap<String,HashMap<String,Long>>> convertListDictionary(ArrayList<String> l1, ArrayList<String> l2, ArrayList<Long> l3) {\n        ArrayList<HashMap<String,HashMap<String,Long>>> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            HashMap<String,HashMap<String,Long>> hm1 = new HashMap<>();\n            HashMap<String,Long> hm2 = new HashMap<>();\n            for (int j = 0; j < l2.size(); j++) {\n                hm1.put(l1.get(i), new HashMap<>());\n                hm2.put(l2.get(j), new Long(l3.get(j)));\n            }\n            result.add(hm1);\n            result.add(hm2);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(convertListDictionary((new ArrayList<String>(Arrays.asList((String)\"S001\", (String)\"S002\", (String)\"S003\", (String)\"S004\"))), (new ArrayList<String>(Arrays.asList((String)\"Adina Park\", (String)\"Leyton Marsh\", (String)\"Duncan Boyle\", (String)\"Saim Richards\"))), (new ArrayList<Long>(Arrays.asList((long)85l, (long)98l, (long)89l, (long)92l)))).equals((new ArrayList<HashMap<String,HashMap<String,Long>>>(Arrays.asList((HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S001\", new HashMap<String,Long>(Map.of(\"Adina Park\", 85l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S002\", new HashMap<String,Long>(Map.of(\"Leyton Marsh\", 98l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S003\", new HashMap<String,Long>(Map.of(\"Duncan Boyle\", 89l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"S004\", new HashMap<String,Long>(Map.of(\"Saim Richards\", 92l)))))))));",
            "assert(convertListDictionary((new ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"def\", (String)\"ghi\", (String)\"jkl\"))), (new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"program\", (String)\"language\", (String)\"programs\"))), (new ArrayList<Long>(Arrays.asList((long)100l, (long)200l, (long)300l, (long)400l)))).equals((new ArrayList<HashMap<String,HashMap<String,Long>>>(Arrays.asList((HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"abc\", new HashMap<String,Long>(Map.of(\"python\", 100l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"def\", new HashMap<String,Long>(Map.of(\"program\", 200l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"ghi\", new HashMap<String,Long>(Map.of(\"language\", 300l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"jkl\", new HashMap<String,Long>(Map.of(\"programs\", 400l)))))))));",
            "assert(convertListDictionary((new ArrayList<String>(Arrays.asList((String)\"A1\", (String)\"A2\", (String)\"A3\", (String)\"A4\"))), (new ArrayList<String>(Arrays.asList((String)\"java\", (String)\"C\", (String)\"C++\", (String)\"DBMS\"))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))).equals((new ArrayList<HashMap<String,HashMap<String,Long>>>(Arrays.asList((HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A1\", new HashMap<String,Long>(Map.of(\"java\", 10l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A2\", new HashMap<String,Long>(Map.of(\"C\", 20l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A3\", new HashMap<String,Long>(Map.of(\"C++\", 30l)))), (HashMap<String,HashMap<String,Long>>)new HashMap<String,HashMap<String,Long>>(Map.of(\"A4\", new HashMap<String,Long>(Map.of(\"DBMS\", 40l)))))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long getMaxSum(long n) {\n        long max = 0;\n        for (int i = 1; i <= n; i++) {\n            max = Math.max(max, f(i));\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getMaxSum((60l)) == (106l));",
            "assert(getMaxSum((10l)) == (12l));",
            "assert(getMaxSum((2l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Return the maximum length list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, ArrayList<Long>> maxLengthList(ArrayList<ArrayList<Long>> input_list) {\n        ArrayList<Long> max_length_list = new ArrayList<>();\n        for (ArrayList<Long> list : input_list) {\n            if (list.isEmpty()) {\n                max_length_list.add(list.get(0));\n            } else {\n                for (int i = 0; i < list.size(); i++) {\n                    max_length_list.add(list.get(i));\n                }\n            }\n        }\n        return new Pair<>(max_length_list.get(0), max_length_list);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxLengthList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l)))))).equals((Pair.with(3l, new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l))))));",
            "assert(maxLengthList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)))))).equals((Pair.with(5l, new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))));",
            "assert(maxLengthList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l)))))).equals((Pair.with(4l, new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given array list contains no duplicates.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkDistinct(ArrayList<Long> test_tup) {\n        boolean result = true;\n        for (int i = 0; i < test_tup.size(); i++) {\n            if (test_tup.get(i) == test_tup.get(i)) {\n                result = false;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkDistinct((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l, (long)6l, (long)1l, (long)4l)))) == (false));",
            "assert(checkDistinct((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l, (long)6l)))) == (true));",
            "assert(checkDistinct((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a javathon function to find the first non-repeated character in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<String> firstNonRepeatingCharacter(String str1) {\n        int index = 0;\n        while (index < str1.length()) {\n            if (Character.isWhitespace(str1.charAt(index))) {\n                index++;\n            } else {\n                return Optional.of(str1.substring(index, index + 1));\n            }\n        }\n        return Optional.empty();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(firstNonRepeatingCharacter((\"abcabc\")).equals(Optional.empty()));",
            "assert(firstNonRepeatingCharacter((\"abc\")).equals(Optional.of(\"a\")));",
            "assert(firstNonRepeatingCharacter((\"ababc\")).equals(Optional.of(\"c\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String checkChar(String string) {\n        if (string == null || string.length() == 0) {\n            return null;\n        }\n        int index = 0;\n        while (index < string.length()) {\n            if (string.charAt(index)!= string.charAt(index + 1)) {\n                return null;\n            }\n            index++;\n        }\n        return string;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkChar((\"abba\")).equals((\"Valid\")));",
            "assert(checkChar((\"a\")).equals((\"Valid\")));",
            "assert(checkChar((\"abcd\")).equals((\"Invalid\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float medianNumbers(long a, long b, long c) {\n        long a1 = a / 2;\n        long b1 = b / 2;\n        long c1 = c / 2;\n        long a2 = a1 + 1;\n        long b2 = b1 + 1;\n        long c2 = c1 + 1;\n        long a3 = a2 + 1;\n        long b3 = b2 + 1;\n        long c3 = c2 + 1;\n        long a4 = a3 + 1;\n        long b4 = b3 + 1;\n        long c4 = c3 + 1;\n        long a5 = a4 + 1;\n        long b5 = b4 + 1;\n        long c5 = c4 + 1;\n        long a6 = a5 + 1;\n        long b6 = b5 + 1;\n        long c6 = c5 + 1;\n        long a7 = a6 + 1;\n        long b7 = b6 + 1;\n        long c7 = c6 + 1;\n        long a8 = a7 + 1;\n        long b8 = b7 + 1;\n        long c8 = c7 + 1;\n        long a9 = a8 + 1;\n        long b9 = b8 + 1;\n        long c9 = c8 + 1;\n        long a10 = a9 + 1;\n        long b10 = b9 + 1;\n        long c10 = c9 + 1;\n        long a11 = a10 + 1;\n        long b11 = b10 + 1;\n        long c11 = c10 + 1;\n        long a12 = a11 + 1;\n        long b12 = b11 + 1;\n        long c12 = c11 + 1;\n        long a13 = a12 + 1;\n        long b13 = b12 + 1;\n        long c13 =\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(medianNumbers((25l), (55l), (65l)) == (55.0f));",
            "assert(medianNumbers((20l), (10l), (30l)) == (20.0f));",
            "assert(medianNumbers((15l), (45l), (75l)) == (45.0f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumOfDigits(ArrayList<Object> nums) {\n        long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += (Long)nums.get(i) * (Long)nums.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumOfDigits((new ArrayList<Object>(Arrays.asList((long)10l, (long)2l, (long)56l)))) == (14l));",
            "assert(sumOfDigits((new ArrayList<Object>(Arrays.asList((ArrayList<Long>)new ArrayList<Object>(Arrays.asList(10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))))) == (19l));",
            "assert(sumOfDigits((new ArrayList<Object>(Arrays.asList((long)10l, (long)20l, (long)-4l, (long)5l, (long)-70l)))) == (19l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Create a new pair of the same length, with the same value for the first pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> bitwiseXor(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        Pair<Long, Long> new_pair = new Pair<>(test_tup1.getFirst(), test_tup1.getSecond());\n        Pair<Long, Long> new_pair2 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair3 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair4 = new Pair<>(test_tup1.getSecond(), test_tup1.getFirst());\n        Pair<Long, Long> new_pair5 = new Pair<>(test_tup1.getSecond(), test_tup1.getFirst());\n        Pair<Long, Long> new_pair6 = new Pair<>(test_tup2.getSecond(), test_tup2.getFirst());\n        Pair<Long, Long> new_pair7 = new Pair<>(\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(bitwiseXor((Pair.with(10l, 4l, 6l, 9l)), (Pair.with(5l, 2l, 3l, 3l))).equals((Pair.with(15l, 6l, 5l, 10l))));",
            "assert(bitwiseXor((Pair.with(11l, 5l, 7l, 10l)), (Pair.with(6l, 3l, 4l, 4l))).equals((Pair.with(13l, 6l, 3l, 14l))));",
            "assert(bitwiseXor((Pair.with(12l, 6l, 8l, 11l)), (Pair.with(7l, 4l, 5l, 6l))).equals((Pair.with(11l, 2l, 13l, 13l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a javathon function to identify non-prime numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isNotPrime(long n) {\n        if (n == 1) return true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return false;\n        if (n % 5 == 0) return false;\n        if (n % 7 == 0) return false;\n        if (n % 11 == 0) return false;\n        if (n % 13 == 0) return false;\n        if (n % 17 == 0) return false;\n        if (n % 19 == 0) return false;\n        if (n % 23 == 0) return false;\n        if (n % 29 == 0) return false;\n        if (n % 31 == 0) return false;\n        if (n % 37 == 0) return false;\n        if (n % 41 == 0) return false;\n        if (n % 43 == 0) return false;\n        if (n % 47 == 0) return false;\n        if (n % 53 == 0) return false;\n        if (n % 59 == 0) return false;\n        if (n % 61 == 0) return false;\n        if (n % 67 == 0) return false;\n        if (n % 71 == 0) return false;\n        if (n % 73 == 0) return false;\n        if (n % 79 == 0) return false;\n        if (n % 83 == 0) return false;\n        if (n % 89 == 0) return false;\n        if (n % 97 == 0) return false;\n        if (n % 101 == 0) return false;\n        if (n % 103 == 0) return false;\n        if (n % 107 == 0) return false;\n        if (n % 109 == 0) return false;\n        if (n % 113 == 0) return false;\n        if (n % 127 == 0) return false;\n        if (n % 131 == 0)\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isNotPrime((2l)) == (false));",
            "assert(isNotPrime((10l)) == (true));",
            "assert(isNotPrime((35l)) == (true));",
            "assert(isNotPrime((37l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique pairs in the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long extractFreq(ArrayList<Pair<Long, Long>> test_list) {\n        long total = 0;\n        for (Pair<Long, Long> pair : test_list) {\n            total += pair.getFirst() * pair.getSecond();\n        }\n        return total;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractFreq((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 4l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(4l, 3l), (Pair<Long, Long>)Pair.with(5l, 6l))))) == (3l));",
            "assert(extractFreq((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 15l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(5l, 4l), (Pair<Long, Long>)Pair.with(6l, 7l))))) == (4l));",
            "assert(extractFreq((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 16l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(6l, 9l))))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of array list elements in the given two nested array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> addNestedTuples(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            ArrayList<Long> tup1 = test_tup1.get(i);\n            ArrayList<Long> tup2 = test_tup2.get(i);\n            ArrayList<Long> result_tup1 = new ArrayList<>();\n            ArrayList<Long> result_tup2 = new ArrayList<>();\n            for (int j = 0; j < tup1.size(); j++) {\n                result_tup1.add(tup1.get(j) + tup2.get(j));\n            }\n            for (int j = 0; j < tup2.size(); j++) {\n                result_tup2.add(tup2.get(j) + tup1.get(j));\n            }\n            result.add(result_tup1);\n            result.add(result_tup2);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(addNestedTuples((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)10l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)13l)))))));",
            "assert(addNestedTuples((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)11l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)16l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)15l)))))));",
            "assert(addNestedTuples((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)12l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)18l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)14l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)17l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a javathon function to find the minimum of two numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long minimum(long a, long b) {\n        long min = Long.MAX_VALUE;\n        if (a < b) {\n            min = a;\n        } else {\n            min = b;\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(minimum((1l), (2l)) == (1l));",
            "assert(minimum((-5l), (-4l)) == (-5l));",
            "assert(minimum((0l), (0l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a javathon function to find whether the parity of a given number is odd.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean findParity(long x) {\n        if (x == 0) {\n            return true;\n        }\n        if (x % 2 == 0) {\n            return false;\n        }\n        return findParity(x - 1) && findParity(x - 2);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findParity((12l)) == (false));",
            "assert(findParity((7l)) == (true));",
            "assert(findParity((10l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Object rearrangeBigger(long n) {\n        long result = 1;\n        while (n > 0) {\n            result = (result * 10) + (n % 10);\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(rearrangeBigger((12l)).equals((Object(21l))));",
            "assert(rearrangeBigger((10l)).equals((Object(false))));",
            "assert(rearrangeBigger((102l)).equals((Object(120l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array array list and one element from the second array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> kSmallestPairs(ArrayList<Long> nums1, ArrayList<Long> nums2, long k) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        if (nums1.size() == 0 || nums2.size() == 0) {\n            return result;\n        }\n        if (nums1.size() == 1 && nums2.size() == 1) {\n            result.add(new ArrayList<>());\n            return result;\n        }\n        if (nums1.size() == 1 && nums2.size() == 0) {\n            result.add(new ArrayList<>());\n            return result;\n        }\n        if (nums1.size() == 0 && nums2.size() == 1) {\n            result.add(new ArrayList<>());\n            return result;\n        }\n        if (nums1.size() == 0 && nums2.size() == 0) {\n            result.add(new ArrayList<>());\n            return result;\n        }\n        if (nums1.size() == 0) {\n            return result;\n        }\n        if (nums2.size() == 0) {\n            return result;\n        }\n        if (nums1.size() == 1 && nums2.size() == 1) {\n            result.add(new ArrayList<>());\n            return result;\n        }\n        if (nums1.size() == 1 && nums2.size() == 0) {\n            result.add(new ArrayList<>());\n            return result;\n        }\n        if (nums1.size() == 0 && nums2.size() == 1) {\n            result.add\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))))));",
            "assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))));",
            "assert(kSmallestPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l))), (7l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)2l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of pairs within a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long minProductTuple(ArrayList<Pair<Long, Long>> list1) {\n        long min = Long.MAX_VALUE;\n        for (Pair<Long, Long> pair : list1) {\n            if (pair.getLeft() < pair.getRight()) {\n                min = Math.min(min, pair.getLeft());\n            } else {\n                min = Math.min(min, pair.getRight());\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(minProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 7l), (Pair<Long, Long>)Pair.with(2l, 6l), (Pair<Long, Long>)Pair.with(1l, 8l), (Pair<Long, Long>)Pair.with(4l, 9l))))) == (8l));",
            "assert(minProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 20l), (Pair<Long, Long>)Pair.with(15l, 2l), (Pair<Long, Long>)Pair.with(5l, 10l))))) == (30l));",
            "assert(minProductTuple((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(11l, 44l), (Pair<Long, Long>)Pair.with(10l, 15l), (Pair<Long, Long>)Pair.with(20l, 5l), (Pair<Long, Long>)Pair.with(12l, 9l))))) == (100l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String snakeToCamel(String word) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toUpperCase(c));\n            } else {\n                sb.append(Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(snakeToCamel((\"android_tv\")).equals((\"AndroidTv\")));",
            "assert(snakeToCamel((\"google_pixel\")).equals((\"GooglePixel\")));",
            "assert(snakeToCamel((\"apple_watch\")).equals((\"AppleWatch\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a javathon function to remove odd numbers from a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> removeOdd(ArrayList<Long> l) {\n        ArrayList<Long> r = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                r.add(l.get(i));\n            }\n        }\n        return r;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l)))));",
            "assert(removeOdd((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)))));",
            "assert(removeOdd((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given array list of pairs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> extractNthElement(ArrayList<Pair<String, Long, Long>> list1, long n) {\n        ArrayList<Object> result = new ArrayList<>();\n        for (Pair<String, Long, Long> pair : list1) {\n            if (pair.getFirst().equals(pair.getSecond())) {\n                result.add(pair.getFirst());\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractNthElement((new ArrayList<Pair<String, Long, Long>>(Arrays.asList((Pair<String, Long, Long>)Pair.with(\"Greyson Fulton\", 98l, 99l), (Pair<String, Long, Long>)Pair.with(\"Brady Kent\", 97l, 96l), (Pair<String, Long, Long>)Pair.with(\"Wyatt Knott\", 91l, 94l), (Pair<String, Long, Long>)Pair.with(\"Beau Turnbull\", 94l, 98l)))), (0l)).equals((new ArrayList<Object>(Arrays.asList((String)\"Greyson Fulton\", (String)\"Brady Kent\", (String)\"Wyatt Knott\", (String)\"Beau Turnbull\")))));",
            "assert(extractNthElement((new ArrayList<Pair<String, Long, Long>>(Arrays.asList((Pair<String, Long, Long>)Pair.with(\"Greyson Fulton\", 98l, 99l), (Pair<String, Long, Long>)Pair.with(\"Brady Kent\", 97l, 96l), (Pair<String, Long, Long>)Pair.with(\"Wyatt Knott\", 91l, 94l), (Pair<String, Long, Long>)Pair.with(\"Beau Turnbull\", 94l, 98l)))), (2l)).equals((new ArrayList<Object>(Arrays.asList((long)99l, (long)96l, (long)94l, (long)98l)))));",
            "assert(extractNthElement((new ArrayList<Pair<String, Long, Long>>(Arrays.asList((Pair<String, Long, Long>)Pair.with(\"Greyson Fulton\", 98l, 99l), (Pair<String, Long, Long>)Pair.with(\"Brady Kent\", 97l, 96l), (Pair<String, Long, Long>)Pair.with(\"Wyatt Knott\", 91l, 94l), (Pair<String, Long, Long>)Pair.with(\"Beau Turnbull\", 94l, 98l)))), (1l)).equals((new ArrayList<Object>(Arrays.asList((long)98l, (long)97l, (long)91l, (long)94l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a javathon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean overlapping(ArrayList<Long> list1, ArrayList<Long> list2) {\n        if (list1.size()!= list2.size()) {\n            return false;\n        }\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) > list2.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))) == (false));",
            "assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))) == (false));",
            "assert(overlapping((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a javathon function to find a pair with highest product from a given array array list of integers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long> maxProduct(ArrayList<Long> arr) {\n        long max = Long.MIN_VALUE;\n        long maxProduct = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = arr.get(i);\n            if (product > max) {\n                max = product;\n                maxProduct = product;\n            }\n        }\n        return new Pair<>(maxProduct, max);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)7l, (long)0l, (long)8l, (long)4l)))).equals((Pair.with(7l, 8l))));",
            "assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)0l, (long)-1l, (long)-2l, (long)-4l, (long)5l, (long)0l, (long)-6l)))).equals((Pair.with(-4l, -6l))));",
            "assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((Pair.with(2l, 3l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given array list of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<String>> groupTuples(ArrayList<ArrayList<String>> Input) {\n        ArrayList<ArrayList<String>> Output = new ArrayList<>();\n        for (ArrayList<String> Input1 : Input) {\n            for (ArrayList<String> Input2 : Input) {\n                if (Input1.size() == Input2.size()) {\n                    Output.add(new ArrayList<>(Input1));\n                    Output.add(new ArrayList<>(Input2));\n                }\n            }\n        }\n        return Output;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(groupTuples((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"z\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"w\", (String)\"t\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"w\", (String)\"t\")))))));",
            "assert(groupTuples((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"e\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"e\")))))));",
            "assert(groupTuples((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"g\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"g\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"h\", (String)\"i\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"g\", (String)\"g\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"h\", (String)\"i\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a javathon function to find the element of an array array list having maximum length.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> FindMax(ArrayList<ArrayList<Object>> lst) {\n        ArrayList<Object> res = new ArrayList<>();\n        for (ArrayList<Object> list : lst) {\n            if (list.size() > res.size()) {\n                res = list;\n            }\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(FindMax((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\", (String)\"C\")))))).equals((new ArrayList<Object>(Arrays.asList((String)\"A\", (String)\"B\", (String)\"C\")))));",
            "assert(FindMax((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l)))));",
            "assert(FindMax((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)6l, (long)1l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)5l, (long)6l, (long)1l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a javathon function to find the cube sum of first n even natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long cubeSum(long n) {\n        long sum = 1;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(cubeSum((2l)) == (72l));",
            "assert(cubeSum((3l)) == (288l));",
            "assert(cubeSum((4l)) == (800l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of pair by the delimiter.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String concatenateTuple(Pair<String, String, Long, String> test_tup) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(test_tup.getLeft());\n        sb.append(test_tup.getMiddle());\n        sb.append(test_tup.getRight());\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(concatenateTuple((Pair.with(\"ID\", \"is\", 4l, \"UTS\"))).equals((\"ID-is-4-UTS\")));",
            "assert(concatenateTuple((Pair.with(\"QWE\", \"is\", 4l, \"RTY\"))).equals((\"QWE-is-4-RTY\")));",
            "assert(concatenateTuple((Pair.with(\"ZEN\", \"is\", 4l, \"OP\"))).equals((\"ZEN-is-4-OP\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a javathon function to find the average of cubes of first n natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float findAverageOfCube(long n) {\n        long sum = 0;\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i;\n            count += 1;\n        }\n        return sum / count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findAverageOfCube((2l)) == (4.5f));",
            "assert(findAverageOfCube((3l)) == (float)12l);",
            "assert(findAverageOfCube((1l)) == (float)1l);",
            "}",
            "}"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> extractRear(Pair<String, String, String> test_tuple) {\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < test_tuple.getRight().length(); i++) {\n            result.add(test_tuple.getRight().substring(i, i + 1));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractRear((Pair.with(\"Mers\", \"for\", \"Vers\"))).equals((new ArrayList<String>(Arrays.asList((String)\"s\", (String)\"r\", (String)\"s\")))));",
            "assert(extractRear((Pair.with(\"Avenge\", \"for\", \"People\"))).equals((new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"r\", (String)\"e\")))));",
            "assert(extractRear((Pair.with(\"Gotta\", \"get\", \"go\"))).equals((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"t\", (String)\"o\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subarray lists containing a particular element.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countElementInList(ArrayList<ArrayList<Object>> list1, Object x) {\n        long count = 0;\n        for (ArrayList<Object> list : list1) {\n            if (list.contains(x)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countElementInList((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)7l))))), (Object(1l))) == (3l));",
            "assert(countElementInList((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"C\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"D\", (String)\"E\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"B\", (String)\"C\", (String)\"D\"))))), (Object(\"A\"))) == (3l));",
            "assert(countElementInList((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"B\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"C\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"A\", (String)\"D\", (String)\"E\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"B\", (String)\"C\", (String)\"D\"))))), (Object(\"E\"))) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> filterOddnumbers(ArrayList<Long> nums) {\n        ArrayList<Long> oddnums = new ArrayList<>();\n        for (long num : nums) {\n            if (num % 2 == 0) {\n                oddnums.add(num);\n            }\n        }\n        return oddnums;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(filterOddnumbers((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l)))));",
            "assert(filterOddnumbers((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)45l, (long)67l, (long)84l, (long)93l)))).equals((new ArrayList<Long>(Arrays.asList((long)45l, (long)67l, (long)93l)))));",
            "assert(filterOddnumbers((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)8l, (long)6l, (long)4l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)9l, (long)3l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String changeDateFormat(String dt) {\n        String[] d = dt.split(\"-\");\n        String[] yyyy = d[0].split(\"-\");\n        String[] mm = d[1].split(\"-\");\n        String[] dd = d[2].split(\"-\");\n        String[] yyyy_mm = yyyy[0].split(\"-\");\n        String[] yyyy_dd = yyyy[1].split(\"-\");\n        String[] yyyy_mm_dd = yyyy_mm[0].split(\"-\");\n        String[] yyyy_dd_mm = yyyy_dd[0].split(\"-\");\n        String[] yyyy_dd_mm_yyyy = yyyy_dd_mm[1].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_mm = yyyy_dd_mm[2].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_dd = yyyy_dd_mm[3].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_dd_mm = yyyy_dd_mm[4].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_dd_mm_yyyy = yyyy_dd_mm_yyyy[5].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_dd_mm_yyyy_mm = yyyy_dd_mm_yyyy[6].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_dd_mm_yyyy_dd = yyyy_dd_mm_yyyy[7].split(\"-\");\n        String[] yyyy_dd_mm_yyyy_dd_mm_yyyy\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(changeDateFormat((\"2026-01-02\")).equals((\"02-01-2026\")));",
            "assert(changeDateFormat((\"2020-11-13\")).equals((\"13-11-2020\")));",
            "assert(changeDateFormat((\"2021-04-26\")).equals((\"26-04-2021\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array array list by using shell sort.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> shellSort(ArrayList<Long> my_list) {\n        ArrayList<Long> sorted_list = new ArrayList<>();\n        for (int i = 0; i < my_list.size(); i++) {\n            sorted_list.add(my_list.get(i));\n        }\n        return sorted_list;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(shellSort((new ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)4l, (long)5l, (long)3l, (long)2l, (long)12l, (long)81l, (long)56l, (long)95l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)12l, (long)12l, (long)23l, (long)56l, (long)81l, (long)95l)))));",
            "assert(shellSort((new ArrayList<Long>(Arrays.asList((long)24l, (long)22l, (long)39l, (long)34l, (long)87l, (long)73l, (long)68l)))).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l, (long)34l, (long)39l, (long)68l, (long)73l, (long)87l)))));",
            "assert(shellSort((new ArrayList<Long>(Arrays.asList((long)32l, (long)30l, (long)16l, (long)96l, (long)82l, (long)83l, (long)74l)))).equals((new ArrayList<Long>(Arrays.asList((long)16l, (long)30l, (long)32l, (long)74l, (long)82l, (long)83l, (long)96l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and pairs from the given two pairs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> andTuples(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        return new Pair<>(test_tup1.getLeft(), test_tup1.getRight(), test_tup2.getLeft(), test_tup2.getRight());\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(andTuples((Pair.with(10l, 4l, 6l, 9l)), (Pair.with(5l, 2l, 3l, 3l))).equals((Pair.with(0l, 0l, 2l, 1l))));",
            "assert(andTuples((Pair.with(1l, 2l, 3l, 4l)), (Pair.with(5l, 6l, 7l, 8l))).equals((Pair.with(1l, 2l, 3l, 0l))));",
            "assert(andTuples((Pair.with(8l, 9l, 11l, 12l)), (Pair.with(7l, 13l, 14l, 17l))).equals((Pair.with(0l, 9l, 10l, 0l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long parabolaDirectrix(long a, long b, long c) {\n        long d = a + b;\n        long e = c + b;\n        long f = a + b;\n        long g = c + b;\n        long h = a + b;\n        long i = a + b;\n        long j = c + b;\n        long k = a + b;\n        long l = c + b;\n        long m = a + b;\n        long n = c + b;\n        long o = a + b;\n        long p = a + b;\n        long q = c + b;\n        long r = a + b;\n        long s = c + b;\n        long t = a + b;\n        long u = a + b;\n        long v = c + b;\n        long w = a + b;\n        long x = a + b;\n        long y = c + b;\n        long z = a + b;\n        long a1 = a + b;\n        long b1 = c + b;\n        long c1 = a + b;\n        long d1 = c + b;\n        long e1 = a + b;\n        long f1 = c + b;\n        long g1 = a + b;\n        long h1 = c + b;\n        long i1 = a + b;\n        long j1 = c + b;\n        long k1 = a + b;\n        long l1 = c + b;\n        long m1 = a + b;\n        long n1 = c + b;\n        long o1 = a + b;\n        long p1 = a + b;\n        long q1 = c + b;\n        long r1 = a + b;\n        long s1 = c + b;\n        long t1 = a + b;\n        long u1 = a +\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));",
            "assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));",
            "assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two array lists and returns true if they have at least one common element.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Boolean> commonElement(ArrayList<Object> list1, ArrayList<Object> list2) {\n        if (list1.size() == 0) {\n            return Optional.empty();\n        }\n        if (list2.size() == 0) {\n            return Optional.empty();\n        }\n        int count = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == list2.get(i)) {\n                count++;\n            }\n        }\n        return Optional.of(count == list1.size());\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(commonElement((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Object>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))).equals(Optional.of(true)));",
            "assert(commonElement((new ArrayList<Object>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Object>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))).equals(Optional.empty()));",
            "assert(commonElement((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\"))), (new ArrayList<Object>(Arrays.asList((String)\"d\", (String)\"b\", (String)\"e\")))).equals(Optional.of(true)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float medianTrapezium(long base1, long base2, long height) {\n        long sum = base1 + base2;\n        long mid = sum / 2;\n        long med = (sum - mid) / 2;\n        return (float) (mid + med);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(medianTrapezium((15l), (25l), (35l)) == (float)20l);",
            "assert(medianTrapezium((10l), (20l), (30l)) == (float)15l);",
            "assert(medianTrapezium((6l), (9l), (4l)) == (7.5f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkGreater(ArrayList<Long> arr, long number) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        long max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            long temp = arr.get(i);\n            if (temp > max) {\n                max = temp;\n            }\n        }\n        return max > number;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkGreater((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (4l)) == (false));",
            "assert(checkGreater((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (8l)) == (true));",
            "assert(checkGreater((new ArrayList<Long>(Arrays.asList((long)9l, (long)7l, (long)4l, (long)8l, (long)6l, (long)1l))), (11l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textMatchOne(String text) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textMatchOne((\"ac\")) == (false));",
            "assert(textMatchOne((\"dc\")) == (false));",
            "assert(textMatchOne((\"abba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a javathon function to find the last digit of a given number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lastDigit(long n) {\n        long result = 0;\n        while (n > 0) {\n            result = (result * 10) + (n % 10);\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lastDigit((123l)) == (3l));",
            "assert(lastDigit((25l)) == (5l));",
            "assert(lastDigit((30l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a javathon function to return the negative numbers in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> negNos(ArrayList<Long> list1) {\n        ArrayList<Long> list2 = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            list2.add(list1.get(i) * -1);\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(negNos((new ArrayList<Long>(Arrays.asList((long)-1l, (long)4l, (long)5l, (long)-6l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-6l)))));",
            "assert(negNos((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l)))));",
            "assert(negNos((new ArrayList<Long>(Arrays.asList((long)-7l, (long)-6l, (long)8l, (long)9l)))).equals((new ArrayList<Long>(Arrays.asList((long)-7l, (long)-6l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeOdd(String str1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == '0') {\n                sb.append(str1.charAt(i));\n            } else {\n                sb.append(str1.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeOdd((\"python\")).equals((\"yhn\")));",
            "assert(removeOdd((\"program\")).equals((\"rga\")));",
            "assert(removeOdd((\"language\")).equals((\"agae\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional pair pairs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countBidirectional(ArrayList<Pair<Long, Long>> test_list) {\n        long count = 0;\n        for (Pair<Long, Long> pair : test_list) {\n            if (pair.getRight() > pair.getLeft()) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countBidirectional((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(9l, 1l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(2l, 1l))))) == (3l));",
            "assert(countBidirectional((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(1l, 3l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(9l, 1l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(2l, 1l))))) == (2l));",
            "assert(countBidirectional((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(9l, 2l), (Pair<Long, Long>)Pair.with(6l, 5l), (Pair<Long, Long>)Pair.with(2l, 1l))))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join an array array list of multiple integers into a single integer.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long multipleToSingle(ArrayList<Long> L) {\n        long result = 0;\n        for (int i = 0; i < L.size(); i++) {\n            result += L.get(i);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)11l, (long)33l, (long)50l)))) == (113350l));",
            "assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (-123456l));",
            "assert(multipleToSingle((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)20l, (long)25l)))) == (10152025l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Create a list of all the possible adverbs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, String> findAdverbPosition(String text) {\n        List<String> adverbs = Arrays.asList(\"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"adverb\", \"\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findAdverbPosition((\"clearly!! we can see the sky\")).equals((Pair.with(0l, 7l, \"clearly\"))));",
            "assert(findAdverbPosition((\"seriously!! there are many roses\")).equals((Pair.with(0l, 9l, \"seriously\"))));",
            "assert(findAdverbPosition((\"unfortunately!! sita is going to home\")).equals((Pair.with(0l, 13l, \"unfortunately\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long surfaceareaCube(long l) {\n        long sum = 0;\n        for (int i = 0; i < l; i++) {\n            sum += Math.pow(i, 2);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(surfaceareaCube((5l)) == (150l));",
            "assert(surfaceareaCube((3l)) == (54l));",
            "assert(surfaceareaCube((10l)) == (600l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array array list of integers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float positiveCount(ArrayList<Long> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(positiveCount((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)0l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (0.54f));",
            "assert(positiveCount((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)4l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (0.69f));",
            "assert(positiveCount((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l)))) == (0.56f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a javathon function to find the largest negative number from the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long largestNeg(ArrayList<Long> list1) {\n        long max = Long.MIN_VALUE;\n        for (int i = 0; i < list1.size(); i++) {\n            long temp = list1.get(i);\n            if (temp > max) {\n                max = temp;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(largestNeg((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-4l, (long)-6l)))) == (-6l));",
            "assert(largestNeg((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)-8l, (long)-9l)))) == (-9l));",
            "assert(largestNeg((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)-1l)))) == (-1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each array list by k in the given array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> trimTuple(ArrayList<ArrayList<Long>> test_list, long K) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (ArrayList<Long> list : test_list) {\n            ArrayList<Long> trimmed = new ArrayList<>();\n            for (long i = 0; i < list.size(); i++) {\n                trimmed.add(list.get(i) - K);\n            }\n            result.add(trimmed);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(trimTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)9l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)1l, (long)2l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)2l, (long)1l, (long)7l))))), (2l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)))))));",
            "assert(trimTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)2l, (long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)9l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)1l, (long)2l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)8l, (long)2l, (long)1l, (long)7l))))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)9l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)2l, (long)1l)))))));",
            "assert(trimTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)4l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)8l, (long)12l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)9l, (long)7l))))), (1l)).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)9l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of array list elements in the given two array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> indexMultiplication(ArrayList<ArrayList<Long>> test_tup1, ArrayList<ArrayList<Long>> test_tup2) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            ArrayList<Long> tup1 = test_tup1.get(i);\n            ArrayList<Long> tup2 = test_tup2.get(i);\n            ArrayList<Long> result_tup1 = new ArrayList<>();\n            ArrayList<Long> result_tup2 = new ArrayList<>();\n            for (int j = 0; j < tup1.size(); j++) {\n                result_tup1.add(tup1.get(j) * tup2.get(j));\n            }\n            for (int j = 0; j < tup2.size(); j++) {\n                result_tup2.add(tup2.get(j) * tup1.get(j));\n            }\n            result.add(result_tup1);\n            result.add(result_tup2);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(indexMultiplication((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)10l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)21l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)45l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)30l)))))));",
            "assert(indexMultiplication((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)11l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)14l, (long)32l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)20l, (long)60l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)20l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)16l, (long)44l)))))));",
            "assert(indexMultiplication((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)12l))))), (new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l)))))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)24l, (long)45l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)30l, (long)77l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)33l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)27l, (long)60l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a javathon function to count the occurence of all elements of array list in a pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countOccurrence(Object tup, ArrayList<Object> lst) {\n        long count = 0;\n        for (Object o : lst) {\n            if (o instanceof Tuple) {\n                count += countOccurrence((Tuple) o, lst);\n            } else {\n                count += 1;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countOccurrence(Pair.with(\"a\", \"a\", \"c\", \"b\", \"d\"), (new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\")))) == (3l));",
            "assert(countOccurrence(Pair.with(1l, 2l, 3l, 1l, 4l, 6l, 7l, 1l, 4l), (new ArrayList<Object>(Arrays.asList((long)1l, (long)4l, (long)7l)))) == (6l));",
            "assert(countOccurrence(Pair.with(1l, 2l, 3l, 4l, 5l, 6l), (new ArrayList<Object>(Arrays.asList((long)1l, (long)2l)))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> cubeNums(ArrayList<Long> nums) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(cubeNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)8l, (long)27l, (long)64l, (long)125l, (long)216l, (long)343l, (long)512l, (long)729l, (long)1000l)))));",
            "assert(cubeNums((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l)))).equals((new ArrayList<Long>(Arrays.asList((long)1000l, (long)8000l, (long)27000l)))));",
            "assert(cubeNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)15l)))).equals((new ArrayList<Long>(Arrays.asList((long)1728l, (long)3375l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long calSum(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(calSum((9l)) == (49l));",
            "assert(calSum((10l)) == (66l));",
            "assert(calSum((11l)) == (88l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given array list of string values.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> extractString(ArrayList<String> str, long l) {\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < str.size(); i++) {\n            result.add(str.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractString((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"list\", (String)\"exercises\", (String)\"practice\", (String)\"solution\"))), (8l)).equals((new ArrayList<String>(Arrays.asList((String)\"practice\", (String)\"solution\")))));",
            "assert(extractString((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"list\", (String)\"exercises\", (String)\"practice\", (String)\"solution\"))), (6l)).equals((new ArrayList<String>(Arrays.asList((String)\"Python\")))));",
            "assert(extractString((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"list\", (String)\"exercises\", (String)\"practice\", (String)\"solution\"))), (9l)).equals((new ArrayList<String>(Arrays.asList((String)\"exercises\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeWhitespaces(String text1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text1.length(); i++) {\n            char c = text1.charAt(i);\n            if (c =='') {\n                sb.append(c);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeWhitespaces((\" Google    Flutter \")).equals((\"GoogleFlutter\")));",
            "assert(removeWhitespaces((\" Google    Dart \")).equals((\"GoogleDart\")));",
            "assert(removeWhitespaces((\" iOS    Swift \")).equals((\"iOSSwift\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lossAmount(long actual_cost, long sale_amount) {\n        return actual_cost - sale_amount;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lossAmount((1500l), (1200l)) == (0l));",
            "assert(lossAmount((100l), (200l)) == (100l));",
            "assert(lossAmount((2000l), (5000l)) == (3000l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a javathon function to find the sum of even factors of a number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumofFactors(long n) {\n        long sum = 1;\n        while (n > 1) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumofFactors((18l)) == (26l));",
            "assert(sumofFactors((30l)) == (48l));",
            "assert(sumofFactors((6l)) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textMatchWordz(String text) {\n        return text.matches(\"[z]\");\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textMatchWordz((\"pythonz.\")) == (true));",
            "assert(textMatchWordz((\"xyz.\")) == (true));",
            "assert(textMatchWordz((\"  lang  .\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkMonthnumbNumber(long monthnum2) {\n        return (monthnum2 % 31) == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkMonthnumbNumber((5l)) == (true));",
            "assert(checkMonthnumbNumber((2l)) == (false));",
            "assert(checkMonthnumbNumber((6l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given array list of string values.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> reverseStringList(ArrayList<String> stringlist) {\n        ArrayList<String> reversed = new ArrayList<>();\n        for (int i = 0; i < stringlist.size(); i++) {\n            reversed.add(stringlist.get(i));\n        }\n        return reversed;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(reverseStringList((new ArrayList<String>(Arrays.asList((String)\"Red\", (String)\"Green\", (String)\"Blue\", (String)\"White\", (String)\"Black\")))).equals((new ArrayList<String>(Arrays.asList((String)\"deR\", (String)\"neerG\", (String)\"eulB\", (String)\"etihW\", (String)\"kcalB\")))));",
            "assert(reverseStringList((new ArrayList<String>(Arrays.asList((String)\"john\", (String)\"amal\", (String)\"joel\", (String)\"george\")))).equals((new ArrayList<String>(Arrays.asList((String)\"nhoj\", (String)\"lama\", (String)\"leoj\", (String)\"egroeg\")))));",
            "assert(reverseStringList((new ArrayList<String>(Arrays.asList((String)\"jack\", (String)\"john\", (String)\"mary\")))).equals((new ArrayList<String>(Arrays.asList((String)\"kcaj\", (String)\"nhoj\", (String)\"yram\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a javathon function to find the subarray list having minimum length.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> FindMin(ArrayList<ArrayList<Object>> lst) {\n        ArrayList<Object> res = new ArrayList<>();\n        for (ArrayList<Object> l : lst) {\n            if (l.size() < 2) {\n                res.add(l.get(0));\n            } else {\n                res.add(FindMin(l));\n            }\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(FindMin((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l)))));",
            "assert(FindMin((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)7l, (long)8l)))))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)1l)))));",
            "assert(FindMin((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")))))).equals((new ArrayList<Object>(Arrays.asList((String)\"x\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long rectangleArea(long l, long b) {\n        long x = l;\n        long y = b;\n        long x1 = x;\n        long y1 = y;\n        long x2 = x;\n        long y2 = y;\n        long x3 = x;\n        long y3 = y;\n        long x4 = x;\n        long y4 = y;\n        long x5 = x;\n        long y5 = y;\n        long x6 = x;\n        long y6 = y;\n        long x7 = x;\n        long y7 = y;\n        long x8 = x;\n        long y8 = y;\n        long x9 = x;\n        long y9 = y;\n        long x10 = x;\n        long y10 = y;\n        long x11 = x;\n        long y11 = y;\n        long x12 = x;\n        long y12 = y;\n        long x13 = x;\n        long y13 = y;\n        long x14 = x;\n        long y14 = y;\n        long x15 = x;\n        long y15 = y;\n        long x16 = x;\n        long y16 = y;\n        long x17 = x;\n        long y17 = y;\n        long x18 = x;\n        long y18 = y;\n        long x19 = x;\n        long y19 = y;\n        long x20 = x;\n        long y20 = y;\n        long x21 = x;\n        long y21 = y;\n        long x22 = x;\n        long y22 = y;\n        long x23 = x;\n        long y23 = y;\n        long x24 = x;\n        long y24 = y;\n        long x25 = x;\n        long y25 = y;\n        long x26 = x;\n        \n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(rectangleArea((10l), (20l)) == (200l));",
            "assert(rectangleArea((10l), (5l)) == (50l));",
            "assert(rectangleArea((4l), (2l)) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeUppercase(String str1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeUppercase((\"cAstyoUrFavoRitETVshoWs\")).equals((\"cstyoravoitshos\")));",
            "assert(removeUppercase((\"wAtchTheinTernEtrAdIo\")).equals((\"wtchheinerntrdo\")));",
            "assert(removeUppercase((\"VoicESeaRchAndreComMendaTionS\")).equals((\"oiceachndreomendaion\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a javathon function to get the first element of each subarray list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> Extract(ArrayList<ArrayList<Long>> lst) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (ArrayList<Long> sublist : lst) {\n            res.add(sublist.get(0));\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(Extract((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l)))))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)6l)))));",
            "assert(Extract((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))));",
            "assert(Extract((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)1l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a javathon function to count the upper case characters in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long upperCtr(String str) {\n        long result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(upperCtr((\"PYthon\")) == (1l));",
            "assert(upperCtr((\"BigData\")) == (1l));",
            "assert(upperCtr((\"program\")) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray array list of the given array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxSubarrayProduct(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = arr.get(i);\n            if (product > max) {\n                max = product;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)-3l, (long)0l, (long)7l, (long)-8l, (long)-2l)))) == (112l));",
            "assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)6l, (long)-3l, (long)-10l, (long)0l, (long)2l)))) == (180l));",
            "assert(maxSubarrayProduct((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-40l, (long)0l, (long)-2l, (long)-3l)))) == (80l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in a hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkValue(HashMap<String,Long> dict, long n) {\n        if (dict.size() == 0) {\n            return true;\n        }\n        for (int i = 0; i < dict.size(); i++) {\n            if (dict.get(i)!= n) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkValue((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 12l, \"Alden Cantrell\", 12l, \"Kierra Gentry\", 12l, \"Pierre Cox\", 12l))), (10l)) == (false));",
            "assert(checkValue((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 12l, \"Alden Cantrell\", 12l, \"Kierra Gentry\", 12l, \"Pierre Cox\", 12l))), (12l)) == (true));",
            "assert(checkValue((new HashMap<String,Long>(Map.of(\"Cierra Vega\", 12l, \"Alden Cantrell\", 12l, \"Kierra Gentry\", 12l, \"Pierre Cox\", 12l))), (5l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> dropEmpty(HashMap<String,Optional<String>> dict1) {\n        HashMap<String,String> dict2 = new HashMap<>();\n        for (Map.Entry<String,Optional<String>> entry : dict1.entrySet()) {\n            if (entry.getValue().isPresent()) {\n                dict2.put(entry.getKey(), entry.getValue().get());\n            }\n        }\n        return dict2;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(dropEmpty(new HashMap<String,String>(Map.of(\"c1\", \"Red\", \"c2\", \"Green\", \"c3\", Optional.empty()))).equals((new HashMap<String,String>(Map.of(\"c1\", \"Red\", \"c2\", \"Green\")))));",
            "assert(dropEmpty(new HashMap<String,String>(Map.of(\"c1\", \"Red\", \"c2\", Optional.empty(), \"c3\", Optional.empty()))).equals((new HashMap<String,String>(Map.of(\"c1\", \"Red\")))));",
            "assert(dropEmpty(new HashMap<String,Optional.empty()>(Map.of(\"c1\", Optional.empty(), \"c2\", \"Green\", \"c3\", Optional.empty()))).equals((new HashMap<String,String>(Map.of(\"c2\", \"Green\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxProduct(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long product = arr.get(i);\n            if (product > max) {\n                max = product;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)3l, (long)100l, (long)4l, (long)5l, (long)150l, (long)6l)))) == (3000l));",
            "assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)4l, (long)42l, (long)55l, (long)68l, (long)80l)))) == (50265600l));",
            "assert(maxProduct((new ArrayList<Long>(Arrays.asList((long)10l, (long)22l, (long)9l, (long)33l, (long)21l, (long)50l, (long)41l, (long)60l)))) == (2460l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Return the new pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> addPairwise(Pair<Long, Long, Long, Long, Long> test_tup) {\n        Pair<Long, Long> new_pair = new Pair<>(test_tup.getFirst(), test_tup.getSecond());\n        new_pair.add(test_tup.getSecond());\n        return new_pair;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(addPairwise((Pair.with(1l, 5l, 7l, 8l, 10l))).equals((Pair.with(6l, 12l, 15l, 18l))));",
            "assert(addPairwise((Pair.with(2l, 6l, 8l, 9l, 11l))).equals((Pair.with(8l, 14l, 17l, 20l))));",
            "assert(addPairwise((Pair.with(3l, 7l, 9l, 10l, 12l))).equals((Pair.with(10l, 16l, 19l, 22l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a javathon function to find the product of the array array list multiplication modulo n.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findRemainder(ArrayList<Long> arr, long n) {\n        long product = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            product *= arr.get(i);\n        }\n        return product % n;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findRemainder((new ArrayList<Long>(Arrays.asList((long)100l, (long)10l, (long)5l, (long)25l, (long)35l, (long)14l))), (11l)) == (9l));",
            "assert(findRemainder((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l))), (1l)) == (0l));",
            "assert(findRemainder((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l))), (2l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a javathon function to check whether the given array list contains consecutive numbers or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkConsecutive(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        while (i < l.size() - 1) {\n            if (l.get(i) == l.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (true));",
            "assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)6l)))) == (false));",
            "assert(checkConsecutive((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String replaceChar(String str1, String ch, String newch) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (c == ch) {\n                sb.append(newch);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(replaceChar((\"polygon\"), (\"y\"), (\"l\")).equals((\"pollgon\")));",
            "assert(replaceChar((\"character\"), (\"c\"), (\"a\")).equals((\"aharaater\")));",
            "assert(replaceChar((\"python\"), (\"l\"), (\"a\")).equals((\"python\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a hash map by value.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<String, Long>> sortCounter(HashMap<String,Long> dict1) {\n        ArrayList<Pair<String, Long>> result = new ArrayList<>();\n        for (Map.Entry<String, Long> entry : dict1.entrySet()) {\n            result.add(new Pair<>(entry.getKey(), entry.getValue()));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sortCounter((new HashMap<String,Long>(Map.of(\"Math\", 81l, \"Physics\", 83l, \"Chemistry\", 87l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Chemistry\", 87l), (Pair<String, Long>)Pair.with(\"Physics\", 83l), (Pair<String, Long>)Pair.with(\"Math\", 81l))))));",
            "assert(sortCounter((new HashMap<String,Long>(Map.of(\"Math\", 400l, \"Physics\", 300l, \"Chemistry\", 250l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Math\", 400l), (Pair<String, Long>)Pair.with(\"Physics\", 300l), (Pair<String, Long>)Pair.with(\"Chemistry\", 250l))))));",
            "assert(sortCounter((new HashMap<String,Long>(Map.of(\"Math\", 900l, \"Physics\", 1000l, \"Chemistry\", 1250l)))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Chemistry\", 1250l), (Pair<String, Long>)Pair.with(\"Physics\", 1000l), (Pair<String, Long>)Pair.with(\"Math\", 900l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a javathon function to find the sum of the largest and smallest value in a given array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long bigSum(ArrayList<Long> nums) {\n        long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(bigSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (4l));",
            "assert(bigSum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)2l, (long)3l, (long)4l)))) == (3l));",
            "assert(bigSum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l)))) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a javathon function to convert the given string to lower case.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String isLower(String string) {\n        String lower = string.toLowerCase();\n        return lower.equals(\"a\")? \"A\" : lower.equals(\"b\")? \"B\" : lower.equals(\"c\")? \"C\" : lower.equals(\"d\")? \"D\" : lower.equals(\"e\")? \"E\" : lower.equals(\"f\")? \"F\" : lower.equals(\"g\")? \"G\" : lower.equals(\"h\")? \"H\" : lower.equals(\"i\")? \"I\" : lower.equals(\"j\")? \"J\" : lower.equals(\"k\")? \"K\" : lower.equals(\"l\")? \"L\" : lower.equals(\"m\")? \"M\" : lower.equals(\"n\")? \"N\" : lower.equals(\"o\")? \"O\" : lower.equals(\"p\")? \"P\" : lower.equals(\"q\")? \"Q\" : lower.equals(\"r\")? \"R\" : lower.equals(\"s\")? \"S\" : lower.equals(\"t\")? \"T\" : lower.equals(\"u\")? \"U\" : lower.equals(\"v\")? \"V\" : lower.equals(\"w\")? \"W\" : lower.equals(\"x\")? \"X\" : lower.equals(\"y\")? \"Y\" : lower.equals(\"z\")? \"Z\" : lower.equals(\"a\")? \"A\" : lower.equals(\"b\")? \"B\" : lower.equals(\"c\")? \"C\" : lower.equals(\"d\")? \"D\" : lower.equals(\"e\")? \"E\" : lower.equals(\"f\")? \"F\" : lower.equals(\"g\")? \"G\" : lower.equals(\"h\")? \"H\" : lower\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isLower((\"InValid\")).equals((\"invalid\")));",
            "assert(isLower((\"TruE\")).equals((\"true\")));",
            "assert(isLower((\"SenTenCE\")).equals((\"sentence\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeLowercase(String str1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (Character.isLowerCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeLowercase((\"PYTHon\")).equals((\"PYTH\")));",
            "assert(removeLowercase((\"FInD\")).equals((\"FID\")));",
            "assert(removeLowercase((\"STRinG\")).equals((\"STRG\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a javathon function to find the first digit of a given number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long firstDigit(long n) {\n        long result = 1;\n        while (n > 0) {\n            result *= 10;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(firstDigit((123l)) == (1l));",
            "assert(firstDigit((456l)) == (4l));",
            "assert(firstDigit((12l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given array list of numbers, returned in descending order.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> heapQueueLargest(ArrayList<Long> nums, long n) {\n        ArrayList<Long> heap = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            long temp = nums.get(i);\n            if (temp > n) {\n                heap.add(temp);\n            }\n        }\n        return heap;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l)))));",
            "assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l)))));",
            "assert(heapQueueLargest((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)22l, (long)58l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)85l, (long)75l, (long)65l, (long)58l, (long)35l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a javathon function which takes an array array list of integers and only returns the odd ones.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> Split(ArrayList<Long> list) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) % 2 == 0) {\n                result.add(list.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(Split((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))));",
            "assert(Split((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l, (long)13l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)13l)))));",
            "assert(Split((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)9l, (long)1l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a javathon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long difference(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(difference((3l)) == (30l));",
            "assert(difference((5l)) == (210l));",
            "assert(difference((2l)) == (6l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a javathon function to count the number of pairs whose xor value is odd.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findOddPair(ArrayList<Long> A, long N) {\n        long odd = 0;\n        for (int i = 0; i < A.size(); i++) {\n            if (A.get(i) % 2 == 1) odd++;\n        }\n        return odd;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findOddPair((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)7l, (long)2l, (long)1l))), (5l)) == (6l));",
            "assert(findOddPair((new ArrayList<Long>(Arrays.asList((long)7l, (long)2l, (long)8l, (long)1l, (long)0l, (long)5l, (long)11l))), (7l)) == (12l));",
            "assert(findOddPair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (3l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String toggleString(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(Character.toUpperCase(c));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(toggleString((\"Python\")).equals((\"pYTHON\")));",
            "assert(toggleString((\"Pangram\")).equals((\"pANGRAM\")));",
            "assert(toggleString((\"LIttLE\")).equals((\"liTTle\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a javathon function to find the sum of the per-digit difference between two integers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long digitDistanceNums(long n1, long n2) {\n        long sum = 0;\n        for (int i = 0; i < n1; i++) {\n            sum += (n2 - n1 + i) * (n2 - n1 + i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(digitDistanceNums((1l), (2l)) == (1l));",
            "assert(digitDistanceNums((23l), (56l)) == (6l));",
            "assert(digitDistanceNums((123l), (256l)) == (7l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subarray list in the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxSubArraySum(ArrayList<Long> a, long size) {\n        long sum = 0;\n        for (int i = 0; i < a.size(); i++) {\n            sum += a.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxSubArraySum((new ArrayList<Long>(Arrays.asList((long)-2l, (long)-3l, (long)4l, (long)-1l, (long)-2l, (long)1l, (long)5l, (long)-3l))), (8l)) == (7l));",
            "assert(maxSubArraySum((new ArrayList<Long>(Arrays.asList((long)-3l, (long)-4l, (long)5l, (long)-2l, (long)-3l, (long)2l, (long)6l, (long)-4l))), (8l)) == (8l));",
            "assert(maxSubArraySum((new ArrayList<Long>(Arrays.asList((long)-4l, (long)-5l, (long)6l, (long)-3l, (long)-4l, (long)3l, (long)7l, (long)-5l))), (8l)) == (10l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given array lists and output them in sorted order.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> unionElements(ArrayList<Long> test_tup1, ArrayList<Long> test_tup2) {\n        ArrayList<Long> union = new ArrayList<>();\n        for (int i = 0; i < test_tup1.size(); i++) {\n            long t1 = test_tup1.get(i);\n            long t2 = test_tup2.get(i);\n            if (t1 == t2) {\n                union.add(t1);\n            } else {\n                union.add(t1);\n                union.add(t2);\n            }\n        }\n        return union;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(unionElements((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)7l, (long)4l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)10l)))));",
            "assert(unionElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))));",
            "assert(unionElements((new ArrayList<Long>(Arrays.asList((long)11l, (long)12l, (long)13l, (long)14l))), (new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)16l, (long)17l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)12l, (long)13l, (long)14l, (long)15l, (long)16l, (long)17l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a javathon function to find the length of the longest subarray lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long FindMaxLength(ArrayList<ArrayList<Long>> lst) {\n        long max = 0;\n        for (ArrayList<Long> list : lst) {\n            long len = list.size();\n            if (len > max) {\n                max = len;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(FindMaxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)))))) == (4l));",
            "assert(FindMaxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))))) == (3l));",
            "assert(FindMaxLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)22l, (long)23l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)14l, (long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l, (long)50l)))))) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> extractValues(String text) {\n        ArrayList<String> result = new ArrayList<>();\n        String[] words = text.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.startsWith(\"\\\"\")) {\n                result.add(word.substring(1, word.length() - 1));\n            } else {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractValues((\"\"Python\", \"PHP\", \"Java\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"Python\", (String)\"PHP\", (String)\"Java\")))));",
            "assert(extractValues((\"\"python\",\"program\",\"language\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"program\", (String)\"language\")))));",
            "assert(extractValues((\"\"red\",\"blue\",\"green\",\"yellow\"\")).equals((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"blue\", (String)\"green\", (String)\"yellow\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a javathon function which takes an array array list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countPairs(ArrayList<Long> arr, long n) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l))), (3l)) == (2l));",
            "assert(countPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))), (4l)) == (0l));",
            "assert(countPairs((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (5l)) == (10l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a javathon function to split a string into characters.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<String> split(String word) {\n        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0; i < word.length(); i++) {\n            if (Character.isWhitespace(word.charAt(i))) {\n                result.add(word.substring(0, i));\n            } else {\n                result.add(word.substring(0, i));\n                result.add(word.substring(i, i + 1));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(split((\"python\")).equals((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"y\", (String)\"t\", (String)\"h\", (String)\"o\", (String)\"n\")))));",
            "assert(split((\"Name\")).equals((new ArrayList<String>(Arrays.asList((String)\"N\", (String)\"a\", (String)\"m\", (String)\"e\")))));",
            "assert(split((\"program\")).equals((new ArrayList<String>(Arrays.asList((String)\"p\", (String)\"r\", (String)\"o\", (String)\"g\", (String)\"r\", (String)\"a\", (String)\"m\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumDigits(long n) {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumDigits((345l)) == (12l));",
            "assert(sumDigits((12l)) == (3l));",
            "assert(sumDigits((97l)) == (16l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified array list is sorted or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean issortList(ArrayList<Long> list1) {\n        return list1.stream().allMatch(l -> l > 0);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(issortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)16l, (long)17l)))) == (true));",
            "assert(issortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)10l, (long)12l, (long)14l, (long)20l, (long)17l)))) == (false));",
            "assert(issortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)6l, (long)8l, (long)10l, (long)15l, (long)14l, (long)20l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create an array array list of N empty dictionaries.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<HashMap<Optional.empty(),Optional.empty()>> emptyList(long length) {\n        ArrayList<HashMap<Optional.empty(),Optional.empty()>> list = new ArrayList<>();\n        for (int i = 0; i < length; i++) {\n            HashMap<Optional.empty(),Optional.empty()> map = new HashMap<>();\n            map.put(Optional.empty(), Optional.empty());\n            list.add(map);\n        }\n        return list;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(emptyList((5l)).equals(Optional.of(new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));",
            "assert(emptyList((6l)).equals(Optional.of(new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));",
            "assert(emptyList((7l)).equals(Optional.of(new ArrayList<HashMap<Long,Long>>(Arrays.asList((HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()), (HashMap<Long,Long>)new HashMap<Long,Long>(Map.of()))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray list of strings in a given array list of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<String>> sortSublists(ArrayList<ArrayList<String>> list1) {\n        ArrayList<ArrayList<String>> list2 = new ArrayList<>();\n        for (ArrayList<String> list : list1) {\n            list2.add(new ArrayList<>(list));\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\", (String)\"black\", (String)\"orange\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"white\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\", (String)\"orange\", (String)\"white\")))))));",
            "assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"black\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"green\", (String)\"orange\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"white\")))))));",
            "assert(sortSublists((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"g\", (String)\"h\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"f\", (String)\"e\")))))).equals((new ArrayList<ArrayList<String>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\", (String)\"d\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"g\", (String)\"h\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"e\", (String)\"f\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a javathon function to check if a given number is one less than twice its reverse.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checks(long n) {\n        return n % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checks((70l)) == (false));",
            "assert(checks((23l)) == (false));",
            "assert(checks((73l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a javathon function to remove duplicate numbers from a given number of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> twoUniqueNums(ArrayList<Long> nums) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == nums.get(i + 1)) {\n                result.add(nums.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)5l)))));",
            "assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l, (long)5l)))));",
            "assert(twoUniqueNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a javathon function to calculate the product of the unique numbers in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long uniqueProduct(ArrayList<Long> list_data) {\n        long product = 1;\n        for (int i = 0; i < list_data.size(); i++) {\n            product *= list_data.get(i);\n        }\n        return product;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(uniqueProduct((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l, (long)20l, (long)50l, (long)60l, (long)40l)))) == (720000000l));",
            "assert(uniqueProduct((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l)))) == (6l));",
            "assert(uniqueProduct((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)0l, (long)1l, (long)1l)))) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "The area of a cylinder",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float surfaceareaCylinder(long r, long h) {\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(surfaceareaCylinder((10l), (5l)) == (942.45f));",
            "assert(surfaceareaCylinder((4l), (5l)) == (226.18800000000002f));",
            "assert(surfaceareaCylinder((4l), (10l)) == (351.848f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a javathon function to check whether an array array list is subarray list of another or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSubArray(ArrayList<Long> A, ArrayList<Long> B) {\n        if (A.size()!= B.size()) {\n            return false;\n        }\n        for (int i = 0; i < A.size(); i++) {\n            if (A.get(i)!= B.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isSubArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))) == (false));",
            "assert(isSubArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l)))) == (true));",
            "assert(isSubArray((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)0l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a javathon function to find the last digit in factorial of a given number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lastDigitFactorial(long n) {\n        long result = 1;\n        while (n > 1) {\n            result *= n;\n            n /= 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lastDigitFactorial((4l)) == (4l));",
            "assert(lastDigitFactorial((21l)) == (0l));",
            "assert(lastDigitFactorial((30l)) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 array lists of the same length into a single flat array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> interleaveLists(ArrayList<Long> list1, ArrayList<Long> list2, ArrayList<Long> list3) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            result.add(list1.get(i));\n        }\n        for (int i = 0; i < list2.size(); i++) {\n            result.add(list2.get(i));\n        }\n        for (int i = 0; i < list3.size(); i++) {\n            result.add(list3.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(interleaveLists((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l, (long)50l, (long)60l, (long)70l))), (new ArrayList<Long>(Arrays.asList((long)100l, (long)200l, (long)300l, (long)400l, (long)500l, (long)600l, (long)700l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)100l, (long)2l, (long)20l, (long)200l, (long)3l, (long)30l, (long)300l, (long)4l, (long)40l, (long)400l, (long)5l, (long)50l, (long)500l, (long)6l, (long)60l, (long)600l, (long)7l, (long)70l, (long)700l)))));",
            "assert(interleaveLists((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)5l, (long)20l, (long)2l, (long)10l)))));",
            "assert(interleaveLists((new ArrayList<Long>(Arrays.asList((long)11l, (long)44l))), (new ArrayList<Long>(Arrays.asList((long)10l, (long)15l))), (new ArrayList<Long>(Arrays.asList((long)20l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)11l, (long)10l, (long)20l, (long)44l, (long)15l, (long)5l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Create a new pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> findDissimilar(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        Pair<Long, Long> new_pair = new Pair<>(test_tup1.getFirst(), test_tup1.getSecond());\n        Pair<Long, Long> new_pair2 = new Pair<>(test_tup2.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair3 = new Pair<>(test_tup1.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair4 = new Pair<>(test_tup2.getFirst(), test_tup1.getSecond());\n        Pair<Long, Long> new_pair5 = new Pair<>(test_tup1.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair6 = new Pair<>(test_tup2.getFirst(), test_tup1.getSecond());\n        Pair<Long, Long> new_pair7 = new Pair<>(test_tup1.getFirst(), test_tup2.getSecond());\n        Pair<Long, Long> new_pair8 = new Pair<>(test_tup2.getFirst(), test_tup1.getSecond());\n        Pair<Long, Long> new_pair9 = new Pair<>(test_tup1\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findDissimilar((Pair.with(3l, 4l, 5l, 6l)), (Pair.with(5l, 7l, 4l, 10l))).equals((Pair.with(3l, 6l, 7l, 10l))));",
            "assert(findDissimilar((Pair.with(1l, 2l, 3l, 4l)), (Pair.with(7l, 2l, 3l, 9l))).equals((Pair.with(1l, 4l, 7l, 9l))));",
            "assert(findDissimilar((Pair.with(21l, 11l, 25l, 26l)), (Pair.with(26l, 34l, 21l, 36l))).equals((Pair.with(34l, 36l, 11l, 25l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a javathon function to find the largest number that can be formed with the given array list of digits.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findMaxNum(ArrayList<Long> arr) {\n        long max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (321l));",
            "assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)1l)))) == (6541l));",
            "assert(findMaxNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)9l)))) == (9321l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Object extractEven(Pair<Long, Long, Pair<Long, Long, Pair<Long, Long>>, Long, Long> test_tuple) {\n        return test_tuple.getRight();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractEven((Pair.with(4l, 5l, Pair.with(7l, 6l, Pair.with(2l, 4l)), 6l, 8l))).equals(Pair.with(4l, Pair.with(6l, Pair.with(2l, 4l)), 6l, 8l)));",
            "assert(extractEven((Pair.with(5l, 6l, Pair.with(8l, 7l, Pair.with(4l, 8l)), 7l, 9l))).equals(Pair.with(6l, Pair.with(8l, Pair.with(4l, 8l)))));",
            "assert(extractEven((Pair.with(5l, 6l, Pair.with(9l, 8l, Pair.with(4l, 6l)), 8l, 10l))).equals(Pair.with(6l, Pair.with(8l, Pair.with(4l, 6l)), 8l, 10l)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a javathon function to find the surface area of a square javaramid with a given base edge and height.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long surfaceArea(long b, long s) {\n        long a = b;\n        long b2 = b;\n        long c = b;\n        long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n        long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n        long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n        long d = b;\n        long e = b;\n        long f = b;\n        long g = b;\n        long h = b;\n        long i = b;\n        long j = b;\n        long k = b;\n        long l = b;\n        long m = b;\n        long n = b;\n        long o = b;\n        long p = b;\n        long q = b;\n        long r = b;\n        long s = b;\n        long t = b;\n        long u = b;\n        long v = b;\n        long w = b;\n        long x = b;\n        long y = b;\n        long z = b;\n        long a = b;\n        long b = b;\n        long c = b;\n        long d = b;\n        long e = b;\n        long f = b;\n        \n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(surfaceArea((3l), (4l)) == (33l));",
            "assert(surfaceArea((4l), (5l)) == (56l));",
            "assert(surfaceArea((1l), (2l)) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long catalanNumber(long num) {\n        long result = 1;\n        while (num > 0) {\n            result *= num / 10;\n            num = num % 10;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(catalanNumber((10l)) == (16796l));",
            "assert(catalanNumber((9l)) == (4862l));",
            "assert(catalanNumber((7l)) == (429l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String findAdverbs(String text) {\n        String[] adverbs = text.split(\"\\\\s+\");\n        StringBuilder sb = new StringBuilder();\n        for (String adverb : adverbs) {\n            if (adverb.endsWith(\"ly\")) {\n                sb.append(adverb.substring(0, adverb.length() - 2));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findAdverbs((\"Clearly, he has no excuse for such behavior.\")).equals((\"0-7: Clearly\")));",
            "assert(findAdverbs((\"Please handle the situation carefuly\")).equals((\"28-36: carefuly\")));",
            "assert(findAdverbs((\"Complete the task quickly\")).equals((\"18-25: quickly\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a javathon function to split an array array list at the nth eelment and add the first part to the end.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> splitArr(ArrayList<Long> l, long n) {\n        ArrayList<Long> r = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            r.add(l.get(i));\n        }\n        if (n > 0) {\n            r.add(l.get(i));\n        }\n        return r;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(splitArr((new ArrayList<Long>(Arrays.asList((long)12l, (long)10l, (long)5l, (long)6l, (long)52l, (long)36l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)52l, (long)36l, (long)12l, (long)10l)))));",
            "assert(splitArr((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (1l)).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l)))));",
            "assert(splitArr((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)0l, (long)1l, (long)2l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert an array array list to a pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Object listTuple(ArrayList<Long> listx) {\n        return new Pair<>(listx.get(0), listx.get(1));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(listTuple((new ArrayList<Long>(Arrays.asList((long)5l, (long)10l, (long)7l, (long)4l, (long)15l, (long)3l)))).equals(Pair.with(5l, 10l, 7l, 4l, 15l, 3l)));",
            "assert(listTuple((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l, (long)6l, (long)2l, (long)3l, (long)4l, (long)4l, (long)7l)))).equals(Pair.with(2l, 4l, 5l, 6l, 2l, 3l, 4l, 4l, 7l)));",
            "assert(listTuple((new ArrayList<Long>(Arrays.asList((long)58l, (long)44l, (long)56l)))).equals(Pair.with(58l, 44l, 56l)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a javathon function to find the difference between largest and smallest value in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long bigDiff(ArrayList<Long> nums) {\n        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            long temp = nums.get(i);\n            if (temp > max) {\n                max = temp;\n            }\n            if (temp < min) {\n                min = temp;\n            }\n        }\n        return max - min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(bigDiff((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (3l));",
            "assert(bigDiff((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)12l)))) == (8l));",
            "assert(bigDiff((new ArrayList<Long>(Arrays.asList((long)9l, (long)2l, (long)3l)))) == (7l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> perfectSquares(long a, long b) {\n        ArrayList<Long> result = new ArrayList<>();\n        if (a == b) {\n            result.add(a);\n            return result;\n        }\n        if (a < b) {\n            result.add(b);\n            return result;\n        }\n        if (a > b) {\n            result.add(a);\n            return result;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(perfectSquares((1l), (30l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l, (long)16l, (long)25l)))));",
            "assert(perfectSquares((50l), (100l)).equals((new ArrayList<Long>(Arrays.asList((long)64l, (long)81l, (long)100l)))));",
            "assert(perfectSquares((100l), (200l)).equals((new ArrayList<Long>(Arrays.asList((long)100l, (long)121l, (long)144l, (long)169l, (long)196l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a javathon function to check whether the given two integers have opposite sign or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean oppositeSigns(long x, long y) {\n        return x < 0 && y < 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(oppositeSigns((1l), (-2l)) == (true));",
            "assert(oppositeSigns((3l), (2l)) == (false));",
            "assert(oppositeSigns((-10l), (-10l)) == (false));",
            "assert(oppositeSigns((-2l), (2l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a javathon function to interchange the first and last elements in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> swapList(ArrayList<Long> newList) {\n        ArrayList<Long> oldList = new ArrayList<>();\n        for (int i = 0; i < newList.size(); i++) {\n            oldList.add(newList.get(i));\n        }\n        return oldList;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(swapList((new ArrayList<Long>(Arrays.asList((long)12l, (long)35l, (long)9l, (long)56l, (long)24l)))).equals((new ArrayList<Long>(Arrays.asList((long)24l, (long)35l, (long)9l, (long)56l, (long)12l)))));",
            "assert(swapList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))));",
            "assert(swapList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a javathon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumOfProduct(long n) {\n        long sum = 1;\n        for (int i = 0; i < n; i++) {\n            sum *= i + 1;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumOfProduct((3l)) == (15l));",
            "assert(sumOfProduct((4l)) == (56l));",
            "assert(sumOfProduct((1l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removezeroIp(String ip) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ip.length(); i++) {\n            if (ip.charAt(i) == '.') {\n                sb.append(ip.charAt(i));\n            } else {\n                sb.append(ip.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removezeroIp((\"216.08.094.196\")).equals((\"216.8.94.196\")));",
            "assert(removezeroIp((\"12.01.024\")).equals((\"12.1.24\")));",
            "assert(removezeroIp((\"216.08.094.0196\")).equals((\"216.8.94.196\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long diffEvenOdd(ArrayList<Long> list1) {\n        long sum = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            sum += list1.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(diffEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)1l, (long)6l, (long)8l)))) == (3l));",
            "assert(diffEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (1l));",
            "assert(diffEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l, (long)10l)))) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a javathon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Object minSwaps(String str1, String str2) {\n        int minSwaps = Integer.MAX_VALUE;\n        int[] a = new int[str1.length()];\n        int[] b = new int[str2.length()];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = Integer.parseInt(str1.substring(i, i + 1));\n            b[i] = Integer.parseInt(str2.substring(i, i + 1));\n        }\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) {\n                minSwaps = Math.min(minSwaps, a[i]);\n            }\n        }\n        return minSwaps;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(minSwaps((\"1101\"), (\"1110\")).equals((Object(1l))));",
            "assert(minSwaps((\"111\"), (\"000\")).equals((Object(\"Not Possible\"))));",
            "assert(minSwaps((\"111\"), (\"110\")).equals((Object(\"Not Possible\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted array array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findKth(ArrayList<Long> arr1, ArrayList<Long> arr2, long k) {\n        if (arr1.size() == 0) {\n            return 0;\n        }\n        if (arr2.size() == 0) {\n            return arr1.size();\n        }\n        long sum = 0;\n        for (int i = 0; i < arr1.size(); i++) {\n            sum += arr1.get(i);\n        }\n        for (int i = 0; i < arr2.size(); i++) {\n            sum += arr2.get(i);\n        }\n        if (sum == k) {\n            return arr1.size();\n        } else if (sum < k) {\n            return findKth(arr1, arr2, k - sum);\n        } else {\n            return findKth(arr2, arr1, k - sum);\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findKth((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l, (long)7l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)8l, (long)10l))), (5l)) == (6l));",
            "assert(findKth((new ArrayList<Long>(Arrays.asList((long)100l, (long)112l, (long)256l, (long)349l, (long)770l))), (new ArrayList<Long>(Arrays.asList((long)72l, (long)86l, (long)113l, (long)119l, (long)265l, (long)445l, (long)892l))), (7l)) == (256l));",
            "assert(findKth((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)7l, (long)8l, (long)10l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)9l, (long)11l))), (6l)) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean armstrongNumber(long number) {\n        return number % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(armstrongNumber((153l)) == (true));",
            "assert(armstrongNumber((259l)) == (false));",
            "assert(armstrongNumber((4458l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Float> sumAverage(long number) {\n        long sum = 0;\n        float average = 0;\n        for (int i = 0; i < number; i++) {\n            sum += number;\n            average += number;\n        }\n        return new Pair<>(sum, average);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumAverage((10l)).equals((Pair.with(55l, 5.5f))));",
            "assert(sumAverage((15l)).equals((Pair.with(120l, 8.0f))));",
            "assert(sumAverage((20l)).equals((Pair.with(210l, 10.5f))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long isOctagonal(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        if (n == 3) {\n            return 4;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 6;\n        }\n        if (n == 6) {\n            return 7;\n        }\n        if (n == 7) {\n            return 8;\n        }\n        if (n == 8) {\n            return 9;\n        }\n        if (n == 9) {\n            return 10;\n        }\n        if (n == 10) {\n            return 11;\n        }\n        if (n == 11) {\n            return 12;\n        }\n        if (n == 12) {\n            return 13;\n        }\n        if (n == 13) {\n            return 14;\n        }\n        if (n == 14) {\n            return 15;\n        }\n        if (n == 15) {\n            return 16;\n        }\n        if (n == 16) {\n            return 17;\n        }\n        if (n == 17) {\n            return 18;\n        }\n        if (n == 18) {\n            return 19;\n        }\n        if (n == 19) {\n            return 20;\n        }\n        if (n == 20) {\n            return 21;\n        }\n        if (n == 21) {\n            return 22;\n        }\n        if (n == 22) {\n            return 23;\n        }\n        if (n == 23) {\n            return 24;\n        }\n        if (n == 24) {\n            return 25;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isOctagonal((5l)) == (65l));",
            "assert(isOctagonal((10l)) == (280l));",
            "assert(isOctagonal((15l)) == (645l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a javathon function to check whether the given number is even or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isEven(long n) {\n        return n % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isEven((1l)) == (false));",
            "assert(isEven((2l)) == (true));",
            "assert(isEven((3l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a javathon function to find the first repeated character in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<String> firstRepeatedChar(String str1) {\n        int count = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            if (str1.charAt(i) == str1.charAt(i + 1)) {\n                count++;\n            }\n        }\n        return Optional.ofNullable(str1.substring(0, count));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(firstRepeatedChar((\"abcabc\")).equals(Optional.of(\"a\")));",
            "assert(firstRepeatedChar((\"abc\")).equals(Optional.empty()));",
            "assert(firstRepeatedChar((\"123123\")).equals(Optional.of(\"1\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> getLudic(long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getLudic((10l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l)))));",
            "assert(getLudic((25l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)23l, (long)25l)))));",
            "assert(getLudic((45l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)7l, (long)11l, (long)13l, (long)17l, (long)23l, (long)25l, (long)29l, (long)37l, (long)41l, (long)43l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String reverseWords(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isWhitespace(c)) {\n                sb.append(Character.toLowerCase(c));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(reverseWords((\"python program\")).equals((\"program python\")));",
            "assert(reverseWords((\"java language\")).equals((\"language java\")));",
            "assert(reverseWords((\"indian man\")).equals((\"man indian\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean primeNum(long num) {\n        if (num == 0) return true;\n        if (num == 1) return true;\n        if (num == 2) return true;\n        if (num % 2 == 0) return false;\n        if (num % 3 == 0) return false;\n        if (num % 5 == 0) return false;\n        if (num % 7 == 0) return false;\n        if (num % 11 == 0) return false;\n        if (num % 13 == 0) return false;\n        if (num % 17 == 0) return false;\n        if (num % 19 == 0) return false;\n        if (num % 23 == 0) return false;\n        if (num % 29 == 0) return false;\n        if (num % 31 == 0) return false;\n        if (num % 37 == 0) return false;\n        if (num % 41 == 0) return false;\n        if (num % 43 == 0) return false;\n        if (num % 47 == 0) return false;\n        if (num % 53 == 0) return false;\n        if (num % 59 == 0) return false;\n        if (num % 61 == 0) return false;\n        if (num % 67 == 0) return false;\n        if (num % 71 == 0) return false;\n        if (num % 73 == 0) return false;\n        if (num % 79 == 0) return false;\n        if (num % 83 == 0) return false;\n        if (num % 89 == 0) return false;\n        if (num % 97 == 0) return false;\n        if (num % 101 == 0) return false;\n        if (num % 103 == 0) return false;\n        if (num % 107 == 0) return false;\n        if (num % 109 == 0) return false;\n        if (num % 113 == 0) return false;\n\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(primeNum((13l)) == (true));",
            "assert(primeNum((7l)) == (true));",
            "assert(primeNum((-1010l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float radianDegree(long degree) {\n        return (float) (degree * Math.PI / 180.0);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(radianDegree((90l)) == (1.5707963267948966f));",
            "assert(radianDegree((60l)) == (1.0471975511965976f));",
            "assert(radianDegree((120l)) == (2.0943951023931953f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, Long, Long> findLiterals(String text, String pattern) {\n        Pattern p = Pattern.compile(pattern);\n        Matcher m = p.matcher(text);\n        if (m.find()) {\n            return new Pair<>(m.group(1), m.start(), m.end());\n        } else {\n            return null;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((Pair.with(\"fox\", 16l, 19l))));",
            "assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((Pair.with(\"crazy\", 16l, 21l))));",
            "assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((Pair.with(\"will\", 35l, 39l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a javathon function to find nth bell number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long bellNumber(long n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i;\n        }\n        return bellNumber(a);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(bellNumber((2l)) == (2l));",
            "assert(bellNumber((3l)) == (5l));",
            "assert(bellNumber((4l)) == (15l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a javathon function which takes an array array list and returns an array array list with the same elements, but the k'th element removed.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> removeKthElement(ArrayList<Long> list1, long L) {\n        ArrayList<Long> list2 = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i) == L) {\n                list2.add(list1.remove(i));\n            }\n        }\n        return list2;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeKthElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)1l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)4l, (long)5l, (long)1l)))));",
            "assert(removeKthElement((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l)))));",
            "assert(removeKthElement((new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as an array array list of array lists returns the max of then'th column.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxOfNth(ArrayList<ArrayList<Long>> test_list, long N) {\n        long max = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            for (int j = 0; j < test_list.get(i).size(); j++) {\n                if (test_list.get(i).get(j) > max) {\n                    max = test_list.get(i).get(j);\n                }\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)19l))))), (2l)) == (19l));",
            "assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)20l))))), (1l)) == (10l));",
            "assert(maxOfNth((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)21l))))), (1l)) == (11l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a javathon function which takes an array array list of array lists, where each subarray list has two elements, and returns an array array list of two array lists where the first array list has the first element of each subarray list and the second one has the second.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Object>> merge(ArrayList<ArrayList<Object>> lst) {\n        ArrayList<ArrayList<Object>> result = new ArrayList<>();\n        for (ArrayList<Object> sublist : lst) {\n            ArrayList<Object> result1 = new ArrayList<>();\n            ArrayList<Object> result2 = new ArrayList<>();\n            for (Object o : sublist) {\n                if (o instanceof ArrayList) {\n                    result1.addAll((ArrayList) o);\n                } else {\n                    result1.add(o);\n                }\n            }\n            result2.addAll(result1);\n            result.add(result2);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(merge((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"m\", (String)\"n\")))))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"a\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"y\", (String)\"b\", (String)\"n\")))))));",
            "assert(merge((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l)))))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)6l, (long)8l)))))));",
            "assert(merge((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"y\", (String)\"z\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"m\", (String)\"n\", (String)\"o\")))))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"x\", (String)\"a\", (String)\"m\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"y\", (String)\"b\", (String)\"n\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"z\", (String)\"c\", (String)\"o\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given array list of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long cummulativeSum(ArrayList<ArrayList<Long>> test_list) {\n        long sum = 0;\n        for (ArrayList<Long> test_list_item : test_list) {\n            sum += test_list_item.get(0);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(cummulativeSum((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))))) == (30l));",
            "assert(cummulativeSum((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)7l)))))) == (37l));",
            "assert(cummulativeSum((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)8l)))))) == (44l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes an array array lists of array lists and returns the average value for each subarray list as an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Float> averageTuple(ArrayList<ArrayList<Long>> nums) {\n        ArrayList<Float> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            ArrayList<Long> nums1 = nums.get(i);\n            ArrayList<Long> nums2 = nums.get(i + 1);\n            ArrayList<Float> nums3 = new ArrayList<>();\n            for (int j = 0; j < nums1.size(); j++) {\n                nums3.add(nums1.get(j) / nums2.get(j));\n            }\n            result.add(nums3.get(0));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(averageTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)10l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)30l, (long)45l, (long)56l, (long)45l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)81l, (long)80l, (long)39l, (long)32l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))))).equals((new ArrayList<Float>(Arrays.asList((float)30.5f, (float)34.25f, (float)27.0f, (float)23.25f)))));",
            "assert(averageTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)-5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)30l, (long)-15l, (long)56l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)81l, (long)-60l, (long)-39l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)-10l, (long)2l, (long)3l)))))).equals((new ArrayList<Float>(Arrays.asList((float)25.5f, (float)-18.0f, (float)3.75f)))));",
            "assert(averageTuple((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)100l, (long)100l, (long)100l, (long)120l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)300l, (long)450l, (long)560l, (long)450l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)810l, (long)800l, (long)390l, (long)320l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))))).equals((new ArrayList<Float>(Arrays.asList((float)305.0f, (float)342.5f, (float)270.0f, (float)232.5f)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two pairs of the same length and performs the element wise modulo.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> tupleModulo(Pair<Long, Long, Long, Long> test_tup1, Pair<Long, Long, Long, Long> test_tup2) {\n        return new Pair<>(test_tup1.getLeft() % test_tup2.getLeft(), test_tup1.getRight() % test_tup2.getRight(), test_tup1.getLeft() % test_tup2.getRight(), test_tup1.getRight() % test_tup2.getLeft());\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(tupleModulo((Pair.with(10l, 4l, 5l, 6l)), (Pair.with(5l, 6l, 7l, 5l))).equals((Pair.with(0l, 4l, 5l, 1l))));",
            "assert(tupleModulo((Pair.with(11l, 5l, 6l, 7l)), (Pair.with(6l, 7l, 8l, 6l))).equals((Pair.with(5l, 5l, 6l, 1l))));",
            "assert(tupleModulo((Pair.with(12l, 6l, 7l, 8l)), (Pair.with(7l, 8l, 9l, 7l))).equals((Pair.with(5l, 6l, 7l, 1l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float minJumps(Pair<Long, Long> steps, long d) {\n        long d2 = d * d;\n        long d3 = d2 * d2;\n        long d4 = d3 * d3;\n        long d5 = d4 * d4;\n        long d6 = d5 * d5;\n        long d7 = d6 * d6;\n        long d8 = d7 * d7;\n        long d9 = d8 * d8;\n        long d10 = d9 * d9;\n        long d11 = d10 * d10;\n        long d12 = d11 * d11;\n        long d13 = d12 * d12;\n        long d14 = d13 * d13;\n        long d15 = d14 * d14;\n        long d16 = d15 * d15;\n        long d17 = d16 * d16;\n        long d18 = d17 * d17;\n        long d19 = d18 * d18;\n        long d20 = d19 * d19;\n        long d21 = d20 * d20;\n        long d22 = d21 * d21;\n        long d23 = d22 * d22;\n        long d24 = d23 * d23;\n        long d25 = d24 * d24;\n        long d26 = d25 * d25;\n        long d27 = d26 * d26;\n        long d28 = d27 * d27;\n        long d29 = d28 * d28;\n        long d30 = d29 * d29;\n        long d31 = d30 * d30;\n        long d32 = d31 * d31;\n        long d33 = d32 * d32;\n        long d34 = d33 * d33;\n\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(minJumps((Pair.with(3l, 4l)), (11l)) == (3.5f));",
            "assert(minJumps((Pair.with(3l, 4l)), (0l)) == (float)0l);",
            "assert(minJumps((Pair.with(11l, 14l)), (11l)) == (float)1l);",
            "}",
            "}"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two array lists element wise.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Float> divList(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n        ArrayList<Float> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) / nums2.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(divList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)2.5f, (float)2.0f)))));",
            "assert(divList((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l)))).equals((new ArrayList<Float>(Arrays.asList((float)3.0f, (float)0.5f)))));",
            "assert(divList((new ArrayList<Long>(Arrays.asList((long)90l, (long)120l))), (new ArrayList<Long>(Arrays.asList((long)50l, (long)70l)))).equals((new ArrayList<Float>(Arrays.asList((float)1.8f, (float)1.7142857142857142f)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String moveNum(String test_str) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_str.length(); i++) {\n            sb.append(test_str.charAt(i));\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));",
            "assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));",
            "assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a javathon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countSubstrings(String s) {\n        int[] count = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - '0']++;\n        }\n        return count[s.length() - 1];\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countSubstrings((\"112112\")) == (6l));",
            "assert(countSubstrings((\"111\")) == (6l));",
            "assert(countSubstrings((\"1101112\")) == (12l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted array lists of same size.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float getMedian(ArrayList<Long> arr1, ArrayList<Long> arr2, long n) {\n        if (arr1.size() < 2 || arr2.size() < 2) {\n            return 0;\n        }\n        long m = Math.min(arr1.size(), arr2.size());\n        long[] arr = new long[m];\n        for (int i = 0; i < m; i++) {\n            arr[i] = arr1.get(i) + arr2.get(i);\n        }\n        Arrays.sort(arr);\n        return (float) (arr[m / 2] + arr[m - 1]);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getMedian((new ArrayList<Long>(Arrays.asList((long)1l, (long)12l, (long)15l, (long)26l, (long)38l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)13l, (long)17l, (long)30l, (long)45l))), (5l)) == (16.0f));",
            "assert(getMedian((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)8l, (long)9l))), (new ArrayList<Long>(Arrays.asList((long)7l, (long)13l, (long)19l, (long)28l))), (4l)) == (8.5f));",
            "assert(getMedian((new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)14l, (long)23l, (long)36l, (long)42l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)18l, (long)27l, (long)39l, (long)49l, (long)55l))), (6l)) == (25.0f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> nthNums(ArrayList<Long> nums, long n) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(n * nums.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(nthNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l, (long)16l, (long)25l, (long)36l, (long)49l, (long)64l, (long)81l, (long)100l)))));",
            "assert(nthNums((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)1000l, (long)8000l, (long)27000l)))));",
            "assert(nthNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)15l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)248832l, (long)759375l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a javathon function to convert a given string to uppercase.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String isUpper(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isUpper((\"person\")).equals((\"PERSON\")));",
            "assert(isUpper((\"final\")).equals((\"FINAL\")));",
            "assert(isUpper((\"Valid\")).equals((\"VALID\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a javathon function to interchange the first and last element in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> swapList(ArrayList<Long> newList) {\n        ArrayList<Long> oldList = new ArrayList<>();\n        for (int i = 0; i < newList.size(); i++) {\n            oldList.add(newList.get(i));\n        }\n        return oldList;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(swapList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))));",
            "assert(swapList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l, (long)4l, (long)1l)))));",
            "assert(swapList((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a javathon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Long> triangleArea(long r) {\n        long area = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                area += Math.abs(r * Math.pow(Math.abs(i), 2) * Math.abs(j));\n            }\n        }\n        return Optional.of(area);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(triangleArea((-1l)).equals(Optional.empty()));",
            "assert(triangleArea((0l)).equals(Optional.of(0l)));",
            "assert(triangleArea((2l)).equals(Optional.of(4l)));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a javathon function to find the smallest missing number from a sorted array list of natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findFirstMissing(ArrayList<Long> array) {\n        long result = array.get(0);\n        for (int i = 1; i < array.size(); i++) {\n            if (array.get(i) < result) {\n                result = array.get(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l)))) == (4l));",
            "assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)6l, (long)9l)))) == (3l));",
            "assert(findFirstMissing((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)8l, (long)9l)))) == (0l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String replaceSpaces(String string) {\n        return string.replaceAll(\"\\\\s+\", \"%20\");\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(replaceSpaces((\"My Name is Dawood\")).equals((\"My%20Name%20is%20Dawood\")));",
            "assert(replaceSpaces((\"I am a Programmer\")).equals((\"I%20am%20a%20Programmer\")));",
            "assert(replaceSpaces((\"I love Coding\")).equals((\"I%20love%20Coding\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a javathon function to find even numbers from an array array list of numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> Split(ArrayList<Long> list) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            result.add(list.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(Split((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)))));",
            "assert(Split((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)0l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)6l, (long)8l, (long)0l)))));",
            "assert(Split((new ArrayList<Long>(Arrays.asList((long)8l, (long)12l, (long)15l, (long)19l)))).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)12l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a javathon function to find smallest number in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long smallestNum(ArrayList<Long> xs) {\n        long smallest = Long.MAX_VALUE;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) < smallest) {\n                smallest = xs.get(i);\n            }\n        }\n        return smallest;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(smallestNum((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)1l, (long)45l, (long)99l)))) == (1l));",
            "assert(smallestNum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (1l));",
            "assert(smallestNum((new ArrayList<Long>(Arrays.asList((long)45l, (long)46l, (long)50l, (long)60l)))) == (45l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Long>> getCoordinates(Pair<Long, Long> test_tup) {\n        ArrayList<ArrayList<Long>> result = new ArrayList<>();\n        ArrayList<Long> coord_list = new ArrayList<>();\n        coord_list.add(test_tup.getLeft());\n        coord_list.add(test_tup.getRight());\n        result.add(coord_list);\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getCoordinates((Pair.with(3l, 4l))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))))));",
            "assert(getCoordinates((Pair.with(4l, 5l))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)))))));",
            "assert(getCoordinates((Pair.with(5l, 6l))).equals((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)7l)))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String replaceSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c =='') {\n                sb.append(\"_\");\n            } else if (c == '_') {\n                sb.append(\"_\");\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(replaceSpaces((\"Jumanji The Jungle\")).equals((\"Jumanji_The_Jungle\")));",
            "assert(replaceSpaces((\"The_Avengers\")).equals((\"The Avengers\")));",
            "assert(replaceSpaces((\"Fast and Furious\")).equals((\"Fast_and_Furious\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a javathon function to move all zeroes to the end of the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> moveZero(ArrayList<Long> num_list) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < num_list.size(); i++) {\n            if (num_list.get(i) == 0) {\n                result.add(i, num_list.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(moveZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)2l, (long)0l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)0l, (long)0l)))));",
            "assert(moveZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)2l, (long)0l, (long)0l, (long)4l, (long)0l, (long)5l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)2l, (long)4l, (long)5l, (long)0l, (long)0l, (long)0l, (long)0l)))));",
            "assert(moveZero((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)0l, (long)1l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)0l, (long)0l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a javathon function to find the sum of xor of all pairs of numbers in the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long pairXorSum(ArrayList<Long> arr, long n) {\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i) ^ n;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(pairXorSum((new ArrayList<Long>(Arrays.asList((long)5l, (long)9l, (long)7l, (long)6l))), (4l)) == (47l));",
            "assert(pairXorSum((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)5l))), (3l)) == (12l));",
            "assert(pairXorSum((new ArrayList<Long>(Arrays.asList((long)7l, (long)3l))), (2l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> heapSort(ArrayList<Long> iterable) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < iterable.size(); i++) {\n            result.add(iterable.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(heapSort((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)9l, (long)2l, (long)4l, (long)6l, (long)8l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));",
            "assert(heapSort((new ArrayList<Long>(Arrays.asList((long)25l, (long)35l, (long)22l, (long)85l, (long)14l, (long)65l, (long)75l, (long)25l, (long)58l)))).equals((new ArrayList<Long>(Arrays.asList((long)14l, (long)22l, (long)25l, (long)25l, (long)35l, (long)58l, (long)65l, (long)75l, (long)85l)))));",
            "assert(heapSort((new ArrayList<Long>(Arrays.asList((long)7l, (long)1l, (long)9l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean noprofitNoloss(long actual_cost, long sale_amount) {\n        return actual_cost == 0 && sale_amount == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(noprofitNoloss((1500l), (1200l)) == (false));",
            "assert(noprofitNoloss((100l), (100l)) == (true));",
            "assert(noprofitNoloss((2000l), (5000l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long windChill(long v, long t) {\n        return (long) (Math.round(v * Math.pow(10, t)));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(windChill((120l), (35l)) == (40l));",
            "assert(windChill((40l), (20l)) == (19l));",
            "assert(windChill((10l), (8l)) == (6l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given array list of names after removing the names that start with a lowercase letter.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sampleNam(ArrayList<String> sample_names) {\n        long sum = 0;\n        for (String name : sample_names) {\n            if (name.length() > 1) {\n                sum += name.length();\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"sally\", (String)\"Dylan\", (String)\"rebecca\", (String)\"Diana\", (String)\"Joanne\", (String)\"keith\")))) == (16l));",
            "assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"php\", (String)\"res\", (String)\"Python\", (String)\"abcd\", (String)\"Java\", (String)\"aaa\")))) == (10l));",
            "assert(sampleNam((new ArrayList<String>(Arrays.asList((String)\"abcd\", (String)\"Python\", (String)\"abba\", (String)\"aba\")))) == (6l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given pair array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxDifference(ArrayList<Pair<Long, Long>> test_list) {\n        long max = 0;\n        for (Pair<Long, Long> pair : test_list) {\n            long diff = pair.getLeft() - pair.getRight();\n            if (diff > max) {\n                max = diff;\n            }\n        }\n        return max;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxDifference((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 5l), (Pair<Long, Long>)Pair.with(1l, 7l), (Pair<Long, Long>)Pair.with(10l, 3l), (Pair<Long, Long>)Pair.with(1l, 2l))))) == (7l));",
            "assert(maxDifference((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 6l), (Pair<Long, Long>)Pair.with(2l, 17l), (Pair<Long, Long>)Pair.with(9l, 13l), (Pair<Long, Long>)Pair.with(11l, 12l))))) == (15l));",
            "assert(maxDifference((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(12l, 35l), (Pair<Long, Long>)Pair.with(21l, 27l), (Pair<Long, Long>)Pair.with(13l, 23l), (Pair<Long, Long>)Pair.with(41l, 22l))))) == (23l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeParenthesis(ArrayList<String> items) {\n        StringBuilder sb = new StringBuilder();\n        for (String item : items) {\n            if (item.startsWith(\"(\")) {\n                sb.append(item.substring(1));\n            } else if (item.endsWith(\")\")) {\n                sb.append(item.substring(0, item.length() - 1));\n            } else {\n                sb.append(item);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"python (chrome)\")))).equals((\"python\")));",
            "assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"string(.abc)\")))).equals((\"string\")));",
            "assert(removeParenthesis((new ArrayList<String>(Arrays.asList((String)\"alpha(num)\")))).equals((\"alpha\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long isNonagonal(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        if (n == 3) {\n            return 4;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 6;\n        }\n        if (n == 6) {\n            return 7;\n        }\n        if (n == 7) {\n            return 8;\n        }\n        if (n == 8) {\n            return 9;\n        }\n        if (n == 9) {\n            return 10;\n        }\n        if (n == 10) {\n            return 11;\n        }\n        if (n == 11) {\n            return 12;\n        }\n        if (n == 12) {\n            return 13;\n        }\n        if (n == 13) {\n            return 14;\n        }\n        if (n == 14) {\n            return 15;\n        }\n        if (n == 15) {\n            return 16;\n        }\n        if (n == 16) {\n            return 17;\n        }\n        if (n == 17) {\n            return 18;\n        }\n        if (n == 18) {\n            return 19;\n        }\n        if (n == 19) {\n            return 20;\n        }\n        if (n == 20) {\n            return 21;\n        }\n        if (n == 21) {\n            return 22;\n        }\n        if (n == 22) {\n            return 23;\n        }\n        if (n == 23) {\n            return 24;\n        }\n        if (n == 24) {\n            return 25;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isNonagonal((10l)) == (325l));",
            "assert(isNonagonal((15l)) == (750l));",
            "assert(isNonagonal((18l)) == (1089l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textMatchWordzMiddle(String text) {\n        int start = 0;\n        int end = text.length() - 1;\n        while (start < end) {\n            if (text.charAt(start) == 'z') {\n                if (start == 0 || text.charAt(start - 1) == 'z') {\n                    return true;\n                }\n            }\n            start++;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textMatchWordzMiddle((\"pythonzabc.\")) == (true));",
            "assert(textMatchWordzMiddle((\"zxyabc.\")) == (false));",
            "assert(textMatchWordzMiddle((\"  lang  .\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a javathon function to reverse an array array list upto a given position.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> reverseArrayUptoK(ArrayList<Long> input, long k) {\n        ArrayList<Long> output = new ArrayList<>();\n        for (int i = 0; i < input.size(); i++) {\n            output.add(input.get(i));\n        }\n        return output;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (4l)).equals((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)1l, (long)5l, (long)6l)))));",
            "assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)4l, (long)6l, (long)7l)))));",
            "assert(reverseArrayUptoK((new ArrayList<Long>(Arrays.asList((long)9l, (long)8l, (long)7l, (long)6l, (long)5l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)6l, (long)5l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort an array array list of pairs using the second value of each pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<String, Long>> subjectMarks(ArrayList<Pair<String, Long>> subjectmarks) {\n        ArrayList<Pair<String, Long>> sorted = new ArrayList<>();\n        for (Pair<String, Long> pair : subjectmarks) {\n            sorted.add(new Pair<>(pair.getFirst(), pair.getSecond()));\n        }\n        return sorted;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(subjectMarks((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"English\", 88l), (Pair<String, Long>)Pair.with(\"Science\", 90l), (Pair<String, Long>)Pair.with(\"Maths\", 97l), (Pair<String, Long>)Pair.with(\"Social sciences\", 82l))))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Social sciences\", 82l), (Pair<String, Long>)Pair.with(\"English\", 88l), (Pair<String, Long>)Pair.with(\"Science\", 90l), (Pair<String, Long>)Pair.with(\"Maths\", 97l))))));",
            "assert(subjectMarks((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Telugu\", 49l), (Pair<String, Long>)Pair.with(\"Hindhi\", 54l), (Pair<String, Long>)Pair.with(\"Social\", 33l))))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Social\", 33l), (Pair<String, Long>)Pair.with(\"Telugu\", 49l), (Pair<String, Long>)Pair.with(\"Hindhi\", 54l))))));",
            "assert(subjectMarks((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Physics\", 96l), (Pair<String, Long>)Pair.with(\"Chemistry\", 97l), (Pair<String, Long>)Pair.with(\"Biology\", 45l))))).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Biology\", 45l), (Pair<String, Long>)Pair.with(\"Physics\", 96l), (Pair<String, Long>)Pair.with(\"Chemistry\", 97l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a javathon function to count the number of positive numbers in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long posCount(ArrayList<Long> list) {\n        long count = 0;\n        for (long i : list) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(posCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)3l, (long)-4l)))) == (2l));",
            "assert(posCount((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)-1l)))) == (3l));",
            "assert(posCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long bellNumber(long n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i;\n        }\n        return bellNumber(a);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(bellNumber((2l)) == (2l));",
            "assert(bellNumber((10l)) == (115975l));",
            "assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a javathon function to check whether the given array array list is monotonic or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isMonotonic(ArrayList<Long> A) {\n        return A.stream().allMatch(a -> a.longValue() == 1);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isMonotonic((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l, (long)4l)))) == (true));",
            "assert(isMonotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l)))) == (true));",
            "assert(isMonotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether an array array list contains the given subarray list or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSublist(ArrayList<Long> l, ArrayList<Long> s) {\n        if (l.size()!= s.size()) {\n            return false;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i)!= s.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)3l, (long)7l)))) == (false));",
            "assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)3l)))) == (true));",
            "assert(isSublist((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)6l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a javathon function to check whether the two numbers differ at one bit position only or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean differAtOneBitPos(long a, long b) {\n        return (a & b) == a;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(differAtOneBitPos((13l), (9l)) == (true));",
            "assert(differAtOneBitPos((15l), (8l)) == (false));",
            "assert(differAtOneBitPos((2l), (4l)) == (false));",
            "assert(differAtOneBitPos((2l), (3l)) == (true));",
            "assert(differAtOneBitPos((5l), (1l)) == (true));",
            "assert(differAtOneBitPos((1l), (5l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given array lists have equal length or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean getEqual(ArrayList<ArrayList<Long>> Input) {\n        int total = 0;\n        for (ArrayList<Long> list : Input) {\n            total += list.size();\n        }\n        return total == Input.size();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getEqual((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)11l, (long)22l, (long)33l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)44l, (long)55l, (long)66l)))))) == (true));",
            "assert(getEqual((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)7l)))))) == (false));",
            "assert(getEqual((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l)))))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort an array array list of elements.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> combSort(ArrayList<Long> nums) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(combSort((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)37l, (long)25l, (long)79l)))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)15l, (long)25l, (long)37l, (long)79l)))));",
            "assert(combSort((new ArrayList<Long>(Arrays.asList((long)41l, (long)32l, (long)15l, (long)19l, (long)22l)))).equals((new ArrayList<Long>(Arrays.asList((long)15l, (long)19l, (long)22l, (long)32l, (long)41l)))));",
            "assert(combSort((new ArrayList<Long>(Arrays.asList((long)99l, (long)15l, (long)13l, (long)47l)))).equals((new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)47l, (long)99l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Add the new pair to the hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, HashMap<String,Long>> addDictToTuple(Pair<Long, Long, Long> test_tup, HashMap<String,Long> test_dict) {\n        Pair<Long, Long, Long, HashMap<String,Long>> new_pair = new Pair<>(test_tup.getFirst(), test_tup.getSecond(), test_tup.getThird(), test_dict);\n        test_dict.put(new_pair.getFirst().toString(), new_pair.getSecond().toString());\n        return new_pair;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(addDictToTuple((Pair.with(4l, 5l, 6l)), (new HashMap<String,Long>(Map.of(\"MSAM\", 1l, \"is\", 2l, \"best\", 3l)))).equals((Pair.with(4l, 5l, 6l, new HashMap<String,Long>(Map.of(\"MSAM\", 1l, \"is\", 2l, \"best\", 3l))))));",
            "assert(addDictToTuple((Pair.with(1l, 2l, 3l)), (new HashMap<String,Long>(Map.of(\"UTS\", 2l, \"is\", 3l, \"Worst\", 4l)))).equals((Pair.with(1l, 2l, 3l, new HashMap<String,Long>(Map.of(\"UTS\", 2l, \"is\", 3l, \"Worst\", 4l))))));",
            "assert(addDictToTuple((Pair.with(8l, 9l, 10l)), (new HashMap<String,Long>(Map.of(\"POS\", 3l, \"is\", 4l, \"Okay\", 5l)))).equals((Pair.with(8l, 9l, 10l, new HashMap<String,Long>(Map.of(\"POS\", 3l, \"is\", 4l, \"Okay\", 5l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as an array array list of array lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float maxAverageOfPath(ArrayList<ArrayList<Long>> cost) {\n        int N = cost.size();\n        int M = cost.get(0).size();\n        int[][] matrix = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                matrix[i][j] = cost.get(i).get(j);\n            }\n        }\n        int[][] matrix2 = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                matrix2[i][j] = matrix[i][j];\n            }\n        }\n        int[][] matrix3 = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                matrix3[i][j] = matrix2[i][j];\n            }\n        }\n        int[][] matrix4 = new int[N][M];\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                matrix4[i][j] = matrix3[i][j];\n            }\n        }\n        int[][] matrix5 = new int[N][M];\n        for (int i = 0; i < N\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)3l, (long)9l)))))) == (5.2f));",
            "assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)6l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)4l, (long)10l)))))) == (6.2f));",
            "assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l, (long)7l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)5l, (long)11l)))))) == (7.2f));",
            "assert(maxAverageOfPath((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))) == (5.8f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - a hash map with a student name as a key and a pair of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,Pair<Float, Long>> filterData(HashMap<String,Pair<Float, Long>> students, float h, long w) {\n        HashMap<String,Pair<Float, Long>> filteredStudents = new HashMap<>();\n        for (String student : students.keySet()) {\n            Pair<Float, Long> pair = students.get(student);\n            if (pair.getLeft() > h || pair.getRight() > w) {\n                filteredStudents.put(student, pair);\n            }\n        }\n        return filteredStudents;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(filterData((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l)))), (6.0f), (70l)).equals((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l))))));",
            "assert(filterData((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l)))), (5.9f), (67l)).equals((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Kierra Gentry\", Pair.with(6.0f, 68l))))));",
            "assert(filterData((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l)))), (5.7f), (64l)).equals((new HashMap<String,Pair<Float, Long>>(Map.of(\"Cierra Vega\", Pair.with(6.2f, 70l), \"Alden Cantrell\", Pair.with(5.9f, 65l), \"Kierra Gentry\", Pair.with(6.0f, 68l), \"Pierre Cox\", Pair.with(5.8f, 66l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two array lists of the same length. Write a function to count indices where the array lists have the same values.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countSamePair(ArrayList<Long> nums1, ArrayList<Long> nums2) {\n        long count = 0;\n        for (int i = 0; i < nums1.size(); i++) {\n            if (nums1.get(i) == nums2.get(i)) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)2l, (long)3l, (long)1l, (long)2l, (long)6l, (long)7l, (long)9l)))) == (4l));",
            "assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)0l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)4l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (11l));",
            "assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-6l, (long)-9l, (long)11l, (long)-12l, (long)14l, (long)-5l, (long)17l))), (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)2l, (long)-1l, (long)-5l, (long)6l, (long)4l, (long)-3l, (long)-2l, (long)3l, (long)4l, (long)6l, (long)8l)))) == (1l));",
            "assert(countSamePair((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)1l, (long)2l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)2l)))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long powerBaseSum(long base, long power) {\n        long sum = 0;\n        for (int i = 0; i < power; i++) {\n            sum += base;\n            base = base * base;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(powerBaseSum((2l), (100l)) == (115l));",
            "assert(powerBaseSum((8l), (10l)) == (37l));",
            "assert(powerBaseSum((8l), (15l)) == (62l));",
            "assert(powerBaseSum((3l), (3l)) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> extractQuotation(String text1) {\n        ArrayList<Object> result = new ArrayList<>();\n        for (int i = 0; i < text1.length(); i++) {\n            if (text1.charAt(i) == '\"') {\n                result.add(text1.charAt(i + 1));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractQuotation((\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\")).equals((new ArrayList<Object>(Arrays.asList((String)\"A53\", (String)\"multi\", (String)\"Processor\")))));",
            "assert(extractQuotation((\"Cast your \"favorite\" entertainment \"apps\"\")).equals((new ArrayList<Object>(Arrays.asList((String)\"favorite\", (String)\"apps\")))));",
            "assert(extractQuotation((\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\")).equals((new ArrayList<Object>(Arrays.asList((String)\"4k Ultra HD\", (String)\"HDR 10\")))));",
            "assert(extractQuotation((\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")).equals((new ArrayList<Object>(Arrays.asList()))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input an array array list of numbers (t_1,...,t_{N+1}) and returns an array array list of length N where the i-th element of the pair is equal to t_i * t_{i+1}.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> multiplyElements(ArrayList<Long> test_tup) {\n        ArrayList<Object> result = new ArrayList<>();\n        for (int i = 0; i < test_tup.size(); i++) {\n            result.add(new Long(test_tup.get(i).longValue() * test_tup.get(i + 1).longValue()));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)8l, (long)10l)))).equals((new ArrayList<Object>(Arrays.asList((long)5l, (long)35l, (long)56l, (long)80l)))));",
            "assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)5l, (long)6l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)8l, (long)20l, (long)30l, (long)42l)))));",
            "assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)12l, (long)13l, (long)14l, (long)9l, (long)15l)))).equals((new ArrayList<Object>(Arrays.asList((long)156l, (long)182l, (long)126l, (long)135l)))));",
            "assert(multiplyElements((new ArrayList<Long>(Arrays.asList((long)12l)))).equals((new ArrayList<Object>(Arrays.asList()))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two array lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sumList(ArrayList<Long> lst1, ArrayList<Long> lst2) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            res.add(lst1.get(i) + lst2.get(i));\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumList((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)25l, (long)35l)))).equals((new ArrayList<Long>(Arrays.asList((long)25l, (long)45l, (long)65l)))));",
            "assert(sumList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)8l, (long)10l)))));",
            "assert(sumList((new ArrayList<Long>(Arrays.asList((long)15l, (long)20l, (long)30l))), (new ArrayList<Long>(Arrays.asList((long)15l, (long)45l, (long)75l)))).equals((new ArrayList<Long>(Arrays.asList((long)30l, (long)65l, (long)105l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a javathon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean difSquare(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        long n1 = n;\n        long n2 = n;\n        long n3 = n;\n        long n4 = n;\n        long n5 = n;\n        long n6 = n;\n        long n7 = n;\n        long n8 = n;\n        long n9 = n;\n        long n10 = n;\n        long n11 = n;\n        long n12 = n;\n        long n13 = n;\n        long n14 = n;\n        long n15 = n;\n        long n16 = n;\n        long n17 = n;\n        long n18 = n;\n        long n19 = n;\n        long n20 = n;\n        long n21 = n;\n        long n22 = n;\n        long n23 = n;\n        long n24 = n;\n        long n25 = n;\n        long n26 = n;\n        long n27 = n;\n        long n28 = n;\n        long n29 = n;\n        long n30 = n;\n        long n31 = n;\n        long n32 = n;\n        long n33 = n;\n        long n34 = n;\n        long n35 = n;\n        long n36 = n;\n        long n37 = n;\n        long n38 = n;\n        long n39 = n;\n        long n40 = n;\n        long n41 = n;\n        long n42 = n;\n        long n43 = n;\n        long n44 = n;\n        long n45 = n;\n        long n46 = n;\n        long n47 = n;\n        long\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(difSquare((5l)) == (true));",
            "assert(difSquare((10l)) == (false));",
            "assert(difSquare((15l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> consecutiveDuplicates(ArrayList<Object> nums) {\n        ArrayList<Object> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == nums.get(i - 1)) {\n                result.add(nums.get(i));\n            } else {\n                result.add(nums.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l)))).equals((new ArrayList<Object>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l)))));",
            "assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l)))).equals((new ArrayList<Object>(Arrays.asList((long)10l, (long)15l, (long)19l, (long)18l, (long)17l, (long)26l, (long)17l, (long)18l, (long)10l)))));",
            "assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"d\")))).equals((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\")))));",
            "assert(consecutiveDuplicates((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"d\", (String)\"a\", (String)\"a\")))).equals((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"a\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Compute the area of",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float lateralsurfaceCone(long r, long h) {\n        float area = (float)Math.PI * r * r;\n        float height = h;\n        float area2 = (float)Math.PI * r * r;\n        float height2 = h;\n        float area3 = (float)Math.PI * r * r;\n        float height3 = h;\n        float area4 = (float)Math.PI * r * r;\n        float height4 = h;\n        float area5 = (float)Math.PI * r * r;\n        float height5 = h;\n        float area6 = (float)Math.PI * r * r;\n        float height6 = h;\n        float area7 = (float)Math.PI * r * r;\n        float height7 = h;\n        float area8 = (float)Math.PI * r * r;\n        float height8 = h;\n        float area9 = (float)Math.PI * r * r;\n        float height9 = h;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lateralsurfaceCone((5l), (12l)) == (204.20352248333654f));",
            "assert(lateralsurfaceCone((10l), (15l)) == (566.3586699569488f));",
            "assert(lateralsurfaceCone((19l), (17l)) == (1521.8090132193388f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String replaceSpecialchar(String text) {\n        return text.replaceAll(\"[\\\\sn    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(replaceSpecialchar((\"Python language, Programming language.\")).equals((\"Python:language::Programming:language:\")));",
            "assert(replaceSpecialchar((\"a b c,d e f\")).equals((\"a:b:c:d:e:f\")));",
            "assert(replaceSpecialchar((\"ram reshma,ram rahim\")).equals((\"ram:reshma:ram:rahim\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findFirstOccurrence(ArrayList<Long> A, long x) {\n        long i = 0;\n        while (i < A.size() && A.get(i) == x) {\n            i++;\n        }\n        return i;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)5l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (1l));",
            "assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)5l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (5l)) == (2l));",
            "assert(findFirstOccurrence((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)5l, (long)6l, (long)6l, (long)8l, (long)9l, (long)9l, (long)9l))), (6l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a javathon function to find sum of products of all possible subarray lists of a given array list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarray array lists/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumOfSubarrayProd(ArrayList<Long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumOfSubarrayProd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (20l));",
            "assert(sumOfSubarrayProd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))) == (5l));",
            "assert(sumOfSubarrayProd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a javathon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long toggleMiddleBits(long n) {\n        long result = 0;\n        while (n > 0) {\n            result |= (n & 1) << 1;\n            n >>= 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(toggleMiddleBits((9l)) == (15l));",
            "assert(toggleMiddleBits((10l)) == (12l));",
            "assert(toggleMiddleBits((11l)) == (13l));",
            "assert(toggleMiddleBits((65l)) == (127l));",
            "assert(toggleMiddleBits((77l)) == (115l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-data-structure-exercise-24.php",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long leftInsertion(ArrayList<Long> a, long x) {\n        long result = x;\n        for (int i = 0; i < a.size(); i++) {\n            long temp = a.get(i);\n            if (temp < x) {\n                result = temp;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));",
            "assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));",
            "assert(leftInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkStr(String string) {\n        return string.matches(\"[a-z]\");\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkStr((\"annie\")) == (true));",
            "assert(checkStr((\"dawood\")) == (false));",
            "assert(checkStr((\"Else\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/javathon-exercises/data-structures-and-algorithms/javathon-recursion-exercise-9.php",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float geometricSum(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(geometricSum((7l)) == (1.9921875f));",
            "assert(geometricSum((4l)) == (1.9375f));",
            "assert(geometricSum((8l)) == (1.99609375f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a javathon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findIndex(long n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i;\n        }\n        Arrays.sort(a);\n        long index = a[0];\n        for (int i = 1; i < n; i++) {\n            if (a[i] < index) {\n                index = a[i];\n            }\n        }\n        return index;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findIndex((2l)) == (4l));",
            "assert(findIndex((3l)) == (14l));",
            "assert(findIndex((4l)) == (45l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given pair to a key-value hash map using adjacent elements. https://www.geeksforgeeks.org/javathon-convert-pair-to-adjacent-pair-hash map/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> tupleToDict(Pair<Long, Long, Long, Long, Long, Long> test_tup) {\n        HashMap<Long,Long> result = new HashMap<>();\n        for (int i = 0; i < test_tup.size(); i++) {\n            result.put(test_tup.get(i).getFirst(), test_tup.get(i).getSecond());\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(tupleToDict((Pair.with(1l, 5l, 7l, 10l, 13l, 5l))).equals((new HashMap<Long,Long>(Map.of(1l, 5l, 7l, 10l, 13l, 5l)))));",
            "assert(tupleToDict((Pair.with(1l, 2l, 3l, 4l, 5l, 6l))).equals((new HashMap<Long,Long>(Map.of(1l, 2l, 3l, 4l, 5l, 6l)))));",
            "assert(tupleToDict((Pair.with(7l, 8l, 9l, 10l, 11l, 12l))).equals((new HashMap<Long,Long>(Map.of(7l, 8l, 9l, 10l, 11l, 12l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a javathon function to check whether all the characters are same or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean allCharactersSame(String s) {\n        int i = 0;\n        for (char c : s.toCharArray()) {\n            if (c!= s.charAt(i)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(allCharactersSame((\"python\")) == (false));",
            "assert(allCharactersSame((\"aaa\")) == (true));",
            "assert(allCharactersSame((\"data\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Create a list of all the faces.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static float areaTetrahedron(long side) {\n        Tetrahedron tetrahedron = new Tetrahedron();\n        List<Vertex> vertices = new ArrayList<>();\n        List<Edge> edges = new ArrayList<>();\n        List<Face> faces = new ArrayList<>();\n        List<Triangle> triangles = new ArrayList<>();\n        List<Edge> edges2 = new ArrayList<>();\n        List<Face> faces2 = new ArrayList<>();\n        List<Triangle> triangles2 = new ArrayList<>();\n        List<Edge> edges3 = new ArrayList<>();\n        List<Face> faces3 = new ArrayList<>();\n        List<Triangle> triangles3 = new ArrayList<>();\n        List<Edge> edges4 = new ArrayList<>();\n        List<Face> faces4 = new ArrayList<>();\n        List<Triangle> triangles4 = new ArrayList<>();\n        List<Edge> edges5 = new ArrayList<>();\n        List<Face> faces5 = new ArrayList\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(areaTetrahedron((3l)) == (15.588457268119894f));",
            "assert(areaTetrahedron((20l)) == (692.8203230275509f));",
            "assert(areaTetrahedron((10l)) == (173.20508075688772f));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given array list by specified number of items to the right direction. https://www.geeksforgeeks.org/javathon-program-right-rotate-array list-n/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> rotateRight(ArrayList<Long> list, long m) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            long temp = list.get(i);\n            list.set(i, list.get(i + m));\n            list.set(i + m, temp);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(rotateRight((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (3l)).equals((new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)10l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))));",
            "assert(rotateRight((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (2l)).equals((new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l)))));",
            "assert(rotateRight((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l))), (5l)).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given pair has any none value or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkNone(Object test_tup) {\n        if (test_tup == null) {\n            return true;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkNone(Pair.with(Optional.of(10l), Optional.of(4l), Optional.of(5l), Optional.of(6l), Optional.of(Optional.empty()))) == (true));",
            "assert(checkNone(Pair.with(7l, 8l, 9l, 11l, 14l)) == (false));",
            "assert(checkNone(Pair.with(Optional.of(1l), Optional.of(2l), Optional.of(3l), Optional.of(4l), Optional.of(Optional.empty()))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/javathon-exercises/lambda/javathon-lambda-exercise-24.php",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> divisibleByDigits(long startnum, long endnum) {\n        ArrayList<Long> result = new ArrayList<>();\n        long sum = 0;\n        for (long i = startnum; i <= endnum; i++) {\n            sum += i;\n            if (sum % 10 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(divisibleByDigits((1l), (22l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l, (long)22l)))));",
            "assert(divisibleByDigits((1l), (15l)).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)11l, (long)12l, (long)15l)))));",
            "assert(divisibleByDigits((20l), (25l)).equals((new ArrayList<Long>(Arrays.asList((long)22l, (long)24l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return null if the angle is larger than 360 degrees.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Float> sectorArea(long r, long a) {\n        if (r < 0) return Optional.empty();\n        if (a < 0) return Optional.empty();\n        if (a > 360) return Optional.empty();\n        return Optional.of(Math.abs(r) * Math.abs(a));\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sectorArea((4l), (45l)).equals(Optional.of(6.283185307179586f)));",
            "assert(sectorArea((9l), (45l)).equals(Optional.of(31.808625617596654f)));",
            "assert(sectorArea((9l), (361l)).equals(Optional.empty()));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lcsOfThree(String X, String Y, String Z) {\n        int x = 0, y = 0, z = 0;\n        int x1 = 0, y1 = 0, z1 = 0;\n        int x2 = 0, y2 = 0, z2 = 0;\n        int x3 = 0, y3 = 0, z3 = 0;\n        int x4 = 0, y4 = 0, z4 = 0;\n        int x5 = 0, y5 = 0, z5 = 0;\n        int x6 = 0, y6 = 0, z6 = 0;\n        int x7 = 0, y7 = 0, z7 = 0;\n        int x8 = 0, y8 = 0, z8 = 0;\n        int x9 = 0, y9 = 0, z9 = 0;\n        int x10 = 0, y10 = 0, z10 = 0;\n        int x11 = 0, y11 = 0, z11 = 0;\n        int x12 = 0, y12 = 0, z12 = 0;\n        int x13 = 0, y13 = 0, z13 = 0;\n        int x14 = 0, y14 = 0, z14 = 0;\n        int x15 = 0, y15 = 0, z15 = 0;\n        int x16 = 0, y16 = 0, z16 = 0;\n        int x17 = 0, y17 = 0, z17 = 0;\n        int x18 = 0, y18 = 0, z18 = 0;\n        int x19 = 0, y19 = 0, z19 = 0;\n        int x20 = 0, y20 = 0, z20 = 0;\n        int x21 = 0, y21 = 0\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lcsOfThree((\"AGGT12\"), (\"12TXAYB\"), (\"12XBA\")) == (2l));",
            "assert(lcsOfThree((\"Reels\"), (\"Reelsfor\"), (\"ReelsforReels\")) == (5l));",
            "assert(lcsOfThree((\"abcd1e2\"), (\"bc12ea\"), (\"bd1ea\")) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String capitalWordsSpaces(String str1) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < str1.length(); i++) {\n            char c = str1.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sb.append(c);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(capitalWordsSpaces((\"Python\")).equals((\"Python\")));",
            "assert(capitalWordsSpaces((\"PythonProgrammingExamples\")).equals((\"Python Programming Examples\")));",
            "assert(capitalWordsSpaces((\"GetReadyToBeCodingFreak\")).equals((\"Get Ready To Be Coding Freak\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given array list of strings of numbers numerically. https://www.geeksforgeeks.org/javathon-sort-numeric-strings-in-a-array list/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> sortNumericStrings(ArrayList<String> nums_str) {\n        ArrayList<Long> nums = new ArrayList<>();\n        for (int i = 0; i < nums_str.size(); i++) {\n            nums.add(Long.parseLong(nums_str.get(i)));\n        }\n        Collections.sort(nums);\n        return nums;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sortNumericStrings((new ArrayList<String>(Arrays.asList((String)\"4\", (String)\"12\", (String)\"45\", (String)\"7\", (String)\"0\", (String)\"100\", (String)\"200\", (String)\"-12\", (String)\"-500\")))).equals((new ArrayList<Long>(Arrays.asList((long)-500l, (long)-12l, (long)0l, (long)4l, (long)7l, (long)12l, (long)45l, (long)100l, (long)200l)))));",
            "assert(sortNumericStrings((new ArrayList<String>(Arrays.asList((String)\"2\", (String)\"3\", (String)\"8\", (String)\"4\", (String)\"7\", (String)\"9\", (String)\"8\", (String)\"2\", (String)\"6\", (String)\"5\", (String)\"1\", (String)\"6\", (String)\"1\", (String)\"2\", (String)\"3\", (String)\"4\", (String)\"6\", (String)\"9\", (String)\"1\", (String)\"2\")))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)2l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)8l, (long)9l, (long)9l)))));",
            "assert(sortNumericStrings((new ArrayList<String>(Arrays.asList((String)\"1\", (String)\"3\", (String)\"5\", (String)\"7\", (String)\"1\", (String)\"3\", (String)\"13\", (String)\"15\", (String)\"17\", (String)\"5\", (String)\"7 \", (String)\"9\", (String)\"1\", (String)\"11\")))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)3l, (long)3l, (long)5l, (long)5l, (long)7l, (long)7l, (long)9l, (long)11l, (long)13l, (long)15l, (long)17l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isSamepatterns(ArrayList<String> colors, ArrayList<String> patterns) {\n        if (colors.size()!= patterns.size()) {\n            return false;\n        }\n        for (int i = 0; i < colors.size(); i++) {\n            if (!colors.get(i).equals(patterns.get(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isSamepatterns((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"green\", (String)\"green\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\")))) == (true));",
            "assert(isSamepatterns((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"green\", (String)\"greenn\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\", (String)\"b\")))) == (false));",
            "assert(isSamepatterns((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"green\", (String)\"greenn\"))), (new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"b\")))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given pair to the given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> addTuple(ArrayList<Long> test_list, Pair<Long, Long> test_tup) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            result.add(test_list.get(i) + test_tup.getFirst());\n            result.add(test_list.get(i) + test_tup.getSecond());\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(addTuple((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l))), (Pair.with(9l, 10l))).equals((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)9l, (long)10l)))));",
            "assert(addTuple((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l))), (Pair.with(10l, 11l))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)8l, (long)10l, (long)11l)))));",
            "assert(addTuple((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l))), (Pair.with(11l, 12l))).equals((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)11l, (long)12l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array array list represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array array list-represents-a-binary-heap/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkMinHeap(ArrayList<Long> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        if (arr.size() == 1) {\n            return false;\n        }\n        if (arr.size() == 2) {\n            return true;\n        }\n        if (arr.size() == 3) {\n            return false;\n        }\n        if (arr.size() == 4) {\n            return true;\n        }\n        if (arr.size() == 5) {\n            return false;\n        }\n        if (arr.size() == 6) {\n            return true;\n        }\n        if (arr.size() == 7) {\n            return false;\n        }\n        if (arr.size() == 8) {\n            return true;\n        }\n        if (arr.size() == 9) {\n            return false;\n        }\n        if (arr.size() == 10) {\n            return true;\n        }\n        if (arr.size() == 11) {\n            return false;\n        }\n        if (arr.size() == 12) {\n            return true;\n        }\n        if (arr.size() == 13) {\n            return false;\n        }\n        if (arr.size() == 14) {\n            return true;\n        }\n        if (arr.size() == 15) {\n            return false;\n        }\n        if (arr.size() == 16) {\n            return true;\n        }\n        if (arr.size() == 17) {\n            return false;\n        }\n        if (arr.size() == 18) {\n            return true;\n\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkMinHeap((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l)))) == (true));",
            "assert(checkMinHeap((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)10l, (long)15l)))) == (true));",
            "assert(checkMinHeap((new ArrayList<Long>(Arrays.asList((long)2l, (long)10l, (long)4l, (long)5l, (long)3l, (long)15l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long jacobsthalNum(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 1;\n        }\n        if (n == 5) {\n            return 1;\n        }\n        if (n == 11) {\n            return 1;\n        }\n        if (n == 21) {\n            return 1;\n        }\n        if (n == 43) {\n            return 1;\n        }\n        if (n == 85) {\n            return 1;\n        }\n        if (n == 171) {\n            return 1;\n        }\n        if (n == 341) {\n            return 1;\n        }\n        if (n == 683) {\n            return 1;\n        }\n        if (n == 1365) {\n            return 1;\n        }\n        if (n == 2731) {\n            return 1;\n        }\n        if (n == 4321) {\n            return 1;\n        }\n        if (n == 8521) {\n            return 1;\n        }\n        if (n == 171121) {\n            return 1;\n        }\n        if (n == 341121) {\n            return 1;\n        }\n        if (n == 683121) {\n            return 1;\n        }\n        if (n == 1365121) {\n            return 1;\n        }\n        if (n ==\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(jacobsthalNum((5l)) == (11l));",
            "assert(jacobsthalNum((2l)) == (1l));",
            "assert(jacobsthalNum((4l)) == (5l));",
            "assert(jacobsthalNum((13l)) == (2731l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from pair array list. https://www.geeksforgeeks.org/javathon-find-minimum-k-records-from-pair-array list/ - in this case a verbatim cojava of test cases",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<String, Long>> minK(ArrayList<Pair<String, Long>> test_list, long K) {\n        ArrayList<Pair<String, Long>> result = new ArrayList<>();\n        for (int i = 0; i < test_list.size(); i++) {\n            Pair<String, Long> pair = test_list.get(i);\n            if (pair.getFirst().equals(pair.getSecond())) {\n                result.add(pair);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(minK((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Manjeet\", 10l), (Pair<String, Long>)Pair.with(\"Akshat\", 4l), (Pair<String, Long>)Pair.with(\"Akash\", 2l), (Pair<String, Long>)Pair.with(\"Nikhil\", 8l)))), (2l)).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Akash\", 2l), (Pair<String, Long>)Pair.with(\"Akshat\", 4l))))));",
            "assert(minK((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Sanjeev\", 11l), (Pair<String, Long>)Pair.with(\"Angat\", 5l), (Pair<String, Long>)Pair.with(\"Akash\", 3l), (Pair<String, Long>)Pair.with(\"Nepin\", 9l)))), (3l)).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Akash\", 3l), (Pair<String, Long>)Pair.with(\"Angat\", 5l), (Pair<String, Long>)Pair.with(\"Nepin\", 9l))))));",
            "assert(minK((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"tanmay\", 14l), (Pair<String, Long>)Pair.with(\"Amer\", 11l), (Pair<String, Long>)Pair.with(\"Ayesha\", 9l), (Pair<String, Long>)Pair.with(\"SKD\", 16l)))), (1l)).equals((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Ayesha\", 9l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for array lists l1, l2, l3 if it appears in all three array lists under the same index. Write a function to find common elements from three array lists. The function should return an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Object> extractIndexList(ArrayList<Long> l1, ArrayList<Long> l2, ArrayList<Long> l3) {\n        ArrayList<Object> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            if (l1.get(i) == l2.get(i) && l1.get(i) == l3.get(i)) {\n                result.add(l1.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)7l)))));",
            "assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)6l)))));",
            "assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)3l, (long)4l, (long)6l, (long)5l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList((long)1l, (long)5l)))));",
            "assert(extractIndexList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)6l, (long)6l, (long)6l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)7l)))).equals((new ArrayList<Object>(Arrays.asList()))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/javathon-exercises/re/javathon-re-exercise-3.php",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textMatchZeroOne(String text) {\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == 'a' && text.charAt(i + 1) == 'b') {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textMatchZeroOne((\"ac\")) == (false));",
            "assert(textMatchZeroOne((\"dc\")) == (false));",
            "assert(textMatchZeroOne((\"abbbba\")) == (true));",
            "assert(textMatchZeroOne((\"dsabbbba\")) == (true));",
            "assert(textMatchZeroOne((\"asbbbba\")) == (false));",
            "assert(textMatchZeroOne((\"abaaa\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string array list. https://www.geeksforgeeks.org/javathon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countReversePairs(ArrayList<String> test_list) {\n        long count = 0;\n        for (int i = 0; i < test_list.size(); i++) {\n            String s = test_list.get(i);\n            for (int j = i + 1; j < test_list.size(); j++) {\n                String t = test_list.get(j);\n                if (s.equals(t)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countReversePairs((new ArrayList<String>(Arrays.asList((String)\"julia\", (String)\"best\", (String)\"tseb\", (String)\"for\", (String)\"ailuj\")))) == (2l));",
            "assert(countReversePairs((new ArrayList<String>(Arrays.asList((String)\"geeks\", (String)\"best\", (String)\"for\", (String)\"skeeg\")))) == (1l));",
            "assert(countReversePairs((new ArrayList<String>(Arrays.asList((String)\"makes\", (String)\"best\", (String)\"sekam\", (String)\"for\", (String)\"rof\")))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isDecimal(String num) {\n        try {\n            BigDecimal bd = new BigDecimal(num);\n            return bd.scale() == 0 && bd.precision() == 2;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isDecimal((\"123.11\")) == (true));",
            "assert(isDecimal((\"e666.86\")) == (false));",
            "assert(isDecimal((\"3.124587\")) == (false));",
            "assert(isDecimal((\"1.11\")) == (true));",
            "assert(isDecimal((\"1.1.11\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find pairs which have all elements divisible by k from the given array list of pairs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Long, Long, Long>> findTuples(ArrayList<Pair<Long, Long, Long>> test_list, long K) {\n        ArrayList<Pair<Long, Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long, Long> pair : test_list) {\n            if (pair.getRight() % K == 0) {\n                result.add(pair);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findTuples((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(6l, 24l, 12l), (Pair<Long, Long, Long>)Pair.with(7l, 9l, 6l), (Pair<Long, Long, Long>)Pair.with(12l, 18l, 21l)))), (6l)).equals((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(6l, 24l, 12l))))));",
            "assert(findTuples((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(5l, 25l, 30l), (Pair<Long, Long, Long>)Pair.with(4l, 2l, 3l), (Pair<Long, Long, Long>)Pair.with(7l, 8l, 9l)))), (5l)).equals((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(5l, 25l, 30l))))));",
            "assert(findTuples((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(7l, 9l, 16l), (Pair<Long, Long, Long>)Pair.with(8l, 16l, 4l), (Pair<Long, Long, Long>)Pair.with(19l, 17l, 18l)))), (4l)).equals((new ArrayList<Pair<Long, Long, Long>>(Arrays.asList((Pair<Long, Long, Long>)Pair.with(8l, 16l, 4l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a javathon function to check whether an array array list of numbers contains only one distinct element or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean uniqueElement(ArrayList<Long> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (long i : arr) {\n            if (count == 0) {\n                if (i == arr.get(0)) {\n                    return true;\n                }\n            } else if (i == arr.get(count - 1)) {\n                return false;\n            }\n            count++;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l)))) == (true));",
            "assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (false));",
            "assert(uniqueElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write your code here",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkMonthnumberNumber(long monthnum3) {\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkMonthnumberNumber((6l)) == (true));",
            "assert(checkMonthnumberNumber((2l)) == (false));",
            "assert(checkMonthnumberNumber((12l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a javathon function to find the minimum difference between any two elements in a given array array list. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findMinDiff(ArrayList<Long> arr, long n) {\n        long min = Long.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            long temp = arr.get(i);\n            if (temp < min) {\n                min = temp;\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findMinDiff((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)19l, (long)18l, (long)25l))), (6l)) == (1l));",
            "assert(findMinDiff((new ArrayList<Long>(Arrays.asList((long)4l, (long)3l, (long)2l, (long)6l))), (4l)) == (1l));",
            "assert(findMinDiff((new ArrayList<Long>(Arrays.asList((long)30l, (long)5l, (long)20l, (long)9l))), (4l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a javathon function to count number of digits in a given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long numberCtr(String str) {\n        long result = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (Character.isDigit(c)) {\n                result++;\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(numberCtr((\"program2bedone\")) == (1l));",
            "assert(numberCtr((\"3wonders\")) == (1l));",
            "assert(numberCtr((\"123\")) == (3l));",
            "assert(numberCtr((\"3wond-1ers2\")) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long isPolite(long n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n            return isPolite(n - 1) + isPolite(n - 2);\n        }\n        return isPolite(n - 1) + isPolite(n - 2) + isPolite(n - 3);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isPolite((7l)) == (11l));",
            "assert(isPolite((4l)) == (7l));",
            "assert(isPolite((9l)) == (13l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return an array array list of all pairs of consecutive items in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> pairWise(ArrayList<Long> l1) {\n        ArrayList<Pair<Long, Long>> res = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            res.add(new Pair<>(l1.get(i), l1.get(i + 1)));\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(pairWise((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l, (long)3l, (long)3l, (long)4l, (long)4l, (long)5l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 1l), (Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(3l, 3l), (Pair<Long, Long>)Pair.with(3l, 4l), (Pair<Long, Long>)Pair.with(4l, 4l), (Pair<Long, Long>)Pair.with(4l, 5l))))));",
            "assert(pairWise((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l, (long)10l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 5l), (Pair<Long, Long>)Pair.with(5l, 7l), (Pair<Long, Long>)Pair.with(7l, 9l), (Pair<Long, Long>)Pair.with(9l, 10l))))));",
            "assert(pairWise((new ArrayList<Long>(Arrays.asList((long)5l, (long)1l, (long)9l, (long)7l, (long)10l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(5l, 1l), (Pair<Long, Long>)Pair.with(1l, 9l), (Pair<Long, Long>)Pair.with(9l, 7l), (Pair<Long, Long>)Pair.with(7l, 10l))))));",
            "assert(pairWise((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(1l, 2l), (Pair<Long, Long>)Pair.with(2l, 3l), (Pair<Long, Long>)Pair.with(3l, 4l), (Pair<Long, Long>)Pair.with(4l, 5l), (Pair<Long, Long>)Pair.with(5l, 6l), (Pair<Long, Long>)Pair.with(6l, 7l), (Pair<Long, Long>)Pair.with(7l, 8l), (Pair<Long, Long>)Pair.with(8l, 9l), (Pair<Long, Long>)Pair.with(9l, 10l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a javathon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array array list of numbers and the sum,",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long getPairsCount(ArrayList<Long> arr, long sum) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == sum) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)1l))), (2l)) == (6l));",
            "assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)-1l, (long)5l))), (6l)) == (3l));",
            "assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)-2l, (long)3l))), (1l)) == (1l));",
            "assert(getPairsCount((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)3l))), (-3l)) == (1l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a javathon function to get the difference between two array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> Diff(ArrayList<Long> li1, ArrayList<Long> li2) {\n        ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < li1.size(); i++) {\n            res.add(li1.get(i) - li2.get(i));\n        }\n        return res;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(Diff((new ArrayList<Long>(Arrays.asList((long)10l, (long)15l, (long)20l, (long)25l, (long)30l, (long)35l, (long)40l))), (new ArrayList<Long>(Arrays.asList((long)25l, (long)40l, (long)35l)))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)15l)))));",
            "assert(Diff((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l)))));",
            "assert(Diff((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)6l, (long)7l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a javathon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long oddNumSum(long n) {\n        long sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * (i + 1);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(oddNumSum((2l)) == (82l));",
            "assert(oddNumSum((3l)) == (707l));",
            "assert(oddNumSum((4l)) == (3108l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkExpression(String exp) {\n        int count = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 =\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkExpression((\"{()}[{}]\")) == (true));",
            "assert(checkExpression((\"{()}[{]\")) == (false));",
            "assert(checkExpression((\"{()}[{}][]({})\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeLength(String test_str, long K) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < test_str.length(); i++) {\n            if (test_str.charAt(i) =='') {\n                sb.append(test_str.charAt(i));\n            } else {\n                sb.append(test_str.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeLength((\"The person is most value tet\"), (3l)).equals((\"person is most value\")));",
            "assert(removeLength((\"If you told me about this ok\"), (4l)).equals((\"If you me about ok\")));",
            "assert(removeLength((\"Forces of darkeness is come into the play\"), (4l)).equals((\"Forces of darkeness is the\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Optional<Pair<String, Long, Long>> occuranceSubstring(String text, String pattern) {\n        List<Pair<String, Long, Long>> matches = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches2 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches3 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches4 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches5 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches6 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches7 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches8 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches9 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches10 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches11 = new ArrayList<>();\n        List<Pair<String, Long, Long>> matches12 = new ArrayList<>();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(occuranceSubstring((\"python programming, python language\"), (\"python\")).equals(Optional.of(Pair.with(\"python\", 0l, 6l))));",
            "assert(occuranceSubstring((\"python programming,programming language\"), (\"programming\")).equals(Optional.of(Pair.with(\"programming\", 7l, 18l))));",
            "assert(occuranceSubstring((\"python programming,programming language\"), (\"language\")).equals(Optional.of(Pair.with(\"language\", 31l, 39l))));",
            "assert(occuranceSubstring((\"c++ programming, c++ language\"), (\"python\")).equals(Optional.empty()));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a javathon function to check whether every odd index contains odd numbers of a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean oddPosition(ArrayList<Long> nums) {\n        int odd = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) % 2 == 1) {\n                odd++;\n            }\n        }\n        return odd == nums.size();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l, (long)3l, (long)6l, (long)7l, (long)6l, (long)3l)))) == (true));",
            "assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l)))) == (true));",
            "assert(oddPosition((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countVowels(String test_str) {\n        long count = 0;\n        for (int i = 0; i < test_str.length(); i++) {\n            if (Character.isLetter(test_str.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countVowels((\"bestinstareels\")) == (7l));",
            "assert(countVowels((\"partofthejourneyistheend\")) == (12l));",
            "assert(countVowels((\"amazonprime\")) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a javathon function to find the sum of non-repeated elements in a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findSum(ArrayList<Long> arr) {\n        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)1l, (long)1l, (long)4l, (long)5l, (long)6l)))) == (21l));",
            "assert(findSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)9l, (long)4l, (long)2l, (long)10l, (long)10l, (long)45l, (long)4l)))) == (71l));",
            "assert(findSum((new ArrayList<Long>(Arrays.asList((long)12l, (long)10l, (long)9l, (long)45l, (long)2l, (long)10l, (long)10l, (long)45l, (long)10l)))) == (78l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given array list elements into subarray lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<ArrayList<Object>> packConsecutiveDuplicates(ArrayList<Object> list1) {\n        ArrayList<ArrayList<Object>> result = new ArrayList<>();\n        for (int i = 0; i < list1.size(); i++) {\n            ArrayList<Object> sublist = new ArrayList<>();\n            sublist.add(list1.get(i));\n            result.add(sublist);\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(packConsecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)0l, (long)0l, (long)1l, (long)2l, (long)3l, (long)4l, (long)4l, (long)5l, (long)6l, (long)6l, (long)6l, (long)7l, (long)8l, (long)9l, (long)4l, (long)4l)))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)0l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)6l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l)))))));",
            "assert(packConsecutiveDuplicates((new ArrayList<Object>(Arrays.asList((long)10l, (long)10l, (long)15l, (long)19l, (long)18l, (long)18l, (long)17l, (long)26l, (long)26l, (long)17l, (long)18l, (long)10l)))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)10l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)15l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)19l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)18l, (long)18l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)17l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)26l, (long)26l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)17l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)18l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l)))))));",
            "assert(packConsecutiveDuplicates((new ArrayList<Object>(Arrays.asList((String)\"a\", (String)\"a\", (String)\"b\", (String)\"c\", (String)\"d\", (String)\"d\")))).equals((new ArrayList<ArrayList<Object>>(Arrays.asList((ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"a\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"b\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"c\")), (ArrayList<String>)new ArrayList<String>(Arrays.asList((String)\"d\", (String)\"d\")))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a javathon function to find whether a number is divisible by 11.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isDiff(long n) {\n        return n % 11 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isDiff((12345l)) == (false));",
            "assert(isDiff((1212112l)) == (true));",
            "assert(isDiff((1212l)) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with pairs in the given pair array list. https://www.geeksforgeeks.org/javathon-combinations-of-sum-with-pairs-in-pair-array list/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Pair<Long, Long>> findCombinations(ArrayList<Pair<Long, Long>> test_list) {\n        ArrayList<Pair<Long, Long>> result = new ArrayList<>();\n        for (Pair<Long, Long> pair : test_list) {\n            if (pair.getFirst() == pair.getSecond()) {\n                result.add(pair);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findCombinations((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(2l, 4l), (Pair<Long, Long>)Pair.with(6l, 7l), (Pair<Long, Long>)Pair.with(5l, 1l), (Pair<Long, Long>)Pair.with(6l, 10l))))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(8l, 11l), (Pair<Long, Long>)Pair.with(7l, 5l), (Pair<Long, Long>)Pair.with(8l, 14l), (Pair<Long, Long>)Pair.with(11l, 8l), (Pair<Long, Long>)Pair.with(12l, 17l), (Pair<Long, Long>)Pair.with(11l, 11l))))));",
            "assert(findCombinations((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(3l, 5l), (Pair<Long, Long>)Pair.with(7l, 8l), (Pair<Long, Long>)Pair.with(6l, 2l), (Pair<Long, Long>)Pair.with(7l, 11l))))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(10l, 13l), (Pair<Long, Long>)Pair.with(9l, 7l), (Pair<Long, Long>)Pair.with(10l, 16l), (Pair<Long, Long>)Pair.with(13l, 10l), (Pair<Long, Long>)Pair.with(14l, 19l), (Pair<Long, Long>)Pair.with(13l, 13l))))));",
            "assert(findCombinations((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(4l, 6l), (Pair<Long, Long>)Pair.with(8l, 9l), (Pair<Long, Long>)Pair.with(7l, 3l), (Pair<Long, Long>)Pair.with(8l, 12l))))).equals((new ArrayList<Pair<Long, Long>>(Arrays.asList((Pair<Long, Long>)Pair.with(12l, 15l), (Pair<Long, Long>)Pair.with(11l, 9l), (Pair<Long, Long>)Pair.with(12l, 18l), (Pair<Long, Long>)Pair.with(15l, 12l), (Pair<Long, Long>)Pair.with(16l, 21l), (Pair<Long, Long>)Pair.with(15l, 15l))))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a javathon function to check whether the count of divisors is even. https://www.w3resource.com/javathon-exercises/basic/javathon-basic-1-exercise-24.php",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean countDivisors(long n) {\n        long[] divisors = new long[n];\n        for (int i = 0; i < n; i++) {\n            divisors[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (divisors[i] % 2 == 0) {\n                return false;\n            }\n            divisors[i] = divisors[i] / 2;\n        }\n        return true;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countDivisors((10l)) == (true));",
            "assert(countDivisors((100l)) == (false));",
            "assert(countDivisors((125l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a javathon function to find the sum of all odd length subarray array lists. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarray array lists/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long oddLengthSum(ArrayList<Long> arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(oddLengthSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l)))) == (14l));",
            "assert(oddLengthSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)2l)))) == (15l));",
            "assert(oddLengthSum((new ArrayList<Long>(Arrays.asList((long)1l, (long)7l)))) == (8l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Float> rgbToHsv(long r, long g, long b) {\n        ArrayList<Float> result = new ArrayList<>();\n        int r1 = (int) (r / 255);\n        int g1 = (int) (g / 255);\n        int b1 = (int) (b / 255);\n        int r2 = (int) (r1 / 255);\n        int g2 = (int) (g1 / 255);\n        int b2 = (int) (b1 / 255);\n        int r3 = (int) (r2 / 255);\n        int g3 = (int) (g2 / 255);\n        int b3 = (int) (b2 / 255);\n        int r4 = (int) (r3 / 255);\n        int g4 = (int) (g3 / 255);\n        int b4 = (int) (b3 / 255);\n        int r5 = (int) (r4 / 255);\n        int g5 = (int) (g4 / 255);\n        int b5 = (int) (b4 / 255);\n        int r6 = (int) (r5 / 255);\n        int g6 = (int) (g5 / 255);\n        int b6 = (int) (b5 / 255);\n        int r7 = (int) (r6 / 255);\n        int g7 = (int) (g6 / 255);\n        int b7 = (int) (b6 / 255);\n        int r8 = (int) (r7 / 255);\n        int g8 = (int) (g7 / 255);\n        int b8 = (int) (b7 / 255);\n        int r9 = (int) (r8 /\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(rgbToHsv((255l), (255l), (255l)).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.0f, (float)100.0f)))));",
            "assert(rgbToHsv((0l), (215l), (0l)).equals((new ArrayList<Float>(Arrays.asList((float)120.0f, (float)100.0f, (float)84.31372549019608f)))));",
            "assert(rgbToHsv((10l), (215l), (110l)).equals((new ArrayList<Float>(Arrays.asList((float)149.26829268292684f, (float)95.34883720930233f, (float)84.31372549019608f)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long mulEvenOdd(ArrayList<Long> list1) {\n        long sum = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            sum += list1.get(i);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(mulEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)1l, (long)6l, (long)8l)))) == (4l));",
            "assert(mulEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))) == (2l));",
            "assert(mulEvenOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)7l, (long)9l, (long)10l)))) == (10l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert pair string to integer pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long> tupleStrInt(String test_str) {\n        String[] test_str_arr = test_str.split(\" \");\n        String[] test_str_arr_1 = test_str_arr[0].split(\"-\");\n        String[] test_str_arr_2 = test_str_arr[1].split(\"-\");\n        String[] test_str_arr_3 = test_str_arr[2].split(\"-\");\n        String[] test_str_arr_4 = test_str_arr[3].split(\"-\");\n        String[] test_str_arr_5 = test_str_arr[4].split(\"-\");\n        String[] test_str_arr_6 = test_str_arr[5].split(\"-\");\n        String[] test_str_arr_7 = test_str_arr[6].split(\"-\");\n        String[] test_str_arr_8 = test_str_arr[7].split(\"-\");\n        String[] test_str_arr_9 = test_str_arr[8].split(\"-\");\n        String[] test_str_arr_10 = test_str_arr[9].split(\"-\");\n        String[] test_str_arr_11 = test_str_arr[10].split(\"-\");\n        String[] test_str_arr_12 = test_str_arr[11].split(\"-\");\n        String[] test_str_arr_13 = test_str_arr[12].split(\"-\");\n        String[] test_str_arr_14 = test_str_arr[13].split(\"-\");\n        String[] test_str_arr_15 = test_str_arr[14].split(\"-\");\n        String[] test_str_arr_16 = test_str_arr[15].split(\"-\");\n        String[] test_str_arr_17 = test_str\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(tupleStrInt((\"(7, 8, 9)\")).equals((Pair.with(7l, 8l, 9l))));",
            "assert(tupleStrInt((\"(1, 2, 3)\")).equals((Pair.with(1l, 2l, 3l))));",
            "assert(tupleStrInt((\"(4, 5, 6)\")).equals((Pair.with(4l, 5l, 6l))));",
            "assert(tupleStrInt((\"(7, 81, 19)\")).equals((Pair.with(7l, 81l, 19l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long rightInsertion(ArrayList<Long> a, long x) {\n        long i = 0;\n        long j = a.size() - 1;\n        while (i < j) {\n            long k = (i + j) / 2;\n            if (a.get(k) < x) {\n                i = k + 1;\n            } else {\n                j = k;\n            }\n        }\n        return a.get(i);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (6l)) == (4l));",
            "assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (3l)) == (2l));",
            "assert(rightInsertion((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)5l))), (7l)) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textMatchThree(String text) {\n        return text.matches(\"[a-z]{3}\");\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textMatchThree((\"ac\")) == (false));",
            "assert(textMatchThree((\"dc\")) == (false));",
            "assert(textMatchThree((\"abbbba\")) == (true));",
            "assert(textMatchThree((\"caacabbbba\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new pair from the given string and array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<String, String, String> newTuple(ArrayList<String> test_list, String test_str) {\n        return new Pair<>(test_list.get(0), test_list.get(1), test_str);\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(newTuple((new ArrayList<String>(Arrays.asList((String)\"WEB\", (String)\"is\"))), (\"best\")).equals((Pair.with(\"WEB\", \"is\", \"best\"))));",
            "assert(newTuple((new ArrayList<String>(Arrays.asList((String)\"We\", (String)\"are\"))), (\"Developers\")).equals((Pair.with(\"We\", \"are\", \"Developers\"))));",
            "assert(newTuple((new ArrayList<String>(Arrays.asList((String)\"Part\", (String)\"is\"))), (\"Wrong\")).equals((Pair.with(\"Part\", \"is\", \"Wrong\"))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a javathon function to check whether every even index contains even numbers of a given array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean evenPosition(ArrayList<Long> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(evenPosition((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (false));",
            "assert(evenPosition((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (false));",
            "assert(evenPosition((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)4l)))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Create a pair of longs.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static Pair<Long, Long, Long, Long> removeNested(Object test_tup) {\n        Pair<Long, Long> pair = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair2 = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair3 = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair4 = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair5 = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair6 = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair7 = new Pair<>(Long.valueOf(test_tup.toString()), Long.valueOf(test_tup.toString()));\n        Pair<Long, Long> pair8 = new Pair<>(Long.valueOf(test_tup.to\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeNested(Pair.with(1l, 5l, 7l, Pair.with(4l, 6l), 10l)).equals((Pair.with(1l, 5l, 7l, 10l))));",
            "assert(removeNested(Pair.with(2l, 6l, 8l, Pair.with(5l, 7l), 11l)).equals((Pair.with(2l, 6l, 8l, 11l))));",
            "assert(removeNested(Pair.with(3l, 7l, 9l, Pair.with(6l, 8l), 12l)).equals((Pair.with(3l, 7l, 9l, 12l))));",
            "assert(removeNested(Pair.with(3l, 7l, 9l, Pair.with(6l, 8l), Pair.with(5l, 12l), 12l)).equals((Pair.with(3l, 7l, 9l, 12l))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a javathon function to count the number of array lists in a given number of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countList(ArrayList<ArrayList<Long>> input_list) {\n        long count = 0;\n        for (ArrayList<Long> list : input_list) {\n            count += list.size();\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)7l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)11l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)13l, (long)15l, (long)17l)))))) == (4l));",
            "assert(countList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l)))))) == (3l));",
            "assert(countList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)0l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)0l)))))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a javathon function to find the last position of an element in a sorted array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long last(ArrayList<Long> arr, long x) {\n        long last = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > last) {\n                last = arr.get(i);\n            }\n        }\n        return last;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(last((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (1l)) == (0l));",
            "assert(last((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)1l, (long)2l, (long)3l, (long)4l))), (1l)) == (2l));",
            "assert(last((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)2l, (long)3l, (long)6l, (long)8l, (long)9l))), (3l)) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean textStartaEndb(String text) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(textStartaEndb((\"aabbbb\")) == (true));",
            "assert(textStartaEndb((\"aabAbbbc\")) == (false));",
            "assert(textStartaEndb((\"accddbbjjj\")) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long returnSum(HashMap<String,Long> dict) {\n        long sum = 0;\n        for (String key : dict.keySet()) {\n            sum += dict.get(key);\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(returnSum((new HashMap<String,Long>(Map.of(\"a\", 100l, \"b\", 200l, \"c\", 300l)))) == (600l));",
            "assert(returnSum((new HashMap<String,Long>(Map.of(\"a\", 25l, \"b\", 18l, \"c\", 45l)))) == (88l));",
            "assert(returnSum((new HashMap<String,Long>(Map.of(\"a\", 36l, \"b\", 39l, \"c\", 49l)))) == (124l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a javathon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sumInRange(long l, long r) {\n        long sum = 0;\n        for (long i = l; i <= r; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sumInRange((2l), (5l)) == (8l));",
            "assert(sumInRange((5l), (7l)) == (12l));",
            "assert(sumInRange((7l), (13l)) == (40l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a javathon function to find the sum of an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long Sum(ArrayList<Long> arr) {\n        long sum = 0;\n        for (long i : arr) {\n            sum += i;\n        }\n        return sum;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(Sum((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (6l));",
            "assert(Sum((new ArrayList<Long>(Arrays.asList((long)15l, (long)12l, (long)13l, (long)10l)))) == (50l));",
            "assert(Sum((new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l)))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long leftRotate(long n, long d) {\n        long result = n;\n        long temp = result;\n        for (int i = 0; i < d; i++) {\n            temp = temp << 1;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(leftRotate((16l), (2l)) == (64l));",
            "assert(leftRotate((10l), (2l)) == (40l));",
            "assert(leftRotate((99l), (3l)) == (792l));",
            "assert(leftRotate((99l), (3l)) == (792l));",
            "assert(leftRotate((1l), (3l)) == (8l));",
            "assert(leftRotate((5l), (3l)) == (40l));",
            "assert(leftRotate((29l), (3l)) == (232l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a javathon function to check whether the length of the word is odd or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean wordLen(String s) {\n        int len = s.length();\n        if (len % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(wordLen((\"Hadoop\")) == (false));",
            "assert(wordLen((\"great\")) == (true));",
            "assert(wordLen((\"structure\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String removeAllSpaces(String text) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c =='') {\n                sb.append(c);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(removeAllSpaces((\"python  program\")).equals((\"pythonprogram\")));",
            "assert(removeAllSpaces((\"python   programming    language\")).equals((\"pythonprogramminglanguage\")));",
            "assert(removeAllSpaces((\"python                     program\")).equals((\"pythonprogram\")));",
            "assert(removeAllSpaces((\"   python                     program\")).equals((\"pythonprogram\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a javathon function to count the number of equal numbers from three given integers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long testThreeEqual(long x, long y, long z) {\n        long result = 0;\n        if (x == 0) {\n            if (y == 0) {\n                if (z == 0) {\n                    result = 1;\n                } else {\n                    result = 0;\n                }\n            } else {\n                result = 0;\n            }\n        } else if (y == 0) {\n            if (z == 0) {\n                result = 1;\n            } else {\n                result = 0;\n            }\n        } else if (z == 0) {\n            result = 1;\n        } else {\n            result = 0;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(testThreeEqual((1l), (1l), (1l)) == (3l));",
            "assert(testThreeEqual((-1l), (-2l), (-3l)) == (0l));",
            "assert(testThreeEqual((1l), (2l), (2l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a javathon function to count the number of rotations required to generate a sorted array array list. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array array list/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long countRotation(ArrayList<Long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            count += arr.get(i);\n        }\n        return count;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(countRotation((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)))) == (1l));",
            "assert(countRotation((new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)1l, (long)2l, (long)3l)))) == (2l));",
            "assert(countRotation((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)1l, (long)2l, (long)3l)))) == (3l));",
            "assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (0l));",
            "assert(countRotation((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l)))) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isPerfectSquare(long n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        if (n % 3 == 0) {\n            return false;\n        }\n        if (n % 5 == 0) {\n            return false;\n        }\n        if (n % 7 == 0) {\n            return false;\n        }\n        if (n % 11 == 0) {\n            return false;\n        }\n        if (n % 13 == 0) {\n            return false;\n        }\n        if (n % 17 == 0) {\n            return false;\n        }\n        if (n % 19 == 0) {\n            return false;\n        }\n        if (n % 23 == 0) {\n            return false;\n        }\n        if (n % 29 == 0) {\n            return false;\n        }\n        if (n % 31 == 0) {\n            return false;\n        }\n        if (n % 37 == 0) {\n            return false;\n        }\n        if (n % 41 == 0) {\n            return false;\n        }\n        if (n % 43 == 0) {\n            return false;\n        }\n        if (n % 47 == 0) {\n            return false;\n        }\n        if (n % 53 == 0) {\n            return false;\n        }\n        if (n % 59 == 0) {\n            return false;\n        }\n        if (n % 61 == 0) {\n            return false;\n        }\n        if (n % 67 == 0) {\n            return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isPerfectSquare((10l)) == (false));",
            "assert(isPerfectSquare((36l)) == (true));",
            "assert(isPerfectSquare((14l)) == (false));",
            "assert(isPerfectSquare((196l)) == (true));",
            "assert(isPerfectSquare((125l)) == (false));",
            "assert(isPerfectSquare((15625l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in an array array list is even or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isProductEven(ArrayList<Long> arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        return sum % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isProductEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (true));",
            "assert(isProductEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)1l, (long)4l)))) == (true));",
            "assert(isProductEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l)))) == (false));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the array list in an array array list of array lists whose sum of elements is the highest.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> maxSumList(ArrayList<ArrayList<Long>> lists) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (ArrayList<Long> list : lists) {\n            result.add(list.get(0));\n            for (int i = 1; i < list.size(); i++) {\n                result.add(list.get(i));\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxSumList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l)))))).equals((new ArrayList<Long>(Arrays.asList((long)10l, (long)11l, (long)12l)))));",
            "assert(maxSumList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)6l, (long)5l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)12l, (long)11l, (long)10l)))))).equals((new ArrayList<Long>(Arrays.asList((long)12l, (long)11l, (long)10l)))));",
            "assert(maxSumList((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l)))))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)1l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long maxRunUppercase(String test_str) {\n        long max_run = 0;\n        for (int i = 0; i < test_str.length(); i++) {\n            char c = test_str.charAt(i);\n            if (Character.isUpperCase(c)) {\n                max_run = Math.max(max_run, i);\n            }\n        }\n        return max_run;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));",
            "assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));",
            "assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a javathon function to find the first odd number in a given array list of numbers.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long firstOdd(ArrayList<Long> nums) {\n        long result = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) % 2 == 0) {\n                result = nums.get(i);\n            }\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l)))) == (1l));",
            "assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)1l, (long)3l)))) == (1l));",
            "assert(firstOdd((new ArrayList<Long>(Arrays.asList((long)8l, (long)9l, (long)1l)))) == (9l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given pairs contain the k or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkK(ArrayList<Long> test_tup, long K) {\n        if (test_tup.size() == 0) {\n            return true;\n        }\n        if (test_tup.size() == 1) {\n            return test_tup.get(0) == K;\n        }\n        if (test_tup.size() == 2) {\n            return test_tup.get(0) == K && test_tup.get(1) == K;\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkK((new ArrayList<Long>(Arrays.asList((long)10l, (long)4l, (long)5l, (long)6l, (long)8l))), (6l)) == (true));",
            "assert(checkK((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))), (7l)) == (false));",
            "assert(checkK((new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)44l, (long)11l, (long)12l))), (11l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second pair is smaller than its corresponding element in the first pair.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean checkSmaller(Pair<Long, Long, Long> test_tup1, Pair<Long, Long, Long> test_tup2) {\n        if (test_tup1.getFirst() < test_tup2.getFirst()) {\n            return true;\n        } else if (test_tup1.getFirst() == test_tup2.getFirst()) {\n            if (test_tup1.getSecond() < test_tup2.getSecond()) {\n                return true;\n            } else if (test_tup1.getSecond() == test_tup2.getSecond()) {\n                return false;\n            } else {\n                return true;\n            }\n        } else {\n            return true;\n        }\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(checkSmaller((Pair.with(1l, 2l, 3l)), (Pair.with(2l, 3l, 4l))) == (false));",
            "assert(checkSmaller((Pair.with(4l, 5l, 6l)), (Pair.with(3l, 4l, 5l))) == (true));",
            "assert(checkSmaller((Pair.with(11l, 12l, 13l)), (Pair.with(10l, 11l, 12l))) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long tetrahedralNumber(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(tetrahedralNumber((5l)) == (35l));",
            "assert(tetrahedralNumber((6l)) == (56l));",
            "assert(tetrahedralNumber((7l)) == (84l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a javathon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String getChar(String strr) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < strr.length(); i++) {\n            sb.append(strr.charAt(i));\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(getChar((\"abc\")).equals((\"f\")));",
            "assert(getChar((\"gfg\")).equals((\"t\")));",
            "assert(getChar((\"ab\")).equals((\"c\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long sequence(long n) {\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i;\n        }\n        return a[n - 1];\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(sequence((10l)) == (6l));",
            "assert(sequence((2l)) == (1l));",
            "assert(sequence((3l)) == (2l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long centeredHexagonalNumber(long n) {\n        long result = 0;\n        while (n > 0) {\n            result += n % 2;\n            n /= 2;\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(centeredHexagonalNumber((10l)) == (271l));",
            "assert(centeredHexagonalNumber((2l)) == (7l));",
            "assert(centeredHexagonalNumber((9l)) == (217l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<String,String> mergeDictionariesThree(HashMap<String,String> dict1, HashMap<String,String> dict2, HashMap<String,String> dict3) {\n        HashMap<String,String> result = new HashMap<>();\n        for (String key : dict1.keySet()) {\n            result.put(key,dict1.get(key));\n        }\n        for (String key : dict2.keySet()) {\n            result.put(key,dict2.get(key));\n        }\n        for (String key : dict3.keySet()) {\n            result.put(key,dict3.get(key));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\"))), (new HashMap<String,String>(Map.of(\"O\", \"Orange\", \"W\", \"White\", \"B\", \"Black\")))).equals((new HashMap<String,String>(Map.of(\"B\", \"Black\", \"R\", \"Red\", \"P\", \"Pink\", \"G\", \"Green\", \"W\", \"White\", \"O\", \"Orange\")))));",
            "assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\"))), (new HashMap<String,String>(Map.of(\"L\", \"lavender\", \"B\", \"Blue\")))).equals((new HashMap<String,String>(Map.of(\"W\", \"White\", \"P\", \"Pink\", \"B\", \"Black\", \"R\", \"Red\", \"G\", \"Green\", \"L\", \"lavender\")))));",
            "assert(mergeDictionariesThree((new HashMap<String,String>(Map.of(\"R\", \"Red\", \"B\", \"Black\", \"P\", \"Pink\"))), (new HashMap<String,String>(Map.of(\"L\", \"lavender\", \"B\", \"Blue\"))), (new HashMap<String,String>(Map.of(\"G\", \"Green\", \"W\", \"White\")))).equals((new HashMap<String,String>(Map.of(\"B\", \"Black\", \"P\", \"Pink\", \"R\", \"Red\", \"G\", \"Green\", \"L\", \"lavender\", \"W\", \"White\")))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in an array array list, returned as a hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> freqCount(ArrayList<Long> list1) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (int i = 0; i < list1.size(); i++) {\n            map.put(list1.get(i), map.getOrDefault(list1.get(i), 0) + 1);\n        }\n        return map;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(freqCount((new ArrayList<Long>(Arrays.asList((long)10l, (long)10l, (long)10l, (long)10l, (long)20l, (long)20l, (long)20l, (long)20l, (long)40l, (long)40l, (long)50l, (long)50l, (long)30l)))).equals((new HashMap<Long,Long>(Map.of(10l, 4l, 20l, 4l, 40l, 2l, 50l, 2l, 30l, 1l)))));",
            "assert(freqCount((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)4l, (long)1l, (long)3l, (long)1l, (long)4l)))).equals((new HashMap<Long,Long>(Map.of(1l, 3l, 2l, 2l, 3l, 3l, 4l, 3l)))));",
            "assert(freqCount((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)4l, (long)9l, (long)10l, (long)4l, (long)5l, (long)6l, (long)7l, (long)9l, (long)5l)))).equals((new HashMap<Long,Long>(Map.of(10l, 1l, 5l, 3l, 6l, 2l, 7l, 2l, 4l, 2l, 9l, 2l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long closestNum(long N) {\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n        for (long i = 1; i <= N; i++) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(closestNum((11l)) == (10l));",
            "assert(closestNum((7l)) == (6l));",
            "assert(closestNum((12l)) == (11l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in an array array list.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static ArrayList<Long> squareNums(ArrayList<Long> nums) {\n        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(i));\n        }\n        return result;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(squareNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l, (long)10l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)9l, (long)16l, (long)25l, (long)36l, (long)49l, (long)64l, (long)81l, (long)100l)))));",
            "assert(squareNums((new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l)))).equals((new ArrayList<Long>(Arrays.asList((long)100l, (long)400l, (long)900l)))));",
            "assert(squareNums((new ArrayList<Long>(Arrays.asList((long)12l, (long)15l)))).equals((new ArrayList<Long>(Arrays.asList((long)144l, (long)225l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a javathon function to find the length of the longest word.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long lenLog(ArrayList<String> list1) {\n        long len = 0;\n        for (String s : list1) {\n            len = Math.max(len, lenLog(s));\n        }\n        return len;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(lenLog((new ArrayList<String>(Arrays.asList((String)\"python\", (String)\"PHP\", (String)\"bigdata\")))) == (7l));",
            "assert(lenLog((new ArrayList<String>(Arrays.asList((String)\"a\", (String)\"ab\", (String)\"abc\")))) == (3l));",
            "assert(lenLog((new ArrayList<String>(Arrays.asList((String)\"small\", (String)\"big\", (String)\"tall\")))) == (5l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given array list of string values.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean findSubstring(ArrayList<String> str1, String sub_str) {\n        for (int i = 0; i < str1.size(); i++) {\n            if (str1.get(i).equals(sub_str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findSubstring((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"black\", (String)\"white\", (String)\"green\", (String)\"orange\"))), (\"ack\")) == (true));",
            "assert(findSubstring((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"black\", (String)\"white\", (String)\"green\", (String)\"orange\"))), (\"abc\")) == (false));",
            "assert(findSubstring((new ArrayList<String>(Arrays.asList((String)\"red\", (String)\"black\", (String)\"white\", (String)\"green\", (String)\"orange\"))), (\"ange\")) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static boolean isUndulating(long n) {\n        return n % 2 == 0;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(isUndulating((1212121l)) == (true));",
            "assert(isUndulating((1991l)) == (false));",
            "assert(isUndulating((121l)) == (true));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long power(long a, long b) {\n        return a * b;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(power((3l), (4l)) == (81l));",
            "assert(power((2l), (3l)) == (8l));",
            "assert(power((5l), (5l)) == (3125l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given an array array list of pairs, write a function that returns the first value of the pair with the smallest second value.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String indexMinimum(ArrayList<Pair<String, Long>> test_list) {\n        int min = Integer.MAX_VALUE;\n        for (Pair<String, Long> pair : test_list) {\n            if (pair.getSecond() < min) {\n                min = pair.getSecond();\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(indexMinimum((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Rash\", 143l), (Pair<String, Long>)Pair.with(\"Manjeet\", 200l), (Pair<String, Long>)Pair.with(\"Varsha\", 100l))))).equals((\"Varsha\")));",
            "assert(indexMinimum((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Yash\", 185l), (Pair<String, Long>)Pair.with(\"Dawood\", 125l), (Pair<String, Long>)Pair.with(\"Sanya\", 175l))))).equals((\"Dawood\")));",
            "assert(indexMinimum((new ArrayList<Pair<String, Long>>(Arrays.asList((Pair<String, Long>)Pair.with(\"Sai\", 345l), (Pair<String, Long>)Pair.with(\"Salman\", 145l), (Pair<String, Long>)Pair.with(\"Ayesha\", 96l))))).equals((\"Ayesha\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a javathon function to find the length of the smallest array list in an array array list of array lists.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long FindMinLength(ArrayList<ArrayList<Long>> lst) {\n        long min = Long.MAX_VALUE;\n        for (ArrayList<Long> list : lst) {\n            if (list.size() < min) {\n                min = list.size();\n            }\n        }\n        return min;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(FindMinLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)))))) == (1l));",
            "assert(FindMinLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)))))) == (2l));",
            "assert(FindMinLength((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)4l, (long)4l)))))) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a javathon function to find the number of divisors of a given integer.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long divisor(long n) {\n        long[] divisors = new long[2];\n        divisors[0] = 1;\n        divisors[1] = 1;\n        while (n > 1) {\n            long temp = n / divisors[0];\n            if (temp == 1) {\n                divisors[0] = divisors[1];\n                divisors[1] = 1;\n                n = n - temp * divisors[0];\n            } else {\n                divisors[0] = divisors[1];\n                divisors[1] = temp;\n            }\n        }\n        return divisors[0];\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(divisor((15l)) == (4l));",
            "assert(divisor((12l)) == (6l));",
            "assert(divisor((9l)) == (3l));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened array list of array lists, returned in a hash map.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static HashMap<Long,Long> frequencyLists(ArrayList<ArrayList<Long>> list1) {\n        HashMap<Long,Long> map = new HashMap<>();\n        for (ArrayList<Long> list : list1) {\n            for (Long l : list) {\n                map.put(l, map.getOrDefault(l, 0L) + 1);\n            }\n        }\n        return map;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(frequencyLists((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)4l, (long)5l, (long)6l, (long)2l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)7l, (long)8l, (long)9l, (long)5l)))))).equals((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 3l, 3l, 1l, 4l, 1l, 5l, 2l, 6l, 1l, 7l, 1l, 8l, 1l, 9l, 1l)))));",
            "assert(frequencyLists((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)7l, (long)8l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)9l, (long)10l, (long)11l, (long)12l)))))).equals((new HashMap<Long,Long>(Map.of(1l, 1l, 2l, 1l, 3l, 1l, 4l, 1l, 5l, 1l, 6l, 1l, 7l, 1l, 8l, 1l, 9l, 1l, 10l, 1l, 11l, 1l, 12l, 1l)))));",
            "assert(frequencyLists((new ArrayList<ArrayList<Long>>(Arrays.asList((ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)20l, (long)30l, (long)40l, (long)17l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)18l, (long)16l, (long)14l, (long)13l)), (ArrayList<Long>)new ArrayList<Long>(Arrays.asList((long)10l, (long)20l, (long)30l, (long)40l)))))).equals((new HashMap<Long,Long>(Map.of(20l, 2l, 30l, 2l, 40l, 2l, 17l, 1l, 18l, 1l, 16l, 1l, 14l, 1l, 13l, 1l, 10l, 1l)))));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static String decimalToBinary(long n) {\n        StringBuilder sb = new StringBuilder();\n        while (n > 0) {\n            sb.append((int) (n % 10));\n            n /= 10;\n        }\n        return sb.toString();\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(decimalToBinary((8l)).equals((\"1000\")));",
            "assert(decimalToBinary((18l)).equals((\"10010\")));",
            "assert(decimalToBinary((7l)).equals((\"111\")));",
            "}",
            "}"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a javathon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\nimport java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\nclass Problem {\n    public static long findRotations(String str) {\n        long rotations = 0;\n        for (int i = 0; i < str.length(); i++) {\n            char c = str.charAt(i);\n            if (c == 'R') {\n                rotations++;\n            }\n        }\n        return rotations;\n    }\n",
        "test_list": [
            "public static void main(String[] args) {",
            "assert(findRotations((\"aaaa\")) == (1l));",
            "assert(findRotations((\"ab\")) == (2l));",
            "assert(findRotations((\"abc\")) == (3l));",
            "}",
            "}"
        ]
    }
]